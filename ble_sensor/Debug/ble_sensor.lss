
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00803000  00001ffa  000020ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  00005ede  00001ede  00001f92  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000750  00803086  00803086  00002134  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a0e  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000030b4  00000000  00000000  00008ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f0f  00000000  00000000  0000c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a24  00000000  00000000  0000dfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003037  00000000  00000000  0000e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001aa2  00000000  00000000  00011a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  000134b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_15>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_17>
      48:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_18>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_31>
      80:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_32>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000090 <__trampolines_end>:
      90:	63 64       	ori	r22, 0x43	; 67
      92:	69 6e       	ori	r22, 0xE9	; 233
      94:	6f 70       	andi	r22, 0x0F	; 15
      96:	73 75       	andi	r23, 0x53	; 83
      98:	78 58       	subi	r23, 0x88	; 136
      9a:	5b 00       	.word	0x005b	; ????

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	cd bf       	out	0x3d, r28	; 61
      a4:	df e3       	ldi	r29, 0x3F	; 63
      a6:	de bf       	out	0x3e, r29	; 62

000000a8 <__do_copy_data>:
      a8:	10 e3       	ldi	r17, 0x30	; 48
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b0 e3       	ldi	r27, 0x30	; 48
      ae:	ea ef       	ldi	r30, 0xFA	; 250
      b0:	ff e1       	ldi	r31, 0x1F	; 31
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a6 38       	cpi	r26, 0x86	; 134
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	27 e3       	ldi	r18, 0x37	; 55
      c0:	a6 e8       	ldi	r26, 0x86	; 134
      c2:	b0 e3       	ldi	r27, 0x30	; 48
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a6 3d       	cpi	r26, 0xD6	; 214
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
      d2:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      da:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <system_init>
      de:	08 95       	ret

000000e0 <rx487x_shutdown>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      e0:	8d b1       	in	r24, 0x0d	; 13
      e2:	87 7f       	andi	r24, 0xF7	; 247
      e4:	8d b9       	out	0x0d, r24	; 13
static ble_error_t rx487x_shutdown(struct ble_server* ctx) 
{
	RN487X_RST_set_level(false);
	
	return BLE_NOERR;
}
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	08 95       	ret

000000ea <rn487x_init>:
static struct ble_gap_ops rn487x_gap_ops = {

};

static void rn487x_init(struct ble_server* ctx)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	ec 01       	movw	r28, r24

#ifdef PRINT_DEBUG_MSG
	printf("\r\nInitializing rn487x\r\n");
      f0:	88 ee       	ldi	r24, 0xE8	; 232
      f2:	9e e5       	ldi	r25, 0x5E	; 94
      f4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <puts>
#endif

	rx487x_set_ISR_cb(rn487x_cb_isr, RX_CB);
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	89 e9       	ldi	r24, 0x99	; 153
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 55 06 	call	0xcaa	; 0xcaa <rx487x_set_ISR_cb>

	ctx->sys->reboot(ctx);
     102:	ec 89       	ldd	r30, Y+20	; 0x14
     104:	fd 89       	ldd	r31, Y+21	; 0x15
     106:	02 80       	ldd	r0, Z+2	; 0x02
     108:	f3 81       	ldd	r31, Z+3	; 0x03
     10a:	e0 2d       	mov	r30, r0
     10c:	ce 01       	movw	r24, r28
     10e:	09 95       	icall
	ctx->sys->factory_reset(ctx);
     110:	ec 89       	ldd	r30, Y+20	; 0x14
     112:	fd 89       	ldd	r31, Y+21	; 0x15
     114:	04 80       	ldd	r0, Z+4	; 0x04
     116:	f5 81       	ldd	r31, Z+5	; 0x05
     118:	e0 2d       	mov	r30, r0
     11a:	ce 01       	movw	r24, r28
     11c:	09 95       	icall

	//init gap services

	// init gatt services 
	ctx->gatt->init(ctx);
     11e:	ee 89       	ldd	r30, Y+22	; 0x16
     120:	ff 89       	ldd	r31, Y+23	; 0x17
     122:	01 90       	ld	r0, Z+
     124:	f0 81       	ld	r31, Z
     126:	e0 2d       	mov	r30, r0
     128:	ce 01       	movw	r24, r28
     12a:	09 95       	icall


}
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <rn487x_cb_isr>:
	return BLE_NOERR;

}

static void rn487x_cb_isr()
{
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
     136:	c0 91 9c 32 	lds	r28, 0x329C	; 0x80329c <rx_wptr>
     13a:	d0 91 9d 32 	lds	r29, 0x329D	; 0x80329d <rx_wptr+0x1>
     13e:	0e 94 ee 06 	call	0xddc	; 0xddc <rx487x_get_data>
     142:	c2 56       	subi	r28, 0x62	; 98
     144:	dd 4c       	sbci	r29, 0xCD	; 205
     146:	88 83       	st	Y, r24
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
     148:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <rx_wptr>
     14c:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <rx_wptr+0x1>
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	99 27       	eor	r25, r25
     154:	80 93 9c 32 	sts	0x329C, r24	; 0x80329c <rx_wptr>
     158:	90 93 9d 32 	sts	0x329D, r25	; 0x80329d <rx_wptr+0x1>
}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <rn487x_get_err_from_response>:
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
}

static ble_error_t rn487x_get_err_from_response()
{
	if(	strstr(rn487x_rx_buff, RN487X_RESPONSE_ERR) != NULL)
     162:	6f ef       	ldi	r22, 0xFF	; 255
     164:	7e e5       	ldi	r23, 0x5E	; 94
     166:	8e e9       	ldi	r24, 0x9E	; 158
     168:	92 e3       	ldi	r25, 0x32	; 50
     16a:	0e 94 cc 08 	call	0x1198	; 0x1198 <strstr>
     16e:	89 2b       	or	r24, r25
     170:	11 f0       	breq	.+4      	; 0x176 <rn487x_get_err_from_response+0x14>
	return BLE_FAIL;
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	08 95       	ret
	else
	return BLE_NOERR;
     176:	81 e0       	ldi	r24, 0x01	; 1

}
     178:	08 95       	ret

0000017a <rn487x_clear_rx_buff>:

}

static void rn487x_clear_rx_buff()
{
	rx_wptr = 0;
     17a:	10 92 9c 32 	sts	0x329C, r1	; 0x80329c <rx_wptr>
     17e:	10 92 9d 32 	sts	0x329D, r1	; 0x80329d <rx_wptr+0x1>
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	ee e9       	ldi	r30, 0x9E	; 158
     188:	f2 e3       	ldi	r31, 0x32	; 50
     18a:	df 01       	movw	r26, r30
     18c:	9c 01       	movw	r18, r24
     18e:	1d 92       	st	X+, r1
     190:	21 50       	subi	r18, 0x01	; 1
     192:	30 40       	sbci	r19, 0x00	; 0
     194:	e1 f7       	brne	.-8      	; 0x18e <rn487x_clear_rx_buff+0x14>
     196:	08 95       	ret

00000198 <rx487x_reboot>:
	return BLE_NOERR;
}

static ble_error_t rx487x_reboot(struct ble_server* ctx)
{
	rn487x_clear_rx_buff();
     198:	0e 94 bd 00 	call	0x17a	; 0x17a <rn487x_clear_rx_buff>
     19c:	8d b1       	in	r24, 0x0d	; 13
     19e:	87 7f       	andi	r24, 0xF7	; 247
     1a0:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a2:	8d e8       	ldi	r24, 0x8D	; 141
     1a4:	90 e2       	ldi	r25, 0x20	; 32
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <rx487x_reboot+0xe>
     1aa:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     1ac:	8d b1       	in	r24, 0x0d	; 13
     1ae:	88 60       	ori	r24, 0x08	; 8
     1b0:	8d b9       	out	0x0d, r24	; 13
     1b2:	9f e3       	ldi	r25, 0x3F	; 63
     1b4:	2d e0       	ldi	r18, 0x0D	; 13
     1b6:	83 e0       	ldi	r24, 0x03	; 3
     1b8:	91 50       	subi	r25, 0x01	; 1
     1ba:	20 40       	sbci	r18, 0x00	; 0
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <rx487x_reboot+0x20>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <rx487x_reboot+0x2a>
     1c2:	00 00       	nop
	RN487X_RST_set_level(false);
	_delay_ms(RN487X_RESET_DELAY);
	RN487X_RST_set_level(true);
	_delay_ms(RN487X_STARTUP_TIME);
	
	return rn487x_get_err_from_response();
     1c4:	0e 94 b1 00 	call	0x162	; 0x162 <rn487x_get_err_from_response>
}
     1c8:	08 95       	ret

000001ca <rn487x_send_ascii_command>:
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	8c 01       	movw	r16, r24
	uint8_t id = 0;
	
	rn487x_clear_rx_buff();
     1d6:	0e 94 bd 00 	call	0x17a	; 0x17a <rn487x_clear_rx_buff>
	
	// enter cmd mode
	rx487x_write('$');
     1da:	84 e2       	ldi	r24, 0x24	; 36
     1dc:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('$');
     1e0:	84 e2       	ldi	r24, 0x24	; 36
     1e2:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('$');
     1e6:	84 e2       	ldi	r24, 0x24	; 36
     1e8:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
     1ec:	2a e6       	ldi	r18, 0x6A	; 106
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	80 40       	sbci	r24, 0x00	; 0
     1f6:	90 40       	sbci	r25, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <rn487x_send_ascii_command+0x28>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <rn487x_send_ascii_command+0x32>
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     1fc:	f1 2c       	mov	r15, r1
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <rn487x_send_ascii_command+0x46>

	_delay_ms(100);

	while(cmd[id] != NULL)
	{
		if(rx487x_is_tx_ready())
     200:	0e 94 b6 06 	call	0xd6c	; 0xd6c <rx487x_is_tx_ready>
     204:	88 23       	and	r24, r24
     206:	21 f0       	breq	.+8      	; 0x210 <rn487x_send_ascii_command+0x46>
		{
			rx487x_write(cmd[id]);
     208:	88 81       	ld	r24, Y
     20a:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
			id++;
     20e:	f3 94       	inc	r15
	rx487x_write('$');
	rx487x_write('$');

	_delay_ms(100);

	while(cmd[id] != NULL)
     210:	e8 01       	movw	r28, r16
     212:	cf 0d       	add	r28, r15
     214:	d1 1d       	adc	r29, r1
     216:	88 81       	ld	r24, Y
     218:	81 11       	cpse	r24, r1
     21a:	f2 cf       	rjmp	.-28     	; 0x200 <rn487x_send_ascii_command+0x36>
     21c:	2f e3       	ldi	r18, 0x3F	; 63
     21e:	8d e0       	ldi	r24, 0x0D	; 13
     220:	93 e0       	ldi	r25, 0x03	; 3
     222:	21 50       	subi	r18, 0x01	; 1
     224:	80 40       	sbci	r24, 0x00	; 0
     226:	90 40       	sbci	r25, 0x00	; 0
     228:	e1 f7       	brne	.-8      	; 0x222 <rn487x_send_ascii_command+0x58>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <rn487x_send_ascii_command+0x62>
     22c:	00 00       	nop
	}

	_delay_ms(RN487X_DELAY_WAIT_FOR_RESPONSE);

	//exit cmd mode
	rx487x_write('-');
     22e:	8d e2       	ldi	r24, 0x2D	; 45
     230:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('-');
     234:	8d e2       	ldi	r24, 0x2D	; 45
     236:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('-');
     23a:	8d e2       	ldi	r24, 0x2D	; 45
     23c:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('\r');
     240:	8d e0       	ldi	r24, 0x0D	; 13
     242:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
	rx487x_write('\n');
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	0e 94 ba 06 	call	0xd74	; 0xd74 <rx487x_write>
     24c:	2a e6       	ldi	r18, 0x6A	; 106
     24e:	84 e0       	ldi	r24, 0x04	; 4
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	21 50       	subi	r18, 0x01	; 1
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	e1 f7       	brne	.-8      	; 0x252 <rn487x_send_ascii_command+0x88>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <rn487x_send_ascii_command+0x92>

	_delay_ms(100);
	
	#ifdef PRINT_DEBUG_MSG
	printf("%s", cmd);
     25c:	1f 93       	push	r17
     25e:	0f 93       	push	r16
     260:	c3 e0       	ldi	r28, 0x03	; 3
     262:	df e5       	ldi	r29, 0x5F	; 95
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	0e 94 e6 08 	call	0x11cc	; 0x11cc <printf>
	printf("%s", rn487x_rx_buff);
     26c:	8e e9       	ldi	r24, 0x9E	; 158
     26e:	92 e3       	ldi	r25, 0x32	; 50
     270:	9f 93       	push	r25
     272:	8f 93       	push	r24
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	0e 94 e6 08 	call	0x11cc	; 0x11cc <printf>
	#endif

     27c:	8d b7       	in	r24, 0x3d	; 61
     27e:	9e b7       	in	r25, 0x3e	; 62
     280:	08 96       	adiw	r24, 0x08	; 8
     282:	8d bf       	out	0x3d, r24	; 61
     284:	9e bf       	out	0x3e, r25	; 62
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	08 95       	ret

00000292 <rn487x_write_value>:
	}

}

static ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	7c 01       	movw	r14, r24
     2a4:	6b 01       	movw	r12, r22
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
     2a8:	d0 e0       	ldi	r29, 0x00	; 0

}

static ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     2aa:	0c e9       	ldi	r16, 0x9C	; 156
     2ac:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     2ae:	17 c0       	rjmp	.+46     	; 0x2de <rn487x_write_value+0x4c>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     2b0:	f6 01       	movw	r30, r12
     2b2:	ec 0f       	add	r30, r28
     2b4:	fd 1f       	adc	r31, r29
     2b6:	80 81       	ld	r24, Z
     2b8:	1f 92       	push	r1
     2ba:	8f 93       	push	r24
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	9f e5       	ldi	r25, 0x5F	; 95
     2c0:	9f 93       	push	r25
     2c2:	8f 93       	push	r24
     2c4:	1f 93       	push	r17
     2c6:	0f 93       	push	r16
     2c8:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
     2cc:	08 0f       	add	r16, r24
     2ce:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     2d0:	21 96       	adiw	r28, 0x01	; 1
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	f7 01       	movw	r30, r14
     2e0:	85 81       	ldd	r24, Z+5	; 0x05
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	c8 17       	cp	r28, r24
     2e6:	d9 07       	cpc	r29, r25
     2e8:	1c f3       	brlt	.-58     	; 0x2b0 <rn487x_write_value+0x1e>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "SHW,%04X,%s\r\n", characteristic->handle, rn487x_cmd_buff_b);
     2ea:	8c e9       	ldi	r24, 0x9C	; 156
     2ec:	90 e3       	ldi	r25, 0x30	; 48
     2ee:	9f 93       	push	r25
     2f0:	8f 93       	push	r24
     2f2:	83 81       	ldd	r24, Z+3	; 0x03
     2f4:	8f 93       	push	r24
     2f6:	82 81       	ldd	r24, Z+2	; 0x02
     2f8:	8f 93       	push	r24
     2fa:	8b e0       	ldi	r24, 0x0B	; 11
     2fc:	9f e5       	ldi	r25, 0x5F	; 95
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	8c e9       	ldi	r24, 0x9C	; 156
     304:	91 e3       	ldi	r25, 0x31	; 49
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     30e:	8c e9       	ldi	r24, 0x9C	; 156
     310:	91 e3       	ldi	r25, 0x31	; 49
     312:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
}
     316:	8d b7       	in	r24, 0x3d	; 61
     318:	9e b7       	in	r25, 0x3e	; 62
     31a:	08 96       	adiw	r24, 0x08	; 8
     31c:	8d bf       	out	0x3d, r24	; 61
     31e:	9e bf       	out	0x3e, r25	; 62
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	08 95       	ret

00000332 <rn487x_read_value>:
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	return rn487x_get_err_from_response();
}

static ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	7c 01       	movw	r14, r24
     344:	6b 01       	movw	r12, r22
	sprintf(rn487x_cmd_buff_a, "SHR,%04X\r\n", characteristic->handle);
     346:	fc 01       	movw	r30, r24
     348:	83 81       	ldd	r24, Z+3	; 0x03
     34a:	8f 93       	push	r24
     34c:	82 81       	ldd	r24, Z+2	; 0x02
     34e:	8f 93       	push	r24
     350:	89 e1       	ldi	r24, 0x19	; 25
     352:	9f e5       	ldi	r25, 0x5F	; 95
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	8c e9       	ldi	r24, 0x9C	; 156
     35a:	91 e3       	ldi	r25, 0x31	; 49
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     364:	8c e9       	ldi	r24, 0x9C	; 156
     366:	91 e3       	ldi	r25, 0x31	; 49
     368:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
	
	if(rn487x_get_err_from_response())
     36c:	0e 94 b1 00 	call	0x162	; 0x162 <rn487x_get_err_from_response>
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	88 23       	and	r24, r24
     37e:	69 f1       	breq	.+90     	; 0x3da <rn487x_read_value+0xa8>
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
     380:	f7 01       	movw	r30, r14
     382:	45 81       	ldd	r20, Z+5	; 0x05
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	44 0f       	add	r20, r20
     388:	55 1f       	adc	r21, r21
     38a:	63 ea       	ldi	r22, 0xA3	; 163
     38c:	72 e3       	ldi	r23, 0x32	; 50
     38e:	8c e9       	ldi	r24, 0x9C	; 156
     390:	91 e3       	ldi	r25, 0x31	; 49
     392:	0e 94 bd 08 	call	0x117a	; 0x117a <strncpy>
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < characteristic->data_len; i++) 
     396:	c0 e0       	ldi	r28, 0x00	; 0
     398:	d0 e0       	ldi	r29, 0x00	; 0
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;
     39a:	0c e9       	ldi	r16, 0x9C	; 156
     39c:	11 e3       	ldi	r17, 0x31	; 49

		for (short i = 0; i < characteristic->data_len; i++) 
     39e:	16 c0       	rjmp	.+44     	; 0x3cc <rn487x_read_value+0x9a>
		{
			sscanf(pos, "%2hhX", &destination[i]);
     3a0:	c6 01       	movw	r24, r12
     3a2:	8c 0f       	add	r24, r28
     3a4:	9d 1f       	adc	r25, r29
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	84 e2       	ldi	r24, 0x24	; 36
     3ac:	9f e5       	ldi	r25, 0x5F	; 95
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	1f 93       	push	r17
     3b4:	0f 93       	push	r16
     3b6:	0e 94 4e 09 	call	0x129c	; 0x129c <sscanf>
			pos = pos + 2;
     3ba:	0e 5f       	subi	r16, 0xFE	; 254
     3bc:	1f 4f       	sbci	r17, 0xFF	; 255
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < characteristic->data_len; i++) 
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	f7 01       	movw	r30, r14
     3ce:	85 81       	ldd	r24, Z+5	; 0x05
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	c8 17       	cp	r28, r24
     3d4:	d9 07       	cpc	r29, r25
     3d6:	24 f3       	brlt	.-56     	; 0x3a0 <rn487x_read_value+0x6e>
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <rn487x_read_value+0xac>
		}

	}
	else
	{
		return BLE_FAIL;
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <rn487x_read_value+0xac>
	}

}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	08 95       	ret

000003f0 <rn487x_register_characteristic>:
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	return rn487x_get_err_from_response();
}

static ble_error_t rn487x_register_characteristic(struct gatt_characteristic* characteristic)
{
     3f0:	fc 01       	movw	r30, r24
	sprintf(rn487x_cmd_buff_a, "PC,%s,%02X,%02X\r\n", characteristic->UUID, characteristic->properties, characteristic->data_len);
     3f2:	95 81       	ldd	r25, Z+5	; 0x05
     3f4:	84 81       	ldd	r24, Z+4	; 0x04
     3f6:	1f 92       	push	r1
     3f8:	9f 93       	push	r25
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
     400:	8f 93       	push	r24
     402:	80 81       	ld	r24, Z
     404:	8f 93       	push	r24
     406:	8a e2       	ldi	r24, 0x2A	; 42
     408:	9f e5       	ldi	r25, 0x5F	; 95
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	8c e9       	ldi	r24, 0x9C	; 156
     410:	91 e3       	ldi	r25, 0x31	; 49
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     41a:	8c e9       	ldi	r24, 0x9C	; 156
     41c:	91 e3       	ldi	r25, 0x31	; 49
     41e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     422:	0e 94 b1 00 	call	0x162	; 0x162 <rn487x_get_err_from_response>
     426:	2d b7       	in	r18, 0x3d	; 61
     428:	3e b7       	in	r19, 0x3e	; 62
     42a:	26 5f       	subi	r18, 0xF6	; 246
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	2d bf       	out	0x3d, r18	; 61
     430:	3e bf       	out	0x3e, r19	; 62
}
     432:	08 95       	ret

00000434 <rn487x_register_service>:
	
};

static ble_error_t rn487x_register_service(struct gatt_service* service)
{
	sprintf(rn487x_cmd_buff_a, "PS,%s\r\n", service->UUID);
     434:	fc 01       	movw	r30, r24
     436:	21 81       	ldd	r18, Z+1	; 0x01
     438:	2f 93       	push	r18
     43a:	80 81       	ld	r24, Z
     43c:	8f 93       	push	r24
     43e:	8c e3       	ldi	r24, 0x3C	; 60
     440:	9f e5       	ldi	r25, 0x5F	; 95
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	8c e9       	ldi	r24, 0x9C	; 156
     448:	91 e3       	ldi	r25, 0x31	; 49
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     452:	8c e9       	ldi	r24, 0x9C	; 156
     454:	91 e3       	ldi	r25, 0x31	; 49
     456:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     45a:	0e 94 b1 00 	call	0x162	; 0x162 <rn487x_get_err_from_response>
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
}
     46a:	08 95       	ret

0000046c <rn487x_gatt_init>:
	sprintf(rn487x_cmd_buff_a, "SHW,%04X,%s\r\n", characteristic->handle, rn487x_cmd_buff_b);
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
}

static ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
     46c:	2f 92       	push	r2
     46e:	3f 92       	push	r3
     470:	4f 92       	push	r4
     472:	5f 92       	push	r5
     474:	6f 92       	push	r6
     476:	7f 92       	push	r7
     478:	8f 92       	push	r8
     47a:	9f 92       	push	r9
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	e2 97       	sbiw	r28, 0x32	; 50
     496:	cd bf       	out	0x3d, r28	; 61
     498:	de bf       	out	0x3e, r29	; 62
     49a:	3c 01       	movw	r6, r24
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->services;
     49c:	dc 01       	movw	r26, r24
     49e:	50 96       	adiw	r26, 0x10	; 16
     4a0:	2d 90       	ld	r2, X+
     4a2:	3c 90       	ld	r3, X
     4a4:	51 97       	sbiw	r26, 0x11	; 17

	for(short i = 0; i < ctx->services_count; i++)
     4a6:	41 2c       	mov	r4, r1
     4a8:	51 2c       	mov	r5, r1
     4aa:	77 c0       	rjmp	.+238    	; 0x59a <rn487x_gatt_init+0x12e>
	{
		struct gatt_service* service = (*services)[i];
     4ac:	f2 01       	movw	r30, r4
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e2 0d       	add	r30, r2
     4b4:	f3 1d       	adc	r31, r3
     4b6:	c0 80       	ld	r12, Z
     4b8:	d1 80       	ldd	r13, Z+1	; 0x01
	
		ctx->gatt->register_service(service);
     4ba:	d3 01       	movw	r26, r6
     4bc:	56 96       	adiw	r26, 0x16	; 22
     4be:	ed 91       	ld	r30, X+
     4c0:	fc 91       	ld	r31, X
     4c2:	57 97       	sbiw	r26, 0x17	; 23
     4c4:	02 80       	ldd	r0, Z+2	; 0x02
     4c6:	f3 81       	ldd	r31, Z+3	; 0x03
     4c8:	e0 2d       	mov	r30, r0
     4ca:	c6 01       	movw	r24, r12
     4cc:	09 95       	icall

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;
     4ce:	f6 01       	movw	r30, r12
     4d0:	86 80       	ldd	r8, Z+6	; 0x06
     4d2:	97 80       	ldd	r9, Z+7	; 0x07

		for(short j = 0; j < service->characteristics_count; j++)
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	53 c0       	rjmp	.+166    	; 0x580 <rn487x_gatt_init+0x114>
		{
			struct gatt_characteristic* characteristic = (*characteristics)[j];
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	f4 01       	movw	r30, r8
     4e0:	e8 0f       	add	r30, r24
     4e2:	f9 1f       	adc	r31, r25
     4e4:	00 81       	ld	r16, Z
     4e6:	11 81       	ldd	r17, Z+1	; 0x01

			if(ctx->gatt->register_characteristic(characteristic))
     4e8:	d3 01       	movw	r26, r6
     4ea:	56 96       	adiw	r26, 0x16	; 22
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	57 97       	sbiw	r26, 0x17	; 23
     4f2:	04 80       	ldd	r0, Z+4	; 0x04
     4f4:	f5 81       	ldd	r31, Z+5	; 0x05
     4f6:	e0 2d       	mov	r30, r0
     4f8:	c8 01       	movw	r24, r16
     4fa:	09 95       	icall
     4fc:	88 23       	and	r24, r24
     4fe:	09 f4       	brne	.+2      	; 0x502 <rn487x_gatt_init+0x96>
     500:	60 c0       	rjmp	.+192    	; 0x5c2 <rn487x_gatt_init+0x156>
			{
				uint8_t buff[50];
				uint8_t* res;

				// list all characteristics in the service
				sprintf(buff, "LS,%s\r\n", service->UUID);
     502:	f6 01       	movw	r30, r12
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	8f 93       	push	r24
     508:	80 81       	ld	r24, Z
     50a:	8f 93       	push	r24
     50c:	84 e4       	ldi	r24, 0x44	; 68
     50e:	9f e5       	ldi	r25, 0x5F	; 95
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	9e 01       	movw	r18, r28
     516:	2f 5f       	subi	r18, 0xFF	; 255
     518:	3f 4f       	sbci	r19, 0xFF	; 255
     51a:	79 01       	movw	r14, r18
     51c:	3f 93       	push	r19
     51e:	2f 93       	push	r18
     520:	0e 94 2c 09 	call	0x1258	; 0x1258 <sprintf>
				rn487x_send_ascii_command(buff);
     524:	c7 01       	movw	r24, r14
     526:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>

				// find this characteristic from the LS
				// XXXX...X,0000,00
				res = strstr(rn487x_rx_buff, characteristic->UUID);
     52a:	d8 01       	movw	r26, r16
     52c:	ed 90       	ld	r14, X+
     52e:	fc 90       	ld	r15, X
     530:	b7 01       	movw	r22, r14
     532:	8e e9       	ldi	r24, 0x9E	; 158
     534:	92 e3       	ldi	r25, 0x32	; 50
     536:	0e 94 cc 08 	call	0x1198	; 0x1198 <strstr>
				res =  res +  strlen(characteristic->UUID) + 1;
     53a:	f7 01       	movw	r30, r14
     53c:	01 90       	ld	r0, Z+
     53e:	00 20       	and	r0, r0
     540:	e9 f7       	brne	.-6      	; 0x53c <rn487x_gatt_init+0xd0>
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	ee 19       	sub	r30, r14
     546:	ff 09       	sbc	r31, r15
     548:	31 96       	adiw	r30, 0x01	; 1
			
				//uint8_t* endptr;
				characteristic->handle = strtol(res, NULL, 16);
     54a:	40 e1       	ldi	r20, 0x10	; 16
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	8e 0f       	add	r24, r30
     554:	9f 1f       	adc	r25, r31
     556:	0e 94 9e 07 	call	0xf3c	; 0xf3c <strtol>
     55a:	f8 01       	movw	r30, r16
     55c:	62 83       	std	Z+2, r22	; 0x02
     55e:	73 83       	std	Z+3, r23	; 0x03

				#ifdef PRINT_DEBUG_MSG
				printf("Registered characteristic %s, with handle %04X\r\n", characteristic->UUID, characteristic->handle);
     560:	7f 93       	push	r23
     562:	6f 93       	push	r22
     564:	81 81       	ldd	r24, Z+1	; 0x01
     566:	8f 93       	push	r24
     568:	80 81       	ld	r24, Z
     56a:	8f 93       	push	r24
     56c:	8c e4       	ldi	r24, 0x4C	; 76
     56e:	9f e5       	ldi	r25, 0x5F	; 95
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	0e 94 e6 08 	call	0x11cc	; 0x11cc <printf>
	
		ctx->gatt->register_service(service);

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;

		for(short j = 0; j < service->characteristics_count; j++)
     578:	c5 01       	movw	r24, r10
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de bf       	out	0x3e, r29	; 62
     580:	d6 01       	movw	r26, r12
     582:	14 96       	adiw	r26, 0x04	; 4
     584:	2d 91       	ld	r18, X+
     586:	3c 91       	ld	r19, X
     588:	15 97       	sbiw	r26, 0x05	; 5
     58a:	5c 01       	movw	r10, r24
     58c:	82 17       	cp	r24, r18
     58e:	93 07       	cpc	r25, r19
     590:	08 f4       	brcc	.+2      	; 0x594 <rn487x_gatt_init+0x128>
     592:	a3 cf       	rjmp	.-186    	; 0x4da <rn487x_gatt_init+0x6e>
static ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->services;

	for(short i = 0; i < ctx->services_count; i++)
     594:	bf ef       	ldi	r27, 0xFF	; 255
     596:	4b 1a       	sub	r4, r27
     598:	5b 0a       	sbc	r5, r27
     59a:	f3 01       	movw	r30, r6
     59c:	87 85       	ldd	r24, Z+15	; 0x0f
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	48 16       	cp	r4, r24
     5a2:	59 06       	cpc	r5, r25
     5a4:	0c f4       	brge	.+2      	; 0x5a8 <rn487x_gatt_init+0x13c>
     5a6:	82 cf       	rjmp	.-252    	; 0x4ac <rn487x_gatt_init+0x40>
				return BLE_FAIL;
			}
		}
	}

	ctx->sys->reboot(ctx);
     5a8:	04 88       	ldd	r0, Z+20	; 0x14
     5aa:	f5 89       	ldd	r31, Z+21	; 0x15
     5ac:	e0 2d       	mov	r30, r0
     5ae:	02 80       	ldd	r0, Z+2	; 0x02
     5b0:	f3 81       	ldd	r31, Z+3	; 0x03
     5b2:	e0 2d       	mov	r30, r0
     5b4:	c3 01       	movw	r24, r6
     5b6:	09 95       	icall
	rn487x_send_ascii_command("LS\r\n");
     5b8:	8d e7       	ldi	r24, 0x7D	; 125
     5ba:	9f e5       	ldi	r25, 0x5F	; 95
     5bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
	return BLE_NOERR;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
}
     5c2:	e2 96       	adiw	r28, 0x32	; 50
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	8f 90       	pop	r8
     5e0:	7f 90       	pop	r7
     5e2:	6f 90       	pop	r6
     5e4:	5f 90       	pop	r5
     5e6:	4f 90       	pop	r4
     5e8:	3f 90       	pop	r3
     5ea:	2f 90       	pop	r2
     5ec:	08 95       	ret

000005ee <rx487x_factory_reset>:
	return rn487x_get_err_from_response();
}

static ble_error_t rx487x_factory_reset(struct ble_server* ctx)
{	
	rn487x_send_ascii_command("SF,2\r\n");
     5ee:	82 e8       	ldi	r24, 0x82	; 130
     5f0:	9f e5       	ldi	r25, 0x5F	; 95
     5f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     5f6:	0e 94 b1 00 	call	0x162	; 0x162 <rn487x_get_err_from_response>
}
     5fa:	08 95       	ret

000005fc <main>:
volatile size_t ble_wptr;
volatile size_t ble_rptr;


int main(void)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2a 97       	sbiw	r28, 0x0a	; 10
     606:	cd bf       	out	0x3d, r28	; 61
     608:	de bf       	out	0x3e, r29	; 62
	ENABLE_INTERRUPTS();
     60a:	78 94       	sei

	atmel_start_init();
     60c:	0e 94 6d 00 	call	0xda	; 0xda <atmel_start_init>

	temp_read_characteristic.data_len = 10;
     610:	8a e0       	ldi	r24, 0x0A	; 10
     612:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <temp_read_characteristic+0x5>

	rn487x.init(&rn487x);
     616:	0a e2       	ldi	r16, 0x2A	; 42
     618:	10 e3       	ldi	r17, 0x30	; 48
     61a:	d8 01       	movw	r26, r16
     61c:	5c 96       	adiw	r26, 0x1c	; 28
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	5d 97       	sbiw	r26, 0x1d	; 29
     624:	c8 01       	movw	r24, r16
     626:	09 95       	icall
	volatile uint8_t data[] = {0x23, 0x33, 0x44, 0x55, 0xAA, 0xFF, 0xDD, 0xAA, 0x33, 0xAA };
     628:	8a e0       	ldi	r24, 0x0A	; 10
     62a:	ee ed       	ldi	r30, 0xDE	; 222
     62c:	fe e5       	ldi	r31, 0x5E	; 94
     62e:	de 01       	movw	r26, r28
     630:	11 96       	adiw	r26, 0x01	; 1
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	8a 95       	dec	r24
     638:	e1 f7       	brne	.-8      	; 0x632 <main+0x36>
	
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     63a:	d8 01       	movw	r26, r16
     63c:	56 96       	adiw	r26, 0x16	; 22
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	57 97       	sbiw	r26, 0x17	; 23
     644:	00 84       	ldd	r0, Z+8	; 0x08
     646:	f1 85       	ldd	r31, Z+9	; 0x09
     648:	e0 2d       	mov	r30, r0
     64a:	be 01       	movw	r22, r28
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	84 e2       	ldi	r24, 0x24	; 36
     652:	90 e3       	ldi	r25, 0x30	; 48
     654:	09 95       	icall
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     656:	d8 01       	movw	r26, r16
     658:	56 96       	adiw	r26, 0x16	; 22
     65a:	ed 91       	ld	r30, X+
     65c:	fc 91       	ld	r31, X
     65e:	57 97       	sbiw	r26, 0x17	; 23
     660:	00 84       	ldd	r0, Z+8	; 0x08
     662:	f1 85       	ldd	r31, Z+9	; 0x09
     664:	e0 2d       	mov	r30, r0
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	84 e2       	ldi	r24, 0x24	; 36
     66e:	90 e3       	ldi	r25, 0x30	; 48
     670:	09 95       	icall
	rn487x.gatt->read_value(&temp_read_characteristic, data);
     672:	d8 01       	movw	r26, r16
     674:	56 96       	adiw	r26, 0x16	; 22
     676:	ed 91       	ld	r30, X+
     678:	fc 91       	ld	r31, X
     67a:	57 97       	sbiw	r26, 0x17	; 23
     67c:	06 80       	ldd	r0, Z+6	; 0x06
     67e:	f7 81       	ldd	r31, Z+7	; 0x07
     680:	e0 2d       	mov	r30, r0
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	84 e2       	ldi	r24, 0x24	; 36
     68a:	90 e3       	ldi	r25, 0x30	; 48
     68c:	09 95       	icall
     68e:	ff cf       	rjmp	.-2      	; 0x68e <main+0x92>

00000690 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret

00000694 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret

00000698 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret

0000069c <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     6a0:	e8 2f       	mov	r30, r24
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e0 5f       	subi	r30, 0xF0	; 240
     6a6:	fb 4f       	sbci	r31, 0xFB	; 251
     6a8:	90 81       	ld	r25, Z
     6aa:	98 60       	ori	r25, 0x08	; 8
     6ac:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	88 30       	cpi	r24, 0x08	; 8
     6b2:	b0 f3       	brcs	.-20     	; 0x6a0 <mcu_init+0x4>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     6b8:	e8 2f       	mov	r30, r24
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	e0 5d       	subi	r30, 0xD0	; 208
     6be:	fb 4f       	sbci	r31, 0xFB	; 251
     6c0:	90 81       	ld	r25, Z
     6c2:	98 60       	ori	r25, 0x08	; 8
     6c4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	88 30       	cpi	r24, 0x08	; 8
     6ca:	b0 f3       	brcs	.-20     	; 0x6b8 <mcu_init+0x1c>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     6d0:	e8 2f       	mov	r30, r24
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	e0 5b       	subi	r30, 0xB0	; 176
     6d6:	fb 4f       	sbci	r31, 0xFB	; 251
     6d8:	90 81       	ld	r25, Z
     6da:	98 60       	ori	r25, 0x08	; 8
     6dc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     6de:	8f 5f       	subi	r24, 0xFF	; 255
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	b0 f3       	brcs	.-20     	; 0x6d0 <mcu_init+0x34>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     6e8:	e8 2f       	mov	r30, r24
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e0 59       	subi	r30, 0x90	; 144
     6ee:	fb 4f       	sbci	r31, 0xFB	; 251
     6f0:	90 81       	ld	r25, Z
     6f2:	98 60       	ori	r25, 0x08	; 8
     6f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	88 30       	cpi	r24, 0x08	; 8
     6fa:	b0 f3       	brcs	.-20     	; 0x6e8 <mcu_init+0x4c>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	08 c0       	rjmp	.+16     	; 0x710 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     700:	e8 2f       	mov	r30, r24
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e0 57       	subi	r30, 0x70	; 112
     706:	fb 4f       	sbci	r31, 0xFB	; 251
     708:	90 81       	ld	r25, Z
     70a:	98 60       	ori	r25, 0x08	; 8
     70c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	88 30       	cpi	r24, 0x08	; 8
     712:	b0 f3       	brcs	.-20     	; 0x700 <mcu_init+0x64>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 c0       	rjmp	.+16     	; 0x728 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     718:	e8 2f       	mov	r30, r24
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e0 55       	subi	r30, 0x50	; 80
     71e:	fb 4f       	sbci	r31, 0xFB	; 251
     720:	90 81       	ld	r25, Z
     722:	98 60       	ori	r25, 0x08	; 8
     724:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	88 30       	cpi	r24, 0x08	; 8
     72a:	b0 f3       	brcs	.-20     	; 0x718 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     72c:	08 95       	ret

0000072e <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     72e:	80 b1       	in	r24, 0x00	; 0
     730:	8d 7f       	andi	r24, 0xFD	; 253
     732:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     734:	e1 e1       	ldi	r30, 0x11	; 17
     736:	f4 e0       	ldi	r31, 0x04	; 4
     738:	80 81       	ld	r24, Z
     73a:	87 7f       	andi	r24, 0xF7	; 247
     73c:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     73e:	81 b1       	in	r24, 0x01	; 1
     740:	8e 7f       	andi	r24, 0xFE	; 254
     742:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     744:	80 b1       	in	r24, 0x00	; 0
     746:	81 60       	ori	r24, 0x01	; 1
     748:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
     74a:	0e 94 d6 06 	call	0xdac	; 0xdac <rx487x_init>
     74e:	08 95       	ret

00000750 <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     750:	84 b3       	in	r24, 0x14	; 20
     752:	8d 7f       	andi	r24, 0xFD	; 253
     754:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     756:	e1 eb       	ldi	r30, 0xB1	; 177
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	80 81       	ld	r24, Z
     75c:	87 7f       	andi	r24, 0xF7	; 247
     75e:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     760:	85 b3       	in	r24, 0x15	; 21
     762:	8e 7f       	andi	r24, 0xFE	; 254
     764:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     766:	84 b3       	in	r24, 0x14	; 20
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
     76c:	0e 94 64 07 	call	0xec8	; 0xec8 <usb_cdc_init>
     770:	08 95       	ret

00000772 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
     772:	0e 94 ed 05 	call	0xbda	; 0xbda <system_timer_init>
     776:	08 95       	ret

00000778 <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     778:	81 b1       	in	r24, 0x01	; 1
     77a:	87 7f       	andi	r24, 0xF7	; 247
     77c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     77e:	80 b1       	in	r24, 0x00	; 0
     780:	88 60       	ori	r24, 0x08	; 8
     782:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     784:	e3 e1       	ldi	r30, 0x13	; 19
     786:	f4 e0       	ldi	r31, 0x04	; 4
     788:	80 81       	ld	r24, Z
     78a:	87 7f       	andi	r24, 0xF7	; 247
     78c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     78e:	80 81       	ld	r24, Z
     790:	8f 77       	andi	r24, 0x7F	; 127
     792:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     794:	80 81       	ld	r24, Z
     796:	88 7f       	andi	r24, 0xF8	; 248
     798:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     79a:	81 b1       	in	r24, 0x01	; 1
     79c:	8b 7f       	andi	r24, 0xFB	; 251
     79e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     7a0:	80 b1       	in	r24, 0x00	; 0
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     7a6:	e2 e1       	ldi	r30, 0x12	; 18
     7a8:	f4 e0       	ldi	r31, 0x04	; 4
     7aa:	80 81       	ld	r24, Z
     7ac:	87 7f       	andi	r24, 0xF7	; 247
     7ae:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     7b0:	80 81       	ld	r24, Z
     7b2:	8f 77       	andi	r24, 0x7F	; 127
     7b4:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     7b6:	80 81       	ld	r24, Z
     7b8:	88 7f       	andi	r24, 0xF8	; 248
     7ba:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
     7bc:	0e 94 c0 05 	call	0xb80	; 0xb80 <i2c_init>
     7c0:	08 95       	ret

000007c2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     7c2:	0e 94 4e 03 	call	0x69c	; 0x69c <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     7c6:	8d b1       	in	r24, 0x0d	; 13
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     7cc:	8c b1       	in	r24, 0x0c	; 12
     7ce:	88 60       	ori	r24, 0x08	; 8
     7d0:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     7d2:	85 b3       	in	r24, 0x15	; 21
     7d4:	8f 7e       	andi	r24, 0xEF	; 239
     7d6:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     7d8:	84 b3       	in	r24, 0x14	; 20
     7da:	80 61       	ori	r24, 0x10	; 16
     7dc:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     7de:	e4 eb       	ldi	r30, 0xB4	; 180
     7e0:	f4 e0       	ldi	r31, 0x04	; 4
     7e2:	80 81       	ld	r24, Z
     7e4:	87 7f       	andi	r24, 0xF7	; 247
     7e6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     7e8:	80 81       	ld	r24, Z
     7ea:	8f 77       	andi	r24, 0x7F	; 127
     7ec:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     7ee:	80 81       	ld	r24, Z
     7f0:	88 7f       	andi	r24, 0xF8	; 248
     7f2:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
     7f4:	0e 94 4a 03 	call	0x694	; 0x694 <CLKCTRL_init>

	rx487x_initialization();
     7f8:	0e 94 97 03 	call	0x72e	; 0x72e <rx487x_initialization>

	usb_cdc_initialization();
     7fc:	0e 94 a8 03 	call	0x750	; 0x750 <usb_cdc_initialization>

	system_timer_initialization();
     800:	0e 94 b9 03 	call	0x772	; 0x772 <system_timer_initialization>

	CPUINT_init();
     804:	0e 94 4c 03 	call	0x698	; 0x698 <CPUINT_init>

	SLPCTRL_init();
     808:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <SLPCTRL_init>

	i2c_initialization();
     80c:	0e 94 bc 03 	call	0x778	; 0x778 <i2c_initialization>

	BOD_init();
     810:	0e 94 48 03 	call	0x690	; 0x690 <BOD_init>
     814:	08 95       	ret

00000816 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
}
     816:	e0 ea       	ldi	r30, 0xA0	; 160
     818:	f8 e0       	ldi	r31, 0x08	; 8
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	88 60       	ori	r24, 0x08	; 8
     81e:	84 83       	std	Z+4, r24	; 0x04
     820:	85 81       	ldd	r24, Z+5	; 0x05
     822:	81 60       	ori	r24, 0x01	; 1
     824:	85 83       	std	Z+5, r24	; 0x05
     826:	ee e9       	ldi	r30, 0x9E	; 158
     828:	f3 e3       	ldi	r31, 0x33	; 51
     82a:	80 81       	ld	r24, Z
     82c:	8e 7f       	andi	r24, 0xFE	; 254
     82e:	80 83       	st	Z, r24
     830:	13 86       	std	Z+11, r1	; 0x0b
     832:	8e e0       	ldi	r24, 0x0E	; 14
     834:	08 95       	ret

00000836 <i2c_do_I2C_IDLE>:
     836:	ee e9       	ldi	r30, 0x9E	; 158
     838:	f3 e3       	ldi	r31, 0x33	; 51
     83a:	80 81       	ld	r24, Z
     83c:	8e 7f       	andi	r24, 0xFE	; 254
     83e:	80 83       	st	Z, r24
     840:	13 86       	std	Z+11, r1	; 0x0b
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	08 95       	ret

00000846 <i2c_do_I2C_SEND_STOP>:
     846:	e0 ea       	ldi	r30, 0xA0	; 160
     848:	f8 e0       	ldi	r31, 0x08	; 8
     84a:	84 81       	ldd	r24, Z+4	; 0x04
     84c:	83 60       	ori	r24, 0x03	; 3
     84e:	84 83       	std	Z+4, r24	; 0x04
     850:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_do_I2C_IDLE>
     854:	08 95       	ret

00000856 <i2c_do_I2C_SEND_ADR_READ>:
     856:	ee e9       	ldi	r30, 0x9E	; 158
     858:	f3 e3       	ldi	r31, 0x33	; 51
     85a:	80 81       	ld	r24, Z
     85c:	88 60       	ori	r24, 0x08	; 8
     85e:	80 83       	st	Z, r24
     860:	81 81       	ldd	r24, Z+1	; 0x01
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	81 60       	ori	r24, 0x01	; 1
     86a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	08 95       	ret

00000872 <i2c_do_I2C_SEND_RESTART>:
     872:	0e 94 2b 04 	call	0x856	; 0x856 <i2c_do_I2C_SEND_ADR_READ>
     876:	08 95       	ret

00000878 <i2c_do_I2C_SEND_RESTART_READ>:
     878:	0e 94 2b 04 	call	0x856	; 0x856 <i2c_do_I2C_SEND_ADR_READ>
     87c:	08 95       	ret

0000087e <i2c_do_I2C_SEND_ADR_WRITE>:
     87e:	ee e9       	ldi	r30, 0x9E	; 158
     880:	f3 e3       	ldi	r31, 0x33	; 51
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	80 83       	st	Z, r24
     888:	81 81       	ldd	r24, Z+1	; 0x01
     88a:	88 0f       	add	r24, r24
     88c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	08 95       	ret

00000894 <i2c_do_I2C_SEND_RESTART_WRITE>:
     894:	0e 94 3f 04 	call	0x87e	; 0x87e <i2c_do_I2C_SEND_ADR_WRITE>
     898:	08 95       	ret

0000089a <i2c_do_I2C_DO_ADDRESS_NACK>:
     89a:	ae e9       	ldi	r26, 0x9E	; 158
     89c:	b3 e3       	ldi	r27, 0x33	; 51
     89e:	8c 91       	ld	r24, X
     8a0:	87 7f       	andi	r24, 0xF7	; 247
     8a2:	8c 93       	st	X, r24
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	1b 96       	adiw	r26, 0x0b	; 11
     8a8:	8c 93       	st	X, r24
     8aa:	1b 97       	sbiw	r26, 0x0b	; 11
     8ac:	50 96       	adiw	r26, 0x10	; 16
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	51 97       	sbiw	r26, 0x11	; 17
     8b4:	5c 96       	adiw	r26, 0x1c	; 28
     8b6:	8d 91       	ld	r24, X+
     8b8:	9c 91       	ld	r25, X
     8ba:	5d 97       	sbiw	r26, 0x1d	; 29
     8bc:	09 95       	icall
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	21 f0       	breq	.+8      	; 0x8ce <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
     8c8:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_do_I2C_SEND_RESTART_READ>
     8cc:	08 95       	ret
     8ce:	0e 94 4a 04 	call	0x894	; 0x894 <i2c_do_I2C_SEND_RESTART_WRITE>
     8d2:	08 95       	ret
     8d4:	0e 94 23 04 	call	0x846	; 0x846 <i2c_do_I2C_SEND_STOP>
     8d8:	08 95       	ret

000008da <i2c_do_I2C_RX_DO_ACK>:
     8da:	e0 ea       	ldi	r30, 0xA0	; 160
     8dc:	f8 e0       	ldi	r31, 0x08	; 8
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	8b 7f       	andi	r24, 0xFB	; 251
     8e2:	84 83       	std	Z+4, r24	; 0x04
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	08 95       	ret

000008e8 <i2c_do_I2C_TX_DO_ACK>:
     8e8:	e0 ea       	ldi	r30, 0xA0	; 160
     8ea:	f8 e0       	ldi	r31, 0x08	; 8
     8ec:	84 81       	ldd	r24, Z+4	; 0x04
     8ee:	8b 7f       	andi	r24, 0xFB	; 251
     8f0:	84 83       	std	Z+4, r24	; 0x04
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	08 95       	ret

000008f6 <i2c_do_I2C_DO_NACK_STOP>:
     8f6:	e0 ea       	ldi	r30, 0xA0	; 160
     8f8:	f8 e0       	ldi	r31, 0x08	; 8
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	84 60       	ori	r24, 0x04	; 4
     8fe:	84 83       	std	Z+4, r24	; 0x04
     900:	84 81       	ldd	r24, Z+4	; 0x04
     902:	83 60       	ori	r24, 0x03	; 3
     904:	84 83       	std	Z+4, r24	; 0x04
     906:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_do_I2C_IDLE>
     90a:	08 95       	ret

0000090c <i2c_do_I2C_DO_NACK_RESTART>:
     90c:	e0 ea       	ldi	r30, 0xA0	; 160
     90e:	f8 e0       	ldi	r31, 0x08	; 8
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	84 60       	ori	r24, 0x04	; 4
     914:	84 83       	std	Z+4, r24	; 0x04
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	08 95       	ret

0000091a <i2c_do_I2C_TX>:
     91a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     91e:	84 ff       	sbrs	r24, 4
     920:	19 c0       	rjmp	.+50     	; 0x954 <i2c_do_I2C_TX+0x3a>
     922:	ae e9       	ldi	r26, 0x9E	; 158
     924:	b3 e3       	ldi	r27, 0x33	; 51
     926:	52 96       	adiw	r26, 0x12	; 18
     928:	ed 91       	ld	r30, X+
     92a:	fc 91       	ld	r31, X
     92c:	53 97       	sbiw	r26, 0x13	; 19
     92e:	5e 96       	adiw	r26, 0x1e	; 30
     930:	8d 91       	ld	r24, X+
     932:	9c 91       	ld	r25, X
     934:	5f 97       	sbiw	r26, 0x1f	; 31
     936:	09 95       	icall
     938:	82 30       	cpi	r24, 0x02	; 2
     93a:	19 f0       	breq	.+6      	; 0x942 <i2c_do_I2C_TX+0x28>
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	21 f0       	breq	.+8      	; 0x948 <i2c_do_I2C_TX+0x2e>
     940:	06 c0       	rjmp	.+12     	; 0x94e <i2c_do_I2C_TX+0x34>
     942:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_do_I2C_SEND_RESTART_READ>
     946:	08 95       	ret
     948:	0e 94 4a 04 	call	0x894	; 0x894 <i2c_do_I2C_SEND_RESTART_WRITE>
     94c:	08 95       	ret
     94e:	0e 94 23 04 	call	0x846	; 0x846 <i2c_do_I2C_SEND_STOP>
     952:	08 95       	ret
     954:	ee e9       	ldi	r30, 0x9E	; 158
     956:	f3 e3       	ldi	r31, 0x33	; 51
     958:	80 81       	ld	r24, Z
     95a:	87 7f       	andi	r24, 0xF7	; 247
     95c:	80 83       	st	Z, r24
     95e:	a2 81       	ldd	r26, Z+2	; 0x02
     960:	b3 81       	ldd	r27, Z+3	; 0x03
     962:	cd 01       	movw	r24, r26
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	82 83       	std	Z+2, r24	; 0x02
     968:	93 83       	std	Z+3, r25	; 0x03
     96a:	8c 91       	ld	r24, X
     96c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     970:	84 81       	ldd	r24, Z+4	; 0x04
     972:	95 81       	ldd	r25, Z+5	; 0x05
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	84 83       	std	Z+4, r24	; 0x04
     978:	95 83       	std	Z+5, r25	; 0x05
     97a:	89 2b       	or	r24, r25
     97c:	11 f0       	breq	.+4      	; 0x982 <i2c_do_I2C_TX+0x68>
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	08 95       	ret
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	08 95       	ret

00000986 <i2c_do_I2C_RX>:
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ee e9       	ldi	r30, 0x9E	; 158
     98c:	f3 e3       	ldi	r31, 0x33	; 51
     98e:	80 81       	ld	r24, Z
     990:	87 7f       	andi	r24, 0xF7	; 247
     992:	80 83       	st	Z, r24
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	95 81       	ldd	r25, Z+5	; 0x05
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	31 f4       	brne	.+12     	; 0x9a8 <i2c_do_I2C_RX+0x22>
     99c:	e0 ea       	ldi	r30, 0xA0	; 160
     99e:	f8 e0       	ldi	r31, 0x08	; 8
     9a0:	84 81       	ldd	r24, Z+4	; 0x04
     9a2:	84 60       	ori	r24, 0x04	; 4
     9a4:	84 83       	std	Z+4, r24	; 0x04
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <i2c_do_I2C_RX+0x2c>
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f8 e0       	ldi	r31, 0x08	; 8
     9ac:	84 81       	ldd	r24, Z+4	; 0x04
     9ae:	8b 7f       	andi	r24, 0xFB	; 251
     9b0:	84 83       	std	Z+4, r24	; 0x04
     9b2:	ee e9       	ldi	r30, 0x9E	; 158
     9b4:	f3 e3       	ldi	r31, 0x33	; 51
     9b6:	84 81       	ldd	r24, Z+4	; 0x04
     9b8:	95 81       	ldd	r25, Z+5	; 0x05
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	84 83       	std	Z+4, r24	; 0x04
     9be:	95 83       	std	Z+5, r25	; 0x05
     9c0:	89 2b       	or	r24, r25
     9c2:	a9 f0       	breq	.+42     	; 0x9ee <i2c_do_I2C_RX+0x68>
     9c4:	df 01       	movw	r26, r30
     9c6:	c2 81       	ldd	r28, Z+2	; 0x02
     9c8:	d3 81       	ldd	r29, Z+3	; 0x03
     9ca:	e0 ea       	ldi	r30, 0xA0	; 160
     9cc:	f8 e0       	ldi	r31, 0x08	; 8
     9ce:	80 85       	ldd	r24, Z+8	; 0x08
     9d0:	88 83       	st	Y, r24
     9d2:	12 96       	adiw	r26, 0x02	; 2
     9d4:	8d 91       	ld	r24, X+
     9d6:	9c 91       	ld	r25, X
     9d8:	13 97       	sbiw	r26, 0x03	; 3
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	12 96       	adiw	r26, 0x02	; 2
     9de:	8d 93       	st	X+, r24
     9e0:	9c 93       	st	X, r25
     9e2:	13 97       	sbiw	r26, 0x03	; 3
     9e4:	84 81       	ldd	r24, Z+4	; 0x04
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	84 83       	std	Z+4, r24	; 0x04
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	26 c0       	rjmp	.+76     	; 0xa3a <i2c_do_I2C_RX+0xb4>
     9ee:	ae e9       	ldi	r26, 0x9E	; 158
     9f0:	b3 e3       	ldi	r27, 0x33	; 51
     9f2:	12 96       	adiw	r26, 0x02	; 2
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	13 97       	sbiw	r26, 0x03	; 3
     9fa:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     9fe:	80 83       	st	Z, r24
     a00:	12 96       	adiw	r26, 0x02	; 2
     a02:	8d 91       	ld	r24, X+
     a04:	9c 91       	ld	r25, X
     a06:	13 97       	sbiw	r26, 0x03	; 3
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	12 96       	adiw	r26, 0x02	; 2
     a0c:	8d 93       	st	X+, r24
     a0e:	9c 93       	st	X, r25
     a10:	13 97       	sbiw	r26, 0x03	; 3
     a12:	8c 91       	ld	r24, X
     a14:	84 60       	ori	r24, 0x04	; 4
     a16:	8c 93       	st	X, r24
     a18:	1c 96       	adiw	r26, 0x0c	; 12
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	1d 97       	sbiw	r26, 0x0d	; 13
     a20:	58 96       	adiw	r26, 0x18	; 24
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	59 97       	sbiw	r26, 0x19	; 25
     a28:	09 95       	icall
     a2a:	82 50       	subi	r24, 0x02	; 2
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	18 f4       	brcc	.+6      	; 0xa36 <i2c_do_I2C_RX+0xb0>
     a30:	0e 94 86 04 	call	0x90c	; 0x90c <i2c_do_I2C_DO_NACK_RESTART>
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <i2c_do_I2C_RX+0xb4>
     a36:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <i2c_do_I2C_DO_NACK_STOP>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <i2c_do_I2C_TX_EMPTY>:
     a40:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     a44:	84 ff       	sbrs	r24, 4
     a46:	19 c0       	rjmp	.+50     	; 0xa7a <i2c_do_I2C_TX_EMPTY+0x3a>
     a48:	ae e9       	ldi	r26, 0x9E	; 158
     a4a:	b3 e3       	ldi	r27, 0x33	; 51
     a4c:	52 96       	adiw	r26, 0x12	; 18
     a4e:	ed 91       	ld	r30, X+
     a50:	fc 91       	ld	r31, X
     a52:	53 97       	sbiw	r26, 0x13	; 19
     a54:	5e 96       	adiw	r26, 0x1e	; 30
     a56:	8d 91       	ld	r24, X+
     a58:	9c 91       	ld	r25, X
     a5a:	5f 97       	sbiw	r26, 0x1f	; 31
     a5c:	09 95       	icall
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	19 f0       	breq	.+6      	; 0xa68 <i2c_do_I2C_TX_EMPTY+0x28>
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	21 f0       	breq	.+8      	; 0xa6e <i2c_do_I2C_TX_EMPTY+0x2e>
     a66:	06 c0       	rjmp	.+12     	; 0xa74 <i2c_do_I2C_TX_EMPTY+0x34>
     a68:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_do_I2C_SEND_RESTART_READ>
     a6c:	08 95       	ret
     a6e:	0e 94 4a 04 	call	0x894	; 0x894 <i2c_do_I2C_SEND_RESTART_WRITE>
     a72:	08 95       	ret
     a74:	0e 94 23 04 	call	0x846	; 0x846 <i2c_do_I2C_SEND_STOP>
     a78:	08 95       	ret
     a7a:	ae e9       	ldi	r26, 0x9E	; 158
     a7c:	b3 e3       	ldi	r27, 0x33	; 51
     a7e:	8c 91       	ld	r24, X
     a80:	84 60       	ori	r24, 0x04	; 4
     a82:	8c 93       	st	X, r24
     a84:	1c 96       	adiw	r26, 0x0c	; 12
     a86:	ed 91       	ld	r30, X+
     a88:	fc 91       	ld	r31, X
     a8a:	1d 97       	sbiw	r26, 0x0d	; 13
     a8c:	58 96       	adiw	r26, 0x18	; 24
     a8e:	8d 91       	ld	r24, X+
     a90:	9c 91       	ld	r25, X
     a92:	59 97       	sbiw	r26, 0x19	; 25
     a94:	09 95       	icall
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	39 f0       	breq	.+14     	; 0xaa8 <i2c_do_I2C_TX_EMPTY+0x68>
     a9a:	84 30       	cpi	r24, 0x04	; 4
     a9c:	41 f0       	breq	.+16     	; 0xaae <i2c_do_I2C_TX_EMPTY+0x6e>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	49 f4       	brne	.+18     	; 0xab4 <i2c_do_I2C_TX_EMPTY+0x74>
     aa2:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_do_I2C_SEND_RESTART_READ>
     aa6:	08 95       	ret
     aa8:	0e 94 4a 04 	call	0x894	; 0x894 <i2c_do_I2C_SEND_RESTART_WRITE>
     aac:	08 95       	ret
     aae:	0e 94 8d 04 	call	0x91a	; 0x91a <i2c_do_I2C_TX>
     ab2:	08 95       	ret
     ab4:	0e 94 23 04 	call	0x846	; 0x846 <i2c_do_I2C_SEND_STOP>
     ab8:	08 95       	ret

00000aba <i2c_do_I2C_BUS_COLLISION>:
     aba:	e0 ea       	ldi	r30, 0xA0	; 160
     abc:	f8 e0       	ldi	r31, 0x08	; 8
     abe:	85 81       	ldd	r24, Z+5	; 0x05
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	85 83       	std	Z+5, r24	; 0x05
     ac4:	ae e9       	ldi	r26, 0x9E	; 158
     ac6:	b3 e3       	ldi	r27, 0x33	; 51
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	1b 96       	adiw	r26, 0x0b	; 11
     acc:	8c 93       	st	X, r24
     ace:	1b 97       	sbiw	r26, 0x0b	; 11
     ad0:	1e 96       	adiw	r26, 0x0e	; 14
     ad2:	ed 91       	ld	r30, X+
     ad4:	fc 91       	ld	r31, X
     ad6:	1f 97       	sbiw	r26, 0x0f	; 15
     ad8:	5a 96       	adiw	r26, 0x1a	; 26
     ada:	8d 91       	ld	r24, X+
     adc:	9c 91       	ld	r25, X
     ade:	5b 97       	sbiw	r26, 0x1b	; 27
     ae0:	09 95       	icall
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	19 f0       	breq	.+6      	; 0xaec <i2c_do_I2C_BUS_COLLISION+0x32>
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <i2c_do_I2C_BUS_COLLISION+0x38>
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <i2c_do_I2C_BUS_COLLISION+0x3e>
     aec:	0e 94 3c 04 	call	0x878	; 0x878 <i2c_do_I2C_SEND_RESTART_READ>
     af0:	08 95       	ret
     af2:	0e 94 4a 04 	call	0x894	; 0x894 <i2c_do_I2C_SEND_RESTART_WRITE>
     af6:	08 95       	ret
     af8:	0e 94 0b 04 	call	0x816	; 0x816 <i2c_do_I2C_RESET>
     afc:	08 95       	ret

00000afe <i2c_do_I2C_BUS_ERROR>:
     afe:	e0 ea       	ldi	r30, 0xA0	; 160
     b00:	f8 e0       	ldi	r31, 0x08	; 8
     b02:	84 81       	ldd	r24, Z+4	; 0x04
     b04:	88 60       	ori	r24, 0x08	; 8
     b06:	84 83       	std	Z+4, r24	; 0x04
     b08:	85 81       	ldd	r24, Z+5	; 0x05
     b0a:	81 60       	ori	r24, 0x01	; 1
     b0c:	85 83       	std	Z+5, r24	; 0x05
     b0e:	ee e9       	ldi	r30, 0x9E	; 158
     b10:	f3 e3       	ldi	r31, 0x33	; 51
     b12:	80 81       	ld	r24, Z
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	80 83       	st	Z, r24
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	83 87       	std	Z+11, r24	; 0x0b
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	08 95       	ret

00000b20 <i2c_master_isr>:
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	e0 ea       	ldi	r30, 0xA0	; 160
     b26:	f8 e0       	ldi	r31, 0x08	; 8
     b28:	85 81       	ldd	r24, Z+5	; 0x05
     b2a:	80 6c       	ori	r24, 0xC0	; 192
     b2c:	85 83       	std	Z+5, r24	; 0x05
     b2e:	80 91 9e 33 	lds	r24, 0x339E	; 0x80339e <i2c_status>
     b32:	83 ff       	sbrs	r24, 3
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <i2c_master_isr+0x24>
     b36:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     b3a:	84 ff       	sbrs	r24, 4
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <i2c_master_isr+0x24>
     b3e:	8f e0       	ldi	r24, 0x0F	; 15
     b40:	80 93 a8 33 	sts	0x33A8, r24	; 0x8033a8 <i2c_status+0xa>
     b44:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     b48:	83 ff       	sbrs	r24, 3
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <i2c_master_isr+0x32>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	80 93 a8 33 	sts	0x33A8, r24	; 0x8033a8 <i2c_status+0xa>
     b52:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     b56:	82 ff       	sbrs	r24, 2
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <i2c_master_isr+0x40>
     b5a:	81 e1       	ldi	r24, 0x11	; 17
     b5c:	80 93 a8 33 	sts	0x33A8, r24	; 0x8033a8 <i2c_status+0xa>
     b60:	ce e9       	ldi	r28, 0x9E	; 158
     b62:	d3 e3       	ldi	r29, 0x33	; 51
     b64:	ea 85       	ldd	r30, Y+10	; 0x0a
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	e4 5b       	subi	r30, 0xB4	; 180
     b6e:	ff 4c       	sbci	r31, 0xCF	; 207
     b70:	01 90       	ld	r0, Z+
     b72:	f0 81       	ld	r31, Z
     b74:	e0 2d       	mov	r30, r0
     b76:	09 95       	icall
     b78:	8a 87       	std	Y+10, r24	; 0x0a
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <i2c_init>:
     b80:	e0 ea       	ldi	r30, 0xA0	; 160
     b82:	f8 e0       	ldi	r31, 0x08	; 8
     b84:	8b e0       	ldi	r24, 0x0B	; 11
     b86:	86 83       	std	Z+6, r24	; 0x06
     b88:	81 ec       	ldi	r24, 0xC1	; 193
     b8a:	83 83       	std	Z+3, r24	; 0x03
     b8c:	08 95       	ret

00000b8e <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
	i2c_master_isr();
     bb0:	0e 94 90 05 	call	0xb20	; 0xb20 <i2c_master_isr>
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	08 95       	ret

00000bda <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	08 95       	ret

00000bde <rx487x_default_rx_isr_cb>:
	usb_cdc_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return usb_cdc_rxbuf[tmptail];
}
     bde:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
     be2:	e0 91 cd 36 	lds	r30, 0x36CD	; 0x8036cd <rx487x_rx_head>
     be6:	ef 5f       	subi	r30, 0xFF	; 255
     be8:	80 91 cc 36 	lds	r24, 0x36CC	; 0x8036cc <rx487x_rx_tail>
     bec:	e8 17       	cp	r30, r24
     bee:	59 f0       	breq	.+22     	; 0xc06 <rx487x_default_rx_isr_cb+0x28>
     bf0:	e0 93 cd 36 	sts	0x36CD, r30	; 0x8036cd <rx487x_rx_head>
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	e2 53       	subi	r30, 0x32	; 50
     bf8:	f9 4c       	sbci	r31, 0xC9	; 201
     bfa:	90 83       	st	Z, r25
     bfc:	80 91 cb 36 	lds	r24, 0x36CB	; 0x8036cb <rx487x_rx_elements>
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 cb 36 	sts	0x36CB, r24	; 0x8036cb <rx487x_rx_elements>
     c06:	08 95       	ret

00000c08 <rx487x_default_udre_isr_cb>:
     c08:	80 91 c8 35 	lds	r24, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     c0c:	88 23       	and	r24, r24
     c0e:	81 f0       	breq	.+32     	; 0xc30 <rx487x_default_udre_isr_cb+0x28>
     c10:	e0 91 c9 35 	lds	r30, 0x35C9	; 0x8035c9 <rx487x_tx_tail>
     c14:	ef 5f       	subi	r30, 0xFF	; 255
     c16:	e0 93 c9 35 	sts	0x35C9, r30	; 0x8035c9 <rx487x_tx_tail>
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	e5 53       	subi	r30, 0x35	; 53
     c1e:	fa 4c       	sbci	r31, 0xCA	; 202
     c20:	80 81       	ld	r24, Z
     c22:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
     c26:	80 91 c8 35 	lds	r24, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     c2a:	81 50       	subi	r24, 0x01	; 1
     c2c:	80 93 c8 35 	sts	0x35C8, r24	; 0x8035c8 <rx487x_tx_elements>
     c30:	80 91 c8 35 	lds	r24, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     c34:	81 11       	cpse	r24, r1
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <rx487x_default_udre_isr_cb+0x3a>
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f8 e0       	ldi	r31, 0x08	; 8
     c3c:	85 81       	ldd	r24, Z+5	; 0x05
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	85 83       	std	Z+5, r24	; 0x05
     c42:	08 95       	ret

00000c44 <usb_cdc_default_rx_isr_cb>:
     c44:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
     c48:	e0 91 c7 34 	lds	r30, 0x34C7	; 0x8034c7 <usb_cdc_rx_head>
     c4c:	ef 5f       	subi	r30, 0xFF	; 255
     c4e:	80 91 c6 34 	lds	r24, 0x34C6	; 0x8034c6 <usb_cdc_rx_tail>
     c52:	e8 17       	cp	r30, r24
     c54:	59 f0       	breq	.+22     	; 0xc6c <usb_cdc_default_rx_isr_cb+0x28>
     c56:	e0 93 c7 34 	sts	0x34C7, r30	; 0x8034c7 <usb_cdc_rx_head>
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e8 53       	subi	r30, 0x38	; 56
     c5e:	fb 4c       	sbci	r31, 0xCB	; 203
     c60:	90 83       	st	Z, r25
     c62:	80 91 c5 34 	lds	r24, 0x34C5	; 0x8034c5 <usb_cdc_rx_elements>
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 93 c5 34 	sts	0x34C5, r24	; 0x8034c5 <usb_cdc_rx_elements>
     c6c:	08 95       	ret

00000c6e <usb_cdc_default_udre_isr_cb>:
     c6e:	80 91 c2 33 	lds	r24, 0x33C2	; 0x8033c2 <usb_cdc_tx_elements>
     c72:	88 23       	and	r24, r24
     c74:	81 f0       	breq	.+32     	; 0xc96 <usb_cdc_default_udre_isr_cb+0x28>
     c76:	e0 91 c3 33 	lds	r30, 0x33C3	; 0x8033c3 <usb_cdc_tx_tail>
     c7a:	ef 5f       	subi	r30, 0xFF	; 255
     c7c:	e0 93 c3 33 	sts	0x33C3, r30	; 0x8033c3 <usb_cdc_tx_tail>
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	eb 53       	subi	r30, 0x3B	; 59
     c84:	fc 4c       	sbci	r31, 0xCC	; 204
     c86:	80 81       	ld	r24, Z
     c88:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
     c8c:	80 91 c2 33 	lds	r24, 0x33C2	; 0x8033c2 <usb_cdc_tx_elements>
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	80 93 c2 33 	sts	0x33C2, r24	; 0x8033c2 <usb_cdc_tx_elements>
     c96:	80 91 c2 33 	lds	r24, 0x33C2	; 0x8033c2 <usb_cdc_tx_elements>
     c9a:	81 11       	cpse	r24, r1
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <usb_cdc_default_udre_isr_cb+0x3a>
     c9e:	e0 e4       	ldi	r30, 0x40	; 64
     ca0:	f8 e0       	ldi	r31, 0x08	; 8
     ca2:	85 81       	ldd	r24, Z+5	; 0x05
     ca4:	8f 7d       	andi	r24, 0xDF	; 223
     ca6:	85 83       	std	Z+5, r24	; 0x05
     ca8:	08 95       	ret

00000caa <rx487x_set_ISR_cb>:
     caa:	61 30       	cpi	r22, 0x01	; 1
     cac:	19 f0       	breq	.+6      	; 0xcb4 <rx487x_set_ISR_cb+0xa>
     cae:	62 30       	cpi	r22, 0x02	; 2
     cb0:	31 f0       	breq	.+12     	; 0xcbe <rx487x_set_ISR_cb+0x14>
     cb2:	08 95       	ret
     cb4:	80 93 84 30 	sts	0x3084, r24	; 0x803084 <rx487x_rx_isr_cb>
     cb8:	90 93 85 30 	sts	0x3085, r25	; 0x803085 <rx487x_rx_isr_cb+0x1>
     cbc:	08 95       	ret
     cbe:	80 93 82 30 	sts	0x3082, r24	; 0x803082 <rx487x_udre_isr_cb>
     cc2:	90 93 83 30 	sts	0x3083, r25	; 0x803083 <rx487x_udre_isr_cb+0x1>
     cc6:	08 95       	ret

00000cc8 <__vector_17>:
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
     cea:	e0 91 84 30 	lds	r30, 0x3084	; 0x803084 <rx487x_rx_isr_cb>
     cee:	f0 91 85 30 	lds	r31, 0x3085	; 0x803085 <rx487x_rx_isr_cb+0x1>
     cf2:	30 97       	sbiw	r30, 0x00	; 0
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_17+0x30>
     cf6:	09 95       	icall
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_18>:
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	e0 91 82 30 	lds	r30, 0x3082	; 0x803082 <rx487x_udre_isr_cb>
     d40:	f0 91 83 30 	lds	r31, 0x3083	; 0x803083 <rx487x_udre_isr_cb+0x1>
     d44:	30 97       	sbiw	r30, 0x00	; 0
     d46:	09 f0       	breq	.+2      	; 0xd4a <__vector_18+0x30>
     d48:	09 95       	icall
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <rx487x_is_tx_ready>:
     d6c:	80 91 c8 35 	lds	r24, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	08 95       	ret

00000d74 <rx487x_write>:
     d74:	90 91 ca 35 	lds	r25, 0x35CA	; 0x8035ca <rx487x_tx_head>
     d78:	9f 5f       	subi	r25, 0xFF	; 255
     d7a:	20 91 c8 35 	lds	r18, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     d7e:	e9 2f       	mov	r30, r25
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	e5 53       	subi	r30, 0x35	; 53
     d84:	fa 4c       	sbci	r31, 0xCA	; 202
     d86:	80 83       	st	Z, r24
     d88:	90 93 ca 35 	sts	0x35CA, r25	; 0x8035ca <rx487x_tx_head>
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	0f 92       	push	r0
     d92:	80 91 c8 35 	lds	r24, 0x35C8	; 0x8035c8 <rx487x_tx_elements>
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 c8 35 	sts	0x35C8, r24	; 0x8035c8 <rx487x_tx_elements>
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	e0 e0       	ldi	r30, 0x00	; 0
     da2:	f8 e0       	ldi	r31, 0x08	; 8
     da4:	85 81       	ldd	r24, Z+5	; 0x05
     da6:	80 62       	ori	r24, 0x20	; 32
     da8:	85 83       	std	Z+5, r24	; 0x05
     daa:	08 95       	ret

00000dac <rx487x_init>:
     dac:	e0 e0       	ldi	r30, 0x00	; 0
     dae:	f8 e0       	ldi	r31, 0x08	; 8
     db0:	84 e7       	ldi	r24, 0x74	; 116
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	80 87       	std	Z+8, r24	; 0x08
     db6:	91 87       	std	Z+9, r25	; 0x09
     db8:	80 e8       	ldi	r24, 0x80	; 128
     dba:	85 83       	std	Z+5, r24	; 0x05
     dbc:	80 ec       	ldi	r24, 0xC0	; 192
     dbe:	86 83       	std	Z+6, r24	; 0x06
     dc0:	10 92 cc 36 	sts	0x36CC, r1	; 0x8036cc <rx487x_rx_tail>
     dc4:	10 92 cd 36 	sts	0x36CD, r1	; 0x8036cd <rx487x_rx_head>
     dc8:	10 92 cb 36 	sts	0x36CB, r1	; 0x8036cb <rx487x_rx_elements>
     dcc:	10 92 c9 35 	sts	0x35C9, r1	; 0x8035c9 <rx487x_tx_tail>
     dd0:	10 92 ca 35 	sts	0x35CA, r1	; 0x8035ca <rx487x_tx_head>
     dd4:	10 92 c8 35 	sts	0x35C8, r1	; 0x8035c8 <rx487x_tx_elements>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret

00000ddc <rx487x_get_data>:
     ddc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
     de0:	08 95       	ret

00000de2 <__vector_31>:
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31
     e04:	e0 91 72 30 	lds	r30, 0x3072	; 0x803072 <usb_cdc_rx_isr_cb>
     e08:	f0 91 73 30 	lds	r31, 0x3073	; 0x803073 <usb_cdc_rx_isr_cb+0x1>
     e0c:	30 97       	sbiw	r30, 0x00	; 0
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__vector_31+0x30>
     e10:	09 95       	icall
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_32>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	e0 91 70 30 	lds	r30, 0x3070	; 0x803070 <usb_cdc_udre_isr_cb>
     e5a:	f0 91 71 30 	lds	r31, 0x3071	; 0x803071 <usb_cdc_udre_isr_cb+0x1>
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	09 f0       	breq	.+2      	; 0xe64 <__vector_32+0x30>
     e62:	09 95       	icall
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <usb_cdc_write>:
void usb_cdc_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (usb_cdc_tx_head + 1) & usb_cdc_TX_BUFFER_MASK;
     e86:	90 91 c4 33 	lds	r25, 0x33C4	; 0x8033c4 <usb_cdc_tx_head>
     e8a:	9f 5f       	subi	r25, 0xFF	; 255
	/* Wait for free space in buffer */
	while (usb_cdc_tx_elements == usb_cdc_TX_BUFFER_SIZE)
     e8c:	20 91 c2 33 	lds	r18, 0x33C2	; 0x8033c2 <usb_cdc_tx_elements>
		;
	/* Store data in buffer */
	usb_cdc_txbuf[tmphead] = data;
     e90:	e9 2f       	mov	r30, r25
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	eb 53       	subi	r30, 0x3B	; 59
     e96:	fc 4c       	sbci	r31, 0xCC	; 204
     e98:	80 83       	st	Z, r24
	/* Store new index */
	usb_cdc_tx_head = tmphead;
     e9a:	90 93 c4 33 	sts	0x33C4, r25	; 0x8033c4 <usb_cdc_tx_head>
	ENTER_CRITICAL(W);
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	0f 92       	push	r0
	usb_cdc_tx_elements++;
     ea4:	80 91 c2 33 	lds	r24, 0x33C2	; 0x8033c2 <usb_cdc_tx_elements>
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	80 93 c2 33 	sts	0x33C2, r24	; 0x8033c2 <usb_cdc_tx_elements>
	EXIT_CRITICAL(W);
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART2.CTRLA |= (1 << USART_DREIE_bp);
     eb2:	e0 e4       	ldi	r30, 0x40	; 64
     eb4:	f8 e0       	ldi	r31, 0x08	; 8
     eb6:	85 81       	ldd	r24, Z+5	; 0x05
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	85 83       	std	Z+5, r24	; 0x05
     ebc:	08 95       	ret

00000ebe <usb_cdc_printCHAR>:

#if defined(__GNUC__)

int usb_cdc_printCHAR(char character, FILE *stream)
{
	usb_cdc_write(character);
     ebe:	0e 94 43 07 	call	0xe86	; 0xe86 <usb_cdc_write>
	return 0;
}
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	08 95       	ret

00000ec8 <usb_cdc_init>:
 * \retval 1 the USART init was not successful
 */
int8_t usb_cdc_init()
{

	USART2.BAUD = (uint16_t)USART2_BAUD_RATE(115200); /* set baud rate register */
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f8 e0       	ldi	r31, 0x08	; 8
     ecc:	84 e7       	ldi	r24, 0x74	; 116
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	80 87       	std	Z+8, r24	; 0x08
     ed2:	91 87       	std	Z+9, r25	; 0x09

	USART2.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART2.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	86 83       	std	Z+6, r24	; 0x06
	// USART2.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
	//		 | USART_CHSIZE_8BIT_gc /* Character size: 8 bit */
	//		 | USART_PMODE_DISABLED_gc /* No Parity */
	//		 | USART_SBMODE_1BIT_gc; /* 1 stop bit */

	USART2.DBGCTRL = 1 << USART_DBGRUN_bp; /* Debug Run: enabled */
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	usb_cdc_rx_tail     = x;
     ee0:	10 92 c6 34 	sts	0x34C6, r1	; 0x8034c6 <usb_cdc_rx_tail>
	usb_cdc_rx_head     = x;
     ee4:	10 92 c7 34 	sts	0x34C7, r1	; 0x8034c7 <usb_cdc_rx_head>
	usb_cdc_rx_elements = x;
     ee8:	10 92 c5 34 	sts	0x34C5, r1	; 0x8034c5 <usb_cdc_rx_elements>
	usb_cdc_tx_tail     = x;
     eec:	10 92 c3 33 	sts	0x33C3, r1	; 0x8033c3 <usb_cdc_tx_tail>
	usb_cdc_tx_head     = x;
     ef0:	10 92 c4 33 	sts	0x33C4, r1	; 0x8033c4 <usb_cdc_tx_head>
	usb_cdc_tx_elements = x;
     ef4:	10 92 c2 33 	sts	0x33C2, r1	; 0x8033c2 <usb_cdc_tx_elements>

#if defined(__GNUC__)
	stdout = &usb_cdc_stream;
     ef8:	84 e7       	ldi	r24, 0x74	; 116
     efa:	90 e3       	ldi	r25, 0x30	; 48
     efc:	80 93 d0 37 	sts	0x37D0, r24	; 0x8037d0 <__iob+0x2>
     f00:	90 93 d1 37 	sts	0x37D1, r25	; 0x8037d1 <__iob+0x3>
#endif

	return 0;
}
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret

00000f08 <__muluhisi3>:
     f08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__umulhisi3>
     f0c:	a5 9f       	mul	r26, r21
     f0e:	90 0d       	add	r25, r0
     f10:	b4 9f       	mul	r27, r20
     f12:	90 0d       	add	r25, r0
     f14:	a4 9f       	mul	r26, r20
     f16:	80 0d       	add	r24, r0
     f18:	91 1d       	adc	r25, r1
     f1a:	11 24       	eor	r1, r1
     f1c:	08 95       	ret

00000f1e <__umulhisi3>:
     f1e:	a2 9f       	mul	r26, r18
     f20:	b0 01       	movw	r22, r0
     f22:	b3 9f       	mul	r27, r19
     f24:	c0 01       	movw	r24, r0
     f26:	a3 9f       	mul	r26, r19
     f28:	70 0d       	add	r23, r0
     f2a:	81 1d       	adc	r24, r1
     f2c:	11 24       	eor	r1, r1
     f2e:	91 1d       	adc	r25, r1
     f30:	b2 9f       	mul	r27, r18
     f32:	70 0d       	add	r23, r0
     f34:	81 1d       	adc	r24, r1
     f36:	11 24       	eor	r1, r1
     f38:	91 1d       	adc	r25, r1
     f3a:	08 95       	ret

00000f3c <strtol>:
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 ea       	ldi	r30, 0xA4	; 164
     f42:	f7 e0       	ldi	r31, 0x07	; 7
     f44:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <__prologue_saves__+0x2>
     f48:	5c 01       	movw	r10, r24
     f4a:	6b 01       	movw	r12, r22
     f4c:	7a 01       	movw	r14, r20
     f4e:	61 15       	cp	r22, r1
     f50:	71 05       	cpc	r23, r1
     f52:	19 f0       	breq	.+6      	; 0xf5a <strtol+0x1e>
     f54:	fb 01       	movw	r30, r22
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	e1 14       	cp	r14, r1
     f5c:	f1 04       	cpc	r15, r1
     f5e:	29 f0       	breq	.+10     	; 0xf6a <strtol+0x2e>
     f60:	c7 01       	movw	r24, r14
     f62:	02 97       	sbiw	r24, 0x02	; 2
     f64:	83 97       	sbiw	r24, 0x23	; 35
     f66:	08 f0       	brcs	.+2      	; 0xf6a <strtol+0x2e>
     f68:	e5 c0       	rjmp	.+458    	; 0x1134 <__DATA_REGION_LENGTH__+0x134>
     f6a:	e5 01       	movw	r28, r10
     f6c:	21 96       	adiw	r28, 0x01	; 1
     f6e:	f5 01       	movw	r30, r10
     f70:	10 81       	ld	r17, Z
     f72:	81 2f       	mov	r24, r17
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 b4 08 	call	0x1168	; 0x1168 <isspace>
     f7a:	89 2b       	or	r24, r25
     f7c:	11 f0       	breq	.+4      	; 0xf82 <strtol+0x46>
     f7e:	5e 01       	movw	r10, r28
     f80:	f4 cf       	rjmp	.-24     	; 0xf6a <strtol+0x2e>
     f82:	1d 32       	cpi	r17, 0x2D	; 45
     f84:	29 f4       	brne	.+10     	; 0xf90 <strtol+0x54>
     f86:	21 96       	adiw	r28, 0x01	; 1
     f88:	f5 01       	movw	r30, r10
     f8a:	11 81       	ldd	r17, Z+1	; 0x01
     f8c:	01 e0       	ldi	r16, 0x01	; 1
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <strtol+0x62>
     f90:	1b 32       	cpi	r17, 0x2B	; 43
     f92:	21 f4       	brne	.+8      	; 0xf9c <strtol+0x60>
     f94:	e5 01       	movw	r28, r10
     f96:	22 96       	adiw	r28, 0x02	; 2
     f98:	f5 01       	movw	r30, r10
     f9a:	11 81       	ldd	r17, Z+1	; 0x01
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	e1 14       	cp	r14, r1
     fa0:	f1 04       	cpc	r15, r1
     fa2:	09 f1       	breq	.+66     	; 0xfe6 <strtol+0xaa>
     fa4:	f0 e1       	ldi	r31, 0x10	; 16
     fa6:	ef 16       	cp	r14, r31
     fa8:	f1 04       	cpc	r15, r1
     faa:	29 f4       	brne	.+10     	; 0xfb6 <strtol+0x7a>
     fac:	3f c0       	rjmp	.+126    	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
     fae:	10 e3       	ldi	r17, 0x30	; 48
     fb0:	e1 14       	cp	r14, r1
     fb2:	f1 04       	cpc	r15, r1
     fb4:	21 f1       	breq	.+72     	; 0xffe <strtol+0xc2>
     fb6:	28 e0       	ldi	r18, 0x08	; 8
     fb8:	e2 16       	cp	r14, r18
     fba:	f1 04       	cpc	r15, r1
     fbc:	01 f1       	breq	.+64     	; 0xffe <strtol+0xc2>
     fbe:	54 f4       	brge	.+20     	; 0xfd4 <strtol+0x98>
     fc0:	e2 e0       	ldi	r30, 0x02	; 2
     fc2:	ee 16       	cp	r14, r30
     fc4:	f1 04       	cpc	r15, r1
     fc6:	21 f5       	brne	.+72     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
     fc8:	81 2c       	mov	r8, r1
     fca:	91 2c       	mov	r9, r1
     fcc:	a1 2c       	mov	r10, r1
     fce:	b0 e4       	ldi	r27, 0x40	; 64
     fd0:	bb 2e       	mov	r11, r27
     fd2:	3e c0       	rjmp	.+124    	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
     fd4:	fa e0       	ldi	r31, 0x0A	; 10
     fd6:	ef 16       	cp	r14, r31
     fd8:	f1 04       	cpc	r15, r1
     fda:	39 f0       	breq	.+14     	; 0xfea <strtol+0xae>
     fdc:	20 e1       	ldi	r18, 0x10	; 16
     fde:	e2 16       	cp	r14, r18
     fe0:	f1 04       	cpc	r15, r1
     fe2:	b1 f4       	brne	.+44     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
     fe4:	30 c0       	rjmp	.+96     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
     fe6:	10 33       	cpi	r17, 0x30	; 48
     fe8:	19 f1       	breq	.+70     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     fea:	fa e0       	ldi	r31, 0x0A	; 10
     fec:	ef 2e       	mov	r14, r31
     fee:	f1 2c       	mov	r15, r1
     ff0:	ac ec       	ldi	r26, 0xCC	; 204
     ff2:	8a 2e       	mov	r8, r26
     ff4:	98 2c       	mov	r9, r8
     ff6:	a8 2c       	mov	r10, r8
     ff8:	ac e0       	ldi	r26, 0x0C	; 12
     ffa:	ba 2e       	mov	r11, r26
     ffc:	29 c0       	rjmp	.+82     	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
     ffe:	78 e0       	ldi	r23, 0x08	; 8
    1000:	e7 2e       	mov	r14, r23
    1002:	f1 2c       	mov	r15, r1
    1004:	81 2c       	mov	r8, r1
    1006:	91 2c       	mov	r9, r1
    1008:	a1 2c       	mov	r10, r1
    100a:	e0 e1       	ldi	r30, 0x10	; 16
    100c:	be 2e       	mov	r11, r30
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e8       	ldi	r25, 0x80	; 128
    1018:	97 01       	movw	r18, r14
    101a:	0f 2c       	mov	r0, r15
    101c:	00 0c       	add	r0, r0
    101e:	44 0b       	sbc	r20, r20
    1020:	55 0b       	sbc	r21, r21
    1022:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__udivmodsi4>
    1026:	49 01       	movw	r8, r18
    1028:	5a 01       	movw	r10, r20
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    102c:	10 33       	cpi	r17, 0x30	; 48
    102e:	59 f4       	brne	.+22     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    1030:	88 81       	ld	r24, Y
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	88 35       	cpi	r24, 0x58	; 88
    1036:	09 f0       	breq	.+2      	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1038:	ba cf       	rjmp	.-140    	; 0xfae <strtol+0x72>
    103a:	19 81       	ldd	r17, Y+1	; 0x01
    103c:	22 96       	adiw	r28, 0x02	; 2
    103e:	02 60       	ori	r16, 0x02	; 2
    1040:	80 e1       	ldi	r24, 0x10	; 16
    1042:	e8 2e       	mov	r14, r24
    1044:	f1 2c       	mov	r15, r1
    1046:	81 2c       	mov	r8, r1
    1048:	91 2c       	mov	r9, r1
    104a:	a1 2c       	mov	r10, r1
    104c:	68 e0       	ldi	r22, 0x08	; 8
    104e:	b6 2e       	mov	r11, r22
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	cb 01       	movw	r24, r22
    1058:	27 01       	movw	r4, r14
    105a:	0f 2c       	mov	r0, r15
    105c:	00 0c       	add	r0, r0
    105e:	66 08       	sbc	r6, r6
    1060:	77 08       	sbc	r7, r7
    1062:	fe 01       	movw	r30, r28
    1064:	50 ed       	ldi	r21, 0xD0	; 208
    1066:	35 2e       	mov	r3, r21
    1068:	31 0e       	add	r3, r17
    106a:	29 e0       	ldi	r18, 0x09	; 9
    106c:	23 15       	cp	r18, r3
    106e:	70 f4       	brcc	.+28     	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
    1070:	2f eb       	ldi	r18, 0xBF	; 191
    1072:	21 0f       	add	r18, r17
    1074:	2a 31       	cpi	r18, 0x1A	; 26
    1076:	18 f4       	brcc	.+6      	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    1078:	39 ec       	ldi	r19, 0xC9	; 201
    107a:	33 2e       	mov	r3, r19
    107c:	06 c0       	rjmp	.+12     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    107e:	2f e9       	ldi	r18, 0x9F	; 159
    1080:	21 0f       	add	r18, r17
    1082:	2a 31       	cpi	r18, 0x1A	; 26
    1084:	18 f5       	brcc	.+70     	; 0x10cc <__DATA_REGION_LENGTH__+0xcc>
    1086:	29 ea       	ldi	r18, 0xA9	; 169
    1088:	32 2e       	mov	r3, r18
    108a:	31 0e       	add	r3, r17
    108c:	23 2d       	mov	r18, r3
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	2e 15       	cp	r18, r14
    1092:	3f 05       	cpc	r19, r15
    1094:	dc f4       	brge	.+54     	; 0x10cc <__DATA_REGION_LENGTH__+0xcc>
    1096:	47 fd       	sbrc	r20, 7
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    109a:	86 16       	cp	r8, r22
    109c:	97 06       	cpc	r9, r23
    109e:	a8 06       	cpc	r10, r24
    10a0:	b9 06       	cpc	r11, r25
    10a2:	70 f0       	brcs	.+28     	; 0x10c0 <__DATA_REGION_LENGTH__+0xc0>
    10a4:	a3 01       	movw	r20, r6
    10a6:	92 01       	movw	r18, r4
    10a8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__mulsi3>
    10ac:	63 0d       	add	r22, r3
    10ae:	71 1d       	adc	r23, r1
    10b0:	81 1d       	adc	r24, r1
    10b2:	91 1d       	adc	r25, r1
    10b4:	61 30       	cpi	r22, 0x01	; 1
    10b6:	71 05       	cpc	r23, r1
    10b8:	81 05       	cpc	r24, r1
    10ba:	20 e8       	ldi	r18, 0x80	; 128
    10bc:	92 07       	cpc	r25, r18
    10be:	10 f0       	brcs	.+4      	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10c0:	4f ef       	ldi	r20, 0xFF	; 255
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <__DATA_REGION_LENGTH__+0xc6>
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	21 96       	adiw	r28, 0x01	; 1
    10c8:	10 81       	ld	r17, Z
    10ca:	cb cf       	rjmp	.-106    	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    10cc:	20 2f       	mov	r18, r16
    10ce:	21 70       	andi	r18, 0x01	; 1
    10d0:	c1 14       	cp	r12, r1
    10d2:	d1 04       	cpc	r13, r1
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <__DATA_REGION_LENGTH__+0xf2>
    10d6:	44 23       	and	r20, r20
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <__DATA_REGION_LENGTH__+0xe4>
    10da:	21 97       	sbiw	r28, 0x01	; 1
    10dc:	f6 01       	movw	r30, r12
    10de:	c0 83       	st	Z, r28
    10e0:	d1 83       	std	Z+1, r29	; 0x01
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <__DATA_REGION_LENGTH__+0xf2>
    10e4:	01 ff       	sbrs	r16, 1
    10e6:	19 c0       	rjmp	.+50     	; 0x111a <__DATA_REGION_LENGTH__+0x11a>
    10e8:	22 97       	sbiw	r28, 0x02	; 2
    10ea:	f6 01       	movw	r30, r12
    10ec:	c0 83       	st	Z, r28
    10ee:	d1 83       	std	Z+1, r29	; 0x01
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <__DATA_REGION_LENGTH__+0x11a>
    10f2:	47 ff       	sbrs	r20, 7
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <__DATA_REGION_LENGTH__+0x11a>
    10f6:	22 23       	and	r18, r18
    10f8:	29 f0       	breq	.+10     	; 0x1104 <__DATA_REGION_LENGTH__+0x104>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e8       	ldi	r25, 0x80	; 128
    1102:	04 c0       	rjmp	.+8      	; 0x110c <__DATA_REGION_LENGTH__+0x10c>
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	7f ef       	ldi	r23, 0xFF	; 255
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	9f e7       	ldi	r25, 0x7F	; 127
    110c:	22 e2       	ldi	r18, 0x22	; 34
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	20 93 d4 37 	sts	0x37D4, r18	; 0x8037d4 <errno>
    1114:	30 93 d5 37 	sts	0x37D5, r19	; 0x8037d5 <errno+0x1>
    1118:	09 c0       	rjmp	.+18     	; 0x112c <__DATA_REGION_LENGTH__+0x12c>
    111a:	22 23       	and	r18, r18
    111c:	81 f0       	breq	.+32     	; 0x113e <__DATA_REGION_LENGTH__+0x13e>
    111e:	90 95       	com	r25
    1120:	80 95       	com	r24
    1122:	70 95       	com	r23
    1124:	61 95       	neg	r22
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	46 2f       	mov	r20, r22
    112e:	37 2f       	mov	r19, r23
    1130:	28 2f       	mov	r18, r24
    1132:	12 c0       	rjmp	.+36     	; 0x1158 <__DATA_REGION_LENGTH__+0x158>
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <__DATA_REGION_LENGTH__+0x158>
    113e:	97 ff       	sbrs	r25, 7
    1140:	f5 cf       	rjmp	.-22     	; 0x112c <__DATA_REGION_LENGTH__+0x12c>
    1142:	82 e2       	ldi	r24, 0x22	; 34
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	80 93 d4 37 	sts	0x37D4, r24	; 0x8037d4 <errno>
    114a:	90 93 d5 37 	sts	0x37D5, r25	; 0x8037d5 <errno+0x1>
    114e:	6f ef       	ldi	r22, 0xFF	; 255
    1150:	7f ef       	ldi	r23, 0xFF	; 255
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	9f e7       	ldi	r25, 0x7F	; 127
    1156:	ea cf       	rjmp	.-44     	; 0x112c <__DATA_REGION_LENGTH__+0x12c>
    1158:	64 2f       	mov	r22, r20
    115a:	73 2f       	mov	r23, r19
    115c:	82 2f       	mov	r24, r18
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	e1 e1       	ldi	r30, 0x11	; 17
    1164:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__epilogue_restores__+0x2>

00001168 <isspace>:
    1168:	91 11       	cpse	r25, r1
    116a:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__ctype_isfalse>
    116e:	80 32       	cpi	r24, 0x20	; 32
    1170:	19 f0       	breq	.+6      	; 0x1178 <isspace+0x10>
    1172:	89 50       	subi	r24, 0x09	; 9
    1174:	85 50       	subi	r24, 0x05	; 5
    1176:	c8 f7       	brcc	.-14     	; 0x116a <isspace+0x2>
    1178:	08 95       	ret

0000117a <strncpy>:
    117a:	fb 01       	movw	r30, r22
    117c:	dc 01       	movw	r26, r24
    117e:	41 50       	subi	r20, 0x01	; 1
    1180:	50 40       	sbci	r21, 0x00	; 0
    1182:	48 f0       	brcs	.+18     	; 0x1196 <strncpy+0x1c>
    1184:	01 90       	ld	r0, Z+
    1186:	0d 92       	st	X+, r0
    1188:	00 20       	and	r0, r0
    118a:	c9 f7       	brne	.-14     	; 0x117e <strncpy+0x4>
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <strncpy+0x16>
    118e:	1d 92       	st	X+, r1
    1190:	41 50       	subi	r20, 0x01	; 1
    1192:	50 40       	sbci	r21, 0x00	; 0
    1194:	e0 f7       	brcc	.-8      	; 0x118e <strncpy+0x14>
    1196:	08 95       	ret

00001198 <strstr>:
    1198:	fb 01       	movw	r30, r22
    119a:	51 91       	ld	r21, Z+
    119c:	55 23       	and	r21, r21
    119e:	a9 f0       	breq	.+42     	; 0x11ca <strstr+0x32>
    11a0:	bf 01       	movw	r22, r30
    11a2:	dc 01       	movw	r26, r24
    11a4:	4d 91       	ld	r20, X+
    11a6:	45 17       	cp	r20, r21
    11a8:	41 11       	cpse	r20, r1
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <strstr+0xc>
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <strstr+0x2c>
    11ae:	cd 01       	movw	r24, r26
    11b0:	01 90       	ld	r0, Z+
    11b2:	00 20       	and	r0, r0
    11b4:	49 f0       	breq	.+18     	; 0x11c8 <strstr+0x30>
    11b6:	4d 91       	ld	r20, X+
    11b8:	40 15       	cp	r20, r0
    11ba:	41 11       	cpse	r20, r1
    11bc:	c9 f3       	breq	.-14     	; 0x11b0 <strstr+0x18>
    11be:	fb 01       	movw	r30, r22
    11c0:	41 11       	cpse	r20, r1
    11c2:	ef cf       	rjmp	.-34     	; 0x11a2 <strstr+0xa>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	08 95       	ret

000011cc <printf>:
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x20>
    11d8:	ae 01       	movw	r20, r28
    11da:	4b 5f       	subi	r20, 0xFB	; 251
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	fa 01       	movw	r30, r20
    11e0:	61 91       	ld	r22, Z+
    11e2:	71 91       	ld	r23, Z+
    11e4:	af 01       	movw	r20, r30
    11e6:	80 91 d0 37 	lds	r24, 0x37D0	; 0x8037d0 <__iob+0x2>
    11ea:	90 91 d1 37 	lds	r25, 0x37D1	; 0x8037d1 <__iob+0x3>
    11ee:	0e 94 67 09 	call	0x12ce	; 0x12ce <vfprintf>
    11f2:	e2 e0       	ldi	r30, 0x02	; 2
    11f4:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__epilogue_restores__+0x20>

000011f8 <puts>:
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	e0 91 d0 37 	lds	r30, 0x37D0	; 0x8037d0 <__iob+0x2>
    1204:	f0 91 d1 37 	lds	r31, 0x37D1	; 0x8037d1 <__iob+0x3>
    1208:	23 81       	ldd	r18, Z+3	; 0x03
    120a:	21 ff       	sbrs	r18, 1
    120c:	1b c0       	rjmp	.+54     	; 0x1244 <puts+0x4c>
    120e:	8c 01       	movw	r16, r24
    1210:	d0 e0       	ldi	r29, 0x00	; 0
    1212:	c0 e0       	ldi	r28, 0x00	; 0
    1214:	f8 01       	movw	r30, r16
    1216:	81 91       	ld	r24, Z+
    1218:	8f 01       	movw	r16, r30
    121a:	60 91 d0 37 	lds	r22, 0x37D0	; 0x8037d0 <__iob+0x2>
    121e:	70 91 d1 37 	lds	r23, 0x37D1	; 0x8037d1 <__iob+0x3>
    1222:	db 01       	movw	r26, r22
    1224:	18 96       	adiw	r26, 0x08	; 8
    1226:	ed 91       	ld	r30, X+
    1228:	fc 91       	ld	r31, X
    122a:	19 97       	sbiw	r26, 0x09	; 9
    122c:	88 23       	and	r24, r24
    122e:	31 f0       	breq	.+12     	; 0x123c <puts+0x44>
    1230:	09 95       	icall
    1232:	89 2b       	or	r24, r25
    1234:	79 f3       	breq	.-34     	; 0x1214 <puts+0x1c>
    1236:	df ef       	ldi	r29, 0xFF	; 255
    1238:	cf ef       	ldi	r28, 0xFF	; 255
    123a:	ec cf       	rjmp	.-40     	; 0x1214 <puts+0x1c>
    123c:	8a e0       	ldi	r24, 0x0A	; 10
    123e:	09 95       	icall
    1240:	89 2b       	or	r24, r25
    1242:	19 f0       	breq	.+6      	; 0x124a <puts+0x52>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	02 c0       	rjmp	.+4      	; 0x124e <puts+0x56>
    124a:	8d 2f       	mov	r24, r29
    124c:	9c 2f       	mov	r25, r28
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <sprintf>:
    1258:	ae e0       	ldi	r26, 0x0E	; 14
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f9 e0       	ldi	r31, 0x09	; 9
    1260:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__+0x1c>
    1264:	0d 89       	ldd	r16, Y+21	; 0x15
    1266:	1e 89       	ldd	r17, Y+22	; 0x16
    1268:	86 e0       	ldi	r24, 0x06	; 6
    126a:	8c 83       	std	Y+4, r24	; 0x04
    126c:	09 83       	std	Y+1, r16	; 0x01
    126e:	1a 83       	std	Y+2, r17	; 0x02
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f e7       	ldi	r25, 0x7F	; 127
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	ae 01       	movw	r20, r28
    127a:	47 5e       	subi	r20, 0xE7	; 231
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	6f 89       	ldd	r22, Y+23	; 0x17
    1280:	78 8d       	ldd	r23, Y+24	; 0x18
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 67 09 	call	0x12ce	; 0x12ce <vfprintf>
    128a:	ef 81       	ldd	r30, Y+7	; 0x07
    128c:	f8 85       	ldd	r31, Y+8	; 0x08
    128e:	e0 0f       	add	r30, r16
    1290:	f1 1f       	adc	r31, r17
    1292:	10 82       	st	Z, r1
    1294:	2e 96       	adiw	r28, 0x0e	; 14
    1296:	e4 e0       	ldi	r30, 0x04	; 4
    1298:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__epilogue_restores__+0x1c>

0000129c <sscanf>:
    129c:	ae e0       	ldi	r26, 0x0E	; 14
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e5       	ldi	r30, 0x54	; 84
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x20>
    12a8:	85 e0       	ldi	r24, 0x05	; 5
    12aa:	8c 83       	std	Y+4, r24	; 0x04
    12ac:	8b 89       	ldd	r24, Y+19	; 0x13
    12ae:	9c 89       	ldd	r25, Y+20	; 0x14
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	ae 01       	movw	r20, r28
    12b6:	49 5e       	subi	r20, 0xE9	; 233
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	6d 89       	ldd	r22, Y+21	; 0x15
    12bc:	7e 89       	ldd	r23, Y+22	; 0x16
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <vfscanf>
    12c6:	2e 96       	adiw	r28, 0x0e	; 14
    12c8:	e2 e0       	ldi	r30, 0x02	; 2
    12ca:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__epilogue_restores__+0x20>

000012ce <vfprintf>:
    12ce:	ab e0       	ldi	r26, 0x0B	; 11
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ed e6       	ldi	r30, 0x6D	; 109
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__prologue_saves__>
    12da:	6c 01       	movw	r12, r24
    12dc:	7b 01       	movw	r14, r22
    12de:	8a 01       	movw	r16, r20
    12e0:	fc 01       	movw	r30, r24
    12e2:	16 82       	std	Z+6, r1	; 0x06
    12e4:	17 82       	std	Z+7, r1	; 0x07
    12e6:	83 81       	ldd	r24, Z+3	; 0x03
    12e8:	81 ff       	sbrs	r24, 1
    12ea:	cc c1       	rjmp	.+920    	; 0x1684 <vfprintf+0x3b6>
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	3c 01       	movw	r6, r24
    12f2:	f6 01       	movw	r30, r12
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	f7 01       	movw	r30, r14
    12f8:	93 fd       	sbrc	r25, 3
    12fa:	85 91       	lpm	r24, Z+
    12fc:	93 ff       	sbrs	r25, 3
    12fe:	81 91       	ld	r24, Z+
    1300:	7f 01       	movw	r14, r30
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <vfprintf+0x3a>
    1306:	ba c1       	rjmp	.+884    	; 0x167c <vfprintf+0x3ae>
    1308:	85 32       	cpi	r24, 0x25	; 37
    130a:	39 f4       	brne	.+14     	; 0x131a <vfprintf+0x4c>
    130c:	93 fd       	sbrc	r25, 3
    130e:	85 91       	lpm	r24, Z+
    1310:	93 ff       	sbrs	r25, 3
    1312:	81 91       	ld	r24, Z+
    1314:	7f 01       	movw	r14, r30
    1316:	85 32       	cpi	r24, 0x25	; 37
    1318:	29 f4       	brne	.+10     	; 0x1324 <vfprintf+0x56>
    131a:	b6 01       	movw	r22, r12
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1322:	e7 cf       	rjmp	.-50     	; 0x12f2 <vfprintf+0x24>
    1324:	91 2c       	mov	r9, r1
    1326:	21 2c       	mov	r2, r1
    1328:	31 2c       	mov	r3, r1
    132a:	ff e1       	ldi	r31, 0x1F	; 31
    132c:	f3 15       	cp	r31, r3
    132e:	d8 f0       	brcs	.+54     	; 0x1366 <vfprintf+0x98>
    1330:	8b 32       	cpi	r24, 0x2B	; 43
    1332:	79 f0       	breq	.+30     	; 0x1352 <vfprintf+0x84>
    1334:	38 f4       	brcc	.+14     	; 0x1344 <vfprintf+0x76>
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	79 f0       	breq	.+30     	; 0x1358 <vfprintf+0x8a>
    133a:	83 32       	cpi	r24, 0x23	; 35
    133c:	a1 f4       	brne	.+40     	; 0x1366 <vfprintf+0x98>
    133e:	23 2d       	mov	r18, r3
    1340:	20 61       	ori	r18, 0x10	; 16
    1342:	1d c0       	rjmp	.+58     	; 0x137e <vfprintf+0xb0>
    1344:	8d 32       	cpi	r24, 0x2D	; 45
    1346:	61 f0       	breq	.+24     	; 0x1360 <vfprintf+0x92>
    1348:	80 33       	cpi	r24, 0x30	; 48
    134a:	69 f4       	brne	.+26     	; 0x1366 <vfprintf+0x98>
    134c:	23 2d       	mov	r18, r3
    134e:	21 60       	ori	r18, 0x01	; 1
    1350:	16 c0       	rjmp	.+44     	; 0x137e <vfprintf+0xb0>
    1352:	83 2d       	mov	r24, r3
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	38 2e       	mov	r3, r24
    1358:	e3 2d       	mov	r30, r3
    135a:	e4 60       	ori	r30, 0x04	; 4
    135c:	3e 2e       	mov	r3, r30
    135e:	2a c0       	rjmp	.+84     	; 0x13b4 <vfprintf+0xe6>
    1360:	f3 2d       	mov	r31, r3
    1362:	f8 60       	ori	r31, 0x08	; 8
    1364:	1d c0       	rjmp	.+58     	; 0x13a0 <vfprintf+0xd2>
    1366:	37 fc       	sbrc	r3, 7
    1368:	2d c0       	rjmp	.+90     	; 0x13c4 <vfprintf+0xf6>
    136a:	20 ed       	ldi	r18, 0xD0	; 208
    136c:	28 0f       	add	r18, r24
    136e:	2a 30       	cpi	r18, 0x0A	; 10
    1370:	40 f0       	brcs	.+16     	; 0x1382 <vfprintf+0xb4>
    1372:	8e 32       	cpi	r24, 0x2E	; 46
    1374:	b9 f4       	brne	.+46     	; 0x13a4 <vfprintf+0xd6>
    1376:	36 fc       	sbrc	r3, 6
    1378:	81 c1       	rjmp	.+770    	; 0x167c <vfprintf+0x3ae>
    137a:	23 2d       	mov	r18, r3
    137c:	20 64       	ori	r18, 0x40	; 64
    137e:	32 2e       	mov	r3, r18
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <vfprintf+0xe6>
    1382:	36 fe       	sbrs	r3, 6
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <vfprintf+0xc4>
    1386:	8a e0       	ldi	r24, 0x0A	; 10
    1388:	98 9e       	mul	r9, r24
    138a:	20 0d       	add	r18, r0
    138c:	11 24       	eor	r1, r1
    138e:	92 2e       	mov	r9, r18
    1390:	11 c0       	rjmp	.+34     	; 0x13b4 <vfprintf+0xe6>
    1392:	ea e0       	ldi	r30, 0x0A	; 10
    1394:	2e 9e       	mul	r2, r30
    1396:	20 0d       	add	r18, r0
    1398:	11 24       	eor	r1, r1
    139a:	22 2e       	mov	r2, r18
    139c:	f3 2d       	mov	r31, r3
    139e:	f0 62       	ori	r31, 0x20	; 32
    13a0:	3f 2e       	mov	r3, r31
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <vfprintf+0xe6>
    13a4:	8c 36       	cpi	r24, 0x6C	; 108
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <vfprintf+0xe2>
    13a8:	83 2d       	mov	r24, r3
    13aa:	80 68       	ori	r24, 0x80	; 128
    13ac:	38 2e       	mov	r3, r24
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0xe6>
    13b0:	88 36       	cpi	r24, 0x68	; 104
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <vfprintf+0xf6>
    13b4:	f7 01       	movw	r30, r14
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	7f 01       	movw	r14, r30
    13c0:	81 11       	cpse	r24, r1
    13c2:	b3 cf       	rjmp	.-154    	; 0x132a <vfprintf+0x5c>
    13c4:	98 2f       	mov	r25, r24
    13c6:	9f 7d       	andi	r25, 0xDF	; 223
    13c8:	95 54       	subi	r25, 0x45	; 69
    13ca:	93 30       	cpi	r25, 0x03	; 3
    13cc:	28 f4       	brcc	.+10     	; 0x13d8 <vfprintf+0x10a>
    13ce:	0c 5f       	subi	r16, 0xFC	; 252
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	9f e3       	ldi	r25, 0x3F	; 63
    13d4:	99 83       	std	Y+1, r25	; 0x01
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <vfprintf+0x124>
    13d8:	83 36       	cpi	r24, 0x63	; 99
    13da:	31 f0       	breq	.+12     	; 0x13e8 <vfprintf+0x11a>
    13dc:	83 37       	cpi	r24, 0x73	; 115
    13de:	71 f0       	breq	.+28     	; 0x13fc <vfprintf+0x12e>
    13e0:	83 35       	cpi	r24, 0x53	; 83
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <vfprintf+0x118>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <vfprintf+0x1ca>
    13e6:	21 c0       	rjmp	.+66     	; 0x142a <vfprintf+0x15c>
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	0e 5f       	subi	r16, 0xFE	; 254
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	88 24       	eor	r8, r8
    13f4:	83 94       	inc	r8
    13f6:	91 2c       	mov	r9, r1
    13f8:	53 01       	movw	r10, r6
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <vfprintf+0x154>
    13fc:	28 01       	movw	r4, r16
    13fe:	f2 e0       	ldi	r31, 0x02	; 2
    1400:	4f 0e       	add	r4, r31
    1402:	51 1c       	adc	r5, r1
    1404:	f8 01       	movw	r30, r16
    1406:	a0 80       	ld	r10, Z
    1408:	b1 80       	ldd	r11, Z+1	; 0x01
    140a:	36 fe       	sbrs	r3, 6
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <vfprintf+0x146>
    140e:	69 2d       	mov	r22, r9
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <vfprintf+0x14a>
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	7f ef       	ldi	r23, 0xFF	; 255
    1418:	c5 01       	movw	r24, r10
    141a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <strnlen>
    141e:	4c 01       	movw	r8, r24
    1420:	82 01       	movw	r16, r4
    1422:	f3 2d       	mov	r31, r3
    1424:	ff 77       	andi	r31, 0x7F	; 127
    1426:	3f 2e       	mov	r3, r31
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <vfprintf+0x188>
    142a:	28 01       	movw	r4, r16
    142c:	22 e0       	ldi	r18, 0x02	; 2
    142e:	42 0e       	add	r4, r18
    1430:	51 1c       	adc	r5, r1
    1432:	f8 01       	movw	r30, r16
    1434:	a0 80       	ld	r10, Z
    1436:	b1 80       	ldd	r11, Z+1	; 0x01
    1438:	36 fe       	sbrs	r3, 6
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <vfprintf+0x174>
    143c:	69 2d       	mov	r22, r9
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x178>
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f ef       	ldi	r23, 0xFF	; 255
    1446:	c5 01       	movw	r24, r10
    1448:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <strnlen_P>
    144c:	4c 01       	movw	r8, r24
    144e:	f3 2d       	mov	r31, r3
    1450:	f0 68       	ori	r31, 0x80	; 128
    1452:	3f 2e       	mov	r3, r31
    1454:	82 01       	movw	r16, r4
    1456:	33 fc       	sbrc	r3, 3
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <vfprintf+0x1c2>
    145a:	82 2d       	mov	r24, r2
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	88 16       	cp	r8, r24
    1460:	99 06       	cpc	r9, r25
    1462:	b0 f4       	brcc	.+44     	; 0x1490 <vfprintf+0x1c2>
    1464:	b6 01       	movw	r22, r12
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    146e:	2a 94       	dec	r2
    1470:	f4 cf       	rjmp	.-24     	; 0x145a <vfprintf+0x18c>
    1472:	f5 01       	movw	r30, r10
    1474:	37 fc       	sbrc	r3, 7
    1476:	85 91       	lpm	r24, Z+
    1478:	37 fe       	sbrs	r3, 7
    147a:	81 91       	ld	r24, Z+
    147c:	5f 01       	movw	r10, r30
    147e:	b6 01       	movw	r22, r12
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1486:	21 10       	cpse	r2, r1
    1488:	2a 94       	dec	r2
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	82 1a       	sub	r8, r18
    148e:	91 08       	sbc	r9, r1
    1490:	81 14       	cp	r8, r1
    1492:	91 04       	cpc	r9, r1
    1494:	71 f7       	brne	.-36     	; 0x1472 <vfprintf+0x1a4>
    1496:	e8 c0       	rjmp	.+464    	; 0x1668 <vfprintf+0x39a>
    1498:	84 36       	cpi	r24, 0x64	; 100
    149a:	11 f0       	breq	.+4      	; 0x14a0 <vfprintf+0x1d2>
    149c:	89 36       	cpi	r24, 0x69	; 105
    149e:	41 f5       	brne	.+80     	; 0x14f0 <vfprintf+0x222>
    14a0:	f8 01       	movw	r30, r16
    14a2:	37 fe       	sbrs	r3, 7
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <vfprintf+0x1e6>
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	0c 5f       	subi	r16, 0xFC	; 252
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <vfprintf+0x1f6>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	07 2e       	mov	r0, r23
    14ba:	00 0c       	add	r0, r0
    14bc:	88 0b       	sbc	r24, r24
    14be:	99 0b       	sbc	r25, r25
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	f3 2d       	mov	r31, r3
    14c6:	ff 76       	andi	r31, 0x6F	; 111
    14c8:	3f 2e       	mov	r3, r31
    14ca:	97 ff       	sbrs	r25, 7
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x212>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	f0 68       	ori	r31, 0x80	; 128
    14de:	3f 2e       	mov	r3, r31
    14e0:	2a e0       	ldi	r18, 0x0A	; 10
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	a3 01       	movw	r20, r6
    14e6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__ultoa_invert>
    14ea:	88 2e       	mov	r8, r24
    14ec:	86 18       	sub	r8, r6
    14ee:	45 c0       	rjmp	.+138    	; 0x157a <vfprintf+0x2ac>
    14f0:	85 37       	cpi	r24, 0x75	; 117
    14f2:	31 f4       	brne	.+12     	; 0x1500 <vfprintf+0x232>
    14f4:	23 2d       	mov	r18, r3
    14f6:	2f 7e       	andi	r18, 0xEF	; 239
    14f8:	b2 2e       	mov	r11, r18
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	25 c0       	rjmp	.+74     	; 0x154a <vfprintf+0x27c>
    1500:	93 2d       	mov	r25, r3
    1502:	99 7f       	andi	r25, 0xF9	; 249
    1504:	b9 2e       	mov	r11, r25
    1506:	8f 36       	cpi	r24, 0x6F	; 111
    1508:	c1 f0       	breq	.+48     	; 0x153a <vfprintf+0x26c>
    150a:	18 f4       	brcc	.+6      	; 0x1512 <vfprintf+0x244>
    150c:	88 35       	cpi	r24, 0x58	; 88
    150e:	79 f0       	breq	.+30     	; 0x152e <vfprintf+0x260>
    1510:	b5 c0       	rjmp	.+362    	; 0x167c <vfprintf+0x3ae>
    1512:	80 37       	cpi	r24, 0x70	; 112
    1514:	19 f0       	breq	.+6      	; 0x151c <vfprintf+0x24e>
    1516:	88 37       	cpi	r24, 0x78	; 120
    1518:	21 f0       	breq	.+8      	; 0x1522 <vfprintf+0x254>
    151a:	b0 c0       	rjmp	.+352    	; 0x167c <vfprintf+0x3ae>
    151c:	e9 2f       	mov	r30, r25
    151e:	e0 61       	ori	r30, 0x10	; 16
    1520:	be 2e       	mov	r11, r30
    1522:	b4 fe       	sbrs	r11, 4
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x272>
    1526:	fb 2d       	mov	r31, r11
    1528:	f4 60       	ori	r31, 0x04	; 4
    152a:	bf 2e       	mov	r11, r31
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <vfprintf+0x272>
    152e:	34 fe       	sbrs	r3, 4
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x278>
    1532:	29 2f       	mov	r18, r25
    1534:	26 60       	ori	r18, 0x06	; 6
    1536:	b2 2e       	mov	r11, r18
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x278>
    153a:	28 e0       	ldi	r18, 0x08	; 8
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	05 c0       	rjmp	.+10     	; 0x154a <vfprintf+0x27c>
    1540:	20 e1       	ldi	r18, 0x10	; 16
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x27c>
    1546:	20 e1       	ldi	r18, 0x10	; 16
    1548:	32 e0       	ldi	r19, 0x02	; 2
    154a:	f8 01       	movw	r30, r16
    154c:	b7 fe       	sbrs	r11, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x290>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x29c>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 5f       	subi	r16, 0xFE	; 254
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	a3 01       	movw	r20, r6
    156c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__ultoa_invert>
    1570:	88 2e       	mov	r8, r24
    1572:	86 18       	sub	r8, r6
    1574:	fb 2d       	mov	r31, r11
    1576:	ff 77       	andi	r31, 0x7F	; 127
    1578:	3f 2e       	mov	r3, r31
    157a:	36 fe       	sbrs	r3, 6
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <vfprintf+0x2ca>
    157e:	23 2d       	mov	r18, r3
    1580:	2e 7f       	andi	r18, 0xFE	; 254
    1582:	a2 2e       	mov	r10, r18
    1584:	89 14       	cp	r8, r9
    1586:	58 f4       	brcc	.+22     	; 0x159e <vfprintf+0x2d0>
    1588:	34 fe       	sbrs	r3, 4
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <vfprintf+0x2d4>
    158c:	32 fc       	sbrc	r3, 2
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <vfprintf+0x2d4>
    1590:	83 2d       	mov	r24, r3
    1592:	8e 7e       	andi	r24, 0xEE	; 238
    1594:	a8 2e       	mov	r10, r24
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <vfprintf+0x2d4>
    1598:	b8 2c       	mov	r11, r8
    159a:	a3 2c       	mov	r10, r3
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <vfprintf+0x2d6>
    159e:	b8 2c       	mov	r11, r8
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <vfprintf+0x2d6>
    15a2:	b9 2c       	mov	r11, r9
    15a4:	a4 fe       	sbrs	r10, 4
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <vfprintf+0x2f8>
    15a8:	fe 01       	movw	r30, r28
    15aa:	e8 0d       	add	r30, r8
    15ac:	f1 1d       	adc	r31, r1
    15ae:	80 81       	ld	r24, Z
    15b0:	80 33       	cpi	r24, 0x30	; 48
    15b2:	21 f4       	brne	.+8      	; 0x15bc <vfprintf+0x2ee>
    15b4:	9a 2d       	mov	r25, r10
    15b6:	99 7e       	andi	r25, 0xE9	; 233
    15b8:	a9 2e       	mov	r10, r25
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x300>
    15bc:	a2 fe       	sbrs	r10, 2
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x2fe>
    15c0:	b3 94       	inc	r11
    15c2:	b3 94       	inc	r11
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <vfprintf+0x300>
    15c6:	8a 2d       	mov	r24, r10
    15c8:	86 78       	andi	r24, 0x86	; 134
    15ca:	09 f0       	breq	.+2      	; 0x15ce <vfprintf+0x300>
    15cc:	b3 94       	inc	r11
    15ce:	a3 fc       	sbrc	r10, 3
    15d0:	11 c0       	rjmp	.+34     	; 0x15f4 <vfprintf+0x326>
    15d2:	a0 fe       	sbrs	r10, 0
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <vfprintf+0x314>
    15d6:	b2 14       	cp	r11, r2
    15d8:	88 f4       	brcc	.+34     	; 0x15fc <vfprintf+0x32e>
    15da:	28 0c       	add	r2, r8
    15dc:	92 2c       	mov	r9, r2
    15de:	9b 18       	sub	r9, r11
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <vfprintf+0x330>
    15e2:	b2 14       	cp	r11, r2
    15e4:	60 f4       	brcc	.+24     	; 0x15fe <vfprintf+0x330>
    15e6:	b6 01       	movw	r22, r12
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    15f0:	b3 94       	inc	r11
    15f2:	f7 cf       	rjmp	.-18     	; 0x15e2 <vfprintf+0x314>
    15f4:	b2 14       	cp	r11, r2
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <vfprintf+0x330>
    15f8:	2b 18       	sub	r2, r11
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <vfprintf+0x332>
    15fc:	98 2c       	mov	r9, r8
    15fe:	21 2c       	mov	r2, r1
    1600:	a4 fe       	sbrs	r10, 4
    1602:	10 c0       	rjmp	.+32     	; 0x1624 <vfprintf+0x356>
    1604:	b6 01       	movw	r22, r12
    1606:	80 e3       	ldi	r24, 0x30	; 48
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    160e:	a2 fe       	sbrs	r10, 2
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <vfprintf+0x372>
    1612:	a1 fc       	sbrc	r10, 1
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x34e>
    1616:	88 e7       	ldi	r24, 0x78	; 120
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x352>
    161c:	88 e5       	ldi	r24, 0x58	; 88
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	b6 01       	movw	r22, r12
    1622:	0c c0       	rjmp	.+24     	; 0x163c <vfprintf+0x36e>
    1624:	8a 2d       	mov	r24, r10
    1626:	86 78       	andi	r24, 0x86	; 134
    1628:	59 f0       	breq	.+22     	; 0x1640 <vfprintf+0x372>
    162a:	a1 fe       	sbrs	r10, 1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x364>
    162e:	8b e2       	ldi	r24, 0x2B	; 43
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <vfprintf+0x366>
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	a7 fc       	sbrc	r10, 7
    1636:	8d e2       	ldi	r24, 0x2D	; 45
    1638:	b6 01       	movw	r22, r12
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1640:	89 14       	cp	r8, r9
    1642:	38 f4       	brcc	.+14     	; 0x1652 <vfprintf+0x384>
    1644:	b6 01       	movw	r22, r12
    1646:	80 e3       	ldi	r24, 0x30	; 48
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    164e:	9a 94       	dec	r9
    1650:	f7 cf       	rjmp	.-18     	; 0x1640 <vfprintf+0x372>
    1652:	8a 94       	dec	r8
    1654:	f3 01       	movw	r30, r6
    1656:	e8 0d       	add	r30, r8
    1658:	f1 1d       	adc	r31, r1
    165a:	80 81       	ld	r24, Z
    165c:	b6 01       	movw	r22, r12
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1664:	81 10       	cpse	r8, r1
    1666:	f5 cf       	rjmp	.-22     	; 0x1652 <vfprintf+0x384>
    1668:	22 20       	and	r2, r2
    166a:	09 f4       	brne	.+2      	; 0x166e <vfprintf+0x3a0>
    166c:	42 ce       	rjmp	.-892    	; 0x12f2 <vfprintf+0x24>
    166e:	b6 01       	movw	r22, r12
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 57 0e 	call	0x1cae	; 0x1cae <fputc>
    1678:	2a 94       	dec	r2
    167a:	f6 cf       	rjmp	.-20     	; 0x1668 <vfprintf+0x39a>
    167c:	f6 01       	movw	r30, r12
    167e:	86 81       	ldd	r24, Z+6	; 0x06
    1680:	97 81       	ldd	r25, Z+7	; 0x07
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x3ba>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	2b 96       	adiw	r28, 0x0b	; 11
    168a:	e2 e1       	ldi	r30, 0x12	; 18
    168c:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__epilogue_restores__>

00001690 <putval>:
    1690:	20 fd       	sbrc	r18, 0
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <putval+0x16>
    1694:	fc 01       	movw	r30, r24
    1696:	23 fd       	sbrc	r18, 3
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <putval+0x14>
    169a:	22 ff       	sbrs	r18, 2
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <putval+0x12>
    169e:	73 83       	std	Z+3, r23	; 0x03
    16a0:	62 83       	std	Z+2, r22	; 0x02
    16a2:	51 83       	std	Z+1, r21	; 0x01
    16a4:	40 83       	st	Z, r20
    16a6:	08 95       	ret

000016a8 <mulacc>:
    16a8:	44 fd       	sbrc	r20, 4
    16aa:	17 c0       	rjmp	.+46     	; 0x16da <mulacc+0x32>
    16ac:	46 fd       	sbrc	r20, 6
    16ae:	17 c0       	rjmp	.+46     	; 0x16de <mulacc+0x36>
    16b0:	ab 01       	movw	r20, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	da 01       	movw	r26, r20
    16b6:	fb 01       	movw	r30, r22
    16b8:	aa 0f       	add	r26, r26
    16ba:	bb 1f       	adc	r27, r27
    16bc:	ee 1f       	adc	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	10 94       	com	r1
    16c2:	d1 f7       	brne	.-12     	; 0x16b8 <mulacc+0x10>
    16c4:	4a 0f       	add	r20, r26
    16c6:	5b 1f       	adc	r21, r27
    16c8:	6e 1f       	adc	r22, r30
    16ca:	7f 1f       	adc	r23, r31
    16cc:	cb 01       	movw	r24, r22
    16ce:	ba 01       	movw	r22, r20
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <mulacc+0x44>
    16da:	33 e0       	ldi	r19, 0x03	; 3
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <mulacc+0x38>
    16de:	34 e0       	ldi	r19, 0x04	; 4
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	31 50       	subi	r19, 0x01	; 1
    16ea:	d1 f7       	brne	.-12     	; 0x16e0 <mulacc+0x38>
    16ec:	62 0f       	add	r22, r18
    16ee:	71 1d       	adc	r23, r1
    16f0:	81 1d       	adc	r24, r1
    16f2:	91 1d       	adc	r25, r1
    16f4:	08 95       	ret

000016f6 <skip_spaces>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	8c 01       	movw	r16, r24
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1706:	ec 01       	movw	r28, r24
    1708:	97 fd       	sbrc	r25, 7
    170a:	08 c0       	rjmp	.+16     	; 0x171c <skip_spaces+0x26>
    170c:	0e 94 b4 08 	call	0x1168	; 0x1168 <isspace>
    1710:	89 2b       	or	r24, r25
    1712:	b1 f7       	brne	.-20     	; 0x1700 <skip_spaces+0xa>
    1714:	b8 01       	movw	r22, r16
    1716:	ce 01       	movw	r24, r28
    1718:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ungetc>
    171c:	ce 01       	movw	r24, r28
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	08 95       	ret

00001728 <conv_int>:
    1728:	8f 92       	push	r8
    172a:	9f 92       	push	r9
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	8c 01       	movw	r16, r24
    173e:	d6 2f       	mov	r29, r22
    1740:	7a 01       	movw	r14, r20
    1742:	b2 2e       	mov	r11, r18
    1744:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1748:	9c 01       	movw	r18, r24
    174a:	33 27       	eor	r19, r19
    174c:	2b 32       	cpi	r18, 0x2B	; 43
    174e:	31 05       	cpc	r19, r1
    1750:	31 f0       	breq	.+12     	; 0x175e <conv_int+0x36>
    1752:	2d 32       	cpi	r18, 0x2D	; 45
    1754:	31 05       	cpc	r19, r1
    1756:	61 f4       	brne	.+24     	; 0x1770 <conv_int+0x48>
    1758:	8b 2d       	mov	r24, r11
    175a:	80 68       	ori	r24, 0x80	; 128
    175c:	b8 2e       	mov	r11, r24
    175e:	d1 50       	subi	r29, 0x01	; 1
    1760:	11 f4       	brne	.+4      	; 0x1766 <conv_int+0x3e>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	68 c0       	rjmp	.+208    	; 0x1836 <conv_int+0x10e>
    1766:	c8 01       	movw	r24, r16
    1768:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    176c:	97 fd       	sbrc	r25, 7
    176e:	f9 cf       	rjmp	.-14     	; 0x1762 <conv_int+0x3a>
    1770:	cb 2d       	mov	r28, r11
    1772:	cd 7f       	andi	r28, 0xFD	; 253
    1774:	2b 2d       	mov	r18, r11
    1776:	20 73       	andi	r18, 0x30	; 48
    1778:	09 f5       	brne	.+66     	; 0x17bc <conv_int+0x94>
    177a:	80 33       	cpi	r24, 0x30	; 48
    177c:	f9 f4       	brne	.+62     	; 0x17bc <conv_int+0x94>
    177e:	aa 24       	eor	r10, r10
    1780:	aa 94       	dec	r10
    1782:	ad 0e       	add	r10, r29
    1784:	09 f4       	brne	.+2      	; 0x1788 <conv_int+0x60>
    1786:	43 c0       	rjmp	.+134    	; 0x180e <conv_int+0xe6>
    1788:	c8 01       	movw	r24, r16
    178a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    178e:	97 fd       	sbrc	r25, 7
    1790:	3e c0       	rjmp	.+124    	; 0x180e <conv_int+0xe6>
    1792:	9c 01       	movw	r18, r24
    1794:	2f 7d       	andi	r18, 0xDF	; 223
    1796:	33 27       	eor	r19, r19
    1798:	28 35       	cpi	r18, 0x58	; 88
    179a:	31 05       	cpc	r19, r1
    179c:	49 f4       	brne	.+18     	; 0x17b0 <conv_int+0x88>
    179e:	c2 64       	ori	r28, 0x42	; 66
    17a0:	d2 50       	subi	r29, 0x02	; 2
    17a2:	a9 f1       	breq	.+106    	; 0x180e <conv_int+0xe6>
    17a4:	c8 01       	movw	r24, r16
    17a6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    17aa:	97 ff       	sbrs	r25, 7
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <conv_int+0x94>
    17ae:	2f c0       	rjmp	.+94     	; 0x180e <conv_int+0xe6>
    17b0:	b6 fe       	sbrs	r11, 6
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <conv_int+0x90>
    17b4:	c2 60       	ori	r28, 0x02	; 2
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <conv_int+0x92>
    17b8:	c2 61       	ori	r28, 0x12	; 18
    17ba:	da 2d       	mov	r29, r10
    17bc:	81 2c       	mov	r8, r1
    17be:	91 2c       	mov	r9, r1
    17c0:	54 01       	movw	r10, r8
    17c2:	20 ed       	ldi	r18, 0xD0	; 208
    17c4:	28 0f       	add	r18, r24
    17c6:	28 30       	cpi	r18, 0x08	; 8
    17c8:	80 f0       	brcs	.+32     	; 0x17ea <conv_int+0xc2>
    17ca:	c4 ff       	sbrs	r28, 4
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <conv_int+0xae>
    17ce:	b8 01       	movw	r22, r16
    17d0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ungetc>
    17d4:	19 c0       	rjmp	.+50     	; 0x1808 <conv_int+0xe0>
    17d6:	2a 30       	cpi	r18, 0x0A	; 10
    17d8:	40 f0       	brcs	.+16     	; 0x17ea <conv_int+0xc2>
    17da:	c6 ff       	sbrs	r28, 6
    17dc:	f8 cf       	rjmp	.-16     	; 0x17ce <conv_int+0xa6>
    17de:	2f 7d       	andi	r18, 0xDF	; 223
    17e0:	3f ee       	ldi	r19, 0xEF	; 239
    17e2:	32 0f       	add	r19, r18
    17e4:	36 30       	cpi	r19, 0x06	; 6
    17e6:	98 f7       	brcc	.-26     	; 0x17ce <conv_int+0xa6>
    17e8:	27 50       	subi	r18, 0x07	; 7
    17ea:	4c 2f       	mov	r20, r28
    17ec:	c5 01       	movw	r24, r10
    17ee:	b4 01       	movw	r22, r8
    17f0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <mulacc>
    17f4:	4b 01       	movw	r8, r22
    17f6:	5c 01       	movw	r10, r24
    17f8:	c2 60       	ori	r28, 0x02	; 2
    17fa:	d1 50       	subi	r29, 0x01	; 1
    17fc:	59 f0       	breq	.+22     	; 0x1814 <conv_int+0xec>
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1804:	97 ff       	sbrs	r25, 7
    1806:	dd cf       	rjmp	.-70     	; 0x17c2 <conv_int+0x9a>
    1808:	c1 fd       	sbrc	r28, 1
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <conv_int+0xec>
    180c:	aa cf       	rjmp	.-172    	; 0x1762 <conv_int+0x3a>
    180e:	81 2c       	mov	r8, r1
    1810:	91 2c       	mov	r9, r1
    1812:	54 01       	movw	r10, r8
    1814:	c7 ff       	sbrs	r28, 7
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <conv_int+0x100>
    1818:	b0 94       	com	r11
    181a:	a0 94       	com	r10
    181c:	90 94       	com	r9
    181e:	80 94       	com	r8
    1820:	81 1c       	adc	r8, r1
    1822:	91 1c       	adc	r9, r1
    1824:	a1 1c       	adc	r10, r1
    1826:	b1 1c       	adc	r11, r1
    1828:	2c 2f       	mov	r18, r28
    182a:	b5 01       	movw	r22, r10
    182c:	a4 01       	movw	r20, r8
    182e:	c7 01       	movw	r24, r14
    1830:	0e 94 48 0b 	call	0x1690	; 0x1690 <putval>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	08 95       	ret

0000184c <conv_brk>:
    184c:	a0 e2       	ldi	r26, 0x20	; 32
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ec e2       	ldi	r30, 0x2C	; 44
    1852:	fc e0       	ldi	r31, 0x0C	; 12
    1854:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__prologue_saves__+0x6>
    1858:	5c 01       	movw	r10, r24
    185a:	96 2e       	mov	r9, r22
    185c:	7a 01       	movw	r14, r20
    185e:	f9 01       	movw	r30, r18
    1860:	8e 01       	movw	r16, r28
    1862:	0f 5f       	subi	r16, 0xFF	; 255
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	68 01       	movw	r12, r16
    1868:	80 e2       	ldi	r24, 0x20	; 32
    186a:	d8 01       	movw	r26, r16
    186c:	1d 92       	st	X+, r1
    186e:	8a 95       	dec	r24
    1870:	e9 f7       	brne	.-6      	; 0x186c <conv_brk+0x20>
    1872:	d5 01       	movw	r26, r10
    1874:	13 96       	adiw	r26, 0x03	; 3
    1876:	8c 90       	ld	r8, X
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	61 2c       	mov	r6, r1
    187e:	71 2c       	mov	r7, r1
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	83 fc       	sbrc	r8, 3
    1888:	25 91       	lpm	r18, Z+
    188a:	83 fe       	sbrs	r8, 3
    188c:	21 91       	ld	r18, Z+
    188e:	8f 01       	movw	r16, r30
    1890:	52 2e       	mov	r5, r18
    1892:	21 11       	cpse	r18, r1
    1894:	03 c0       	rjmp	.+6      	; 0x189c <conv_brk+0x50>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	92 c0       	rjmp	.+292    	; 0x19c0 <conv_brk+0x174>
    189c:	2e 35       	cpi	r18, 0x5E	; 94
    189e:	11 f4       	brne	.+4      	; 0x18a4 <conv_brk+0x58>
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	51 f1       	breq	.+84     	; 0x18f8 <conv_brk+0xac>
    18a4:	43 2f       	mov	r20, r19
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	48 17       	cp	r20, r24
    18aa:	59 07       	cpc	r21, r25
    18ac:	3c f4       	brge	.+14     	; 0x18bc <conv_brk+0x70>
    18ae:	2d 35       	cpi	r18, 0x5D	; 93
    18b0:	59 f1       	breq	.+86     	; 0x1908 <conv_brk+0xbc>
    18b2:	2d 32       	cpi	r18, 0x2D	; 45
    18b4:	19 f4       	brne	.+6      	; 0x18bc <conv_brk+0x70>
    18b6:	77 20       	and	r7, r7
    18b8:	09 f1       	breq	.+66     	; 0x18fc <conv_brk+0xb0>
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <conv_brk+0x76>
    18bc:	77 20       	and	r7, r7
    18be:	09 f4       	brne	.+2      	; 0x18c2 <conv_brk+0x76>
    18c0:	6a c0       	rjmp	.+212    	; 0x1996 <conv_brk+0x14a>
    18c2:	45 2d       	mov	r20, r5
    18c4:	46 95       	lsr	r20
    18c6:	46 95       	lsr	r20
    18c8:	46 95       	lsr	r20
    18ca:	d6 01       	movw	r26, r12
    18cc:	a4 0f       	add	r26, r20
    18ce:	b1 1d       	adc	r27, r1
    18d0:	45 2d       	mov	r20, r5
    18d2:	47 70       	andi	r20, 0x07	; 7
    18d4:	8b 01       	movw	r16, r22
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <conv_brk+0x90>
    18d8:	00 0f       	add	r16, r16
    18da:	11 1f       	adc	r17, r17
    18dc:	4a 95       	dec	r20
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <conv_brk+0x8c>
    18e0:	a8 01       	movw	r20, r16
    18e2:	5c 91       	ld	r21, X
    18e4:	45 2b       	or	r20, r21
    18e6:	4c 93       	st	X, r20
    18e8:	65 14       	cp	r6, r5
    18ea:	59 f0       	breq	.+22     	; 0x1902 <conv_brk+0xb6>
    18ec:	56 14       	cp	r5, r6
    18ee:	10 f4       	brcc	.+4      	; 0x18f4 <conv_brk+0xa8>
    18f0:	53 94       	inc	r5
    18f2:	e7 cf       	rjmp	.-50     	; 0x18c2 <conv_brk+0x76>
    18f4:	5a 94       	dec	r5
    18f6:	e5 cf       	rjmp	.-54     	; 0x18c2 <conv_brk+0x76>
    18f8:	31 e0       	ldi	r19, 0x01	; 1
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <conv_brk+0xb8>
    18fc:	77 24       	eor	r7, r7
    18fe:	73 94       	inc	r7
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <conv_brk+0xb8>
    1902:	71 2c       	mov	r7, r1
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	bf cf       	rjmp	.-130    	; 0x1886 <conv_brk+0x3a>
    1908:	77 20       	and	r7, r7
    190a:	19 f0       	breq	.+6      	; 0x1912 <conv_brk+0xc6>
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	8e 83       	std	Y+6, r24	; 0x06
    1912:	31 11       	cpse	r19, r1
    1914:	03 c0       	rjmp	.+6      	; 0x191c <conv_brk+0xd0>
    1916:	88 24       	eor	r8, r8
    1918:	83 94       	inc	r8
    191a:	17 c0       	rjmp	.+46     	; 0x194a <conv_brk+0xfe>
    191c:	f6 01       	movw	r30, r12
    191e:	9e 01       	movw	r18, r28
    1920:	2f 5d       	subi	r18, 0xDF	; 223
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	80 95       	com	r24
    1928:	81 93       	st	Z+, r24
    192a:	2e 17       	cp	r18, r30
    192c:	3f 07       	cpc	r19, r31
    192e:	d1 f7       	brne	.-12     	; 0x1924 <conv_brk+0xd8>
    1930:	f2 cf       	rjmp	.-28     	; 0x1916 <conv_brk+0xca>
    1932:	e1 14       	cp	r14, r1
    1934:	f1 04       	cpc	r15, r1
    1936:	29 f0       	breq	.+10     	; 0x1942 <conv_brk+0xf6>
    1938:	d7 01       	movw	r26, r14
    193a:	8c 93       	st	X, r24
    193c:	f7 01       	movw	r30, r14
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	7f 01       	movw	r14, r30
    1942:	9a 94       	dec	r9
    1944:	81 2c       	mov	r8, r1
    1946:	99 20       	and	r9, r9
    1948:	f9 f0       	breq	.+62     	; 0x1988 <conv_brk+0x13c>
    194a:	c5 01       	movw	r24, r10
    194c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1950:	97 fd       	sbrc	r25, 7
    1952:	18 c0       	rjmp	.+48     	; 0x1984 <conv_brk+0x138>
    1954:	fc 01       	movw	r30, r24
    1956:	ff 27       	eor	r31, r31
    1958:	23 e0       	ldi	r18, 0x03	; 3
    195a:	f5 95       	asr	r31
    195c:	e7 95       	ror	r30
    195e:	2a 95       	dec	r18
    1960:	e1 f7       	brne	.-8      	; 0x195a <conv_brk+0x10e>
    1962:	ec 0d       	add	r30, r12
    1964:	fd 1d       	adc	r31, r13
    1966:	20 81       	ld	r18, Z
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	ac 01       	movw	r20, r24
    196c:	47 70       	andi	r20, 0x07	; 7
    196e:	55 27       	eor	r21, r21
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <conv_brk+0x12a>
    1972:	35 95       	asr	r19
    1974:	27 95       	ror	r18
    1976:	4a 95       	dec	r20
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <conv_brk+0x126>
    197a:	20 fd       	sbrc	r18, 0
    197c:	da cf       	rjmp	.-76     	; 0x1932 <conv_brk+0xe6>
    197e:	b5 01       	movw	r22, r10
    1980:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ungetc>
    1984:	81 10       	cpse	r8, r1
    1986:	87 cf       	rjmp	.-242    	; 0x1896 <conv_brk+0x4a>
    1988:	e1 14       	cp	r14, r1
    198a:	f1 04       	cpc	r15, r1
    198c:	11 f0       	breq	.+4      	; 0x1992 <conv_brk+0x146>
    198e:	d7 01       	movw	r26, r14
    1990:	1c 92       	st	X, r1
    1992:	c8 01       	movw	r24, r16
    1994:	15 c0       	rjmp	.+42     	; 0x19c0 <conv_brk+0x174>
    1996:	42 2f       	mov	r20, r18
    1998:	46 95       	lsr	r20
    199a:	46 95       	lsr	r20
    199c:	46 95       	lsr	r20
    199e:	d6 01       	movw	r26, r12
    19a0:	a4 0f       	add	r26, r20
    19a2:	b1 1d       	adc	r27, r1
    19a4:	42 2f       	mov	r20, r18
    19a6:	47 70       	andi	r20, 0x07	; 7
    19a8:	8b 01       	movw	r16, r22
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <conv_brk+0x164>
    19ac:	00 0f       	add	r16, r16
    19ae:	11 1f       	adc	r17, r17
    19b0:	4a 95       	dec	r20
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <conv_brk+0x160>
    19b4:	a8 01       	movw	r20, r16
    19b6:	5c 91       	ld	r21, X
    19b8:	45 2b       	or	r20, r21
    19ba:	4c 93       	st	X, r20
    19bc:	62 2e       	mov	r6, r18
    19be:	a2 cf       	rjmp	.-188    	; 0x1904 <conv_brk+0xb8>
    19c0:	a0 96       	adiw	r28, 0x20	; 32
    19c2:	ef e0       	ldi	r30, 0x0F	; 15
    19c4:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__epilogue_restores__+0x6>

000019c8 <vfscanf>:
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ea ee       	ldi	r30, 0xEA	; 234
    19ce:	fc e0       	ldi	r31, 0x0C	; 12
    19d0:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__prologue_saves__+0x6>
    19d4:	6c 01       	movw	r12, r24
    19d6:	eb 01       	movw	r28, r22
    19d8:	5a 01       	movw	r10, r20
    19da:	fc 01       	movw	r30, r24
    19dc:	16 82       	std	Z+6, r1	; 0x06
    19de:	17 82       	std	Z+7, r1	; 0x07
    19e0:	51 2c       	mov	r5, r1
    19e2:	f6 01       	movw	r30, r12
    19e4:	e3 80       	ldd	r14, Z+3	; 0x03
    19e6:	fe 01       	movw	r30, r28
    19e8:	e3 fc       	sbrc	r14, 3
    19ea:	85 91       	lpm	r24, Z+
    19ec:	e3 fe       	sbrs	r14, 3
    19ee:	81 91       	ld	r24, Z+
    19f0:	18 2f       	mov	r17, r24
    19f2:	ef 01       	movw	r28, r30
    19f4:	88 23       	and	r24, r24
    19f6:	09 f4       	brne	.+2      	; 0x19fa <vfscanf+0x32>
    19f8:	ee c0       	rjmp	.+476    	; 0x1bd6 <vfscanf+0x20e>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 b4 08 	call	0x1168	; 0x1168 <isspace>
    1a00:	89 2b       	or	r24, r25
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <vfscanf+0x44>
    1a04:	c6 01       	movw	r24, r12
    1a06:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <skip_spaces>
    1a0a:	eb cf       	rjmp	.-42     	; 0x19e2 <vfscanf+0x1a>
    1a0c:	15 32       	cpi	r17, 0x25	; 37
    1a0e:	41 f4       	brne	.+16     	; 0x1a20 <vfscanf+0x58>
    1a10:	fe 01       	movw	r30, r28
    1a12:	e3 fc       	sbrc	r14, 3
    1a14:	15 91       	lpm	r17, Z+
    1a16:	e3 fe       	sbrs	r14, 3
    1a18:	11 91       	ld	r17, Z+
    1a1a:	ef 01       	movw	r28, r30
    1a1c:	15 32       	cpi	r17, 0x25	; 37
    1a1e:	81 f4       	brne	.+32     	; 0x1a40 <vfscanf+0x78>
    1a20:	c6 01       	movw	r24, r12
    1a22:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1a26:	97 fd       	sbrc	r25, 7
    1a28:	d4 c0       	rjmp	.+424    	; 0x1bd2 <vfscanf+0x20a>
    1a2a:	41 2f       	mov	r20, r17
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	9c 01       	movw	r18, r24
    1a30:	33 27       	eor	r19, r19
    1a32:	24 17       	cp	r18, r20
    1a34:	35 07       	cpc	r19, r21
    1a36:	a9 f2       	breq	.-86     	; 0x19e2 <vfscanf+0x1a>
    1a38:	b6 01       	movw	r22, r12
    1a3a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ungetc>
    1a3e:	cb c0       	rjmp	.+406    	; 0x1bd6 <vfscanf+0x20e>
    1a40:	1a 32       	cpi	r17, 0x2A	; 42
    1a42:	39 f4       	brne	.+14     	; 0x1a52 <vfscanf+0x8a>
    1a44:	e3 fc       	sbrc	r14, 3
    1a46:	15 91       	lpm	r17, Z+
    1a48:	e3 fe       	sbrs	r14, 3
    1a4a:	11 91       	ld	r17, Z+
    1a4c:	ef 01       	movw	r28, r30
    1a4e:	01 e0       	ldi	r16, 0x01	; 1
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <vfscanf+0x8c>
    1a52:	00 e0       	ldi	r16, 0x00	; 0
    1a54:	f1 2c       	mov	r15, r1
    1a56:	20 ed       	ldi	r18, 0xD0	; 208
    1a58:	21 0f       	add	r18, r17
    1a5a:	2a 30       	cpi	r18, 0x0A	; 10
    1a5c:	80 f4       	brcc	.+32     	; 0x1a7e <vfscanf+0xb6>
    1a5e:	02 60       	ori	r16, 0x02	; 2
    1a60:	6f 2d       	mov	r22, r15
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <mulacc>
    1a6e:	f6 2e       	mov	r15, r22
    1a70:	fe 01       	movw	r30, r28
    1a72:	e3 fc       	sbrc	r14, 3
    1a74:	15 91       	lpm	r17, Z+
    1a76:	e3 fe       	sbrs	r14, 3
    1a78:	11 91       	ld	r17, Z+
    1a7a:	ef 01       	movw	r28, r30
    1a7c:	ec cf       	rjmp	.-40     	; 0x1a56 <vfscanf+0x8e>
    1a7e:	01 ff       	sbrs	r16, 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <vfscanf+0xc0>
    1a82:	f1 10       	cpse	r15, r1
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <vfscanf+0xc4>
    1a86:	a7 c0       	rjmp	.+334    	; 0x1bd6 <vfscanf+0x20e>
    1a88:	ff 24       	eor	r15, r15
    1a8a:	fa 94       	dec	r15
    1a8c:	18 36       	cpi	r17, 0x68	; 104
    1a8e:	19 f0       	breq	.+6      	; 0x1a96 <vfscanf+0xce>
    1a90:	1c 36       	cpi	r17, 0x6C	; 108
    1a92:	51 f0       	breq	.+20     	; 0x1aa8 <vfscanf+0xe0>
    1a94:	10 c0       	rjmp	.+32     	; 0x1ab6 <vfscanf+0xee>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e3 fc       	sbrc	r14, 3
    1a9a:	15 91       	lpm	r17, Z+
    1a9c:	e3 fe       	sbrs	r14, 3
    1a9e:	11 91       	ld	r17, Z+
    1aa0:	ef 01       	movw	r28, r30
    1aa2:	18 36       	cpi	r17, 0x68	; 104
    1aa4:	41 f4       	brne	.+16     	; 0x1ab6 <vfscanf+0xee>
    1aa6:	08 60       	ori	r16, 0x08	; 8
    1aa8:	04 60       	ori	r16, 0x04	; 4
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e3 fc       	sbrc	r14, 3
    1aae:	15 91       	lpm	r17, Z+
    1ab0:	e3 fe       	sbrs	r14, 3
    1ab2:	11 91       	ld	r17, Z+
    1ab4:	ef 01       	movw	r28, r30
    1ab6:	11 23       	and	r17, r17
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <vfscanf+0xf4>
    1aba:	8d c0       	rjmp	.+282    	; 0x1bd6 <vfscanf+0x20e>
    1abc:	61 2f       	mov	r22, r17
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	80 e9       	ldi	r24, 0x90	; 144
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <strchr_P>
    1ac8:	89 2b       	or	r24, r25
    1aca:	09 f4       	brne	.+2      	; 0x1ace <vfscanf+0x106>
    1acc:	84 c0       	rjmp	.+264    	; 0x1bd6 <vfscanf+0x20e>
    1ace:	00 fd       	sbrc	r16, 0
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <vfscanf+0x118>
    1ad2:	f5 01       	movw	r30, r10
    1ad4:	80 80       	ld	r8, Z
    1ad6:	91 80       	ldd	r9, Z+1	; 0x01
    1ad8:	c5 01       	movw	r24, r10
    1ada:	02 96       	adiw	r24, 0x02	; 2
    1adc:	5c 01       	movw	r10, r24
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfscanf+0x11c>
    1ae0:	81 2c       	mov	r8, r1
    1ae2:	91 2c       	mov	r9, r1
    1ae4:	1e 36       	cpi	r17, 0x6E	; 110
    1ae6:	51 f4       	brne	.+20     	; 0x1afc <vfscanf+0x134>
    1ae8:	f6 01       	movw	r30, r12
    1aea:	46 81       	ldd	r20, Z+6	; 0x06
    1aec:	57 81       	ldd	r21, Z+7	; 0x07
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	20 2f       	mov	r18, r16
    1af4:	c4 01       	movw	r24, r8
    1af6:	0e 94 48 0b 	call	0x1690	; 0x1690 <putval>
    1afa:	73 cf       	rjmp	.-282    	; 0x19e2 <vfscanf+0x1a>
    1afc:	13 36       	cpi	r17, 0x63	; 99
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <vfscanf+0x162>
    1b00:	01 fd       	sbrc	r16, 1
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfscanf+0x140>
    1b04:	ff 24       	eor	r15, r15
    1b06:	f3 94       	inc	r15
    1b08:	c6 01       	movw	r24, r12
    1b0a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1b0e:	97 fd       	sbrc	r25, 7
    1b10:	60 c0       	rjmp	.+192    	; 0x1bd2 <vfscanf+0x20a>
    1b12:	81 14       	cp	r8, r1
    1b14:	91 04       	cpc	r9, r1
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <vfscanf+0x15a>
    1b18:	f4 01       	movw	r30, r8
    1b1a:	80 83       	st	Z, r24
    1b1c:	c4 01       	movw	r24, r8
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	4c 01       	movw	r8, r24
    1b22:	fa 94       	dec	r15
    1b24:	f1 10       	cpse	r15, r1
    1b26:	f0 cf       	rjmp	.-32     	; 0x1b08 <vfscanf+0x140>
    1b28:	50 c0       	rjmp	.+160    	; 0x1bca <vfscanf+0x202>
    1b2a:	1b 35       	cpi	r17, 0x5B	; 91
    1b2c:	59 f4       	brne	.+22     	; 0x1b44 <vfscanf+0x17c>
    1b2e:	9e 01       	movw	r18, r28
    1b30:	a4 01       	movw	r20, r8
    1b32:	6f 2d       	mov	r22, r15
    1b34:	c6 01       	movw	r24, r12
    1b36:	0e 94 26 0c 	call	0x184c	; 0x184c <conv_brk>
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	89 2b       	or	r24, r25
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfscanf+0x17a>
    1b40:	44 c0       	rjmp	.+136    	; 0x1bca <vfscanf+0x202>
    1b42:	3e c0       	rjmp	.+124    	; 0x1bc0 <vfscanf+0x1f8>
    1b44:	c6 01       	movw	r24, r12
    1b46:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <skip_spaces>
    1b4a:	97 fd       	sbrc	r25, 7
    1b4c:	42 c0       	rjmp	.+132    	; 0x1bd2 <vfscanf+0x20a>
    1b4e:	1f 36       	cpi	r17, 0x6F	; 111
    1b50:	61 f1       	breq	.+88     	; 0x1baa <vfscanf+0x1e2>
    1b52:	28 f4       	brcc	.+10     	; 0x1b5e <vfscanf+0x196>
    1b54:	14 36       	cpi	r17, 0x64	; 100
    1b56:	39 f1       	breq	.+78     	; 0x1ba6 <vfscanf+0x1de>
    1b58:	19 36       	cpi	r17, 0x69	; 105
    1b5a:	51 f1       	breq	.+84     	; 0x1bb0 <vfscanf+0x1e8>
    1b5c:	28 c0       	rjmp	.+80     	; 0x1bae <vfscanf+0x1e6>
    1b5e:	13 37       	cpi	r17, 0x73	; 115
    1b60:	71 f0       	breq	.+28     	; 0x1b7e <vfscanf+0x1b6>
    1b62:	15 37       	cpi	r17, 0x75	; 117
    1b64:	01 f1       	breq	.+64     	; 0x1ba6 <vfscanf+0x1de>
    1b66:	23 c0       	rjmp	.+70     	; 0x1bae <vfscanf+0x1e6>
    1b68:	81 14       	cp	r8, r1
    1b6a:	91 04       	cpc	r9, r1
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <vfscanf+0x1b0>
    1b6e:	f4 01       	movw	r30, r8
    1b70:	60 82       	st	Z, r6
    1b72:	c4 01       	movw	r24, r8
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	4c 01       	movw	r8, r24
    1b78:	fa 94       	dec	r15
    1b7a:	ff 20       	and	r15, r15
    1b7c:	71 f0       	breq	.+28     	; 0x1b9a <vfscanf+0x1d2>
    1b7e:	c6 01       	movw	r24, r12
    1b80:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <fgetc>
    1b84:	3c 01       	movw	r6, r24
    1b86:	97 fd       	sbrc	r25, 7
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <vfscanf+0x1d2>
    1b8a:	0e 94 b4 08 	call	0x1168	; 0x1168 <isspace>
    1b8e:	89 2b       	or	r24, r25
    1b90:	59 f3       	breq	.-42     	; 0x1b68 <vfscanf+0x1a0>
    1b92:	b6 01       	movw	r22, r12
    1b94:	c3 01       	movw	r24, r6
    1b96:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ungetc>
    1b9a:	81 14       	cp	r8, r1
    1b9c:	91 04       	cpc	r9, r1
    1b9e:	a9 f0       	breq	.+42     	; 0x1bca <vfscanf+0x202>
    1ba0:	f4 01       	movw	r30, r8
    1ba2:	10 82       	st	Z, r1
    1ba4:	12 c0       	rjmp	.+36     	; 0x1bca <vfscanf+0x202>
    1ba6:	00 62       	ori	r16, 0x20	; 32
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <vfscanf+0x1e8>
    1baa:	00 61       	ori	r16, 0x10	; 16
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <vfscanf+0x1e8>
    1bae:	00 64       	ori	r16, 0x40	; 64
    1bb0:	20 2f       	mov	r18, r16
    1bb2:	a4 01       	movw	r20, r8
    1bb4:	6f 2d       	mov	r22, r15
    1bb6:	c6 01       	movw	r24, r12
    1bb8:	0e 94 94 0b 	call	0x1728	; 0x1728 <conv_int>
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <vfscanf+0x202>
    1bc0:	f6 01       	movw	r30, r12
    1bc2:	83 81       	ldd	r24, Z+3	; 0x03
    1bc4:	80 73       	andi	r24, 0x30	; 48
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <vfscanf+0x20a>
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <vfscanf+0x20e>
    1bca:	00 fd       	sbrc	r16, 0
    1bcc:	0a cf       	rjmp	.-492    	; 0x19e2 <vfscanf+0x1a>
    1bce:	53 94       	inc	r5
    1bd0:	08 cf       	rjmp	.-496    	; 0x19e2 <vfscanf+0x1a>
    1bd2:	55 20       	and	r5, r5
    1bd4:	19 f0       	breq	.+6      	; 0x1bdc <vfscanf+0x214>
    1bd6:	85 2d       	mov	r24, r5
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <vfscanf+0x218>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	9f ef       	ldi	r25, 0xFF	; 255
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	ef e0       	ldi	r30, 0x0F	; 15
    1be6:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__epilogue_restores__+0x6>

00001bea <__ctype_isfalse>:
    1bea:	99 27       	eor	r25, r25
    1bec:	88 27       	eor	r24, r24

00001bee <__ctype_istrue>:
    1bee:	08 95       	ret

00001bf0 <strchr_P>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	05 90       	lpm	r0, Z+
    1bf4:	06 16       	cp	r0, r22
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <strchr_P+0x10>
    1bf8:	00 20       	and	r0, r0
    1bfa:	d9 f7       	brne	.-10     	; 0x1bf2 <strchr_P+0x2>
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	08 95       	ret
    1c00:	31 97       	sbiw	r30, 0x01	; 1
    1c02:	cf 01       	movw	r24, r30
    1c04:	08 95       	ret

00001c06 <strnlen_P>:
    1c06:	fc 01       	movw	r30, r24
    1c08:	05 90       	lpm	r0, Z+
    1c0a:	61 50       	subi	r22, 0x01	; 1
    1c0c:	70 40       	sbci	r23, 0x00	; 0
    1c0e:	01 10       	cpse	r0, r1
    1c10:	d8 f7       	brcc	.-10     	; 0x1c08 <strnlen_P+0x2>
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	8e 0f       	add	r24, r30
    1c18:	9f 1f       	adc	r25, r31
    1c1a:	08 95       	ret

00001c1c <strnlen>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	61 50       	subi	r22, 0x01	; 1
    1c20:	70 40       	sbci	r23, 0x00	; 0
    1c22:	01 90       	ld	r0, Z+
    1c24:	01 10       	cpse	r0, r1
    1c26:	d8 f7       	brcc	.-10     	; 0x1c1e <strnlen+0x2>
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	8e 0f       	add	r24, r30
    1c2e:	9f 1f       	adc	r25, r31
    1c30:	08 95       	ret

00001c32 <fgetc>:
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ec 01       	movw	r28, r24
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	20 ff       	sbrs	r18, 0
    1c3c:	33 c0       	rjmp	.+102    	; 0x1ca4 <fgetc+0x72>
    1c3e:	26 ff       	sbrs	r18, 6
    1c40:	0a c0       	rjmp	.+20     	; 0x1c56 <fgetc+0x24>
    1c42:	2f 7b       	andi	r18, 0xBF	; 191
    1c44:	2b 83       	std	Y+3, r18	; 0x03
    1c46:	8e 81       	ldd	r24, Y+6	; 0x06
    1c48:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	8e 83       	std	Y+6, r24	; 0x06
    1c4e:	9f 83       	std	Y+7, r25	; 0x07
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	29 c0       	rjmp	.+82     	; 0x1ca8 <fgetc+0x76>
    1c56:	22 ff       	sbrs	r18, 2
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <fgetc+0x46>
    1c5a:	e8 81       	ld	r30, Y
    1c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5e:	80 81       	ld	r24, Z
    1c60:	08 2e       	mov	r0, r24
    1c62:	00 0c       	add	r0, r0
    1c64:	99 0b       	sbc	r25, r25
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	19 f4       	brne	.+6      	; 0x1c70 <fgetc+0x3e>
    1c6a:	20 62       	ori	r18, 0x20	; 32
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	1a c0       	rjmp	.+52     	; 0x1ca4 <fgetc+0x72>
    1c70:	31 96       	adiw	r30, 0x01	; 1
    1c72:	e8 83       	st	Y, r30
    1c74:	f9 83       	std	Y+1, r31	; 0x01
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <fgetc+0x62>
    1c78:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c7a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c7c:	09 95       	icall
    1c7e:	97 ff       	sbrs	r25, 7
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <fgetc+0x62>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <fgetc+0x5a>
    1c88:	80 e2       	ldi	r24, 0x20	; 32
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <fgetc+0x5c>
    1c8c:	80 e1       	ldi	r24, 0x10	; 16
    1c8e:	82 2b       	or	r24, r18
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <fgetc+0x72>
    1c94:	2e 81       	ldd	r18, Y+6	; 0x06
    1c96:	3f 81       	ldd	r19, Y+7	; 0x07
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	2e 83       	std	Y+6, r18	; 0x06
    1c9e:	3f 83       	std	Y+7, r19	; 0x07
    1ca0:	99 27       	eor	r25, r25
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <fgetc+0x76>
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <fputc>:
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	fb 01       	movw	r30, r22
    1cb8:	23 81       	ldd	r18, Z+3	; 0x03
    1cba:	21 fd       	sbrc	r18, 1
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <fputc+0x16>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	9f ef       	ldi	r25, 0xFF	; 255
    1cc2:	2c c0       	rjmp	.+88     	; 0x1d1c <fputc+0x6e>
    1cc4:	22 ff       	sbrs	r18, 2
    1cc6:	16 c0       	rjmp	.+44     	; 0x1cf4 <fputc+0x46>
    1cc8:	46 81       	ldd	r20, Z+6	; 0x06
    1cca:	57 81       	ldd	r21, Z+7	; 0x07
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	35 81       	ldd	r19, Z+5	; 0x05
    1cd0:	42 17       	cp	r20, r18
    1cd2:	53 07       	cpc	r21, r19
    1cd4:	44 f4       	brge	.+16     	; 0x1ce6 <fputc+0x38>
    1cd6:	a0 81       	ld	r26, Z
    1cd8:	b1 81       	ldd	r27, Z+1	; 0x01
    1cda:	9d 01       	movw	r18, r26
    1cdc:	2f 5f       	subi	r18, 0xFF	; 255
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	20 83       	st	Z, r18
    1ce2:	31 83       	std	Z+1, r19	; 0x01
    1ce4:	8c 93       	st	X, r24
    1ce6:	26 81       	ldd	r18, Z+6	; 0x06
    1ce8:	37 81       	ldd	r19, Z+7	; 0x07
    1cea:	2f 5f       	subi	r18, 0xFF	; 255
    1cec:	3f 4f       	sbci	r19, 0xFF	; 255
    1cee:	26 83       	std	Z+6, r18	; 0x06
    1cf0:	37 83       	std	Z+7, r19	; 0x07
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <fputc+0x6e>
    1cf4:	8b 01       	movw	r16, r22
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	00 84       	ldd	r0, Z+8	; 0x08
    1cfc:	f1 85       	ldd	r31, Z+9	; 0x09
    1cfe:	e0 2d       	mov	r30, r0
    1d00:	09 95       	icall
    1d02:	89 2b       	or	r24, r25
    1d04:	e1 f6       	brne	.-72     	; 0x1cbe <fputc+0x10>
    1d06:	d8 01       	movw	r26, r16
    1d08:	16 96       	adiw	r26, 0x06	; 6
    1d0a:	8d 91       	ld	r24, X+
    1d0c:	9c 91       	ld	r25, X
    1d0e:	17 97       	sbiw	r26, 0x07	; 7
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	16 96       	adiw	r26, 0x06	; 6
    1d14:	8d 93       	st	X+, r24
    1d16:	9c 93       	st	X, r25
    1d18:	17 97       	sbiw	r26, 0x07	; 7
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <ungetc>:
    1d26:	fb 01       	movw	r30, r22
    1d28:	23 81       	ldd	r18, Z+3	; 0x03
    1d2a:	20 ff       	sbrs	r18, 0
    1d2c:	12 c0       	rjmp	.+36     	; 0x1d52 <ungetc+0x2c>
    1d2e:	26 fd       	sbrc	r18, 6
    1d30:	10 c0       	rjmp	.+32     	; 0x1d52 <ungetc+0x2c>
    1d32:	8f 3f       	cpi	r24, 0xFF	; 255
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	93 07       	cpc	r25, r19
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <ungetc+0x2c>
    1d3a:	82 83       	std	Z+2, r24	; 0x02
    1d3c:	2f 7d       	andi	r18, 0xDF	; 223
    1d3e:	20 64       	ori	r18, 0x40	; 64
    1d40:	23 83       	std	Z+3, r18	; 0x03
    1d42:	26 81       	ldd	r18, Z+6	; 0x06
    1d44:	37 81       	ldd	r19, Z+7	; 0x07
    1d46:	21 50       	subi	r18, 0x01	; 1
    1d48:	31 09       	sbc	r19, r1
    1d4a:	26 83       	std	Z+6, r18	; 0x06
    1d4c:	37 83       	std	Z+7, r19	; 0x07
    1d4e:	99 27       	eor	r25, r25
    1d50:	08 95       	ret
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	08 95       	ret

00001d58 <__ultoa_invert>:
    1d58:	fa 01       	movw	r30, r20
    1d5a:	aa 27       	eor	r26, r26
    1d5c:	28 30       	cpi	r18, 0x08	; 8
    1d5e:	51 f1       	breq	.+84     	; 0x1db4 <__ultoa_invert+0x5c>
    1d60:	20 31       	cpi	r18, 0x10	; 16
    1d62:	81 f1       	breq	.+96     	; 0x1dc4 <__ultoa_invert+0x6c>
    1d64:	e8 94       	clt
    1d66:	6f 93       	push	r22
    1d68:	6e 7f       	andi	r22, 0xFE	; 254
    1d6a:	6e 5f       	subi	r22, 0xFE	; 254
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	af 4f       	sbci	r26, 0xFF	; 255
    1d74:	b1 e0       	ldi	r27, 0x01	; 1
    1d76:	3e d0       	rcall	.+124    	; 0x1df4 <__ultoa_invert+0x9c>
    1d78:	b4 e0       	ldi	r27, 0x04	; 4
    1d7a:	3c d0       	rcall	.+120    	; 0x1df4 <__ultoa_invert+0x9c>
    1d7c:	67 0f       	add	r22, r23
    1d7e:	78 1f       	adc	r23, r24
    1d80:	89 1f       	adc	r24, r25
    1d82:	9a 1f       	adc	r25, r26
    1d84:	a1 1d       	adc	r26, r1
    1d86:	68 0f       	add	r22, r24
    1d88:	79 1f       	adc	r23, r25
    1d8a:	8a 1f       	adc	r24, r26
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	a1 1d       	adc	r26, r1
    1d90:	6a 0f       	add	r22, r26
    1d92:	71 1d       	adc	r23, r1
    1d94:	81 1d       	adc	r24, r1
    1d96:	91 1d       	adc	r25, r1
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	20 d0       	rcall	.+64     	; 0x1ddc <__ultoa_invert+0x84>
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <__ultoa_invert+0x48>
    1d9e:	68 94       	set
    1da0:	3f 91       	pop	r19
    1da2:	2a e0       	ldi	r18, 0x0A	; 10
    1da4:	26 9f       	mul	r18, r22
    1da6:	11 24       	eor	r1, r1
    1da8:	30 19       	sub	r19, r0
    1daa:	30 5d       	subi	r19, 0xD0	; 208
    1dac:	31 93       	st	Z+, r19
    1dae:	de f6       	brtc	.-74     	; 0x1d66 <__ultoa_invert+0xe>
    1db0:	cf 01       	movw	r24, r30
    1db2:	08 95       	ret
    1db4:	46 2f       	mov	r20, r22
    1db6:	47 70       	andi	r20, 0x07	; 7
    1db8:	40 5d       	subi	r20, 0xD0	; 208
    1dba:	41 93       	st	Z+, r20
    1dbc:	b3 e0       	ldi	r27, 0x03	; 3
    1dbe:	0f d0       	rcall	.+30     	; 0x1dde <__ultoa_invert+0x86>
    1dc0:	c9 f7       	brne	.-14     	; 0x1db4 <__ultoa_invert+0x5c>
    1dc2:	f6 cf       	rjmp	.-20     	; 0x1db0 <__ultoa_invert+0x58>
    1dc4:	46 2f       	mov	r20, r22
    1dc6:	4f 70       	andi	r20, 0x0F	; 15
    1dc8:	40 5d       	subi	r20, 0xD0	; 208
    1dca:	4a 33       	cpi	r20, 0x3A	; 58
    1dcc:	18 f0       	brcs	.+6      	; 0x1dd4 <__ultoa_invert+0x7c>
    1dce:	49 5d       	subi	r20, 0xD9	; 217
    1dd0:	31 fd       	sbrc	r19, 1
    1dd2:	40 52       	subi	r20, 0x20	; 32
    1dd4:	41 93       	st	Z+, r20
    1dd6:	02 d0       	rcall	.+4      	; 0x1ddc <__ultoa_invert+0x84>
    1dd8:	a9 f7       	brne	.-22     	; 0x1dc4 <__ultoa_invert+0x6c>
    1dda:	ea cf       	rjmp	.-44     	; 0x1db0 <__ultoa_invert+0x58>
    1ddc:	b4 e0       	ldi	r27, 0x04	; 4
    1dde:	a6 95       	lsr	r26
    1de0:	97 95       	ror	r25
    1de2:	87 95       	ror	r24
    1de4:	77 95       	ror	r23
    1de6:	67 95       	ror	r22
    1de8:	ba 95       	dec	r27
    1dea:	c9 f7       	brne	.-14     	; 0x1dde <__ultoa_invert+0x86>
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	61 05       	cpc	r22, r1
    1df0:	71 05       	cpc	r23, r1
    1df2:	08 95       	ret
    1df4:	9b 01       	movw	r18, r22
    1df6:	ac 01       	movw	r20, r24
    1df8:	0a 2e       	mov	r0, r26
    1dfa:	06 94       	lsr	r0
    1dfc:	57 95       	ror	r21
    1dfe:	47 95       	ror	r20
    1e00:	37 95       	ror	r19
    1e02:	27 95       	ror	r18
    1e04:	ba 95       	dec	r27
    1e06:	c9 f7       	brne	.-14     	; 0x1dfa <__ultoa_invert+0xa2>
    1e08:	62 0f       	add	r22, r18
    1e0a:	73 1f       	adc	r23, r19
    1e0c:	84 1f       	adc	r24, r20
    1e0e:	95 1f       	adc	r25, r21
    1e10:	a0 1d       	adc	r26, r0
    1e12:	08 95       	ret

00001e14 <__mulsi3>:
    1e14:	db 01       	movw	r26, r22
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	0e 94 84 07 	call	0xf08	; 0xf08 <__muluhisi3>
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	a2 9f       	mul	r26, r18
    1e24:	80 0d       	add	r24, r0
    1e26:	91 1d       	adc	r25, r1
    1e28:	a3 9f       	mul	r26, r19
    1e2a:	90 0d       	add	r25, r0
    1e2c:	b2 9f       	mul	r27, r18
    1e2e:	90 0d       	add	r25, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	08 95       	ret

00001e34 <__udivmodsi4>:
    1e34:	a1 e2       	ldi	r26, 0x21	; 33
    1e36:	1a 2e       	mov	r1, r26
    1e38:	aa 1b       	sub	r26, r26
    1e3a:	bb 1b       	sub	r27, r27
    1e3c:	fd 01       	movw	r30, r26
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <__udivmodsi4_ep>

00001e40 <__udivmodsi4_loop>:
    1e40:	aa 1f       	adc	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	ee 1f       	adc	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	a2 17       	cp	r26, r18
    1e4a:	b3 07       	cpc	r27, r19
    1e4c:	e4 07       	cpc	r30, r20
    1e4e:	f5 07       	cpc	r31, r21
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__udivmodsi4_ep>
    1e52:	a2 1b       	sub	r26, r18
    1e54:	b3 0b       	sbc	r27, r19
    1e56:	e4 0b       	sbc	r30, r20
    1e58:	f5 0b       	sbc	r31, r21

00001e5a <__udivmodsi4_ep>:
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	77 1f       	adc	r23, r23
    1e5e:	88 1f       	adc	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	1a 94       	dec	r1
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <__udivmodsi4_loop>
    1e66:	60 95       	com	r22
    1e68:	70 95       	com	r23
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	bd 01       	movw	r22, r26
    1e74:	cf 01       	movw	r24, r30
    1e76:	08 95       	ret

00001e78 <__prologue_saves__>:
    1e78:	2f 92       	push	r2
    1e7a:	3f 92       	push	r3
    1e7c:	4f 92       	push	r4
    1e7e:	5f 92       	push	r5
    1e80:	6f 92       	push	r6
    1e82:	7f 92       	push	r7
    1e84:	8f 92       	push	r8
    1e86:	9f 92       	push	r9
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	ca 1b       	sub	r28, r26
    1ea2:	db 0b       	sbc	r29, r27
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	09 94       	ijmp

00001eaa <__epilogue_restores__>:
    1eaa:	2a 88       	ldd	r2, Y+18	; 0x12
    1eac:	39 88       	ldd	r3, Y+17	; 0x11
    1eae:	48 88       	ldd	r4, Y+16	; 0x10
    1eb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ebc:	b9 84       	ldd	r11, Y+9	; 0x09
    1ebe:	c8 84       	ldd	r12, Y+8	; 0x08
    1ec0:	df 80       	ldd	r13, Y+7	; 0x07
    1ec2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ec4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ec6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ec8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eca:	aa 81       	ldd	r26, Y+2	; 0x02
    1ecc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ece:	ce 0f       	add	r28, r30
    1ed0:	d1 1d       	adc	r29, r1
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	ed 01       	movw	r28, r26
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
