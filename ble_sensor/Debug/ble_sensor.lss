
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00803000  000024d5  00002589  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002380  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000155  00006380  00002380  00002434  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000003e7  0080303a  0080303a  000025c3  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000025c3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000540  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007200  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036dc  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002adb  00000000  00000000  0000d47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ca0  00000000  00000000  0000ff58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000278b  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000275b  00000000  00000000  00013383  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000440  00000000  00000000  00015ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_17>
      48:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_31>
      80:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_32>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	10 e3       	ldi	r17, 0x30	; 48
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e3       	ldi	r27, 0x30	; 48
      a2:	e5 ed       	ldi	r30, 0xD5	; 213
      a4:	f4 e2       	ldi	r31, 0x24	; 36
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 33       	cpi	r26, 0x3A	; 58
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	24 e3       	ldi	r18, 0x34	; 52
      b4:	aa e3       	ldi	r26, 0x3A	; 58
      b6:	b0 e3       	ldi	r27, 0x30	; 48
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 32       	cpi	r26, 0x21	; 33
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <main>
      c6:	0c 94 be 11 	jmp	0x237c	; 0x237c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      ce:	0e 94 c2 05 	call	0xb84	; 0xb84 <system_init>
      d2:	08 95       	ret

000000d4 <rn4870_get_response>:
}

static uint8_t* rn4870_get_response(void) 
{
	return ble_rx_buff;
}
      d4:	86 e8       	ldi	r24, 0x86	; 134
      d6:	92 e3       	ldi	r25, 0x32	; 50
      d8:	08 95       	ret

000000da <rn4870_reboot>:



static void rn4870_reboot(void)
{
	ble_wptr = 0;
      da:	10 92 3a 30 	sts	0x303A, r1	; 0x80303a <__data_end>
      de:	10 92 3b 30 	sts	0x303B, r1	; 0x80303b <__data_end+0x1>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      e2:	8d b1       	in	r24, 0x0d	; 13
      e4:	87 7f       	andi	r24, 0xF7	; 247
      e6:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e8:	8d e8       	ldi	r24, 0x8D	; 141
      ea:	90 e2       	ldi	r25, 0x20	; 32
      ec:	01 97       	sbiw	r24, 0x01	; 1
      ee:	f1 f7       	brne	.-4      	; 0xec <rn4870_reboot+0x12>
      f0:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
      f2:	8d b1       	in	r24, 0x0d	; 13
      f4:	88 60       	ori	r24, 0x08	; 8
      f6:	8d b9       	out	0x0d, r24	; 13
      f8:	9f e3       	ldi	r25, 0x3F	; 63
      fa:	2d e0       	ldi	r18, 0x0D	; 13
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	91 50       	subi	r25, 0x01	; 1
     100:	20 40       	sbci	r18, 0x00	; 0
     102:	80 40       	sbci	r24, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <rn4870_reboot+0x24>
     106:	00 c0       	rjmp	.+0      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     108:	00 00       	nop
     10a:	08 95       	ret

0000010c <rn4870_send_command>:
	_delay_ms(BLE_STARTUP_TIME);
}


static bool rn4870_send_command(const uint8_t* cmd)
{
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	7c 01       	movw	r14, r24
	uint8_t id = 0;
	
	ble_wptr = 0;
     118:	10 92 3a 30 	sts	0x303A, r1	; 0x80303a <__data_end>
     11c:	10 92 3b 30 	sts	0x303B, r1	; 0x80303b <__data_end+0x1>
	memset(ble_rx_buff, 0, BLE_RX_BUFF_SIZE);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	e6 e8       	ldi	r30, 0x86	; 134
     126:	f2 e3       	ldi	r31, 0x32	; 50
     128:	df 01       	movw	r26, r30
     12a:	9c 01       	movw	r18, r24
     12c:	1d 92       	st	X+, r1
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	30 40       	sbci	r19, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <rn4870_send_command+0x20>
}


static bool rn4870_send_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     134:	10 e0       	ldi	r17, 0x00	; 0
	
	ble_wptr = 0;
	memset(ble_rx_buff, 0, BLE_RX_BUFF_SIZE);
	
	while(cmd[id] != NULL)
     136:	08 c0       	rjmp	.+16     	; 0x148 <rn4870_send_command+0x3c>
	{
		if(rx487x_is_tx_ready())
     138:	0e 94 3e 0a 	call	0x147c	; 0x147c <rx487x_is_tx_ready>
     13c:	88 23       	and	r24, r24
     13e:	21 f0       	breq	.+8      	; 0x148 <rn4870_send_command+0x3c>
		{
			rx487x_write(cmd[id]);
     140:	88 81       	ld	r24, Y
     142:	0e 94 45 0a 	call	0x148a	; 0x148a <rx487x_write>
			id++;
     146:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t id = 0;
	
	ble_wptr = 0;
	memset(ble_rx_buff, 0, BLE_RX_BUFF_SIZE);
	
	while(cmd[id] != NULL)
     148:	e7 01       	movw	r28, r14
     14a:	c1 0f       	add	r28, r17
     14c:	d1 1d       	adc	r29, r1
     14e:	88 81       	ld	r24, Y
     150:	81 11       	cpse	r24, r1
     152:	f2 cf       	rjmp	.-28     	; 0x138 <rn4870_send_command+0x2c>
     154:	3f e3       	ldi	r19, 0x3F	; 63
     156:	8d e0       	ldi	r24, 0x0D	; 13
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	31 50       	subi	r19, 0x01	; 1
     15c:	80 40       	sbci	r24, 0x00	; 0
     15e:	90 40       	sbci	r25, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <rn4870_send_command+0x4e>
     162:	00 c0       	rjmp	.+0      	; 0x164 <rn4870_send_command+0x58>
     164:	00 00       	nop
		}
	}

	_delay_ms(BLE_DELAY_BETWEEN_COMMANDS);
		
	if(strstr(rn4870_get_response(), BLE_RESPONSE_ERR) != NULL)
     166:	0e 94 6a 00 	call	0xd4	; 0xd4 <rn4870_get_response>
     16a:	c8 2f       	mov	r28, r24
     16c:	d9 2f       	mov	r29, r25
     16e:	60 e8       	ldi	r22, 0x80	; 128
     170:	73 e6       	ldi	r23, 0x63	; 99
     172:	0e 94 75 0e 	call	0x1cea	; 0x1cea <strstr>
     176:	89 2b       	or	r24, r25
     178:	81 f0       	breq	.+32     	; 0x19a <rn4870_send_command+0x8e>
	{
		printf("\n\r%s : %s\r\n", cmd, rn4870_get_response());
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	ff 92       	push	r15
     180:	ef 92       	push	r14
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	93 e6       	ldi	r25, 0x63	; 99
     186:	9f 93       	push	r25
     188:	8f 93       	push	r24
     18a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
	}

}
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	ff 90       	pop	r15
     1a2:	ef 90       	pop	r14
     1a4:	08 95       	ret

000001a6 <rn4870_characteristic_get_data>:
	rn4870.send_command(ble_cmd_buff);
}

static int16_t rn4870_characteristic_get_data(const uint8_t* characteristic_handle) 
{
	sprintf(ble_cmd_buff, "SHR,%s\r\n", characteristic_handle);
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	80 e9       	ldi	r24, 0x90	; 144
     1ac:	93 e6       	ldi	r25, 0x63	; 99
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	86 e8       	ldi	r24, 0x86	; 134
     1b4:	93 e3       	ldi	r25, 0x33	; 51
     1b6:	9f 93       	push	r25
     1b8:	8f 93       	push	r24
     1ba:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <sprintf>
	rn4870.send_command(ble_cmd_buff);
     1be:	86 e8       	ldi	r24, 0x86	; 134
     1c0:	93 e3       	ldi	r25, 0x33	; 51
     1c2:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	return strtol(ble_rx_buff, NULL, 16);
     1c6:	40 e1       	ldi	r20, 0x10	; 16
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	86 e8       	ldi	r24, 0x86	; 134
     1d0:	92 e3       	ldi	r25, 0x32	; 50
     1d2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strtol>
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0

}
     1e2:	cb 01       	movw	r24, r22
     1e4:	08 95       	ret

000001e6 <rn4870_characteristic_send_data>:
	printf("\n\rActive services:\r\n%s", rn4870.get_response());

}

static void rn4870_characteristic_send_data(const uint8_t* characteristic_handle, const int16_t value) 
{
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
	sprintf(ble_cmd_buff, "SHW,%s,%X\r\n", characteristic_handle, value);
     1ea:	7f 93       	push	r23
     1ec:	6f 93       	push	r22
     1ee:	9f 93       	push	r25
     1f0:	8f 93       	push	r24
     1f2:	89 e9       	ldi	r24, 0x99	; 153
     1f4:	93 e6       	ldi	r25, 0x63	; 99
     1f6:	9f 93       	push	r25
     1f8:	8f 93       	push	r24
     1fa:	c6 e8       	ldi	r28, 0x86	; 134
     1fc:	d3 e3       	ldi	r29, 0x33	; 51
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <sprintf>
	printf("%s\r\n", ble_cmd_buff);
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	8b e8       	ldi	r24, 0x8B	; 139
     20c:	93 e6       	ldi	r25, 0x63	; 99
     20e:	9f 93       	push	r25
     210:	8f 93       	push	r24
     212:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
	rn4870.send_command(ble_cmd_buff);
     216:	ce 01       	movw	r24, r28
     218:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
}
     21c:	8d b7       	in	r24, 0x3d	; 61
     21e:	9e b7       	in	r25, 0x3e	; 62
     220:	0c 96       	adiw	r24, 0x0c	; 12
     222:	8d bf       	out	0x3d, r24	; 61
     224:	9e bf       	out	0x3e, r25	; 62
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <rn4870_isr>:
	return strtol(ble_rx_buff, NULL, 16);

}

static void rn4870_isr(void) 
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
	ble_rx_buff[ble_wptr] = rx487x_get_data();
     230:	c0 91 3a 30 	lds	r28, 0x303A	; 0x80303a <__data_end>
     234:	d0 91 3b 30 	lds	r29, 0x303B	; 0x80303b <__data_end+0x1>
     238:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <rx487x_get_data>
     23c:	ca 57       	subi	r28, 0x7A	; 122
     23e:	dd 4c       	sbci	r29, 0xCD	; 205
     240:	88 83       	st	Y, r24
	ble_wptr = (ble_wptr + 1) & BLE_RX_BUFF_MASK;	
     242:	80 91 3a 30 	lds	r24, 0x303A	; 0x80303a <__data_end>
     246:	90 91 3b 30 	lds	r25, 0x303B	; 0x80303b <__data_end+0x1>
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	99 27       	eor	r25, r25
     24e:	80 93 3a 30 	sts	0x303A, r24	; 0x80303a <__data_end>
     252:	90 93 3b 30 	sts	0x303B, r25	; 0x80303b <__data_end+0x1>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <rn4870_init>:
static void rn4870_init(void)
{
	//printf("\e[1;1H\e[2J"); // clear console
	
	// set interrupt callback
	rx487x_set_ISR_cb(rn4870.usart_interrupt_routine, RX_CB);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	86 e1       	ldi	r24, 0x16	; 22
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 dd 09 	call	0x13ba	; 0x13ba <rx487x_set_ISR_cb>
	
	rn4870.reboot(); // starts ble
     266:	0e 94 6d 00 	call	0xda	; 0xda <rn4870_reboot>
	
	rn4870.send_command(BLE_CMD_ENTER_CMD_MODE);
     26a:	85 ea       	ldi	r24, 0xA5	; 165
     26c:	93 e6       	ldi	r25, 0x63	; 99
     26e:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	rn4870.send_command(BLE_CMD_FACTORY_RESET); 
     272:	89 ea       	ldi	r24, 0xA9	; 169
     274:	93 e6       	ldi	r25, 0x63	; 99
     276:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	// factory reset reboots ble
	rn4870.send_command(BLE_CMD_ENTER_CMD_MODE);
     27a:	85 ea       	ldi	r24, 0xA5	; 165
     27c:	93 e6       	ldi	r25, 0x63	; 99
     27e:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	// set device name
	rn4870.send_command(BLE_CMD_FN_SET_BT_NAME);
     282:	80 eb       	ldi	r24, 0xB0	; 176
     284:	93 e6       	ldi	r25, 0x63	; 99
     286:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	rn4870.send_command(BLE_CMD_FN_SET_DEV_NAME);
     28a:	8c eb       	ldi	r24, 0xBC	; 188
     28c:	93 e6       	ldi	r25, 0x63	; 99
     28e:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	// register characteristics
	rn4870.send_command(BLE_CMD_FN_REGISTER_SERVICE_TEMP);
     292:	88 ec       	ldi	r24, 0xC8	; 200
     294:	93 e6       	ldi	r25, 0x63	; 99
     296:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	rn4870.send_command(BLE_CMD_FN_REGISTER_CHARACTERISTIC_TEMP_READ);	
     29a:	8e ee       	ldi	r24, 0xEE	; 238
     29c:	93 e6       	ldi	r25, 0x63	; 99
     29e:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	rn4870.send_command(BLE_CMD_FN_REGISTER_CHARACTERISTIC_HUMIDITY_READ);	
     2a2:	8a e1       	ldi	r24, 0x1A	; 26
     2a4:	94 e6       	ldi	r25, 0x64	; 100
     2a6:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	//rn4870.send_command(BLE_CMD_FN_REGISTER_SERVICE_HUM);
	
	
	// reboot to update the characteristics
	rn4870.reboot();
     2aa:	0e 94 6d 00 	call	0xda	; 0xda <rn4870_reboot>
	
	rn4870.send_command(BLE_CMD_ENTER_CMD_MODE);
     2ae:	85 ea       	ldi	r24, 0xA5	; 165
     2b0:	93 e6       	ldi	r25, 0x63	; 99
     2b2:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	rn4870.send_command(BLE_CMD_LIST_ACTIVE_SERVICES);
     2b6:	86 e4       	ldi	r24, 0x46	; 70
     2b8:	94 e6       	ldi	r25, 0x64	; 100
     2ba:	0e 94 86 00 	call	0x10c	; 0x10c <rn4870_send_command>
	
	

	printf("RN4870 Initialized in CMD mode\n\r");
     2be:	8b e4       	ldi	r24, 0x4B	; 75
     2c0:	94 e6       	ldi	r25, 0x64	; 100
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
	printf("\n\rActive services:\r\n%s", rn4870.get_response());
     2ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <rn4870_get_response>
     2ce:	9f 93       	push	r25
     2d0:	8f 93       	push	r24
     2d2:	8c e6       	ldi	r24, 0x6C	; 108
     2d4:	94 e6       	ldi	r25, 0x64	; 100
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>

}
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	08 95       	ret

000002ec <bma253_x_accel_data_ready>:
	//error = i2c_write1ByteRegister(BMA253_I2C_ADDR, 0x21, 0);
	error = i2c_write1ByteRegister(BMA253_I2C_ADDR, BMA253_PWR_MODE_ADDR, BMA253_NORMAL_MODE);
	
	error = i2c_write1ByteRegister(BMA253_I2C_ADDR, BMA253_BW_SELECT_ADDR, BMA253_BW_7_81HZ);

	error = i2c_write1ByteRegister(BMA253_I2C_ADDR, BMA253_RANGE_ADDR, BMA253_2G_RANGE);
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	89 e1       	ldi	r24, 0x19	; 25
     2f0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     2f4:	81 70       	andi	r24, 0x01	; 1
     2f6:	08 95       	ret

000002f8 <bma253_y_accel_data_ready>:
     2f8:	64 e0       	ldi	r22, 0x04	; 4
     2fa:	89 e1       	ldi	r24, 0x19	; 25
     2fc:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     300:	81 70       	andi	r24, 0x01	; 1
     302:	08 95       	ret

00000304 <bma253_z_accel_data_ready>:
     304:	66 e0       	ldi	r22, 0x06	; 6
     306:	89 e1       	ldi	r24, 0x19	; 25
     308:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     30c:	81 70       	andi	r24, 0x01	; 1
     30e:	08 95       	ret

00000310 <bma253_print_accel>:
	

}

void bma253_print_accel(void)
{	
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	uint16_t x_accel, y_accel, z_accel;
	
    uint8_t lsb_data;
    uint8_t msb_data;
	
	while(!bma253_x_accel_data_ready()) {};
     31a:	0e 94 76 01 	call	0x2ec	; 0x2ec <bma253_x_accel_data_ready>
     31e:	88 23       	and	r24, r24
     320:	e1 f3       	breq	.-8      	; 0x31a <bma253_print_accel+0xa>
	
	lsb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_X_LSB);
     322:	62 e0       	ldi	r22, 0x02	; 2
     324:	89 e1       	ldi	r24, 0x19	; 25
     326:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     32a:	18 2f       	mov	r17, r24
	msb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_X_MSB);
     32c:	63 e0       	ldi	r22, 0x03	; 3
     32e:	89 e1       	ldi	r24, 0x19	; 25
     330:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	
	x_accel = ( (((int16_t)msb_data) << 8) | (lsb_data) ) >> 4;
     334:	c8 2f       	mov	r28, r24
     336:	d0 e0       	ldi	r29, 0x00	; 0
     338:	dc 2f       	mov	r29, r28
     33a:	cc 27       	eor	r28, r28
     33c:	c1 2b       	or	r28, r17
     33e:	d5 95       	asr	r29
     340:	c7 95       	ror	r28
     342:	d5 95       	asr	r29
     344:	c7 95       	ror	r28
     346:	d5 95       	asr	r29
     348:	c7 95       	ror	r28
     34a:	d5 95       	asr	r29
     34c:	c7 95       	ror	r28
	
	
	while(!bma253_y_accel_data_ready()) {};
     34e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <bma253_y_accel_data_ready>
     352:	88 23       	and	r24, r24
     354:	e1 f3       	breq	.-8      	; 0x34e <bma253_print_accel+0x3e>
		
	lsb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_Y_LSB);
     356:	64 e0       	ldi	r22, 0x04	; 4
     358:	89 e1       	ldi	r24, 0x19	; 25
     35a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     35e:	f8 2e       	mov	r15, r24
	msb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_Y_MSB);	
     360:	65 e0       	ldi	r22, 0x05	; 5
     362:	89 e1       	ldi	r24, 0x19	; 25
     364:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	
	y_accel = ( (((int16_t)msb_data) << 8) | (lsb_data) ) >> 4;
     368:	08 2f       	mov	r16, r24
     36a:	10 e0       	ldi	r17, 0x00	; 0
     36c:	10 2f       	mov	r17, r16
     36e:	00 27       	eor	r16, r16
     370:	0f 29       	or	r16, r15
     372:	15 95       	asr	r17
     374:	07 95       	ror	r16
     376:	15 95       	asr	r17
     378:	07 95       	ror	r16
     37a:	15 95       	asr	r17
     37c:	07 95       	ror	r16
     37e:	15 95       	asr	r17
     380:	07 95       	ror	r16
	
	
	while(!bma253_z_accel_data_ready()) {};
     382:	0e 94 82 01 	call	0x304	; 0x304 <bma253_z_accel_data_ready>
     386:	88 23       	and	r24, r24
     388:	e1 f3       	breq	.-8      	; 0x382 <bma253_print_accel+0x72>
		
	lsb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_Z_LSB);
     38a:	66 e0       	ldi	r22, 0x06	; 6
     38c:	89 e1       	ldi	r24, 0x19	; 25
     38e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     392:	f8 2e       	mov	r15, r24
	msb_data = i2c_read1ByteRegister(BMA253_I2C_ADDR, BMA253_ACCD_Z_MSB);	
     394:	67 e0       	ldi	r22, 0x07	; 7
     396:	89 e1       	ldi	r24, 0x19	; 25
     398:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	
	z_accel = ( (((int16_t)msb_data) << 8) | (lsb_data) ) >> 4;	
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	98 2f       	mov	r25, r24
     3a0:	88 27       	eor	r24, r24
     3a2:	8f 29       	or	r24, r15
     3a4:	95 95       	asr	r25
     3a6:	87 95       	ror	r24
     3a8:	95 95       	asr	r25
     3aa:	87 95       	ror	r24
     3ac:	95 95       	asr	r25
     3ae:	87 95       	ror	r24
     3b0:	95 95       	asr	r25
     3b2:	87 95       	ror	r24
	

	printf("Accel : (%d, %d, %d)\r", x_accel, y_accel, z_accel);
     3b4:	9f 93       	push	r25
     3b6:	8f 93       	push	r24
     3b8:	1f 93       	push	r17
     3ba:	0f 93       	push	r16
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	81 e9       	ldi	r24, 0x91	; 145
     3c2:	94 e6       	ldi	r25, 0x64	; 100
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>

}
     3cc:	8d b7       	in	r24, 0x3d	; 61
     3ce:	9e b7       	in	r25, 0x3e	; 62
     3d0:	08 96       	adiw	r24, 0x08	; 8
     3d2:	8d bf       	out	0x3d, r24	; 61
     3d4:	9e bf       	out	0x3e, r25	; 62
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	08 95       	ret

000003e2 <mcp9844_get_temperature>:

// 2 byte registers
int16_t  mcp9844_get_temperature() 
{
		
		int16_t register_value = i2c_read2ByteRegister(MCP9844_I2C_ADDR, MCP9844_TA_REG);
     3e2:	65 e0       	ldi	r22, 0x05	; 5
     3e4:	88 e1       	ldi	r24, 0x18	; 24
     3e6:	0e 94 3c 09 	call	0x1278	; 0x1278 <i2c_read2ByteRegister>
		
		int16_t upper_byte = (register_value >> 8) & 0x001F;
     3ea:	29 2f       	mov	r18, r25
     3ec:	33 27       	eor	r19, r19
     3ee:	27 fd       	sbrc	r18, 7
     3f0:	3a 95       	dec	r19
     3f2:	a9 01       	movw	r20, r18
     3f4:	4f 71       	andi	r20, 0x1F	; 31
     3f6:	55 27       	eor	r21, r21
		int16_t lower_byte = (register_value) & 0x00FF;
     3f8:	99 27       	eor	r25, r25
		
		int16_t temperature;
		
		if ((upper_byte & 0x10) == 0x10){ //TA  0°C
     3fa:	24 ff       	sbrs	r18, 4
     3fc:	14 c0       	rjmp	.+40     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			upper_byte = upper_byte & 0x0F; //Clear SIGN
     3fe:	2f 70       	andi	r18, 0x0F	; 15
     400:	33 27       	eor	r19, r19
			temperature = (upper_byte * 16 + lower_byte / 16) - 256;
     402:	22 95       	swap	r18
     404:	32 95       	swap	r19
     406:	30 7f       	andi	r19, 0xF0	; 240
     408:	32 27       	eor	r19, r18
     40a:	20 7f       	andi	r18, 0xF0	; 240
     40c:	32 27       	eor	r19, r18
     40e:	95 95       	asr	r25
     410:	87 95       	ror	r24
     412:	95 95       	asr	r25
     414:	87 95       	ror	r24
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	82 0f       	add	r24, r18
     420:	93 1f       	adc	r25, r19
     422:	9a 95       	dec	r25
     424:	08 95       	ret
		}
		else 
			temperature = (upper_byte * 16 + lower_byte / 16);
     426:	42 95       	swap	r20
     428:	52 95       	swap	r21
     42a:	50 7f       	andi	r21, 0xF0	; 240
     42c:	54 27       	eor	r21, r20
     42e:	40 7f       	andi	r20, 0xF0	; 240
     430:	54 27       	eor	r21, r20
     432:	95 95       	asr	r25
     434:	87 95       	ror	r24
     436:	95 95       	asr	r25
     438:	87 95       	ror	r24
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	95 95       	asr	r25
     440:	87 95       	ror	r24
     442:	84 0f       	add	r24, r20
     444:	95 1f       	adc	r25, r21
		
		
		return temperature;
				

}
     446:	08 95       	ret

00000448 <calibrate>:

void calibrate()
{
	    int16_t data = 0;

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_RH_X2);
     448:	60 e3       	ldi	r22, 0x30	; 48
     44a:	8f e5       	ldi	r24, 0x5F	; 95
     44c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     450:	90 e0       	ldi	r25, 0x00	; 0
	    H0_RH_X2 = data;
     452:	80 93 08 34 	sts	0x3408, r24	; 0x803408 <H0_RH_X2>
     456:	90 93 09 34 	sts	0x3409, r25	; 0x803409 <H0_RH_X2+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_RH_X2);
     45a:	61 e3       	ldi	r22, 0x31	; 49
     45c:	8f e5       	ldi	r24, 0x5F	; 95
     45e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     462:	90 e0       	ldi	r25, 0x00	; 0
	    H1_RH_X2 = data;
     464:	80 93 06 34 	sts	0x3406, r24	; 0x803406 <H1_RH_X2>
     468:	90 93 07 34 	sts	0x3407, r25	; 0x803407 <H1_RH_X2+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_DEGC_X8);
     46c:	62 e3       	ldi	r22, 0x32	; 50
     46e:	8f e5       	ldi	r24, 0x5F	; 95
     470:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     474:	90 e0       	ldi	r25, 0x00	; 0
	    T0_DEGC_X8 = data;
     476:	80 93 15 34 	sts	0x3415, r24	; 0x803415 <T0_DEGC_X8>
     47a:	90 93 16 34 	sts	0x3416, r25	; 0x803416 <T0_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_T0_MSB);
     47e:	65 e3       	ldi	r22, 0x35	; 53
     480:	8f e5       	ldi	r24, 0x5F	; 95
     482:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	    T0_DEGC_X8 |= (data & 0x03) << 8;
     486:	83 70       	andi	r24, 0x03	; 3
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	98 2f       	mov	r25, r24
     48c:	88 27       	eor	r24, r24
     48e:	20 91 15 34 	lds	r18, 0x3415	; 0x803415 <T0_DEGC_X8>
     492:	30 91 16 34 	lds	r19, 0x3416	; 0x803416 <T0_DEGC_X8+0x1>
     496:	82 2b       	or	r24, r18
     498:	93 2b       	or	r25, r19
     49a:	80 93 15 34 	sts	0x3415, r24	; 0x803415 <T0_DEGC_X8>
     49e:	90 93 16 34 	sts	0x3416, r25	; 0x803416 <T0_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_DEGC_X8);
     4a2:	63 e3       	ldi	r22, 0x33	; 51
     4a4:	8f e5       	ldi	r24, 0x5F	; 95
     4a6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     4aa:	90 e0       	ldi	r25, 0x00	; 0
	    T1_DEGC_X8 = data;
     4ac:	80 93 0c 34 	sts	0x340C, r24	; 0x80340c <T1_DEGC_X8>
     4b0:	90 93 0d 34 	sts	0x340D, r25	; 0x80340d <T1_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_T0_MSB);
     4b4:	65 e3       	ldi	r22, 0x35	; 53
     4b6:	8f e5       	ldi	r24, 0x5F	; 95
     4b8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	    T1_DEGC_X8 |= (data & 0x0C) << 6;
     4bc:	8c 70       	andi	r24, 0x0C	; 12
     4be:	20 e4       	ldi	r18, 0x40	; 64
     4c0:	82 9f       	mul	r24, r18
     4c2:	c0 01       	movw	r24, r0
     4c4:	11 24       	eor	r1, r1
     4c6:	20 91 0c 34 	lds	r18, 0x340C	; 0x80340c <T1_DEGC_X8>
     4ca:	30 91 0d 34 	lds	r19, 0x340D	; 0x80340d <T1_DEGC_X8+0x1>
     4ce:	82 2b       	or	r24, r18
     4d0:	93 2b       	or	r25, r19
     4d2:	80 93 0c 34 	sts	0x340C, r24	; 0x80340c <T1_DEGC_X8>
     4d6:	90 93 0d 34 	sts	0x340D, r25	; 0x80340d <T1_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_T0_OUT_L);
     4da:	66 e3       	ldi	r22, 0x36	; 54
     4dc:	8f e5       	ldi	r24, 0x5F	; 95
     4de:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     4e2:	90 e0       	ldi	r25, 0x00	; 0
	    H0_T0 = data;
     4e4:	80 93 0f 34 	sts	0x340F, r24	; 0x80340f <H0_T0>
     4e8:	90 93 10 34 	sts	0x3410, r25	; 0x803410 <H0_T0+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_T0_OUT_H);
     4ec:	67 e3       	ldi	r22, 0x37	; 55
     4ee:	8f e5       	ldi	r24, 0x5F	; 95
     4f0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     4f4:	90 e0       	ldi	r25, 0x00	; 0
	    H0_T0 |= data << 8;
     4f6:	98 2f       	mov	r25, r24
     4f8:	88 27       	eor	r24, r24
     4fa:	20 91 0f 34 	lds	r18, 0x340F	; 0x80340f <H0_T0>
     4fe:	30 91 10 34 	lds	r19, 0x3410	; 0x803410 <H0_T0+0x1>
     502:	82 2b       	or	r24, r18
     504:	93 2b       	or	r25, r19
     506:	80 93 0f 34 	sts	0x340F, r24	; 0x80340f <H0_T0>
     50a:	90 93 10 34 	sts	0x3410, r25	; 0x803410 <H0_T0+0x1>

	    if (H0_T0 > 32768) {
		    H0_T0 -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_T0_OUT_L);
     50e:	6a e3       	ldi	r22, 0x3A	; 58
     510:	8f e5       	ldi	r24, 0x5F	; 95
     512:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     516:	90 e0       	ldi	r25, 0x00	; 0
	    H1_T0 = data;
     518:	80 93 17 34 	sts	0x3417, r24	; 0x803417 <H1_T0>
     51c:	90 93 18 34 	sts	0x3418, r25	; 0x803418 <H1_T0+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_T0_OUT_H);
     520:	6b e3       	ldi	r22, 0x3B	; 59
     522:	8f e5       	ldi	r24, 0x5F	; 95
     524:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     528:	90 e0       	ldi	r25, 0x00	; 0
	    H1_T0 |= data << 8;
     52a:	98 2f       	mov	r25, r24
     52c:	88 27       	eor	r24, r24
     52e:	20 91 17 34 	lds	r18, 0x3417	; 0x803417 <H1_T0>
     532:	30 91 18 34 	lds	r19, 0x3418	; 0x803418 <H1_T0+0x1>
     536:	82 2b       	or	r24, r18
     538:	93 2b       	or	r25, r19
     53a:	80 93 17 34 	sts	0x3417, r24	; 0x803417 <H1_T0>
     53e:	90 93 18 34 	sts	0x3418, r25	; 0x803418 <H1_T0+0x1>

	    if (H1_T0 > 32768) {
		    H1_T0 -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_OUT_L);
     542:	6c e3       	ldi	r22, 0x3C	; 60
     544:	8f e5       	ldi	r24, 0x5F	; 95
     546:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     54a:	90 e0       	ldi	r25, 0x00	; 0
	    T0_OUT = data;
     54c:	80 93 0a 34 	sts	0x340A, r24	; 0x80340a <T0_OUT>
     550:	90 93 0b 34 	sts	0x340B, r25	; 0x80340b <T0_OUT+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_OUT_H);
     554:	6d e3       	ldi	r22, 0x3D	; 61
     556:	8f e5       	ldi	r24, 0x5F	; 95
     558:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     55c:	90 e0       	ldi	r25, 0x00	; 0
	    T0_OUT |= data << 8;
     55e:	98 2f       	mov	r25, r24
     560:	88 27       	eor	r24, r24
     562:	20 91 0a 34 	lds	r18, 0x340A	; 0x80340a <T0_OUT>
     566:	30 91 0b 34 	lds	r19, 0x340B	; 0x80340b <T0_OUT+0x1>
     56a:	82 2b       	or	r24, r18
     56c:	93 2b       	or	r25, r19
     56e:	80 93 0a 34 	sts	0x340A, r24	; 0x80340a <T0_OUT>
     572:	90 93 0b 34 	sts	0x340B, r25	; 0x80340b <T0_OUT+0x1>

	    if (T0_OUT > 32768) {
		    T0_OUT -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_OUT_L);
     576:	6e e3       	ldi	r22, 0x3E	; 62
     578:	8f e5       	ldi	r24, 0x5F	; 95
     57a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     57e:	90 e0       	ldi	r25, 0x00	; 0
	    T1_OUT = data;
     580:	80 93 11 34 	sts	0x3411, r24	; 0x803411 <T1_OUT>
     584:	90 93 12 34 	sts	0x3412, r25	; 0x803412 <T1_OUT+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_OUT_H);
     588:	6f e3       	ldi	r22, 0x3F	; 63
     58a:	8f e5       	ldi	r24, 0x5F	; 95
     58c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     590:	90 e0       	ldi	r25, 0x00	; 0
	    T1_OUT |= data << 8;
     592:	98 2f       	mov	r25, r24
     594:	88 27       	eor	r24, r24
     596:	20 91 11 34 	lds	r18, 0x3411	; 0x803411 <T1_OUT>
     59a:	30 91 12 34 	lds	r19, 0x3412	; 0x803412 <T1_OUT+0x1>
     59e:	82 2b       	or	r24, r18
     5a0:	93 2b       	or	r25, r19
     5a2:	80 93 11 34 	sts	0x3411, r24	; 0x803411 <T1_OUT>
     5a6:	90 93 12 34 	sts	0x3412, r25	; 0x803412 <T1_OUT+0x1>
     5aa:	08 95       	ret

000005ac <tempandhum_init>:
     5ac:	2f e3       	ldi	r18, 0x3F	; 63
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	21 50       	subi	r18, 0x01	; 1
     5b4:	80 40       	sbci	r24, 0x00	; 0
     5b6:	90 40       	sbci	r25, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <tempandhum_init+0x6>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <tempandhum_init+0x10>
     5bc:	00 00       	nop
void tempandhum_init(void)
{

	_delay_ms(1000);		

	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_AV_CONF, TEMPANDHUM_AV_CONF_DEFAULT_VALUE);
     5be:	4b e1       	ldi	r20, 0x1B	; 27
     5c0:	60 e1       	ldi	r22, 0x10	; 16
     5c2:	8f e5       	ldi	r24, 0x5F	; 95
     5c4:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_write1ByteRegister>
     5c8:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG1,TEMPANDHUM_CTRL_REG1_DEFAULT_VALUE);	
     5cc:	47 ee       	ldi	r20, 0xE7	; 231
     5ce:	60 e2       	ldi	r22, 0x20	; 32
     5d0:	8f e5       	ldi	r24, 0x5F	; 95
     5d2:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_write1ByteRegister>
     5d6:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG2, TEMPANDHUM_CTRL_REG2_DEFAULT_VALUE);	
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e2       	ldi	r22, 0x21	; 33
     5de:	8f e5       	ldi	r24, 0x5F	; 95
     5e0:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_write1ByteRegister>
     5e4:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG3, TEMPANDHUM_CTRL_REG3_DEFAULT_VALUE);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	62 e2       	ldi	r22, 0x22	; 34
     5ec:	8f e5       	ldi	r24, 0x5F	; 95
     5ee:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_write1ByteRegister>
     5f2:	80 93 0e 34 	sts	0x340E, r24	; 0x80340e <err>

	calibrate();
     5f6:	0e 94 24 02 	call	0x448	; 0x448 <calibrate>
     5fa:	08 95       	ret

000005fc <temphum_get_humidity>:
		    T1_OUT -= 65536;
	    }
}

float temphum_get_humidity(void)
{
     5fc:	8f 92       	push	r8
     5fe:	9f 92       	push	r9
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
    int32_t data = 0;
    int32_t humidity = 0;

    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
     614:	67 e2       	ldi	r22, 0x27	; 39
     616:	8f e5       	ldi	r24, 0x5F	; 95
     618:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>


    if (!(data & 0x02)) 
     61c:	81 ff       	sbrs	r24, 1
     61e:	84 c0       	rjmp	.+264    	; 0x728 <temphum_get_humidity+0x12c>
	    //printf("sensor not ready\r\n");
		return 0;
    }


	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_HUMIDITY_OUT_L);
     620:	68 e2       	ldi	r22, 0x28	; 40
     622:	8f e5       	ldi	r24, 0x5F	; 95
     624:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     628:	c8 2e       	mov	r12, r24
     62a:	d1 2c       	mov	r13, r1
     62c:	e1 2c       	mov	r14, r1
     62e:	f1 2c       	mov	r15, r1
	humidity = data;
	
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_HUMIDITY_OUT_H);
     630:	69 e2       	ldi	r22, 0x29	; 41
     632:	8f e5       	ldi	r24, 0x5F	; 95
     634:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a0 e0       	ldi	r26, 0x00	; 0
     63c:	b0 e0       	ldi	r27, 0x00	; 0
	humidity |= data << 8;
     63e:	ba 2f       	mov	r27, r26
     640:	a9 2f       	mov	r26, r25
     642:	98 2f       	mov	r25, r24
     644:	88 27       	eor	r24, r24
     646:	c8 2a       	or	r12, r24
     648:	d9 2a       	or	r13, r25
     64a:	ea 2a       	or	r14, r26
     64c:	fb 2a       	or	r15, r27
			
    if (humidity > 32768) {
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	c8 16       	cp	r12, r24
     652:	80 e8       	ldi	r24, 0x80	; 128
     654:	d8 06       	cpc	r13, r24
     656:	e1 04       	cpc	r14, r1
     658:	f1 04       	cpc	r15, r1
     65a:	1c f0       	brlt	.+6      	; 0x662 <temphum_get_humidity+0x66>
	    humidity -= 65536;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	e8 1a       	sub	r14, r24
     660:	f1 08       	sbc	r15, r1
    }

    float result = H0_RH_X2 / 2.0 + (humidity - H0_T0) * (H1_RH_X2 - H0_RH_X2) / 2.0 / (H1_T0 - H0_T0);
     662:	00 91 08 34 	lds	r16, 0x3408	; 0x803408 <H0_RH_X2>
     666:	10 91 09 34 	lds	r17, 0x3409	; 0x803409 <H0_RH_X2+0x1>
     66a:	b8 01       	movw	r22, r16
     66c:	01 2e       	mov	r0, r17
     66e:	00 0c       	add	r0, r0
     670:	88 0b       	sbc	r24, r24
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	5f e3       	ldi	r21, 0x3F	; 63
     680:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
     684:	4b 01       	movw	r8, r22
     686:	5c 01       	movw	r10, r24
     688:	c0 91 0f 34 	lds	r28, 0x340F	; 0x80340f <H0_T0>
     68c:	d0 91 10 34 	lds	r29, 0x3410	; 0x803410 <H0_T0+0x1>
     690:	ce 01       	movw	r24, r28
     692:	0d 2e       	mov	r0, r29
     694:	00 0c       	add	r0, r0
     696:	aa 0b       	sbc	r26, r26
     698:	bb 0b       	sbc	r27, r27
     69a:	a7 01       	movw	r20, r14
     69c:	96 01       	movw	r18, r12
     69e:	28 1b       	sub	r18, r24
     6a0:	39 0b       	sbc	r19, r25
     6a2:	4a 0b       	sbc	r20, r26
     6a4:	5b 0b       	sbc	r21, r27
     6a6:	a0 91 06 34 	lds	r26, 0x3406	; 0x803406 <H1_RH_X2>
     6aa:	b0 91 07 34 	lds	r27, 0x3407	; 0x803407 <H1_RH_X2+0x1>
     6ae:	a0 1b       	sub	r26, r16
     6b0:	b1 0b       	sbc	r27, r17
     6b2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulshisi3>
     6b6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
     6c6:	6b 01       	movw	r12, r22
     6c8:	7c 01       	movw	r14, r24
     6ca:	60 91 17 34 	lds	r22, 0x3417	; 0x803417 <H1_T0>
     6ce:	70 91 18 34 	lds	r23, 0x3418	; 0x803418 <H1_T0+0x1>
     6d2:	6c 1b       	sub	r22, r28
     6d4:	7d 0b       	sbc	r23, r29
     6d6:	07 2e       	mov	r0, r23
     6d8:	00 0c       	add	r0, r0
     6da:	88 0b       	sbc	r24, r24
     6dc:	99 0b       	sbc	r25, r25
     6de:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c7 01       	movw	r24, r14
     6e8:	b6 01       	movw	r22, r12
     6ea:	0e 94 91 0b 	call	0x1722	; 0x1722 <__divsf3>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	c5 01       	movw	r24, r10
     6f4:	b4 01       	movw	r22, r8
     6f6:	0e 94 25 0b 	call	0x164a	; 0x164a <__addsf3>
     6fa:	c6 2e       	mov	r12, r22
     6fc:	d7 2e       	mov	r13, r23
     6fe:	e8 2e       	mov	r14, r24
     700:	f9 2e       	mov	r15, r25
	
	printf("humidity %d rH \r\n", (int)result);
     702:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fixsfsi>
     706:	7f 93       	push	r23
     708:	6f 93       	push	r22
     70a:	87 ea       	ldi	r24, 0xA7	; 167
     70c:	94 e6       	ldi	r25, 0x64	; 100
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
	
	return result;
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	5c 2d       	mov	r21, r12
     720:	4d 2d       	mov	r20, r13
     722:	3e 2d       	mov	r19, r14
     724:	2f 2d       	mov	r18, r15
     726:	04 c0       	rjmp	.+8      	; 0x730 <temphum_get_humidity+0x134>


    if (!(data & 0x02)) 
	{
	    //printf("sensor not ready\r\n");
		return 0;
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	20 e0       	ldi	r18, 0x00	; 0
    float result = H0_RH_X2 / 2.0 + (humidity - H0_T0) * (H1_RH_X2 - H0_RH_X2) / 2.0 / (H1_T0 - H0_T0);
	
	printf("humidity %d rH \r\n", (int)result);
	
	return result;
}
     730:	65 2f       	mov	r22, r21
     732:	74 2f       	mov	r23, r20
     734:	83 2f       	mov	r24, r19
     736:	92 2f       	mov	r25, r18
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	08 95       	ret

00000752 <temphum_get_temp>:

float temphum_get_temp(void)
{
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29

	int32_t data = 0;
	int32_t temperature = 0;
	
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
     76a:	67 e2       	ldi	r22, 0x27	; 39
     76c:	8f e5       	ldi	r24, 0x5F	; 95
     76e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
	
	if(!(data & 0x01))
     772:	80 ff       	sbrs	r24, 0
     774:	84 c0       	rjmp	.+264    	; 0x87e <temphum_get_temp+0x12c>
		//printf("sensor not ready\r\n");
		return 0; //
	}
	else
	{
		data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_TEMP_OUT_L);
     776:	6a e2       	ldi	r22, 0x2A	; 42
     778:	8f e5       	ldi	r24, 0x5F	; 95
     77a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     77e:	c8 2e       	mov	r12, r24
     780:	d1 2c       	mov	r13, r1
     782:	e1 2c       	mov	r14, r1
     784:	f1 2c       	mov	r15, r1
		temperature = data;
		
		data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_TEMP_OUT_H);
     786:	6b e2       	ldi	r22, 0x2B	; 43
     788:	8f e5       	ldi	r24, 0x5F	; 95
     78a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <i2c_read1ByteRegister>
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e0       	ldi	r27, 0x00	; 0
		temperature |= data << 8;
     794:	ba 2f       	mov	r27, r26
     796:	a9 2f       	mov	r26, r25
     798:	98 2f       	mov	r25, r24
     79a:	88 27       	eor	r24, r24
     79c:	c8 2a       	or	r12, r24
     79e:	d9 2a       	or	r13, r25
     7a0:	ea 2a       	or	r14, r26
     7a2:	fb 2a       	or	r15, r27
	}
		
	if (temperature > 32768) 
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	c8 16       	cp	r12, r24
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	d8 06       	cpc	r13, r24
     7ac:	e1 04       	cpc	r14, r1
     7ae:	f1 04       	cpc	r15, r1
     7b0:	1c f0       	brlt	.+6      	; 0x7b8 <temphum_get_temp+0x66>
	{
		temperature -= 65536;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	e8 1a       	sub	r14, r24
     7b6:	f1 08       	sbc	r15, r1
	}

	float result = T0_DEGC_X8 / 8.0 + (temperature - T0_OUT) * (T1_DEGC_X8 - T0_DEGC_X8) / 8.0 / (T1_OUT - T0_OUT);
     7b8:	00 91 15 34 	lds	r16, 0x3415	; 0x803415 <T0_DEGC_X8>
     7bc:	10 91 16 34 	lds	r17, 0x3416	; 0x803416 <T0_DEGC_X8+0x1>
     7c0:	b8 01       	movw	r22, r16
     7c2:	01 2e       	mov	r0, r17
     7c4:	00 0c       	add	r0, r0
     7c6:	88 0b       	sbc	r24, r24
     7c8:	99 0b       	sbc	r25, r25
     7ca:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	5e e3       	ldi	r21, 0x3E	; 62
     7d6:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
     7da:	4b 01       	movw	r8, r22
     7dc:	5c 01       	movw	r10, r24
     7de:	c0 91 0a 34 	lds	r28, 0x340A	; 0x80340a <T0_OUT>
     7e2:	d0 91 0b 34 	lds	r29, 0x340B	; 0x80340b <T0_OUT+0x1>
     7e6:	ce 01       	movw	r24, r28
     7e8:	0d 2e       	mov	r0, r29
     7ea:	00 0c       	add	r0, r0
     7ec:	aa 0b       	sbc	r26, r26
     7ee:	bb 0b       	sbc	r27, r27
     7f0:	a7 01       	movw	r20, r14
     7f2:	96 01       	movw	r18, r12
     7f4:	28 1b       	sub	r18, r24
     7f6:	39 0b       	sbc	r19, r25
     7f8:	4a 0b       	sbc	r20, r26
     7fa:	5b 0b       	sbc	r21, r27
     7fc:	a0 91 0c 34 	lds	r26, 0x340C	; 0x80340c <T1_DEGC_X8>
     800:	b0 91 0d 34 	lds	r27, 0x340D	; 0x80340d <T1_DEGC_X8+0x1>
     804:	a0 1b       	sub	r26, r16
     806:	b1 0b       	sbc	r27, r17
     808:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulshisi3>
     80c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	5e e3       	ldi	r21, 0x3E	; 62
     818:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsf3>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	60 91 11 34 	lds	r22, 0x3411	; 0x803411 <T1_OUT>
     824:	70 91 12 34 	lds	r23, 0x3412	; 0x803412 <T1_OUT+0x1>
     828:	6c 1b       	sub	r22, r28
     82a:	7d 0b       	sbc	r23, r29
     82c:	07 2e       	mov	r0, r23
     82e:	00 0c       	add	r0, r0
     830:	88 0b       	sbc	r24, r24
     832:	99 0b       	sbc	r25, r25
     834:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     838:	9b 01       	movw	r18, r22
     83a:	ac 01       	movw	r20, r24
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 91 0b 	call	0x1722	; 0x1722 <__divsf3>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	c5 01       	movw	r24, r10
     84a:	b4 01       	movw	r22, r8
     84c:	0e 94 25 0b 	call	0x164a	; 0x164a <__addsf3>
     850:	c6 2e       	mov	r12, r22
     852:	d7 2e       	mov	r13, r23
     854:	e8 2e       	mov	r14, r24
     856:	f9 2e       	mov	r15, r25
	
	printf("temp %d C \r\n", (int)result);
     858:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fixsfsi>
     85c:	7f 93       	push	r23
     85e:	6f 93       	push	r22
     860:	89 eb       	ldi	r24, 0xB9	; 185
     862:	94 e6       	ldi	r25, 0x64	; 100
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
	
	return result;
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	5c 2d       	mov	r21, r12
     876:	4d 2d       	mov	r20, r13
     878:	3e 2d       	mov	r19, r14
     87a:	2f 2d       	mov	r18, r15
     87c:	04 c0       	rjmp	.+8      	; 0x886 <temphum_get_temp+0x134>
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
	
	if(!(data & 0x01))
	{
		//printf("sensor not ready\r\n");
		return 0; //
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	20 e0       	ldi	r18, 0x00	; 0
	printf("temp %d C \r\n", (int)result);
	
	return result;

	
}
     886:	65 2f       	mov	r22, r21
     888:	74 2f       	mov	r23, r20
     88a:	83 2f       	mov	r24, r19
     88c:	92 2f       	mov	r25, r18
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	08 95       	ret

000008a8 <is_button_pressed>:
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTF_get_pin_level(const uint8_t pin)
{
	return VPORTF.IN & (1 << pin);
     8a8:	86 b3       	in	r24, 0x16	; 22
}


static bool is_button_pressed(void)
{
	return PORTF_get_pin_level(3) == 0;
     8aa:	86 95       	lsr	r24
     8ac:	86 95       	lsr	r24
     8ae:	86 95       	lsr	r24
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	89 27       	eor	r24, r25
}
     8b4:	81 70       	andi	r24, 0x01	; 1
     8b6:	08 95       	ret

000008b8 <interrupt_routine>:

static void interrupt_routine(void)
{
	// 
	int8_t key = usb_cdc_get_data();
     8b8:	0e 94 21 0b 	call	0x1642	; 0x1642 <usb_cdc_get_data>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     8bc:	85 b3       	in	r24, 0x15	; 21
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	85 bb       	out	0x15, r24	; 21
	

	PF4_set_level(false);
	data_led_off_tick = current_tick + TICK_RATE;
     8c2:	60 91 42 30 	lds	r22, 0x3042	; 0x803042 <current_tick>
     8c6:	70 91 43 30 	lds	r23, 0x3043	; 0x803043 <current_tick+0x1>
     8ca:	80 91 44 30 	lds	r24, 0x3044	; 0x803044 <current_tick+0x2>
     8ce:	90 91 45 30 	lds	r25, 0x3045	; 0x803045 <current_tick+0x3>
     8d2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__floatsisf>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	48 ec       	ldi	r20, 0xC8	; 200
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	0e 94 25 0b 	call	0x164a	; 0x164a <__addsf3>
     8e2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fixsfsi>
     8e6:	60 93 3e 30 	sts	0x303E, r22	; 0x80303e <data_led_off_tick>
     8ea:	70 93 3f 30 	sts	0x303F, r23	; 0x80303f <data_led_off_tick+0x1>
     8ee:	80 93 40 30 	sts	0x3040, r24	; 0x803040 <data_led_off_tick+0x2>
     8f2:	90 93 41 30 	sts	0x3041, r25	; 0x803041 <data_led_off_tick+0x3>
     8f6:	08 95       	ret

000008f8 <main>:

int main(void)
{

	
	atmel_start_init();
     8f8:	0e 94 67 00 	call	0xce	; 0xce <atmel_start_init>
     8fc:	2a e6       	ldi	r18, 0x6A	; 106
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	21 50       	subi	r18, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <main+0xa>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0x14>
	_delay_ms(100);


	ENABLE_INTERRUPTS();
     90c:	78 94       	sei

	
	tempandhum_init();
     90e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <tempandhum_init>
     912:	ea e6       	ldi	r30, 0x6A	; 106
     914:	f4 e0       	ldi	r31, 0x04	; 4
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	e1 50       	subi	r30, 0x01	; 1
     91a:	f0 40       	sbci	r31, 0x00	; 0
     91c:	20 40       	sbci	r18, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <main+0x20>
     920:	00 c0       	rjmp	.+0      	; 0x922 <main+0x2a>
	//bma253_initialize();
	
	_delay_ms(100);
	// register callbacks
	usb_cdc_set_ISR_cb(interrupt_routine, RX_CB);
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	8c e5       	ldi	r24, 0x5C	; 92
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <usb_cdc_set_ISR_cb>

	rn4870.init();
     92c:	e0 91 83 64 	lds	r30, 0x6483	; 0x806483 <__bss_end+0x3062>
     930:	f0 91 84 64 	lds	r31, 0x6484	; 0x806484 <__bss_end+0x3063>
     934:	09 95       	icall
     936:	8f e7       	ldi	r24, 0x7F	; 127
     938:	94 e8       	ldi	r25, 0x84	; 132
     93a:	ee e1       	ldi	r30, 0x1E	; 30
     93c:	81 50       	subi	r24, 0x01	; 1
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e0 40       	sbci	r30, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <main+0x44>
     944:	00 c0       	rjmp	.+0      	; 0x946 <main+0x4e>
				/* this should be here */
				
				

		_delay_ms(3000);
		current_tick++;
     946:	80 91 42 30 	lds	r24, 0x3042	; 0x803042 <current_tick>
     94a:	90 91 43 30 	lds	r25, 0x3043	; 0x803043 <current_tick+0x1>
     94e:	a0 91 44 30 	lds	r26, 0x3044	; 0x803044 <current_tick+0x2>
     952:	b0 91 45 30 	lds	r27, 0x3045	; 0x803045 <current_tick+0x3>
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	a1 1d       	adc	r26, r1
     95a:	b1 1d       	adc	r27, r1
     95c:	80 93 42 30 	sts	0x3042, r24	; 0x803042 <current_tick>
     960:	90 93 43 30 	sts	0x3043, r25	; 0x803043 <current_tick+0x1>
     964:	a0 93 44 30 	sts	0x3044, r26	; 0x803044 <current_tick+0x2>
     968:	b0 93 45 30 	sts	0x3045, r27	; 0x803045 <current_tick+0x3>

		
		rn4870.characteristic_send_data(BLE_HANDLE_TEMP_READ_CHARACTERISTIC, temphum_get_temp());	
     96c:	c0 91 89 64 	lds	r28, 0x6489	; 0x806489 <__bss_end+0x3068>
     970:	d0 91 8a 64 	lds	r29, 0x648A	; 0x80648a <__bss_end+0x3069>
     974:	0e 94 a9 03 	call	0x752	; 0x752 <temphum_get_temp>
     978:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fixsfsi>
     97c:	86 ec       	ldi	r24, 0xC6	; 198
     97e:	94 e6       	ldi	r25, 0x64	; 100
     980:	fe 01       	movw	r30, r28
     982:	09 95       	icall
		rn4870.characteristic_send_data(BLE_HANDLE_HUMIDITY_READ_CHARACTERISTIC, temphum_get_humidity());
     984:	0e 94 fe 02 	call	0x5fc	; 0x5fc <temphum_get_humidity>
     988:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fixsfsi>
     98c:	8b ec       	ldi	r24, 0xCB	; 203
     98e:	94 e6       	ldi	r25, 0x64	; 100
     990:	fe 01       	movw	r30, r28
     992:	09 95       	icall

							
		// disable led 1 second after the last console input
		if(current_tick > data_led_off_tick)
     994:	40 91 42 30 	lds	r20, 0x3042	; 0x803042 <current_tick>
     998:	50 91 43 30 	lds	r21, 0x3043	; 0x803043 <current_tick+0x1>
     99c:	60 91 44 30 	lds	r22, 0x3044	; 0x803044 <current_tick+0x2>
     9a0:	70 91 45 30 	lds	r23, 0x3045	; 0x803045 <current_tick+0x3>
     9a4:	80 91 3e 30 	lds	r24, 0x303E	; 0x80303e <data_led_off_tick>
     9a8:	90 91 3f 30 	lds	r25, 0x303F	; 0x80303f <data_led_off_tick+0x1>
     9ac:	a0 91 40 30 	lds	r26, 0x3040	; 0x803040 <data_led_off_tick+0x2>
     9b0:	b0 91 41 30 	lds	r27, 0x3041	; 0x803041 <data_led_off_tick+0x3>
     9b4:	84 17       	cp	r24, r20
     9b6:	95 07       	cpc	r25, r21
     9b8:	a6 07       	cpc	r26, r22
     9ba:	b7 07       	cpc	r27, r23
     9bc:	1c f4       	brge	.+6      	; 0x9c4 <main+0xcc>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     9be:	85 b3       	in	r24, 0x15	; 21
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	85 bb       	out	0x15, r24	; 21
			PF4_set_level(true);
		
		bool buttonPressed = is_button_pressed();
     9c4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <is_button_pressed>
		
		// enable led only if the button is pressed
		if(buttonPressed && !err_led_on)
     9c8:	88 23       	and	r24, r24
     9ca:	e9 f0       	breq	.+58     	; 0xa06 <main+0x10e>
     9cc:	90 91 3d 30 	lds	r25, 0x303D	; 0x80303d <err_led_on>
     9d0:	91 11       	cpse	r25, r1
     9d2:	19 c0       	rjmp	.+50     	; 0xa06 <main+0x10e>
	} else {
		VPORTF.OUT &= ~(1 << pin);
     9d4:	85 b3       	in	r24, 0x15	; 21
     9d6:	8f 7d       	andi	r24, 0xDF	; 223
     9d8:	85 bb       	out	0x15, r24	; 21
		{
			

			PORTF_set_pin_level(5, false);
			err_led_on = true;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 3d 30 	sts	0x303D, r24	; 0x80303d <err_led_on>
			//print_accel = !print_accel;
			
			rn4870.characteristic_send_data(BLE_HANDLE_TEMP_READ_CHARACTERISTIC, mcp9844_get_temperature());
     9e0:	c0 91 89 64 	lds	r28, 0x6489	; 0x806489 <__bss_end+0x3068>
     9e4:	d0 91 8a 64 	lds	r29, 0x648A	; 0x80648a <__bss_end+0x3069>
     9e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <mcp9844_get_temperature>
     9ec:	bc 01       	movw	r22, r24
     9ee:	86 ec       	ldi	r24, 0xC6	; 198
     9f0:	94 e6       	ldi	r25, 0x64	; 100
     9f2:	fe 01       	movw	r30, r28
     9f4:	09 95       	icall
			rn4870.characteristic_send_data(BLE_HANDLE_HUMIDITY_READ_CHARACTERISTIC, mcp9844_get_temperature());
     9f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <mcp9844_get_temperature>
     9fa:	bc 01       	movw	r22, r24
     9fc:	8b ec       	ldi	r24, 0xCB	; 203
     9fe:	94 e6       	ldi	r25, 0x64	; 100
     a00:	fe 01       	movw	r30, r28
     a02:	09 95       	icall
     a04:	1e c0       	rjmp	.+60     	; 0xa42 <main+0x14a>
					
		}
		else if(!buttonPressed && err_led_on)
     a06:	81 11       	cpse	r24, r1
     a08:	1c c0       	rjmp	.+56     	; 0xa42 <main+0x14a>
     a0a:	80 91 3d 30 	lds	r24, 0x303D	; 0x80303d <err_led_on>
     a0e:	88 23       	and	r24, r24
     a10:	c1 f0       	breq	.+48     	; 0xa42 <main+0x14a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
     a12:	85 b3       	in	r24, 0x15	; 21
     a14:	80 62       	ori	r24, 0x20	; 32
     a16:	85 bb       	out	0x15, r24	; 21
		{
			//on release button

			PORTF_set_pin_level(5, true);
			err_led_on = false;
     a18:	10 92 3d 30 	sts	0x303D, r1	; 0x80303d <err_led_on>
			
			
			int16_t temp = rn4870.characteristic_get_data(BLE_HANDLE_TEMP_READ_CHARACTERISTIC);
     a1c:	e0 91 8b 64 	lds	r30, 0x648B	; 0x80648b <__bss_end+0x306a>
     a20:	f0 91 8c 64 	lds	r31, 0x648C	; 0x80648c <__bss_end+0x306b>
     a24:	86 ec       	ldi	r24, 0xC6	; 198
     a26:	94 e6       	ldi	r25, 0x64	; 100
     a28:	09 95       	icall
			printf("%x\r\n", temp);
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	80 ed       	ldi	r24, 0xD0	; 208
     a30:	94 e6       	ldi	r25, 0x64	; 100
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <printf>
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
		}
		
		if(print_accel)
     a42:	80 91 3c 30 	lds	r24, 0x303C	; 0x80303c <print_accel>
     a46:	88 23       	and	r24, r24
     a48:	09 f4       	brne	.+2      	; 0xa4c <main+0x154>
     a4a:	75 cf       	rjmp	.-278    	; 0x936 <main+0x3e>
			bma253_print_accel();
     a4c:	0e 94 88 01 	call	0x310	; 0x310 <bma253_print_accel>
     a50:	72 cf       	rjmp	.-284    	; 0x936 <main+0x3e>

00000a52 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	08 95       	ret

00000a56 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret

00000a5a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret

00000a5e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a62:	e8 2f       	mov	r30, r24
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	e0 5f       	subi	r30, 0xF0	; 240
     a68:	fb 4f       	sbci	r31, 0xFB	; 251
     a6a:	90 81       	ld	r25, Z
     a6c:	98 60       	ori	r25, 0x08	; 8
     a6e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	88 30       	cpi	r24, 0x08	; 8
     a74:	b0 f3       	brcs	.-20     	; 0xa62 <mcu_init+0x4>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a7a:	e8 2f       	mov	r30, r24
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	e0 5d       	subi	r30, 0xD0	; 208
     a80:	fb 4f       	sbci	r31, 0xFB	; 251
     a82:	90 81       	ld	r25, Z
     a84:	98 60       	ori	r25, 0x08	; 8
     a86:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	88 30       	cpi	r24, 0x08	; 8
     a8c:	b0 f3       	brcs	.-20     	; 0xa7a <mcu_init+0x1c>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a92:	e8 2f       	mov	r30, r24
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e0 5b       	subi	r30, 0xB0	; 176
     a98:	fb 4f       	sbci	r31, 0xFB	; 251
     a9a:	90 81       	ld	r25, Z
     a9c:	98 60       	ori	r25, 0x08	; 8
     a9e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	88 30       	cpi	r24, 0x08	; 8
     aa4:	b0 f3       	brcs	.-20     	; 0xa92 <mcu_init+0x34>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 c0       	rjmp	.+16     	; 0xaba <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     aaa:	e8 2f       	mov	r30, r24
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	e0 59       	subi	r30, 0x90	; 144
     ab0:	fb 4f       	sbci	r31, 0xFB	; 251
     ab2:	90 81       	ld	r25, Z
     ab4:	98 60       	ori	r25, 0x08	; 8
     ab6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	88 30       	cpi	r24, 0x08	; 8
     abc:	b0 f3       	brcs	.-20     	; 0xaaa <mcu_init+0x4c>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 c0       	rjmp	.+16     	; 0xad2 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ac2:	e8 2f       	mov	r30, r24
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	e0 57       	subi	r30, 0x70	; 112
     ac8:	fb 4f       	sbci	r31, 0xFB	; 251
     aca:	90 81       	ld	r25, Z
     acc:	98 60       	ori	r25, 0x08	; 8
     ace:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	88 30       	cpi	r24, 0x08	; 8
     ad4:	b0 f3       	brcs	.-20     	; 0xac2 <mcu_init+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ada:	e8 2f       	mov	r30, r24
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	e0 55       	subi	r30, 0x50	; 80
     ae0:	fb 4f       	sbci	r31, 0xFB	; 251
     ae2:	90 81       	ld	r25, Z
     ae4:	98 60       	ori	r25, 0x08	; 8
     ae6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	88 30       	cpi	r24, 0x08	; 8
     aec:	b0 f3       	brcs	.-20     	; 0xada <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     aee:	08 95       	ret

00000af0 <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     af0:	80 b1       	in	r24, 0x00	; 0
     af2:	8d 7f       	andi	r24, 0xFD	; 253
     af4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     af6:	e1 e1       	ldi	r30, 0x11	; 17
     af8:	f4 e0       	ldi	r31, 0x04	; 4
     afa:	80 81       	ld	r24, Z
     afc:	87 7f       	andi	r24, 0xF7	; 247
     afe:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     b00:	81 b1       	in	r24, 0x01	; 1
     b02:	8e 7f       	andi	r24, 0xFE	; 254
     b04:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b06:	80 b1       	in	r24, 0x00	; 0
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
     b0c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <rx487x_init>
     b10:	08 95       	ret

00000b12 <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     b12:	84 b3       	in	r24, 0x14	; 20
     b14:	8d 7f       	andi	r24, 0xFD	; 253
     b16:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b18:	e1 eb       	ldi	r30, 0xB1	; 177
     b1a:	f4 e0       	ldi	r31, 0x04	; 4
     b1c:	80 81       	ld	r24, Z
     b1e:	87 7f       	andi	r24, 0xF7	; 247
     b20:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     b22:	85 b3       	in	r24, 0x15	; 21
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     b28:	84 b3       	in	r24, 0x14	; 20
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
     b2e:	0e 94 01 0b 	call	0x1602	; 0x1602 <usb_cdc_init>
     b32:	08 95       	ret

00000b34 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
     b34:	0e 94 73 09 	call	0x12e6	; 0x12e6 <system_timer_init>
     b38:	08 95       	ret

00000b3a <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     b3a:	81 b1       	in	r24, 0x01	; 1
     b3c:	87 7f       	andi	r24, 0xF7	; 247
     b3e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b40:	80 b1       	in	r24, 0x00	; 0
     b42:	88 60       	ori	r24, 0x08	; 8
     b44:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b46:	e3 e1       	ldi	r30, 0x13	; 19
     b48:	f4 e0       	ldi	r31, 0x04	; 4
     b4a:	80 81       	ld	r24, Z
     b4c:	87 7f       	andi	r24, 0xF7	; 247
     b4e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     b50:	80 81       	ld	r24, Z
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     b5c:	81 b1       	in	r24, 0x01	; 1
     b5e:	8b 7f       	andi	r24, 0xFB	; 251
     b60:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b62:	80 b1       	in	r24, 0x00	; 0
     b64:	84 60       	ori	r24, 0x04	; 4
     b66:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b68:	e2 e1       	ldi	r30, 0x12	; 18
     b6a:	f4 e0       	ldi	r31, 0x04	; 4
     b6c:	80 81       	ld	r24, Z
     b6e:	87 7f       	andi	r24, 0xF7	; 247
     b70:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     b78:	80 81       	ld	r24, Z
     b7a:	88 7f       	andi	r24, 0xF8	; 248
     b7c:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
     b7e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <i2c_init>
     b82:	08 95       	ret

00000b84 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     b84:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     b88:	8d b1       	in	r24, 0x0d	; 13
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     b8e:	8c b1       	in	r24, 0x0c	; 12
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     b94:	85 b3       	in	r24, 0x15	; 21
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     b9a:	84 b3       	in	r24, 0x14	; 20
     b9c:	80 61       	ori	r24, 0x10	; 16
     b9e:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ba0:	e4 eb       	ldi	r30, 0xB4	; 180
     ba2:	f4 e0       	ldi	r31, 0x04	; 4
     ba4:	80 81       	ld	r24, Z
     ba6:	87 7f       	andi	r24, 0xF7	; 247
     ba8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     baa:	80 81       	ld	r24, Z
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     bb0:	80 81       	ld	r24, Z
     bb2:	88 7f       	andi	r24, 0xF8	; 248
     bb4:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
     bb6:	0e 94 2b 05 	call	0xa56	; 0xa56 <CLKCTRL_init>

	rx487x_initialization();
     bba:	0e 94 78 05 	call	0xaf0	; 0xaf0 <rx487x_initialization>

	usb_cdc_initialization();
     bbe:	0e 94 89 05 	call	0xb12	; 0xb12 <usb_cdc_initialization>

	system_timer_initialization();
     bc2:	0e 94 9a 05 	call	0xb34	; 0xb34 <system_timer_initialization>

	CPUINT_init();
     bc6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <CPUINT_init>

	SLPCTRL_init();
     bca:	0e 94 71 09 	call	0x12e2	; 0x12e2 <SLPCTRL_init>

	i2c_initialization();
     bce:	0e 94 9d 05 	call	0xb3a	; 0xb3a <i2c_initialization>

	BOD_init();
     bd2:	0e 94 29 05 	call	0xa52	; 0xa52 <BOD_init>
     bd6:	08 95       	ret

00000bd8 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(true);
 */
i2c_error_t i2c_master_read(void)
{
	return i2c_master_operation(true);
}
     bd8:	e0 ea       	ldi	r30, 0xA0	; 160
     bda:	f8 e0       	ldi	r31, 0x08	; 8
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	88 60       	ori	r24, 0x08	; 8
     be0:	84 83       	std	Z+4, r24	; 0x04
     be2:	85 81       	ldd	r24, Z+5	; 0x05
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	85 83       	std	Z+5, r24	; 0x05
     be8:	e6 e4       	ldi	r30, 0x46	; 70
     bea:	f0 e3       	ldi	r31, 0x30	; 48
     bec:	80 81       	ld	r24, Z
     bee:	8e 7f       	andi	r24, 0xFE	; 254
     bf0:	80 83       	st	Z, r24
     bf2:	13 86       	std	Z+11, r1	; 0x0b
     bf4:	8e e0       	ldi	r24, 0x0E	; 14
     bf6:	08 95       	ret

00000bf8 <i2c_do_I2C_IDLE>:
     bf8:	e6 e4       	ldi	r30, 0x46	; 70
     bfa:	f0 e3       	ldi	r31, 0x30	; 48
     bfc:	80 81       	ld	r24, Z
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
     c00:	80 83       	st	Z, r24
     c02:	13 86       	std	Z+11, r1	; 0x0b
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret

00000c08 <i2c_do_I2C_SEND_STOP>:
     c08:	e0 ea       	ldi	r30, 0xA0	; 160
     c0a:	f8 e0       	ldi	r31, 0x08	; 8
     c0c:	84 81       	ldd	r24, Z+4	; 0x04
     c0e:	83 60       	ori	r24, 0x03	; 3
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_do_I2C_IDLE>
     c16:	08 95       	ret

00000c18 <i2c_do_I2C_SEND_ADR_READ>:
     c18:	e6 e4       	ldi	r30, 0x46	; 70
     c1a:	f0 e3       	ldi	r31, 0x30	; 48
     c1c:	80 81       	ld	r24, Z
     c1e:	88 60       	ori	r24, 0x08	; 8
     c20:	80 83       	st	Z, r24
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	08 95       	ret

00000c34 <i2c_do_I2C_SEND_RESTART>:
     c34:	0e 94 0c 06 	call	0xc18	; 0xc18 <i2c_do_I2C_SEND_ADR_READ>
     c38:	08 95       	ret

00000c3a <i2c_do_I2C_SEND_RESTART_READ>:
     c3a:	0e 94 0c 06 	call	0xc18	; 0xc18 <i2c_do_I2C_SEND_ADR_READ>
     c3e:	08 95       	ret

00000c40 <i2c_do_I2C_SEND_ADR_WRITE>:
     c40:	e6 e4       	ldi	r30, 0x46	; 70
     c42:	f0 e3       	ldi	r31, 0x30	; 48
     c44:	80 81       	ld	r24, Z
     c46:	88 60       	ori	r24, 0x08	; 8
     c48:	80 83       	st	Z, r24
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	88 0f       	add	r24, r24
     c4e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	08 95       	ret

00000c56 <i2c_do_I2C_SEND_RESTART_WRITE>:
     c56:	0e 94 20 06 	call	0xc40	; 0xc40 <i2c_do_I2C_SEND_ADR_WRITE>
     c5a:	08 95       	ret

00000c5c <i2c_do_I2C_DO_ADDRESS_NACK>:
     c5c:	a6 e4       	ldi	r26, 0x46	; 70
     c5e:	b0 e3       	ldi	r27, 0x30	; 48
     c60:	8c 91       	ld	r24, X
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	8c 93       	st	X, r24
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	1b 96       	adiw	r26, 0x0b	; 11
     c6a:	8c 93       	st	X, r24
     c6c:	1b 97       	sbiw	r26, 0x0b	; 11
     c6e:	50 96       	adiw	r26, 0x10	; 16
     c70:	ed 91       	ld	r30, X+
     c72:	fc 91       	ld	r31, X
     c74:	51 97       	sbiw	r26, 0x11	; 17
     c76:	5c 96       	adiw	r26, 0x1c	; 28
     c78:	8d 91       	ld	r24, X+
     c7a:	9c 91       	ld	r25, X
     c7c:	5d 97       	sbiw	r26, 0x1d	; 29
     c7e:	09 95       	icall
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	19 f0       	breq	.+6      	; 0xc8a <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	21 f0       	breq	.+8      	; 0xc90 <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
     c8a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_do_I2C_SEND_RESTART_READ>
     c8e:	08 95       	ret
     c90:	0e 94 2b 06 	call	0xc56	; 0xc56 <i2c_do_I2C_SEND_RESTART_WRITE>
     c94:	08 95       	ret
     c96:	0e 94 04 06 	call	0xc08	; 0xc08 <i2c_do_I2C_SEND_STOP>
     c9a:	08 95       	ret

00000c9c <i2c_do_I2C_RX_DO_ACK>:
     c9c:	e0 ea       	ldi	r30, 0xA0	; 160
     c9e:	f8 e0       	ldi	r31, 0x08	; 8
     ca0:	84 81       	ldd	r24, Z+4	; 0x04
     ca2:	8b 7f       	andi	r24, 0xFB	; 251
     ca4:	84 83       	std	Z+4, r24	; 0x04
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	08 95       	ret

00000caa <i2c_do_I2C_TX_DO_ACK>:
     caa:	e0 ea       	ldi	r30, 0xA0	; 160
     cac:	f8 e0       	ldi	r31, 0x08	; 8
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	8b 7f       	andi	r24, 0xFB	; 251
     cb2:	84 83       	std	Z+4, r24	; 0x04
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	08 95       	ret

00000cb8 <i2c_do_I2C_DO_NACK_STOP>:
     cb8:	e0 ea       	ldi	r30, 0xA0	; 160
     cba:	f8 e0       	ldi	r31, 0x08	; 8
     cbc:	84 81       	ldd	r24, Z+4	; 0x04
     cbe:	84 60       	ori	r24, 0x04	; 4
     cc0:	84 83       	std	Z+4, r24	; 0x04
     cc2:	84 81       	ldd	r24, Z+4	; 0x04
     cc4:	83 60       	ori	r24, 0x03	; 3
     cc6:	84 83       	std	Z+4, r24	; 0x04
     cc8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <i2c_do_I2C_IDLE>
     ccc:	08 95       	ret

00000cce <i2c_do_I2C_DO_NACK_RESTART>:
     cce:	e0 ea       	ldi	r30, 0xA0	; 160
     cd0:	f8 e0       	ldi	r31, 0x08	; 8
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	84 83       	std	Z+4, r24	; 0x04
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	08 95       	ret

00000cdc <i2c_do_I2C_TX>:
     cdc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     ce0:	84 ff       	sbrs	r24, 4
     ce2:	19 c0       	rjmp	.+50     	; 0xd16 <i2c_do_I2C_TX+0x3a>
     ce4:	a6 e4       	ldi	r26, 0x46	; 70
     ce6:	b0 e3       	ldi	r27, 0x30	; 48
     ce8:	52 96       	adiw	r26, 0x12	; 18
     cea:	ed 91       	ld	r30, X+
     cec:	fc 91       	ld	r31, X
     cee:	53 97       	sbiw	r26, 0x13	; 19
     cf0:	5e 96       	adiw	r26, 0x1e	; 30
     cf2:	8d 91       	ld	r24, X+
     cf4:	9c 91       	ld	r25, X
     cf6:	5f 97       	sbiw	r26, 0x1f	; 31
     cf8:	09 95       	icall
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	19 f0       	breq	.+6      	; 0xd04 <i2c_do_I2C_TX+0x28>
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	21 f0       	breq	.+8      	; 0xd0a <i2c_do_I2C_TX+0x2e>
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <i2c_do_I2C_TX+0x34>
     d04:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_do_I2C_SEND_RESTART_READ>
     d08:	08 95       	ret
     d0a:	0e 94 2b 06 	call	0xc56	; 0xc56 <i2c_do_I2C_SEND_RESTART_WRITE>
     d0e:	08 95       	ret
     d10:	0e 94 04 06 	call	0xc08	; 0xc08 <i2c_do_I2C_SEND_STOP>
     d14:	08 95       	ret
     d16:	e6 e4       	ldi	r30, 0x46	; 70
     d18:	f0 e3       	ldi	r31, 0x30	; 48
     d1a:	80 81       	ld	r24, Z
     d1c:	87 7f       	andi	r24, 0xF7	; 247
     d1e:	80 83       	st	Z, r24
     d20:	a2 81       	ldd	r26, Z+2	; 0x02
     d22:	b3 81       	ldd	r27, Z+3	; 0x03
     d24:	cd 01       	movw	r24, r26
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	82 83       	std	Z+2, r24	; 0x02
     d2a:	93 83       	std	Z+3, r25	; 0x03
     d2c:	8c 91       	ld	r24, X
     d2e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     d32:	84 81       	ldd	r24, Z+4	; 0x04
     d34:	95 81       	ldd	r25, Z+5	; 0x05
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	84 83       	std	Z+4, r24	; 0x04
     d3a:	95 83       	std	Z+5, r25	; 0x05
     d3c:	89 2b       	or	r24, r25
     d3e:	11 f0       	breq	.+4      	; 0xd44 <i2c_do_I2C_TX+0x68>
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	08 95       	ret
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	08 95       	ret

00000d48 <i2c_do_I2C_RX>:
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	e6 e4       	ldi	r30, 0x46	; 70
     d4e:	f0 e3       	ldi	r31, 0x30	; 48
     d50:	80 81       	ld	r24, Z
     d52:	87 7f       	andi	r24, 0xF7	; 247
     d54:	80 83       	st	Z, r24
     d56:	84 81       	ldd	r24, Z+4	; 0x04
     d58:	95 81       	ldd	r25, Z+5	; 0x05
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	31 f4       	brne	.+12     	; 0xd6a <i2c_do_I2C_RX+0x22>
     d5e:	e0 ea       	ldi	r30, 0xA0	; 160
     d60:	f8 e0       	ldi	r31, 0x08	; 8
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	84 60       	ori	r24, 0x04	; 4
     d66:	84 83       	std	Z+4, r24	; 0x04
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <i2c_do_I2C_RX+0x2c>
     d6a:	e0 ea       	ldi	r30, 0xA0	; 160
     d6c:	f8 e0       	ldi	r31, 0x08	; 8
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	8b 7f       	andi	r24, 0xFB	; 251
     d72:	84 83       	std	Z+4, r24	; 0x04
     d74:	e6 e4       	ldi	r30, 0x46	; 70
     d76:	f0 e3       	ldi	r31, 0x30	; 48
     d78:	84 81       	ldd	r24, Z+4	; 0x04
     d7a:	95 81       	ldd	r25, Z+5	; 0x05
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	84 83       	std	Z+4, r24	; 0x04
     d80:	95 83       	std	Z+5, r25	; 0x05
     d82:	89 2b       	or	r24, r25
     d84:	a9 f0       	breq	.+42     	; 0xdb0 <i2c_do_I2C_RX+0x68>
     d86:	df 01       	movw	r26, r30
     d88:	c2 81       	ldd	r28, Z+2	; 0x02
     d8a:	d3 81       	ldd	r29, Z+3	; 0x03
     d8c:	e0 ea       	ldi	r30, 0xA0	; 160
     d8e:	f8 e0       	ldi	r31, 0x08	; 8
     d90:	80 85       	ldd	r24, Z+8	; 0x08
     d92:	88 83       	st	Y, r24
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	8d 91       	ld	r24, X+
     d98:	9c 91       	ld	r25, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	12 96       	adiw	r26, 0x02	; 2
     da0:	8d 93       	st	X+, r24
     da2:	9c 93       	st	X, r25
     da4:	13 97       	sbiw	r26, 0x03	; 3
     da6:	84 81       	ldd	r24, Z+4	; 0x04
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	84 83       	std	Z+4, r24	; 0x04
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	26 c0       	rjmp	.+76     	; 0xdfc <i2c_do_I2C_RX+0xb4>
     db0:	a6 e4       	ldi	r26, 0x46	; 70
     db2:	b0 e3       	ldi	r27, 0x30	; 48
     db4:	12 96       	adiw	r26, 0x02	; 2
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	13 97       	sbiw	r26, 0x03	; 3
     dbc:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     dc0:	80 83       	st	Z, r24
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	8d 91       	ld	r24, X+
     dc6:	9c 91       	ld	r25, X
     dc8:	13 97       	sbiw	r26, 0x03	; 3
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	12 96       	adiw	r26, 0x02	; 2
     dce:	8d 93       	st	X+, r24
     dd0:	9c 93       	st	X, r25
     dd2:	13 97       	sbiw	r26, 0x03	; 3
     dd4:	8c 91       	ld	r24, X
     dd6:	84 60       	ori	r24, 0x04	; 4
     dd8:	8c 93       	st	X, r24
     dda:	1c 96       	adiw	r26, 0x0c	; 12
     ddc:	ed 91       	ld	r30, X+
     dde:	fc 91       	ld	r31, X
     de0:	1d 97       	sbiw	r26, 0x0d	; 13
     de2:	58 96       	adiw	r26, 0x18	; 24
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	59 97       	sbiw	r26, 0x19	; 25
     dea:	09 95       	icall
     dec:	82 50       	subi	r24, 0x02	; 2
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	18 f4       	brcc	.+6      	; 0xdf8 <i2c_do_I2C_RX+0xb0>
     df2:	0e 94 67 06 	call	0xcce	; 0xcce <i2c_do_I2C_DO_NACK_RESTART>
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <i2c_do_I2C_RX+0xb4>
     df8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <i2c_do_I2C_DO_NACK_STOP>
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <i2c_do_I2C_TX_EMPTY>:
     e02:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     e06:	84 ff       	sbrs	r24, 4
     e08:	19 c0       	rjmp	.+50     	; 0xe3c <i2c_do_I2C_TX_EMPTY+0x3a>
     e0a:	a6 e4       	ldi	r26, 0x46	; 70
     e0c:	b0 e3       	ldi	r27, 0x30	; 48
     e0e:	52 96       	adiw	r26, 0x12	; 18
     e10:	ed 91       	ld	r30, X+
     e12:	fc 91       	ld	r31, X
     e14:	53 97       	sbiw	r26, 0x13	; 19
     e16:	5e 96       	adiw	r26, 0x1e	; 30
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	5f 97       	sbiw	r26, 0x1f	; 31
     e1e:	09 95       	icall
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	19 f0       	breq	.+6      	; 0xe2a <i2c_do_I2C_TX_EMPTY+0x28>
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	21 f0       	breq	.+8      	; 0xe30 <i2c_do_I2C_TX_EMPTY+0x2e>
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <i2c_do_I2C_TX_EMPTY+0x34>
     e2a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_do_I2C_SEND_RESTART_READ>
     e2e:	08 95       	ret
     e30:	0e 94 2b 06 	call	0xc56	; 0xc56 <i2c_do_I2C_SEND_RESTART_WRITE>
     e34:	08 95       	ret
     e36:	0e 94 04 06 	call	0xc08	; 0xc08 <i2c_do_I2C_SEND_STOP>
     e3a:	08 95       	ret
     e3c:	a6 e4       	ldi	r26, 0x46	; 70
     e3e:	b0 e3       	ldi	r27, 0x30	; 48
     e40:	8c 91       	ld	r24, X
     e42:	84 60       	ori	r24, 0x04	; 4
     e44:	8c 93       	st	X, r24
     e46:	1c 96       	adiw	r26, 0x0c	; 12
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	1d 97       	sbiw	r26, 0x0d	; 13
     e4e:	58 96       	adiw	r26, 0x18	; 24
     e50:	8d 91       	ld	r24, X+
     e52:	9c 91       	ld	r25, X
     e54:	59 97       	sbiw	r26, 0x19	; 25
     e56:	09 95       	icall
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	39 f0       	breq	.+14     	; 0xe6a <i2c_do_I2C_TX_EMPTY+0x68>
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	41 f0       	breq	.+16     	; 0xe70 <i2c_do_I2C_TX_EMPTY+0x6e>
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	49 f4       	brne	.+18     	; 0xe76 <i2c_do_I2C_TX_EMPTY+0x74>
     e64:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_do_I2C_SEND_RESTART_READ>
     e68:	08 95       	ret
     e6a:	0e 94 2b 06 	call	0xc56	; 0xc56 <i2c_do_I2C_SEND_RESTART_WRITE>
     e6e:	08 95       	ret
     e70:	0e 94 6e 06 	call	0xcdc	; 0xcdc <i2c_do_I2C_TX>
     e74:	08 95       	ret
     e76:	0e 94 04 06 	call	0xc08	; 0xc08 <i2c_do_I2C_SEND_STOP>
     e7a:	08 95       	ret

00000e7c <i2c_do_I2C_BUS_COLLISION>:
     e7c:	e0 ea       	ldi	r30, 0xA0	; 160
     e7e:	f8 e0       	ldi	r31, 0x08	; 8
     e80:	85 81       	ldd	r24, Z+5	; 0x05
     e82:	88 60       	ori	r24, 0x08	; 8
     e84:	85 83       	std	Z+5, r24	; 0x05
     e86:	a6 e4       	ldi	r26, 0x46	; 70
     e88:	b0 e3       	ldi	r27, 0x30	; 48
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	1b 96       	adiw	r26, 0x0b	; 11
     e8e:	8c 93       	st	X, r24
     e90:	1b 97       	sbiw	r26, 0x0b	; 11
     e92:	1e 96       	adiw	r26, 0x0e	; 14
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	1f 97       	sbiw	r26, 0x0f	; 15
     e9a:	5a 96       	adiw	r26, 0x1a	; 26
     e9c:	8d 91       	ld	r24, X+
     e9e:	9c 91       	ld	r25, X
     ea0:	5b 97       	sbiw	r26, 0x1b	; 27
     ea2:	09 95       	icall
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	19 f0       	breq	.+6      	; 0xeae <i2c_do_I2C_BUS_COLLISION+0x32>
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <i2c_do_I2C_BUS_COLLISION+0x38>
     eac:	06 c0       	rjmp	.+12     	; 0xeba <i2c_do_I2C_BUS_COLLISION+0x3e>
     eae:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_do_I2C_SEND_RESTART_READ>
     eb2:	08 95       	ret
     eb4:	0e 94 2b 06 	call	0xc56	; 0xc56 <i2c_do_I2C_SEND_RESTART_WRITE>
     eb8:	08 95       	ret
     eba:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <i2c_do_I2C_RESET>
     ebe:	08 95       	ret

00000ec0 <i2c_do_I2C_BUS_ERROR>:
     ec0:	e0 ea       	ldi	r30, 0xA0	; 160
     ec2:	f8 e0       	ldi	r31, 0x08	; 8
     ec4:	84 81       	ldd	r24, Z+4	; 0x04
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	84 83       	std	Z+4, r24	; 0x04
     eca:	85 81       	ldd	r24, Z+5	; 0x05
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	85 83       	std	Z+5, r24	; 0x05
     ed0:	e6 e4       	ldi	r30, 0x46	; 70
     ed2:	f0 e3       	ldi	r31, 0x30	; 48
     ed4:	80 81       	ld	r24, Z
     ed6:	8e 7f       	andi	r24, 0xFE	; 254
     ed8:	80 83       	st	Z, r24
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	83 87       	std	Z+11, r24	; 0x0b
     ede:	8e e0       	ldi	r24, 0x0E	; 14
     ee0:	08 95       	ret

00000ee2 <i2c_master_isr>:
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	e0 ea       	ldi	r30, 0xA0	; 160
     ee8:	f8 e0       	ldi	r31, 0x08	; 8
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	80 6c       	ori	r24, 0xC0	; 192
     eee:	85 83       	std	Z+5, r24	; 0x05
     ef0:	80 91 46 30 	lds	r24, 0x3046	; 0x803046 <i2c_status>
     ef4:	83 ff       	sbrs	r24, 3
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <i2c_master_isr+0x24>
     ef8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     efc:	84 ff       	sbrs	r24, 4
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <i2c_master_isr+0x24>
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <i2c_status+0xa>
     f06:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     f0a:	83 ff       	sbrs	r24, 3
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <i2c_master_isr+0x32>
     f0e:	80 e1       	ldi	r24, 0x10	; 16
     f10:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <i2c_status+0xa>
     f14:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     f18:	82 ff       	sbrs	r24, 2
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <i2c_master_isr+0x40>
     f1c:	81 e1       	ldi	r24, 0x11	; 17
     f1e:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <i2c_status+0xa>
     f22:	c6 e4       	ldi	r28, 0x46	; 70
     f24:	d0 e3       	ldi	r29, 0x30	; 48
     f26:	ea 85       	ldd	r30, Y+10	; 0x0a
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e0 50       	subi	r30, 0x00	; 0
     f30:	f0 4d       	sbci	r31, 0xD0	; 208
     f32:	01 90       	ld	r0, Z+
     f34:	f0 81       	ld	r31, Z
     f36:	e0 2d       	mov	r30, r0
     f38:	09 95       	icall
     f3a:	8a 87       	std	Y+10, r24	; 0x0a
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <i2c_return_stop>:
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	08 95       	ret

00000f46 <i2c_return_reset>:
     f46:	85 e0       	ldi	r24, 0x05	; 5
     f48:	08 95       	ret

00000f4a <i2c_set_callback>:
     f4a:	61 15       	cp	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	91 f0       	breq	.+36     	; 0xf74 <i2c_set_callback+0x2a>
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	36 96       	adiw	r30, 0x06	; 6
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ea 5b       	subi	r30, 0xBA	; 186
     f5c:	ff 4c       	sbci	r31, 0xCF	; 207
     f5e:	60 83       	st	Z, r22
     f60:	71 83       	std	Z+1, r23	; 0x01
     f62:	fc 01       	movw	r30, r24
     f64:	3c 96       	adiw	r30, 0x0c	; 12
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	ea 5b       	subi	r30, 0xBA	; 186
     f6c:	ff 4c       	sbci	r31, 0xCF	; 207
     f6e:	40 83       	st	Z, r20
     f70:	51 83       	std	Z+1, r21	; 0x01
     f72:	08 95       	ret
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	36 96       	adiw	r30, 0x06	; 6
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ea 5b       	subi	r30, 0xBA	; 186
     f80:	ff 4c       	sbci	r31, 0xCF	; 207
     f82:	21 ea       	ldi	r18, 0xA1	; 161
     f84:	37 e0       	ldi	r19, 0x07	; 7
     f86:	20 83       	st	Z, r18
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	fc 01       	movw	r30, r24
     f8c:	3c 96       	adiw	r30, 0x0c	; 12
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ea 5b       	subi	r30, 0xBA	; 186
     f94:	ff 4c       	sbci	r31, 0xCF	; 207
     f96:	10 82       	st	Z, r1
     f98:	11 82       	std	Z+1, r1	; 0x01
     f9a:	08 95       	ret

00000f9c <i2c_set_data_complete_callback>:
     f9c:	ab 01       	movw	r20, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <i2c_set_callback>
     fa6:	08 95       	ret

00000fa8 <i2c_set_address_nack_callback>:
     fa8:	ab 01       	movw	r20, r22
     faa:	bc 01       	movw	r22, r24
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <i2c_set_callback>
     fb2:	08 95       	ret

00000fb4 <i2c_init>:
     fb4:	e0 ea       	ldi	r30, 0xA0	; 160
     fb6:	f8 e0       	ldi	r31, 0x08	; 8
     fb8:	8b e0       	ldi	r24, 0x0B	; 11
     fba:	86 83       	std	Z+6, r24	; 0x06
     fbc:	81 ec       	ldi	r24, 0xC1	; 193
     fbe:	83 83       	std	Z+3, r24	; 0x03
     fc0:	08 95       	ret

00000fc2 <i2c_open>:
     fc2:	90 91 46 30 	lds	r25, 0x3046	; 0x803046 <i2c_status>
     fc6:	91 fd       	sbrc	r25, 1
     fc8:	37 c0       	rjmp	.+110    	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
     fca:	e6 e4       	ldi	r30, 0x46	; 70
     fcc:	f0 e3       	ldi	r31, 0x30	; 48
     fce:	81 83       	std	Z+1, r24	; 0x01
     fd0:	89 2f       	mov	r24, r25
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	9e e0       	ldi	r25, 0x0E	; 14
     fd8:	92 87       	std	Z+10, r25	; 0x0a
     fda:	24 ef       	ldi	r18, 0xF4	; 244
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	20 87       	std	Z+8, r18	; 0x08
     fe0:	31 87       	std	Z+9, r19	; 0x09
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	84 60       	ori	r24, 0x04	; 4
     fe6:	80 83       	st	Z, r24
     fe8:	81 ea       	ldi	r24, 0xA1	; 161
     fea:	97 e0       	ldi	r25, 0x07	; 7
     fec:	84 87       	std	Z+12, r24	; 0x0c
     fee:	95 87       	std	Z+13, r25	; 0x0d
     ff0:	10 8e       	std	Z+24, r1	; 0x18
     ff2:	11 8e       	std	Z+25, r1	; 0x19
     ff4:	86 87       	std	Z+14, r24	; 0x0e
     ff6:	97 87       	std	Z+15, r25	; 0x0f
     ff8:	12 8e       	std	Z+26, r1	; 0x1a
     ffa:	13 8e       	std	Z+27, r1	; 0x1b
     ffc:	80 8b       	std	Z+16, r24	; 0x10
     ffe:	91 8b       	std	Z+17, r25	; 0x11
    1000:	14 8e       	std	Z+28, r1	; 0x1c
    1002:	15 8e       	std	Z+29, r1	; 0x1d
    1004:	82 8b       	std	Z+18, r24	; 0x12
    1006:	93 8b       	std	Z+19, r25	; 0x13
    1008:	16 8e       	std	Z+30, r1	; 0x1e
    100a:	17 8e       	std	Z+31, r1	; 0x1f
    100c:	83 ea       	ldi	r24, 0xA3	; 163
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	84 8b       	std	Z+20, r24	; 0x14
    1012:	95 8b       	std	Z+21, r25	; 0x15
    1014:	10 a2       	std	Z+32, r1	; 0x20
    1016:	11 a2       	std	Z+33, r1	; 0x21
    1018:	e0 ea       	ldi	r30, 0xA0	; 160
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	84 81       	ldd	r24, Z+4	; 0x04
    101e:	88 60       	ori	r24, 0x08	; 8
    1020:	84 83       	std	Z+4, r24	; 0x04
    1022:	85 81       	ldd	r24, Z+5	; 0x05
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	85 83       	std	Z+5, r24	; 0x05
    1028:	85 81       	ldd	r24, Z+5	; 0x05
    102a:	80 6c       	ori	r24, 0xC0	; 192
    102c:	85 83       	std	Z+5, r24	; 0x05
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	80 6c       	ori	r24, 0xC0	; 192
    1032:	83 83       	std	Z+3, r24	; 0x03
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	08 95       	ret
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	08 95       	ret

0000103c <i2c_close>:
    103c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    1040:	82 ff       	sbrs	r24, 2
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <i2c_close+0x16>
    1044:	e6 e4       	ldi	r30, 0x46	; 70
    1046:	f0 e3       	ldi	r31, 0x30	; 48
    1048:	80 81       	ld	r24, Z
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	80 83       	st	Z, r24
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	83 87       	std	Z+11, r24	; 0x0b
    1052:	80 91 46 30 	lds	r24, 0x3046	; 0x803046 <i2c_status>
    1056:	80 fd       	sbrc	r24, 0
    1058:	17 c0       	rjmp	.+46     	; 0x1088 <i2c_close+0x4c>
    105a:	e6 e4       	ldi	r30, 0x46	; 70
    105c:	f0 e3       	ldi	r31, 0x30	; 48
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	80 83       	st	Z, r24
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	81 83       	std	Z+1, r24	; 0x01
    1066:	a0 ea       	ldi	r26, 0xA0	; 160
    1068:	b8 e0       	ldi	r27, 0x08	; 8
    106a:	15 96       	adiw	r26, 0x05	; 5
    106c:	8c 91       	ld	r24, X
    106e:	15 97       	sbiw	r26, 0x05	; 5
    1070:	80 6c       	ori	r24, 0xC0	; 192
    1072:	15 96       	adiw	r26, 0x05	; 5
    1074:	8c 93       	st	X, r24
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	13 96       	adiw	r26, 0x03	; 3
    107a:	8c 91       	ld	r24, X
    107c:	13 97       	sbiw	r26, 0x03	; 3
    107e:	8f 73       	andi	r24, 0x3F	; 63
    1080:	13 96       	adiw	r26, 0x03	; 3
    1082:	8c 93       	st	X, r24
    1084:	83 85       	ldd	r24, Z+11	; 0x0b
    1086:	08 95       	ret
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret

0000108c <i2c_set_buffer>:
    108c:	9c 01       	movw	r18, r24
    108e:	90 91 46 30 	lds	r25, 0x3046	; 0x803046 <i2c_status>
    1092:	92 ff       	sbrs	r25, 2
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <i2c_set_buffer+0x1c>
    1096:	e6 e4       	ldi	r30, 0x46	; 70
    1098:	f0 e3       	ldi	r31, 0x30	; 48
    109a:	22 83       	std	Z+2, r18	; 0x02
    109c:	33 83       	std	Z+3, r19	; 0x03
    109e:	64 83       	std	Z+4, r22	; 0x04
    10a0:	75 83       	std	Z+5, r23	; 0x05
    10a2:	89 2f       	mov	r24, r25
    10a4:	8b 7f       	andi	r24, 0xFB	; 251
    10a6:	80 83       	st	Z, r24
    10a8:	08 95       	ret

000010aa <i2c_master_operation>:
    10aa:	90 91 46 30 	lds	r25, 0x3046	; 0x803046 <i2c_status>
    10ae:	90 fd       	sbrc	r25, 0
    10b0:	11 c0       	rjmp	.+34     	; 0x10d4 <i2c_master_operation+0x2a>
    10b2:	e6 e4       	ldi	r30, 0x46	; 70
    10b4:	f0 e3       	ldi	r31, 0x30	; 48
    10b6:	91 60       	ori	r25, 0x01	; 1
    10b8:	90 83       	st	Z, r25
    10ba:	88 23       	and	r24, r24
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <i2c_master_operation+0x1c>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <i2c_status+0xa>
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <i2c_master_operation+0x22>
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <i2c_status+0xa>
    10cc:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_master_isr>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	08 95       	ret
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	08 95       	ret

000010d8 <i2c_master_write>:
/**
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 55 08 	call	0x10aa	; 0x10aa <i2c_master_operation>
}
    10de:	08 95       	ret

000010e0 <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
	i2c_master_isr();
    1102:	0e 94 71 07 	call	0xee2	; 0xee2 <i2c_master_isr>
}
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <i2c_wr1RegCompleteHandler>:
		; // sit here until finished.
	if (!timeout)
		return I2C_FAIL;

	return I2C_NOERR;
}
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	08 95       	ret

00001140 <i2c_rd1RegCompleteHandler>:
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	08 95       	ret

00001158 <i2c_rd2RegCompleteHandler>:
    1158:	62 e0       	ldi	r22, 0x02	; 2
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	08 95       	ret

00001170 <i2c_write1ByteRegister>:
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <i2c_write1ByteRegister+0xc>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	f8 2e       	mov	r15, r24
    1182:	69 83       	std	Y+1, r22	; 0x01
    1184:	4a 83       	std	Y+2, r20	; 0x02
    1186:	00 e1       	ldi	r16, 0x10	; 16
    1188:	17 e2       	ldi	r17, 0x27	; 39
    118a:	8f 2d       	mov	r24, r15
    118c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <i2c_open>
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	19 f4       	brne	.+6      	; 0x119a <i2c_write1ByteRegister+0x2a>
    1194:	01 50       	subi	r16, 0x01	; 1
    1196:	11 09       	sbc	r17, r1
    1198:	c1 f7       	brne	.-16     	; 0x118a <i2c_write1ByteRegister+0x1a>
    119a:	01 2b       	or	r16, r17
    119c:	11 f1       	breq	.+68     	; 0x11e2 <i2c_write1ByteRegister+0x72>
    119e:	be 01       	movw	r22, r28
    11a0:	6e 5f       	subi	r22, 0xFE	; 254
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	84 e9       	ldi	r24, 0x94	; 148
    11a6:	98 e0       	ldi	r25, 0x08	; 8
    11a8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	8f e6       	ldi	r24, 0x6F	; 111
    11be:	99 e0       	ldi	r25, 0x09	; 9
    11c0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <i2c_set_address_nack_callback>
    11c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_master_write>
    11c8:	00 e1       	ldi	r16, 0x10	; 16
    11ca:	17 e2       	ldi	r17, 0x27	; 39
    11cc:	0e 94 1e 08 	call	0x103c	; 0x103c <i2c_close>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	19 f4       	brne	.+6      	; 0x11da <i2c_write1ByteRegister+0x6a>
    11d4:	01 50       	subi	r16, 0x01	; 1
    11d6:	11 09       	sbc	r17, r1
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <i2c_write1ByteRegister+0x5c>
    11da:	01 2b       	or	r16, r17
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <i2c_write1ByteRegister+0x76>
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <i2c_write1ByteRegister+0x78>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <i2c_write1ByteRegister+0x78>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	08 95       	ret

000011f8 <i2c_read1ByteRegister>:
	i2c_set_data_complete_callback(NULL, NULL);
	return i2c_restart_read;
}

uint8_t i2c_read1ByteRegister(i2c_address_t address, uint8_t reg)
{
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 d0       	rcall	.+0      	; 0x1204 <i2c_read1ByteRegister+0xc>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	18 2f       	mov	r17, r24
    120a:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t     d2 = 42;
    120c:	8a e2       	ldi	r24, 0x2A	; 42
    120e:	89 83       	std	Y+1, r24	; 0x01
	i2c_error_t e;
	int         x;

	for (x = 2; x != 0; x--) {
    1210:	68 94       	set
    1212:	ee 24       	eor	r14, r14
    1214:	e1 f8       	bld	r14, 1
    1216:	f1 2c       	mov	r15, r1
    1218:	23 c0       	rjmp	.+70     	; 0x1260 <i2c_read1ByteRegister+0x68>
		while (!i2c_open(address))
    121a:	81 2f       	mov	r24, r17
    121c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <i2c_open>
    1220:	88 23       	and	r24, r24
    1222:	d9 f3       	breq	.-10     	; 0x121a <i2c_read1ByteRegister+0x22>
			; // sit here until we get the bus..
		i2c_set_data_complete_callback(i2c_rd1RegCompleteHandler, &d2);
    1224:	be 01       	movw	r22, r28
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	80 ea       	ldi	r24, 0xA0	; 160
    122c:	98 e0       	ldi	r25, 0x08	; 8
    122e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
		i2c_set_buffer(&reg, 1);
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	02 96       	adiw	r24, 0x02	; 2
    123a:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
		i2c_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	8f e6       	ldi	r24, 0x6F	; 111
    1244:	99 e0       	ldi	r25, 0x09	; 9
    1246:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <i2c_set_address_nack_callback>
		i2c_master_write();
    124a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_master_write>
		while (I2C_BUSY == (e = i2c_close()))
    124e:	0e 94 1e 08 	call	0x103c	; 0x103c <i2c_close>
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	e1 f3       	breq	.-8      	; 0x124e <i2c_read1ByteRegister+0x56>
			; // sit here until finished.
		if (e == I2C_NOERR)
    1256:	88 23       	and	r24, r24
    1258:	31 f0       	breq	.+12     	; 0x1266 <i2c_read1ByteRegister+0x6e>
{
	uint8_t     d2 = 42;
	i2c_error_t e;
	int         x;

	for (x = 2; x != 0; x--) {
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	e8 1a       	sub	r14, r24
    125e:	f1 08       	sbc	r15, r1
    1260:	e1 14       	cp	r14, r1
    1262:	f1 04       	cpc	r15, r1
    1264:	d1 f6       	brne	.-76     	; 0x121a <i2c_read1ByteRegister+0x22>
		if (e == I2C_NOERR)
			break;
	}

	return d2;
}
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <i2c_read2ByteRegister>:
	i2c_set_data_complete_callback(NULL, NULL);
	return i2c_restart_read;
}

uint16_t i2c_read2ByteRegister(i2c_address_t address, uint8_t reg)
{
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <i2c_read2ByteRegister+0x8>
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	18 2f       	mov	r17, r24
    1288:	6b 83       	std	Y+3, r22	; 0x03
	// result is little endian
	uint16_t result;

	while (!i2c_open(address))
    128a:	81 2f       	mov	r24, r17
    128c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <i2c_open>
    1290:	88 23       	and	r24, r24
    1292:	d9 f3       	breq	.-10     	; 0x128a <i2c_read2ByteRegister+0x12>
		; // sit here until we get the bus..
	i2c_set_data_complete_callback(i2c_rd2RegCompleteHandler, &result);
    1294:	be 01       	movw	r22, r28
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8c ea       	ldi	r24, 0xAC	; 172
    129c:	98 e0       	ldi	r25, 0x08	; 8
    129e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <i2c_set_data_complete_callback>
	i2c_set_buffer(&reg, 1);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	ce 01       	movw	r24, r28
    12a8:	03 96       	adiw	r24, 0x03	; 3
    12aa:	0e 94 46 08 	call	0x108c	; 0x108c <i2c_set_buffer>
	i2c_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	8f e6       	ldi	r24, 0x6F	; 111
    12b4:	99 e0       	ldi	r25, 0x09	; 9
    12b6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <i2c_set_address_nack_callback>
	i2c_master_write();
    12ba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_master_write>
	while (I2C_BUSY == i2c_close())
    12be:	0e 94 1e 08 	call	0x103c	; 0x103c <i2c_close>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	e1 f3       	breq	.-8      	; 0x12be <i2c_read2ByteRegister+0x46>
		; // sit here until finished.

	return (result << 8 | result >> 8);
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12ca:	98 27       	eor	r25, r24
    12cc:	89 27       	eor	r24, r25
    12ce:	98 27       	eor	r25, r24
    12d0:	23 96       	adiw	r28, 0x03	; 3
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <i2c_cb_restart_write>:
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	08 95       	ret

000012e2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret

000012e6 <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret

000012ea <rx487x_default_rx_isr_cb>:
 *
 * \return Nothing
 */
void usb_cdc_disable()
{
	USART2.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    12ea:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    12ee:	e0 91 7d 32 	lds	r30, 0x327D	; 0x80327d <rx487x_rx_head>
    12f2:	ef 5f       	subi	r30, 0xFF	; 255
    12f4:	e7 70       	andi	r30, 0x07	; 7
    12f6:	80 91 7c 32 	lds	r24, 0x327C	; 0x80327c <rx487x_rx_tail>
    12fa:	e8 17       	cp	r30, r24
    12fc:	59 f0       	breq	.+22     	; 0x1314 <rx487x_default_rx_isr_cb+0x2a>
    12fe:	e0 93 7d 32 	sts	0x327D, r30	; 0x80327d <rx487x_rx_head>
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	e2 58       	subi	r30, 0x82	; 130
    1306:	fd 4c       	sbci	r31, 0xCD	; 205
    1308:	90 83       	st	Z, r25
    130a:	80 91 7b 32 	lds	r24, 0x327B	; 0x80327b <rx487x_rx_elements>
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	80 93 7b 32 	sts	0x327B, r24	; 0x80327b <rx487x_rx_elements>
    1314:	08 95       	ret

00001316 <rx487x_default_udre_isr_cb>:
    1316:	80 91 70 32 	lds	r24, 0x3270	; 0x803270 <rx487x_tx_elements>
    131a:	88 23       	and	r24, r24
    131c:	89 f0       	breq	.+34     	; 0x1340 <rx487x_default_udre_isr_cb+0x2a>
    131e:	e0 91 71 32 	lds	r30, 0x3271	; 0x803271 <rx487x_tx_tail>
    1322:	ef 5f       	subi	r30, 0xFF	; 255
    1324:	e7 70       	andi	r30, 0x07	; 7
    1326:	e0 93 71 32 	sts	0x3271, r30	; 0x803271 <rx487x_tx_tail>
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	ed 58       	subi	r30, 0x8D	; 141
    132e:	fd 4c       	sbci	r31, 0xCD	; 205
    1330:	80 81       	ld	r24, Z
    1332:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
    1336:	80 91 70 32 	lds	r24, 0x3270	; 0x803270 <rx487x_tx_elements>
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	80 93 70 32 	sts	0x3270, r24	; 0x803270 <rx487x_tx_elements>
    1340:	80 91 70 32 	lds	r24, 0x3270	; 0x803270 <rx487x_tx_elements>
    1344:	81 11       	cpse	r24, r1
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <rx487x_default_udre_isr_cb+0x3c>
    1348:	e0 e0       	ldi	r30, 0x00	; 0
    134a:	f8 e0       	ldi	r31, 0x08	; 8
    134c:	85 81       	ldd	r24, Z+5	; 0x05
    134e:	8f 7d       	andi	r24, 0xDF	; 223
    1350:	85 83       	std	Z+5, r24	; 0x05
    1352:	08 95       	ret

00001354 <usb_cdc_default_rx_isr_cb>:
    1354:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
    1358:	e0 91 6f 31 	lds	r30, 0x316F	; 0x80316f <usb_cdc_rx_head>
    135c:	ef 5f       	subi	r30, 0xFF	; 255
    135e:	80 91 6e 31 	lds	r24, 0x316E	; 0x80316e <usb_cdc_rx_tail>
    1362:	e8 17       	cp	r30, r24
    1364:	59 f0       	breq	.+22     	; 0x137c <usb_cdc_default_rx_isr_cb+0x28>
    1366:	e0 93 6f 31 	sts	0x316F, r30	; 0x80316f <usb_cdc_rx_head>
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	e0 59       	subi	r30, 0x90	; 144
    136e:	fe 4c       	sbci	r31, 0xCE	; 206
    1370:	90 83       	st	Z, r25
    1372:	80 91 6d 31 	lds	r24, 0x316D	; 0x80316d <usb_cdc_rx_elements>
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	80 93 6d 31 	sts	0x316D, r24	; 0x80316d <usb_cdc_rx_elements>
    137c:	08 95       	ret

0000137e <usb_cdc_default_udre_isr_cb>:
    137e:	80 91 6a 30 	lds	r24, 0x306A	; 0x80306a <usb_cdc_tx_elements>
    1382:	88 23       	and	r24, r24
    1384:	81 f0       	breq	.+32     	; 0x13a6 <usb_cdc_default_udre_isr_cb+0x28>
    1386:	e0 91 6b 30 	lds	r30, 0x306B	; 0x80306b <usb_cdc_tx_tail>
    138a:	ef 5f       	subi	r30, 0xFF	; 255
    138c:	e0 93 6b 30 	sts	0x306B, r30	; 0x80306b <usb_cdc_tx_tail>
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	e3 59       	subi	r30, 0x93	; 147
    1394:	ff 4c       	sbci	r31, 0xCF	; 207
    1396:	80 81       	ld	r24, Z
    1398:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
    139c:	80 91 6a 30 	lds	r24, 0x306A	; 0x80306a <usb_cdc_tx_elements>
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	80 93 6a 30 	sts	0x306A, r24	; 0x80306a <usb_cdc_tx_elements>
    13a6:	80 91 6a 30 	lds	r24, 0x306A	; 0x80306a <usb_cdc_tx_elements>
    13aa:	81 11       	cpse	r24, r1
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <usb_cdc_default_udre_isr_cb+0x3a>
    13ae:	e0 e4       	ldi	r30, 0x40	; 64
    13b0:	f8 e0       	ldi	r31, 0x08	; 8
    13b2:	85 81       	ldd	r24, Z+5	; 0x05
    13b4:	8f 7d       	andi	r24, 0xDF	; 223
    13b6:	85 83       	std	Z+5, r24	; 0x05
    13b8:	08 95       	ret

000013ba <rx487x_set_ISR_cb>:
    13ba:	61 30       	cpi	r22, 0x01	; 1
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <rx487x_set_ISR_cb+0xa>
    13be:	62 30       	cpi	r22, 0x02	; 2
    13c0:	31 f0       	breq	.+12     	; 0x13ce <rx487x_set_ISR_cb+0x14>
    13c2:	08 95       	ret
    13c4:	80 93 38 30 	sts	0x3038, r24	; 0x803038 <rx487x_rx_isr_cb>
    13c8:	90 93 39 30 	sts	0x3039, r25	; 0x803039 <rx487x_rx_isr_cb+0x1>
    13cc:	08 95       	ret
    13ce:	80 93 36 30 	sts	0x3036, r24	; 0x803036 <rx487x_udre_isr_cb>
    13d2:	90 93 37 30 	sts	0x3037, r25	; 0x803037 <rx487x_udre_isr_cb+0x1>
    13d6:	08 95       	ret

000013d8 <__vector_17>:
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	4f 93       	push	r20
    13e8:	5f 93       	push	r21
    13ea:	6f 93       	push	r22
    13ec:	7f 93       	push	r23
    13ee:	8f 93       	push	r24
    13f0:	9f 93       	push	r25
    13f2:	af 93       	push	r26
    13f4:	bf 93       	push	r27
    13f6:	ef 93       	push	r30
    13f8:	ff 93       	push	r31
    13fa:	e0 91 38 30 	lds	r30, 0x3038	; 0x803038 <rx487x_rx_isr_cb>
    13fe:	f0 91 39 30 	lds	r31, 0x3039	; 0x803039 <rx487x_rx_isr_cb+0x1>
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	09 f0       	breq	.+2      	; 0x1408 <__vector_17+0x30>
    1406:	09 95       	icall
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_18>:
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	4f 93       	push	r20
    143a:	5f 93       	push	r21
    143c:	6f 93       	push	r22
    143e:	7f 93       	push	r23
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
    144c:	e0 91 36 30 	lds	r30, 0x3036	; 0x803036 <rx487x_udre_isr_cb>
    1450:	f0 91 37 30 	lds	r31, 0x3037	; 0x803037 <rx487x_udre_isr_cb+0x1>
    1454:	30 97       	sbiw	r30, 0x00	; 0
    1456:	09 f0       	breq	.+2      	; 0x145a <__vector_18+0x30>
    1458:	09 95       	icall
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <rx487x_is_tx_ready>:
    147c:	90 91 70 32 	lds	r25, 0x3270	; 0x803270 <rx487x_tx_elements>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	98 30       	cpi	r25, 0x08	; 8
    1484:	09 f4       	brne	.+2      	; 0x1488 <rx487x_is_tx_ready+0xc>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	08 95       	ret

0000148a <rx487x_write>:
    148a:	20 91 72 32 	lds	r18, 0x3272	; 0x803272 <rx487x_tx_head>
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	27 70       	andi	r18, 0x07	; 7
    1492:	90 91 70 32 	lds	r25, 0x3270	; 0x803270 <rx487x_tx_elements>
    1496:	98 30       	cpi	r25, 0x08	; 8
    1498:	e1 f3       	breq	.-8      	; 0x1492 <rx487x_write+0x8>
    149a:	e2 2f       	mov	r30, r18
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	ed 58       	subi	r30, 0x8D	; 141
    14a0:	fd 4c       	sbci	r31, 0xCD	; 205
    14a2:	80 83       	st	Z, r24
    14a4:	20 93 72 32 	sts	0x3272, r18	; 0x803272 <rx487x_tx_head>
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	0f 92       	push	r0
    14ae:	80 91 70 32 	lds	r24, 0x3270	; 0x803270 <rx487x_tx_elements>
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	80 93 70 32 	sts	0x3270, r24	; 0x803270 <rx487x_tx_elements>
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	e0 e0       	ldi	r30, 0x00	; 0
    14be:	f8 e0       	ldi	r31, 0x08	; 8
    14c0:	85 81       	ldd	r24, Z+5	; 0x05
    14c2:	80 62       	ori	r24, 0x20	; 32
    14c4:	85 83       	std	Z+5, r24	; 0x05
    14c6:	08 95       	ret

000014c8 <rx487x_init>:
    14c8:	e0 e0       	ldi	r30, 0x00	; 0
    14ca:	f8 e0       	ldi	r31, 0x08	; 8
    14cc:	84 e7       	ldi	r24, 0x74	; 116
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	80 87       	std	Z+8, r24	; 0x08
    14d2:	91 87       	std	Z+9, r25	; 0x09
    14d4:	80 e8       	ldi	r24, 0x80	; 128
    14d6:	85 83       	std	Z+5, r24	; 0x05
    14d8:	80 ec       	ldi	r24, 0xC0	; 192
    14da:	86 83       	std	Z+6, r24	; 0x06
    14dc:	10 92 7c 32 	sts	0x327C, r1	; 0x80327c <rx487x_rx_tail>
    14e0:	10 92 7d 32 	sts	0x327D, r1	; 0x80327d <rx487x_rx_head>
    14e4:	10 92 7b 32 	sts	0x327B, r1	; 0x80327b <rx487x_rx_elements>
    14e8:	10 92 71 32 	sts	0x3271, r1	; 0x803271 <rx487x_tx_tail>
    14ec:	10 92 72 32 	sts	0x3272, r1	; 0x803272 <rx487x_tx_head>
    14f0:	10 92 70 32 	sts	0x3270, r1	; 0x803270 <rx487x_tx_elements>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	08 95       	ret

000014f8 <rx487x_get_data>:
    14f8:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    14fc:	08 95       	ret

000014fe <usb_cdc_set_ISR_cb>:
    14fe:	61 30       	cpi	r22, 0x01	; 1
    1500:	19 f0       	breq	.+6      	; 0x1508 <usb_cdc_set_ISR_cb+0xa>
    1502:	62 30       	cpi	r22, 0x02	; 2
    1504:	31 f0       	breq	.+12     	; 0x1512 <usb_cdc_set_ISR_cb+0x14>
    1506:	08 95       	ret
    1508:	80 93 26 30 	sts	0x3026, r24	; 0x803026 <usb_cdc_rx_isr_cb>
    150c:	90 93 27 30 	sts	0x3027, r25	; 0x803027 <usb_cdc_rx_isr_cb+0x1>
    1510:	08 95       	ret
    1512:	80 93 24 30 	sts	0x3024, r24	; 0x803024 <usb_cdc_udre_isr_cb>
    1516:	90 93 25 30 	sts	0x3025, r25	; 0x803025 <usb_cdc_udre_isr_cb+0x1>
    151a:	08 95       	ret

0000151c <__vector_31>:
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	e0 91 26 30 	lds	r30, 0x3026	; 0x803026 <usb_cdc_rx_isr_cb>
    1542:	f0 91 27 30 	lds	r31, 0x3027	; 0x803027 <usb_cdc_rx_isr_cb+0x1>
    1546:	30 97       	sbiw	r30, 0x00	; 0
    1548:	09 f0       	breq	.+2      	; 0x154c <__vector_31+0x30>
    154a:	09 95       	icall
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_32>:
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	e0 91 24 30 	lds	r30, 0x3024	; 0x803024 <usb_cdc_udre_isr_cb>
    1594:	f0 91 25 30 	lds	r31, 0x3025	; 0x803025 <usb_cdc_udre_isr_cb+0x1>
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	09 f0       	breq	.+2      	; 0x159e <__vector_32+0x30>
    159c:	09 95       	icall
    159e:	ff 91       	pop	r31
    15a0:	ef 91       	pop	r30
    15a2:	bf 91       	pop	r27
    15a4:	af 91       	pop	r26
    15a6:	9f 91       	pop	r25
    15a8:	8f 91       	pop	r24
    15aa:	7f 91       	pop	r23
    15ac:	6f 91       	pop	r22
    15ae:	5f 91       	pop	r21
    15b0:	4f 91       	pop	r20
    15b2:	3f 91       	pop	r19
    15b4:	2f 91       	pop	r18
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <usb_cdc_write>:
    15c0:	90 91 6c 30 	lds	r25, 0x306C	; 0x80306c <usb_cdc_tx_head>
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
    15c6:	20 91 6a 30 	lds	r18, 0x306A	; 0x80306a <usb_cdc_tx_elements>
    15ca:	e9 2f       	mov	r30, r25
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	e3 59       	subi	r30, 0x93	; 147
    15d0:	ff 4c       	sbci	r31, 0xCF	; 207
    15d2:	80 83       	st	Z, r24
    15d4:	90 93 6c 30 	sts	0x306C, r25	; 0x80306c <usb_cdc_tx_head>
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	0f 92       	push	r0
    15de:	80 91 6a 30 	lds	r24, 0x306A	; 0x80306a <usb_cdc_tx_elements>
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 6a 30 	sts	0x306A, r24	; 0x80306a <usb_cdc_tx_elements>
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	e0 e4       	ldi	r30, 0x40	; 64
    15ee:	f8 e0       	ldi	r31, 0x08	; 8
    15f0:	85 81       	ldd	r24, Z+5	; 0x05
    15f2:	80 62       	ori	r24, 0x20	; 32
    15f4:	85 83       	std	Z+5, r24	; 0x05
    15f6:	08 95       	ret

000015f8 <usb_cdc_printCHAR>:
    15f8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <usb_cdc_write>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	08 95       	ret

00001602 <usb_cdc_init>:
    1602:	e0 e4       	ldi	r30, 0x40	; 64
    1604:	f8 e0       	ldi	r31, 0x08	; 8
    1606:	84 e7       	ldi	r24, 0x74	; 116
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	80 87       	std	Z+8, r24	; 0x08
    160c:	91 87       	std	Z+9, r25	; 0x09
    160e:	80 e8       	ldi	r24, 0x80	; 128
    1610:	85 83       	std	Z+5, r24	; 0x05
    1612:	80 ec       	ldi	r24, 0xC0	; 192
    1614:	86 83       	std	Z+6, r24	; 0x06
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	83 87       	std	Z+11, r24	; 0x0b
    161a:	10 92 6e 31 	sts	0x316E, r1	; 0x80316e <usb_cdc_rx_tail>
    161e:	10 92 6f 31 	sts	0x316F, r1	; 0x80316f <usb_cdc_rx_head>
    1622:	10 92 6d 31 	sts	0x316D, r1	; 0x80316d <usb_cdc_rx_elements>
    1626:	10 92 6b 30 	sts	0x306B, r1	; 0x80306b <usb_cdc_tx_tail>
    162a:	10 92 6c 30 	sts	0x306C, r1	; 0x80306c <usb_cdc_tx_head>
    162e:	10 92 6a 30 	sts	0x306A, r1	; 0x80306a <usb_cdc_tx_elements>
    1632:	88 e2       	ldi	r24, 0x28	; 40
    1634:	90 e3       	ldi	r25, 0x30	; 48
    1636:	80 93 1b 34 	sts	0x341B, r24	; 0x80341b <__iob+0x2>
    163a:	90 93 1c 34 	sts	0x341C, r25	; 0x80341c <__iob+0x3>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret

00001642 <usb_cdc_get_data>:
 *
 * \return Data register from usb_cdc module
 */
uint8_t usb_cdc_get_data()
{
	return USART2.RXDATAL;
    1642:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
}
    1646:	08 95       	ret

00001648 <__subsf3>:
    1648:	50 58       	subi	r21, 0x80	; 128

0000164a <__addsf3>:
    164a:	bb 27       	eor	r27, r27
    164c:	aa 27       	eor	r26, r26
    164e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3x>
    1652:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_round>
    1656:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__fp_pscA>
    165a:	38 f0       	brcs	.+14     	; 0x166a <__addsf3+0x20>
    165c:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_pscB>
    1660:	20 f0       	brcs	.+8      	; 0x166a <__addsf3+0x20>
    1662:	39 f4       	brne	.+14     	; 0x1672 <__addsf3+0x28>
    1664:	9f 3f       	cpi	r25, 0xFF	; 255
    1666:	19 f4       	brne	.+6      	; 0x166e <__addsf3+0x24>
    1668:	26 f4       	brtc	.+8      	; 0x1672 <__addsf3+0x28>
    166a:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_nan>
    166e:	0e f4       	brtc	.+2      	; 0x1672 <__addsf3+0x28>
    1670:	e0 95       	com	r30
    1672:	e7 fb       	bst	r30, 7
    1674:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_inf>

00001678 <__addsf3x>:
    1678:	e9 2f       	mov	r30, r25
    167a:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_split3>
    167e:	58 f3       	brcs	.-42     	; 0x1656 <__addsf3+0xc>
    1680:	ba 17       	cp	r27, r26
    1682:	62 07       	cpc	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	95 07       	cpc	r25, r21
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__addsf3x+0x1c>
    168c:	79 f4       	brne	.+30     	; 0x16ac <__addsf3x+0x34>
    168e:	a6 f5       	brtc	.+104    	; 0x16f8 <__addsf3x+0x80>
    1690:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__fp_zero>
    1694:	0e f4       	brtc	.+2      	; 0x1698 <__addsf3x+0x20>
    1696:	e0 95       	com	r30
    1698:	0b 2e       	mov	r0, r27
    169a:	ba 2f       	mov	r27, r26
    169c:	a0 2d       	mov	r26, r0
    169e:	0b 01       	movw	r0, r22
    16a0:	b9 01       	movw	r22, r18
    16a2:	90 01       	movw	r18, r0
    16a4:	0c 01       	movw	r0, r24
    16a6:	ca 01       	movw	r24, r20
    16a8:	a0 01       	movw	r20, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	ff 27       	eor	r31, r31
    16ae:	59 1b       	sub	r21, r25
    16b0:	99 f0       	breq	.+38     	; 0x16d8 <__addsf3x+0x60>
    16b2:	59 3f       	cpi	r21, 0xF9	; 249
    16b4:	50 f4       	brcc	.+20     	; 0x16ca <__addsf3x+0x52>
    16b6:	50 3e       	cpi	r21, 0xE0	; 224
    16b8:	68 f1       	brcs	.+90     	; 0x1714 <__addsf3x+0x9c>
    16ba:	1a 16       	cp	r1, r26
    16bc:	f0 40       	sbci	r31, 0x00	; 0
    16be:	a2 2f       	mov	r26, r18
    16c0:	23 2f       	mov	r18, r19
    16c2:	34 2f       	mov	r19, r20
    16c4:	44 27       	eor	r20, r20
    16c6:	58 5f       	subi	r21, 0xF8	; 248
    16c8:	f3 cf       	rjmp	.-26     	; 0x16b0 <__addsf3x+0x38>
    16ca:	46 95       	lsr	r20
    16cc:	37 95       	ror	r19
    16ce:	27 95       	ror	r18
    16d0:	a7 95       	ror	r26
    16d2:	f0 40       	sbci	r31, 0x00	; 0
    16d4:	53 95       	inc	r21
    16d6:	c9 f7       	brne	.-14     	; 0x16ca <__addsf3x+0x52>
    16d8:	7e f4       	brtc	.+30     	; 0x16f8 <__addsf3x+0x80>
    16da:	1f 16       	cp	r1, r31
    16dc:	ba 0b       	sbc	r27, r26
    16de:	62 0b       	sbc	r22, r18
    16e0:	73 0b       	sbc	r23, r19
    16e2:	84 0b       	sbc	r24, r20
    16e4:	ba f0       	brmi	.+46     	; 0x1714 <__addsf3x+0x9c>
    16e6:	91 50       	subi	r25, 0x01	; 1
    16e8:	a1 f0       	breq	.+40     	; 0x1712 <__addsf3x+0x9a>
    16ea:	ff 0f       	add	r31, r31
    16ec:	bb 1f       	adc	r27, r27
    16ee:	66 1f       	adc	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	88 1f       	adc	r24, r24
    16f4:	c2 f7       	brpl	.-16     	; 0x16e6 <__addsf3x+0x6e>
    16f6:	0e c0       	rjmp	.+28     	; 0x1714 <__addsf3x+0x9c>
    16f8:	ba 0f       	add	r27, r26
    16fa:	62 1f       	adc	r22, r18
    16fc:	73 1f       	adc	r23, r19
    16fe:	84 1f       	adc	r24, r20
    1700:	48 f4       	brcc	.+18     	; 0x1714 <__addsf3x+0x9c>
    1702:	87 95       	ror	r24
    1704:	77 95       	ror	r23
    1706:	67 95       	ror	r22
    1708:	b7 95       	ror	r27
    170a:	f7 95       	ror	r31
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	08 f0       	brcs	.+2      	; 0x1712 <__addsf3x+0x9a>
    1710:	b0 cf       	rjmp	.-160    	; 0x1672 <__addsf3+0x28>
    1712:	93 95       	inc	r25
    1714:	88 0f       	add	r24, r24
    1716:	08 f0       	brcs	.+2      	; 0x171a <__addsf3x+0xa2>
    1718:	99 27       	eor	r25, r25
    171a:	ee 0f       	add	r30, r30
    171c:	97 95       	ror	r25
    171e:	87 95       	ror	r24
    1720:	08 95       	ret

00001722 <__divsf3>:
    1722:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divsf3x>
    1726:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_round>
    172a:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_pscB>
    172e:	58 f0       	brcs	.+22     	; 0x1746 <__divsf3+0x24>
    1730:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__fp_pscA>
    1734:	40 f0       	brcs	.+16     	; 0x1746 <__divsf3+0x24>
    1736:	29 f4       	brne	.+10     	; 0x1742 <__divsf3+0x20>
    1738:	5f 3f       	cpi	r21, 0xFF	; 255
    173a:	29 f0       	breq	.+10     	; 0x1746 <__divsf3+0x24>
    173c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_inf>
    1740:	51 11       	cpse	r21, r1
    1742:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_szero>
    1746:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_nan>

0000174a <__divsf3x>:
    174a:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_split3>
    174e:	68 f3       	brcs	.-38     	; 0x172a <__divsf3+0x8>

00001750 <__divsf3_pse>:
    1750:	99 23       	and	r25, r25
    1752:	b1 f3       	breq	.-20     	; 0x1740 <__divsf3+0x1e>
    1754:	55 23       	and	r21, r21
    1756:	91 f3       	breq	.-28     	; 0x173c <__divsf3+0x1a>
    1758:	95 1b       	sub	r25, r21
    175a:	55 0b       	sbc	r21, r21
    175c:	bb 27       	eor	r27, r27
    175e:	aa 27       	eor	r26, r26
    1760:	62 17       	cp	r22, r18
    1762:	73 07       	cpc	r23, r19
    1764:	84 07       	cpc	r24, r20
    1766:	38 f0       	brcs	.+14     	; 0x1776 <__divsf3_pse+0x26>
    1768:	9f 5f       	subi	r25, 0xFF	; 255
    176a:	5f 4f       	sbci	r21, 0xFF	; 255
    176c:	22 0f       	add	r18, r18
    176e:	33 1f       	adc	r19, r19
    1770:	44 1f       	adc	r20, r20
    1772:	aa 1f       	adc	r26, r26
    1774:	a9 f3       	breq	.-22     	; 0x1760 <__divsf3_pse+0x10>
    1776:	35 d0       	rcall	.+106    	; 0x17e2 <__divsf3_pse+0x92>
    1778:	0e 2e       	mov	r0, r30
    177a:	3a f0       	brmi	.+14     	; 0x178a <__divsf3_pse+0x3a>
    177c:	e0 e8       	ldi	r30, 0x80	; 128
    177e:	32 d0       	rcall	.+100    	; 0x17e4 <__divsf3_pse+0x94>
    1780:	91 50       	subi	r25, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	e6 95       	lsr	r30
    1786:	00 1c       	adc	r0, r0
    1788:	ca f7       	brpl	.-14     	; 0x177c <__divsf3_pse+0x2c>
    178a:	2b d0       	rcall	.+86     	; 0x17e2 <__divsf3_pse+0x92>
    178c:	fe 2f       	mov	r31, r30
    178e:	29 d0       	rcall	.+82     	; 0x17e2 <__divsf3_pse+0x92>
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	bb 1f       	adc	r27, r27
    1798:	26 17       	cp	r18, r22
    179a:	37 07       	cpc	r19, r23
    179c:	48 07       	cpc	r20, r24
    179e:	ab 07       	cpc	r26, r27
    17a0:	b0 e8       	ldi	r27, 0x80	; 128
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__divsf3_pse+0x56>
    17a4:	bb 0b       	sbc	r27, r27
    17a6:	80 2d       	mov	r24, r0
    17a8:	bf 01       	movw	r22, r30
    17aa:	ff 27       	eor	r31, r31
    17ac:	93 58       	subi	r25, 0x83	; 131
    17ae:	5f 4f       	sbci	r21, 0xFF	; 255
    17b0:	3a f0       	brmi	.+14     	; 0x17c0 <__divsf3_pse+0x70>
    17b2:	9e 3f       	cpi	r25, 0xFE	; 254
    17b4:	51 05       	cpc	r21, r1
    17b6:	78 f0       	brcs	.+30     	; 0x17d6 <__divsf3_pse+0x86>
    17b8:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_inf>
    17bc:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_szero>
    17c0:	5f 3f       	cpi	r21, 0xFF	; 255
    17c2:	e4 f3       	brlt	.-8      	; 0x17bc <__divsf3_pse+0x6c>
    17c4:	98 3e       	cpi	r25, 0xE8	; 232
    17c6:	d4 f3       	brlt	.-12     	; 0x17bc <__divsf3_pse+0x6c>
    17c8:	86 95       	lsr	r24
    17ca:	77 95       	ror	r23
    17cc:	67 95       	ror	r22
    17ce:	b7 95       	ror	r27
    17d0:	f7 95       	ror	r31
    17d2:	9f 5f       	subi	r25, 0xFF	; 255
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <__divsf3_pse+0x78>
    17d6:	88 0f       	add	r24, r24
    17d8:	91 1d       	adc	r25, r1
    17da:	96 95       	lsr	r25
    17dc:	87 95       	ror	r24
    17de:	97 f9       	bld	r25, 7
    17e0:	08 95       	ret
    17e2:	e1 e0       	ldi	r30, 0x01	; 1
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	bb 1f       	adc	r27, r27
    17ec:	62 17       	cp	r22, r18
    17ee:	73 07       	cpc	r23, r19
    17f0:	84 07       	cpc	r24, r20
    17f2:	ba 07       	cpc	r27, r26
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <__divsf3_pse+0xae>
    17f6:	62 1b       	sub	r22, r18
    17f8:	73 0b       	sbc	r23, r19
    17fa:	84 0b       	sbc	r24, r20
    17fc:	ba 0b       	sbc	r27, r26
    17fe:	ee 1f       	adc	r30, r30
    1800:	88 f7       	brcc	.-30     	; 0x17e4 <__divsf3_pse+0x94>
    1802:	e0 95       	com	r30
    1804:	08 95       	ret

00001806 <__fixsfsi>:
    1806:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fixunssfsi>
    180a:	68 94       	set
    180c:	b1 11       	cpse	r27, r1
    180e:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_szero>
    1812:	08 95       	ret

00001814 <__fixunssfsi>:
    1814:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_splitA>
    1818:	88 f0       	brcs	.+34     	; 0x183c <__fixunssfsi+0x28>
    181a:	9f 57       	subi	r25, 0x7F	; 127
    181c:	98 f0       	brcs	.+38     	; 0x1844 <__fixunssfsi+0x30>
    181e:	b9 2f       	mov	r27, r25
    1820:	99 27       	eor	r25, r25
    1822:	b7 51       	subi	r27, 0x17	; 23
    1824:	b0 f0       	brcs	.+44     	; 0x1852 <__fixunssfsi+0x3e>
    1826:	e1 f0       	breq	.+56     	; 0x1860 <__fixunssfsi+0x4c>
    1828:	66 0f       	add	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	1a f0       	brmi	.+6      	; 0x1838 <__fixunssfsi+0x24>
    1832:	ba 95       	dec	r27
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__fixunssfsi+0x14>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <__fixunssfsi+0x4c>
    1838:	b1 30       	cpi	r27, 0x01	; 1
    183a:	91 f0       	breq	.+36     	; 0x1860 <__fixunssfsi+0x4c>
    183c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__fp_zero>
    1840:	b1 e0       	ldi	r27, 0x01	; 1
    1842:	08 95       	ret
    1844:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__fp_zero>
    1848:	67 2f       	mov	r22, r23
    184a:	78 2f       	mov	r23, r24
    184c:	88 27       	eor	r24, r24
    184e:	b8 5f       	subi	r27, 0xF8	; 248
    1850:	39 f0       	breq	.+14     	; 0x1860 <__fixunssfsi+0x4c>
    1852:	b9 3f       	cpi	r27, 0xF9	; 249
    1854:	cc f3       	brlt	.-14     	; 0x1848 <__fixunssfsi+0x34>
    1856:	86 95       	lsr	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b3 95       	inc	r27
    185e:	d9 f7       	brne	.-10     	; 0x1856 <__fixunssfsi+0x42>
    1860:	3e f4       	brtc	.+14     	; 0x1870 <__fixunssfsi+0x5c>
    1862:	90 95       	com	r25
    1864:	80 95       	com	r24
    1866:	70 95       	com	r23
    1868:	61 95       	neg	r22
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	8f 4f       	sbci	r24, 0xFF	; 255
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__floatunsisf>:
    1872:	e8 94       	clt
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <__floatsisf+0x12>

00001876 <__floatsisf>:
    1876:	97 fb       	bst	r25, 7
    1878:	3e f4       	brtc	.+14     	; 0x1888 <__floatsisf+0x12>
    187a:	90 95       	com	r25
    187c:	80 95       	com	r24
    187e:	70 95       	com	r23
    1880:	61 95       	neg	r22
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	99 23       	and	r25, r25
    188a:	a9 f0       	breq	.+42     	; 0x18b6 <__floatsisf+0x40>
    188c:	f9 2f       	mov	r31, r25
    188e:	96 e9       	ldi	r25, 0x96	; 150
    1890:	bb 27       	eor	r27, r27
    1892:	93 95       	inc	r25
    1894:	f6 95       	lsr	r31
    1896:	87 95       	ror	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	b7 95       	ror	r27
    189e:	f1 11       	cpse	r31, r1
    18a0:	f8 cf       	rjmp	.-16     	; 0x1892 <__floatsisf+0x1c>
    18a2:	fa f4       	brpl	.+62     	; 0x18e2 <__floatsisf+0x6c>
    18a4:	bb 0f       	add	r27, r27
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__floatsisf+0x36>
    18a8:	60 ff       	sbrs	r22, 0
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <__floatsisf+0x6c>
    18ac:	6f 5f       	subi	r22, 0xFF	; 255
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	16 c0       	rjmp	.+44     	; 0x18e2 <__floatsisf+0x6c>
    18b6:	88 23       	and	r24, r24
    18b8:	11 f0       	breq	.+4      	; 0x18be <__floatsisf+0x48>
    18ba:	96 e9       	ldi	r25, 0x96	; 150
    18bc:	11 c0       	rjmp	.+34     	; 0x18e0 <__floatsisf+0x6a>
    18be:	77 23       	and	r23, r23
    18c0:	21 f0       	breq	.+8      	; 0x18ca <__floatsisf+0x54>
    18c2:	9e e8       	ldi	r25, 0x8E	; 142
    18c4:	87 2f       	mov	r24, r23
    18c6:	76 2f       	mov	r23, r22
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__floatsisf+0x5e>
    18ca:	66 23       	and	r22, r22
    18cc:	71 f0       	breq	.+28     	; 0x18ea <__floatsisf+0x74>
    18ce:	96 e8       	ldi	r25, 0x86	; 134
    18d0:	86 2f       	mov	r24, r22
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	2a f0       	brmi	.+10     	; 0x18e2 <__floatsisf+0x6c>
    18d8:	9a 95       	dec	r25
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	da f7       	brpl	.-10     	; 0x18d8 <__floatsisf+0x62>
    18e2:	88 0f       	add	r24, r24
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	97 f9       	bld	r25, 7
    18ea:	08 95       	ret

000018ec <__fp_inf>:
    18ec:	97 f9       	bld	r25, 7
    18ee:	9f 67       	ori	r25, 0x7F	; 127
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	08 95       	ret

000018f8 <__fp_nan>:
    18f8:	9f ef       	ldi	r25, 0xFF	; 255
    18fa:	80 ec       	ldi	r24, 0xC0	; 192
    18fc:	08 95       	ret

000018fe <__fp_pscA>:
    18fe:	00 24       	eor	r0, r0
    1900:	0a 94       	dec	r0
    1902:	16 16       	cp	r1, r22
    1904:	17 06       	cpc	r1, r23
    1906:	18 06       	cpc	r1, r24
    1908:	09 06       	cpc	r0, r25
    190a:	08 95       	ret

0000190c <__fp_pscB>:
    190c:	00 24       	eor	r0, r0
    190e:	0a 94       	dec	r0
    1910:	12 16       	cp	r1, r18
    1912:	13 06       	cpc	r1, r19
    1914:	14 06       	cpc	r1, r20
    1916:	05 06       	cpc	r0, r21
    1918:	08 95       	ret

0000191a <__fp_round>:
    191a:	09 2e       	mov	r0, r25
    191c:	03 94       	inc	r0
    191e:	00 0c       	add	r0, r0
    1920:	11 f4       	brne	.+4      	; 0x1926 <__fp_round+0xc>
    1922:	88 23       	and	r24, r24
    1924:	52 f0       	brmi	.+20     	; 0x193a <__fp_round+0x20>
    1926:	bb 0f       	add	r27, r27
    1928:	40 f4       	brcc	.+16     	; 0x193a <__fp_round+0x20>
    192a:	bf 2b       	or	r27, r31
    192c:	11 f4       	brne	.+4      	; 0x1932 <__fp_round+0x18>
    192e:	60 ff       	sbrs	r22, 0
    1930:	04 c0       	rjmp	.+8      	; 0x193a <__fp_round+0x20>
    1932:	6f 5f       	subi	r22, 0xFF	; 255
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	08 95       	ret

0000193c <__fp_split3>:
    193c:	57 fd       	sbrc	r21, 7
    193e:	90 58       	subi	r25, 0x80	; 128
    1940:	44 0f       	add	r20, r20
    1942:	55 1f       	adc	r21, r21
    1944:	59 f0       	breq	.+22     	; 0x195c <__fp_splitA+0x10>
    1946:	5f 3f       	cpi	r21, 0xFF	; 255
    1948:	71 f0       	breq	.+28     	; 0x1966 <__fp_splitA+0x1a>
    194a:	47 95       	ror	r20

0000194c <__fp_splitA>:
    194c:	88 0f       	add	r24, r24
    194e:	97 fb       	bst	r25, 7
    1950:	99 1f       	adc	r25, r25
    1952:	61 f0       	breq	.+24     	; 0x196c <__fp_splitA+0x20>
    1954:	9f 3f       	cpi	r25, 0xFF	; 255
    1956:	79 f0       	breq	.+30     	; 0x1976 <__fp_splitA+0x2a>
    1958:	87 95       	ror	r24
    195a:	08 95       	ret
    195c:	12 16       	cp	r1, r18
    195e:	13 06       	cpc	r1, r19
    1960:	14 06       	cpc	r1, r20
    1962:	55 1f       	adc	r21, r21
    1964:	f2 cf       	rjmp	.-28     	; 0x194a <__fp_split3+0xe>
    1966:	46 95       	lsr	r20
    1968:	f1 df       	rcall	.-30     	; 0x194c <__fp_splitA>
    196a:	08 c0       	rjmp	.+16     	; 0x197c <__fp_splitA+0x30>
    196c:	16 16       	cp	r1, r22
    196e:	17 06       	cpc	r1, r23
    1970:	18 06       	cpc	r1, r24
    1972:	99 1f       	adc	r25, r25
    1974:	f1 cf       	rjmp	.-30     	; 0x1958 <__fp_splitA+0xc>
    1976:	86 95       	lsr	r24
    1978:	71 05       	cpc	r23, r1
    197a:	61 05       	cpc	r22, r1
    197c:	08 94       	sec
    197e:	08 95       	ret

00001980 <__fp_zero>:
    1980:	e8 94       	clt

00001982 <__fp_szero>:
    1982:	bb 27       	eor	r27, r27
    1984:	66 27       	eor	r22, r22
    1986:	77 27       	eor	r23, r23
    1988:	cb 01       	movw	r24, r22
    198a:	97 f9       	bld	r25, 7
    198c:	08 95       	ret

0000198e <__mulsf3>:
    198e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__mulsf3x>
    1992:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_round>
    1996:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__fp_pscA>
    199a:	38 f0       	brcs	.+14     	; 0x19aa <__mulsf3+0x1c>
    199c:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_pscB>
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <__mulsf3+0x1c>
    19a2:	95 23       	and	r25, r21
    19a4:	11 f0       	breq	.+4      	; 0x19aa <__mulsf3+0x1c>
    19a6:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_inf>
    19aa:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__fp_nan>
    19ae:	11 24       	eor	r1, r1
    19b0:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_szero>

000019b4 <__mulsf3x>:
    19b4:	0e 94 9e 0c 	call	0x193c	; 0x193c <__fp_split3>
    19b8:	70 f3       	brcs	.-36     	; 0x1996 <__mulsf3+0x8>

000019ba <__mulsf3_pse>:
    19ba:	95 9f       	mul	r25, r21
    19bc:	c1 f3       	breq	.-16     	; 0x19ae <__mulsf3+0x20>
    19be:	95 0f       	add	r25, r21
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	55 1f       	adc	r21, r21
    19c4:	62 9f       	mul	r22, r18
    19c6:	f0 01       	movw	r30, r0
    19c8:	72 9f       	mul	r23, r18
    19ca:	bb 27       	eor	r27, r27
    19cc:	f0 0d       	add	r31, r0
    19ce:	b1 1d       	adc	r27, r1
    19d0:	63 9f       	mul	r22, r19
    19d2:	aa 27       	eor	r26, r26
    19d4:	f0 0d       	add	r31, r0
    19d6:	b1 1d       	adc	r27, r1
    19d8:	aa 1f       	adc	r26, r26
    19da:	64 9f       	mul	r22, r20
    19dc:	66 27       	eor	r22, r22
    19de:	b0 0d       	add	r27, r0
    19e0:	a1 1d       	adc	r26, r1
    19e2:	66 1f       	adc	r22, r22
    19e4:	82 9f       	mul	r24, r18
    19e6:	22 27       	eor	r18, r18
    19e8:	b0 0d       	add	r27, r0
    19ea:	a1 1d       	adc	r26, r1
    19ec:	62 1f       	adc	r22, r18
    19ee:	73 9f       	mul	r23, r19
    19f0:	b0 0d       	add	r27, r0
    19f2:	a1 1d       	adc	r26, r1
    19f4:	62 1f       	adc	r22, r18
    19f6:	83 9f       	mul	r24, r19
    19f8:	a0 0d       	add	r26, r0
    19fa:	61 1d       	adc	r22, r1
    19fc:	22 1f       	adc	r18, r18
    19fe:	74 9f       	mul	r23, r20
    1a00:	33 27       	eor	r19, r19
    1a02:	a0 0d       	add	r26, r0
    1a04:	61 1d       	adc	r22, r1
    1a06:	23 1f       	adc	r18, r19
    1a08:	84 9f       	mul	r24, r20
    1a0a:	60 0d       	add	r22, r0
    1a0c:	21 1d       	adc	r18, r1
    1a0e:	82 2f       	mov	r24, r18
    1a10:	76 2f       	mov	r23, r22
    1a12:	6a 2f       	mov	r22, r26
    1a14:	11 24       	eor	r1, r1
    1a16:	9f 57       	subi	r25, 0x7F	; 127
    1a18:	50 40       	sbci	r21, 0x00	; 0
    1a1a:	9a f0       	brmi	.+38     	; 0x1a42 <__mulsf3_pse+0x88>
    1a1c:	f1 f0       	breq	.+60     	; 0x1a5a <__mulsf3_pse+0xa0>
    1a1e:	88 23       	and	r24, r24
    1a20:	4a f0       	brmi	.+18     	; 0x1a34 <__mulsf3_pse+0x7a>
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	bb 1f       	adc	r27, r27
    1a28:	66 1f       	adc	r22, r22
    1a2a:	77 1f       	adc	r23, r23
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	91 50       	subi	r25, 0x01	; 1
    1a30:	50 40       	sbci	r21, 0x00	; 0
    1a32:	a9 f7       	brne	.-22     	; 0x1a1e <__mulsf3_pse+0x64>
    1a34:	9e 3f       	cpi	r25, 0xFE	; 254
    1a36:	51 05       	cpc	r21, r1
    1a38:	80 f0       	brcs	.+32     	; 0x1a5a <__mulsf3_pse+0xa0>
    1a3a:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_inf>
    1a3e:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_szero>
    1a42:	5f 3f       	cpi	r21, 0xFF	; 255
    1a44:	e4 f3       	brlt	.-8      	; 0x1a3e <__mulsf3_pse+0x84>
    1a46:	98 3e       	cpi	r25, 0xE8	; 232
    1a48:	d4 f3       	brlt	.-12     	; 0x1a3e <__mulsf3_pse+0x84>
    1a4a:	86 95       	lsr	r24
    1a4c:	77 95       	ror	r23
    1a4e:	67 95       	ror	r22
    1a50:	b7 95       	ror	r27
    1a52:	f7 95       	ror	r31
    1a54:	e7 95       	ror	r30
    1a56:	9f 5f       	subi	r25, 0xFF	; 255
    1a58:	c1 f7       	brne	.-16     	; 0x1a4a <__mulsf3_pse+0x90>
    1a5a:	fe 2b       	or	r31, r30
    1a5c:	88 0f       	add	r24, r24
    1a5e:	91 1d       	adc	r25, r1
    1a60:	96 95       	lsr	r25
    1a62:	87 95       	ror	r24
    1a64:	97 f9       	bld	r25, 7
    1a66:	08 95       	ret

00001a68 <__mulshisi3>:
    1a68:	b7 ff       	sbrs	r27, 7
    1a6a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__muluhisi3>

00001a6e <__mulohisi3>:
    1a6e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__muluhisi3>
    1a72:	82 1b       	sub	r24, r18
    1a74:	93 0b       	sbc	r25, r19
    1a76:	08 95       	ret

00001a78 <__muluhisi3>:
    1a78:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__umulhisi3>
    1a7c:	a5 9f       	mul	r26, r21
    1a7e:	90 0d       	add	r25, r0
    1a80:	b4 9f       	mul	r27, r20
    1a82:	90 0d       	add	r25, r0
    1a84:	a4 9f       	mul	r26, r20
    1a86:	80 0d       	add	r24, r0
    1a88:	91 1d       	adc	r25, r1
    1a8a:	11 24       	eor	r1, r1
    1a8c:	08 95       	ret

00001a8e <__umulhisi3>:
    1a8e:	a2 9f       	mul	r26, r18
    1a90:	b0 01       	movw	r22, r0
    1a92:	b3 9f       	mul	r27, r19
    1a94:	c0 01       	movw	r24, r0
    1a96:	a3 9f       	mul	r26, r19
    1a98:	70 0d       	add	r23, r0
    1a9a:	81 1d       	adc	r24, r1
    1a9c:	11 24       	eor	r1, r1
    1a9e:	91 1d       	adc	r25, r1
    1aa0:	b2 9f       	mul	r27, r18
    1aa2:	70 0d       	add	r23, r0
    1aa4:	81 1d       	adc	r24, r1
    1aa6:	11 24       	eor	r1, r1
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	08 95       	ret

00001aac <strtol>:
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ec e5       	ldi	r30, 0x5C	; 92
    1ab2:	fd e0       	ldi	r31, 0x0D	; 13
    1ab4:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x2>
    1ab8:	5c 01       	movw	r10, r24
    1aba:	6b 01       	movw	r12, r22
    1abc:	7a 01       	movw	r14, r20
    1abe:	61 15       	cp	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	19 f0       	breq	.+6      	; 0x1aca <strtol+0x1e>
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	80 83       	st	Z, r24
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	e1 14       	cp	r14, r1
    1acc:	f1 04       	cpc	r15, r1
    1ace:	29 f0       	breq	.+10     	; 0x1ada <strtol+0x2e>
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	02 97       	sbiw	r24, 0x02	; 2
    1ad4:	83 97       	sbiw	r24, 0x23	; 35
    1ad6:	08 f0       	brcs	.+2      	; 0x1ada <strtol+0x2e>
    1ad8:	e5 c0       	rjmp	.+458    	; 0x1ca4 <strtol+0x1f8>
    1ada:	e5 01       	movw	r28, r10
    1adc:	21 96       	adiw	r28, 0x01	; 1
    1ade:	f5 01       	movw	r30, r10
    1ae0:	10 81       	ld	r17, Z
    1ae2:	81 2f       	mov	r24, r17
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <isspace>
    1aea:	89 2b       	or	r24, r25
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <strtol+0x46>
    1aee:	5e 01       	movw	r10, r28
    1af0:	f4 cf       	rjmp	.-24     	; 0x1ada <strtol+0x2e>
    1af2:	1d 32       	cpi	r17, 0x2D	; 45
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <strtol+0x54>
    1af6:	21 96       	adiw	r28, 0x01	; 1
    1af8:	f5 01       	movw	r30, r10
    1afa:	11 81       	ldd	r17, Z+1	; 0x01
    1afc:	01 e0       	ldi	r16, 0x01	; 1
    1afe:	07 c0       	rjmp	.+14     	; 0x1b0e <strtol+0x62>
    1b00:	1b 32       	cpi	r17, 0x2B	; 43
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <strtol+0x60>
    1b04:	e5 01       	movw	r28, r10
    1b06:	22 96       	adiw	r28, 0x02	; 2
    1b08:	f5 01       	movw	r30, r10
    1b0a:	11 81       	ldd	r17, Z+1	; 0x01
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	e1 14       	cp	r14, r1
    1b10:	f1 04       	cpc	r15, r1
    1b12:	09 f1       	breq	.+66     	; 0x1b56 <strtol+0xaa>
    1b14:	f0 e1       	ldi	r31, 0x10	; 16
    1b16:	ef 16       	cp	r14, r31
    1b18:	f1 04       	cpc	r15, r1
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <strtol+0x7a>
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <strtol+0xf0>
    1b1e:	10 e3       	ldi	r17, 0x30	; 48
    1b20:	e1 14       	cp	r14, r1
    1b22:	f1 04       	cpc	r15, r1
    1b24:	21 f1       	breq	.+72     	; 0x1b6e <strtol+0xc2>
    1b26:	28 e0       	ldi	r18, 0x08	; 8
    1b28:	e2 16       	cp	r14, r18
    1b2a:	f1 04       	cpc	r15, r1
    1b2c:	01 f1       	breq	.+64     	; 0x1b6e <strtol+0xc2>
    1b2e:	54 f4       	brge	.+20     	; 0x1b44 <strtol+0x98>
    1b30:	e2 e0       	ldi	r30, 0x02	; 2
    1b32:	ee 16       	cp	r14, r30
    1b34:	f1 04       	cpc	r15, r1
    1b36:	21 f5       	brne	.+72     	; 0x1b80 <strtol+0xd4>
    1b38:	81 2c       	mov	r8, r1
    1b3a:	91 2c       	mov	r9, r1
    1b3c:	a1 2c       	mov	r10, r1
    1b3e:	b0 e4       	ldi	r27, 0x40	; 64
    1b40:	bb 2e       	mov	r11, r27
    1b42:	3e c0       	rjmp	.+124    	; 0x1bc0 <strtol+0x114>
    1b44:	fa e0       	ldi	r31, 0x0A	; 10
    1b46:	ef 16       	cp	r14, r31
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	39 f0       	breq	.+14     	; 0x1b5a <strtol+0xae>
    1b4c:	20 e1       	ldi	r18, 0x10	; 16
    1b4e:	e2 16       	cp	r14, r18
    1b50:	f1 04       	cpc	r15, r1
    1b52:	b1 f4       	brne	.+44     	; 0x1b80 <strtol+0xd4>
    1b54:	30 c0       	rjmp	.+96     	; 0x1bb6 <strtol+0x10a>
    1b56:	10 33       	cpi	r17, 0x30	; 48
    1b58:	19 f1       	breq	.+70     	; 0x1ba0 <strtol+0xf4>
    1b5a:	fa e0       	ldi	r31, 0x0A	; 10
    1b5c:	ef 2e       	mov	r14, r31
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	ac ec       	ldi	r26, 0xCC	; 204
    1b62:	8a 2e       	mov	r8, r26
    1b64:	98 2c       	mov	r9, r8
    1b66:	a8 2c       	mov	r10, r8
    1b68:	ac e0       	ldi	r26, 0x0C	; 12
    1b6a:	ba 2e       	mov	r11, r26
    1b6c:	29 c0       	rjmp	.+82     	; 0x1bc0 <strtol+0x114>
    1b6e:	78 e0       	ldi	r23, 0x08	; 8
    1b70:	e7 2e       	mov	r14, r23
    1b72:	f1 2c       	mov	r15, r1
    1b74:	81 2c       	mov	r8, r1
    1b76:	91 2c       	mov	r9, r1
    1b78:	a1 2c       	mov	r10, r1
    1b7a:	e0 e1       	ldi	r30, 0x10	; 16
    1b7c:	be 2e       	mov	r11, r30
    1b7e:	20 c0       	rjmp	.+64     	; 0x1bc0 <strtol+0x114>
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e8       	ldi	r25, 0x80	; 128
    1b88:	97 01       	movw	r18, r14
    1b8a:	0f 2c       	mov	r0, r15
    1b8c:	00 0c       	add	r0, r0
    1b8e:	44 0b       	sbc	r20, r20
    1b90:	55 0b       	sbc	r21, r21
    1b92:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__udivmodsi4>
    1b96:	49 01       	movw	r8, r18
    1b98:	5a 01       	movw	r10, r20
    1b9a:	12 c0       	rjmp	.+36     	; 0x1bc0 <strtol+0x114>
    1b9c:	10 33       	cpi	r17, 0x30	; 48
    1b9e:	59 f4       	brne	.+22     	; 0x1bb6 <strtol+0x10a>
    1ba0:	88 81       	ld	r24, Y
    1ba2:	8f 7d       	andi	r24, 0xDF	; 223
    1ba4:	88 35       	cpi	r24, 0x58	; 88
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <strtol+0xfe>
    1ba8:	ba cf       	rjmp	.-140    	; 0x1b1e <strtol+0x72>
    1baa:	19 81       	ldd	r17, Y+1	; 0x01
    1bac:	22 96       	adiw	r28, 0x02	; 2
    1bae:	02 60       	ori	r16, 0x02	; 2
    1bb0:	80 e1       	ldi	r24, 0x10	; 16
    1bb2:	e8 2e       	mov	r14, r24
    1bb4:	f1 2c       	mov	r15, r1
    1bb6:	81 2c       	mov	r8, r1
    1bb8:	91 2c       	mov	r9, r1
    1bba:	a1 2c       	mov	r10, r1
    1bbc:	68 e0       	ldi	r22, 0x08	; 8
    1bbe:	b6 2e       	mov	r11, r22
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	27 01       	movw	r4, r14
    1bca:	0f 2c       	mov	r0, r15
    1bcc:	00 0c       	add	r0, r0
    1bce:	66 08       	sbc	r6, r6
    1bd0:	77 08       	sbc	r7, r7
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	50 ed       	ldi	r21, 0xD0	; 208
    1bd6:	35 2e       	mov	r3, r21
    1bd8:	31 0e       	add	r3, r17
    1bda:	29 e0       	ldi	r18, 0x09	; 9
    1bdc:	23 15       	cp	r18, r3
    1bde:	70 f4       	brcc	.+28     	; 0x1bfc <strtol+0x150>
    1be0:	2f eb       	ldi	r18, 0xBF	; 191
    1be2:	21 0f       	add	r18, r17
    1be4:	2a 31       	cpi	r18, 0x1A	; 26
    1be6:	18 f4       	brcc	.+6      	; 0x1bee <strtol+0x142>
    1be8:	39 ec       	ldi	r19, 0xC9	; 201
    1bea:	33 2e       	mov	r3, r19
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <strtol+0x14e>
    1bee:	2f e9       	ldi	r18, 0x9F	; 159
    1bf0:	21 0f       	add	r18, r17
    1bf2:	2a 31       	cpi	r18, 0x1A	; 26
    1bf4:	18 f5       	brcc	.+70     	; 0x1c3c <strtol+0x190>
    1bf6:	29 ea       	ldi	r18, 0xA9	; 169
    1bf8:	32 2e       	mov	r3, r18
    1bfa:	31 0e       	add	r3, r17
    1bfc:	23 2d       	mov	r18, r3
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	2e 15       	cp	r18, r14
    1c02:	3f 05       	cpc	r19, r15
    1c04:	dc f4       	brge	.+54     	; 0x1c3c <strtol+0x190>
    1c06:	47 fd       	sbrc	r20, 7
    1c08:	16 c0       	rjmp	.+44     	; 0x1c36 <strtol+0x18a>
    1c0a:	86 16       	cp	r8, r22
    1c0c:	97 06       	cpc	r9, r23
    1c0e:	a8 06       	cpc	r10, r24
    1c10:	b9 06       	cpc	r11, r25
    1c12:	70 f0       	brcs	.+28     	; 0x1c30 <strtol+0x184>
    1c14:	a3 01       	movw	r20, r6
    1c16:	92 01       	movw	r18, r4
    1c18:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__mulsi3>
    1c1c:	63 0d       	add	r22, r3
    1c1e:	71 1d       	adc	r23, r1
    1c20:	81 1d       	adc	r24, r1
    1c22:	91 1d       	adc	r25, r1
    1c24:	61 30       	cpi	r22, 0x01	; 1
    1c26:	71 05       	cpc	r23, r1
    1c28:	81 05       	cpc	r24, r1
    1c2a:	20 e8       	ldi	r18, 0x80	; 128
    1c2c:	92 07       	cpc	r25, r18
    1c2e:	10 f0       	brcs	.+4      	; 0x1c34 <strtol+0x188>
    1c30:	4f ef       	ldi	r20, 0xFF	; 255
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <strtol+0x18a>
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	21 96       	adiw	r28, 0x01	; 1
    1c38:	10 81       	ld	r17, Z
    1c3a:	cb cf       	rjmp	.-106    	; 0x1bd2 <strtol+0x126>
    1c3c:	20 2f       	mov	r18, r16
    1c3e:	21 70       	andi	r18, 0x01	; 1
    1c40:	c1 14       	cp	r12, r1
    1c42:	d1 04       	cpc	r13, r1
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <strtol+0x1b6>
    1c46:	44 23       	and	r20, r20
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <strtol+0x1a8>
    1c4a:	21 97       	sbiw	r28, 0x01	; 1
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	c0 83       	st	Z, r28
    1c50:	d1 83       	std	Z+1, r29	; 0x01
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <strtol+0x1b6>
    1c54:	01 ff       	sbrs	r16, 1
    1c56:	19 c0       	rjmp	.+50     	; 0x1c8a <strtol+0x1de>
    1c58:	22 97       	sbiw	r28, 0x02	; 2
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	c0 83       	st	Z, r28
    1c5e:	d1 83       	std	Z+1, r29	; 0x01
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <strtol+0x1de>
    1c62:	47 ff       	sbrs	r20, 7
    1c64:	12 c0       	rjmp	.+36     	; 0x1c8a <strtol+0x1de>
    1c66:	22 23       	and	r18, r18
    1c68:	29 f0       	breq	.+10     	; 0x1c74 <strtol+0x1c8>
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e8       	ldi	r25, 0x80	; 128
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <strtol+0x1d0>
    1c74:	6f ef       	ldi	r22, 0xFF	; 255
    1c76:	7f ef       	ldi	r23, 0xFF	; 255
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	9f e7       	ldi	r25, 0x7F	; 127
    1c7c:	22 e2       	ldi	r18, 0x22	; 34
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	20 93 1f 34 	sts	0x341F, r18	; 0x80341f <errno>
    1c84:	30 93 20 34 	sts	0x3420, r19	; 0x803420 <errno+0x1>
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <strtol+0x1f0>
    1c8a:	22 23       	and	r18, r18
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <strtol+0x202>
    1c8e:	90 95       	com	r25
    1c90:	80 95       	com	r24
    1c92:	70 95       	com	r23
    1c94:	61 95       	neg	r22
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	46 2f       	mov	r20, r22
    1c9e:	37 2f       	mov	r19, r23
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	12 c0       	rjmp	.+36     	; 0x1cc8 <strtol+0x21c>
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0d c0       	rjmp	.+26     	; 0x1cc8 <strtol+0x21c>
    1cae:	97 ff       	sbrs	r25, 7
    1cb0:	f5 cf       	rjmp	.-22     	; 0x1c9c <strtol+0x1f0>
    1cb2:	82 e2       	ldi	r24, 0x22	; 34
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	80 93 1f 34 	sts	0x341F, r24	; 0x80341f <errno>
    1cba:	90 93 20 34 	sts	0x3420, r25	; 0x803420 <errno+0x1>
    1cbe:	6f ef       	ldi	r22, 0xFF	; 255
    1cc0:	7f ef       	ldi	r23, 0xFF	; 255
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	9f e7       	ldi	r25, 0x7F	; 127
    1cc6:	ea cf       	rjmp	.-44     	; 0x1c9c <strtol+0x1f0>
    1cc8:	64 2f       	mov	r22, r20
    1cca:	73 2f       	mov	r23, r19
    1ccc:	82 2f       	mov	r24, r18
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	e1 e1       	ldi	r30, 0x11	; 17
    1cd4:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x2>

00001cd8 <isspace>:
    1cd8:	91 11       	cpse	r25, r1
    1cda:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__ctype_isfalse>
    1cde:	80 32       	cpi	r24, 0x20	; 32
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <isspace+0x10>
    1ce2:	89 50       	subi	r24, 0x09	; 9
    1ce4:	85 50       	subi	r24, 0x05	; 5
    1ce6:	c8 f7       	brcc	.-14     	; 0x1cda <isspace+0x2>
    1ce8:	08 95       	ret

00001cea <strstr>:
    1cea:	fb 01       	movw	r30, r22
    1cec:	51 91       	ld	r21, Z+
    1cee:	55 23       	and	r21, r21
    1cf0:	a9 f0       	breq	.+42     	; 0x1d1c <strstr+0x32>
    1cf2:	bf 01       	movw	r22, r30
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	4d 91       	ld	r20, X+
    1cf8:	45 17       	cp	r20, r21
    1cfa:	41 11       	cpse	r20, r1
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <strstr+0xc>
    1cfe:	59 f4       	brne	.+22     	; 0x1d16 <strstr+0x2c>
    1d00:	cd 01       	movw	r24, r26
    1d02:	01 90       	ld	r0, Z+
    1d04:	00 20       	and	r0, r0
    1d06:	49 f0       	breq	.+18     	; 0x1d1a <strstr+0x30>
    1d08:	4d 91       	ld	r20, X+
    1d0a:	40 15       	cp	r20, r0
    1d0c:	41 11       	cpse	r20, r1
    1d0e:	c9 f3       	breq	.-14     	; 0x1d02 <strstr+0x18>
    1d10:	fb 01       	movw	r30, r22
    1d12:	41 11       	cpse	r20, r1
    1d14:	ef cf       	rjmp	.-34     	; 0x1cf4 <strstr+0xa>
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	08 95       	ret

00001d1e <printf>:
    1d1e:	a0 e0       	ldi	r26, 0x00	; 0
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e9       	ldi	r30, 0x95	; 149
    1d24:	fe e0       	ldi	r31, 0x0E	; 14
    1d26:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__prologue_saves__+0x20>
    1d2a:	ae 01       	movw	r20, r28
    1d2c:	4b 5f       	subi	r20, 0xFB	; 251
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	fa 01       	movw	r30, r20
    1d32:	61 91       	ld	r22, Z+
    1d34:	71 91       	ld	r23, Z+
    1d36:	af 01       	movw	r20, r30
    1d38:	80 91 1b 34 	lds	r24, 0x341B	; 0x80341b <__iob+0x2>
    1d3c:	90 91 1c 34 	lds	r25, 0x341C	; 0x80341c <__iob+0x3>
    1d40:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vfprintf>
    1d44:	e2 e0       	ldi	r30, 0x02	; 2
    1d46:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x20>

00001d4a <sprintf>:
    1d4a:	ae e0       	ldi	r26, 0x0E	; 14
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb ea       	ldi	r30, 0xAB	; 171
    1d50:	fe e0       	ldi	r31, 0x0E	; 14
    1d52:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__prologue_saves__+0x1c>
    1d56:	0d 89       	ldd	r16, Y+21	; 0x15
    1d58:	1e 89       	ldd	r17, Y+22	; 0x16
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
    1d5e:	09 83       	std	Y+1, r16	; 0x01
    1d60:	1a 83       	std	Y+2, r17	; 0x02
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f e7       	ldi	r25, 0x7F	; 127
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	47 5e       	subi	r20, 0xE7	; 231
    1d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d70:	6f 89       	ldd	r22, Y+23	; 0x17
    1d72:	78 8d       	ldd	r23, Y+24	; 0x18
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <vfprintf>
    1d7c:	ef 81       	ldd	r30, Y+7	; 0x07
    1d7e:	f8 85       	ldd	r31, Y+8	; 0x08
    1d80:	e0 0f       	add	r30, r16
    1d82:	f1 1f       	adc	r31, r17
    1d84:	10 82       	st	Z, r1
    1d86:	2e 96       	adiw	r28, 0x0e	; 14
    1d88:	e4 e0       	ldi	r30, 0x04	; 4
    1d8a:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x1c>

00001d8e <vfprintf>:
    1d8e:	ab e0       	ldi	r26, 0x0B	; 11
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ed ec       	ldi	r30, 0xCD	; 205
    1d94:	fe e0       	ldi	r31, 0x0E	; 14
    1d96:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__>
    1d9a:	6c 01       	movw	r12, r24
    1d9c:	7b 01       	movw	r14, r22
    1d9e:	8a 01       	movw	r16, r20
    1da0:	fc 01       	movw	r30, r24
    1da2:	16 82       	std	Z+6, r1	; 0x06
    1da4:	17 82       	std	Z+7, r1	; 0x07
    1da6:	83 81       	ldd	r24, Z+3	; 0x03
    1da8:	81 ff       	sbrs	r24, 1
    1daa:	cc c1       	rjmp	.+920    	; 0x2144 <vfprintf+0x3b6>
    1dac:	ce 01       	movw	r24, r28
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	3c 01       	movw	r6, r24
    1db2:	f6 01       	movw	r30, r12
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	f7 01       	movw	r30, r14
    1db8:	93 fd       	sbrc	r25, 3
    1dba:	85 91       	lpm	r24, Z+
    1dbc:	93 ff       	sbrs	r25, 3
    1dbe:	81 91       	ld	r24, Z+
    1dc0:	7f 01       	movw	r14, r30
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <vfprintf+0x3a>
    1dc6:	ba c1       	rjmp	.+884    	; 0x213c <vfprintf+0x3ae>
    1dc8:	85 32       	cpi	r24, 0x25	; 37
    1dca:	39 f4       	brne	.+14     	; 0x1dda <vfprintf+0x4c>
    1dcc:	93 fd       	sbrc	r25, 3
    1dce:	85 91       	lpm	r24, Z+
    1dd0:	93 ff       	sbrs	r25, 3
    1dd2:	81 91       	ld	r24, Z+
    1dd4:	7f 01       	movw	r14, r30
    1dd6:	85 32       	cpi	r24, 0x25	; 37
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <vfprintf+0x56>
    1dda:	b6 01       	movw	r22, r12
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1de2:	e7 cf       	rjmp	.-50     	; 0x1db2 <vfprintf+0x24>
    1de4:	91 2c       	mov	r9, r1
    1de6:	21 2c       	mov	r2, r1
    1de8:	31 2c       	mov	r3, r1
    1dea:	ff e1       	ldi	r31, 0x1F	; 31
    1dec:	f3 15       	cp	r31, r3
    1dee:	d8 f0       	brcs	.+54     	; 0x1e26 <vfprintf+0x98>
    1df0:	8b 32       	cpi	r24, 0x2B	; 43
    1df2:	79 f0       	breq	.+30     	; 0x1e12 <vfprintf+0x84>
    1df4:	38 f4       	brcc	.+14     	; 0x1e04 <vfprintf+0x76>
    1df6:	80 32       	cpi	r24, 0x20	; 32
    1df8:	79 f0       	breq	.+30     	; 0x1e18 <vfprintf+0x8a>
    1dfa:	83 32       	cpi	r24, 0x23	; 35
    1dfc:	a1 f4       	brne	.+40     	; 0x1e26 <vfprintf+0x98>
    1dfe:	23 2d       	mov	r18, r3
    1e00:	20 61       	ori	r18, 0x10	; 16
    1e02:	1d c0       	rjmp	.+58     	; 0x1e3e <vfprintf+0xb0>
    1e04:	8d 32       	cpi	r24, 0x2D	; 45
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <vfprintf+0x92>
    1e08:	80 33       	cpi	r24, 0x30	; 48
    1e0a:	69 f4       	brne	.+26     	; 0x1e26 <vfprintf+0x98>
    1e0c:	23 2d       	mov	r18, r3
    1e0e:	21 60       	ori	r18, 0x01	; 1
    1e10:	16 c0       	rjmp	.+44     	; 0x1e3e <vfprintf+0xb0>
    1e12:	83 2d       	mov	r24, r3
    1e14:	82 60       	ori	r24, 0x02	; 2
    1e16:	38 2e       	mov	r3, r24
    1e18:	e3 2d       	mov	r30, r3
    1e1a:	e4 60       	ori	r30, 0x04	; 4
    1e1c:	3e 2e       	mov	r3, r30
    1e1e:	2a c0       	rjmp	.+84     	; 0x1e74 <vfprintf+0xe6>
    1e20:	f3 2d       	mov	r31, r3
    1e22:	f8 60       	ori	r31, 0x08	; 8
    1e24:	1d c0       	rjmp	.+58     	; 0x1e60 <vfprintf+0xd2>
    1e26:	37 fc       	sbrc	r3, 7
    1e28:	2d c0       	rjmp	.+90     	; 0x1e84 <vfprintf+0xf6>
    1e2a:	20 ed       	ldi	r18, 0xD0	; 208
    1e2c:	28 0f       	add	r18, r24
    1e2e:	2a 30       	cpi	r18, 0x0A	; 10
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <vfprintf+0xb4>
    1e32:	8e 32       	cpi	r24, 0x2E	; 46
    1e34:	b9 f4       	brne	.+46     	; 0x1e64 <vfprintf+0xd6>
    1e36:	36 fc       	sbrc	r3, 6
    1e38:	81 c1       	rjmp	.+770    	; 0x213c <vfprintf+0x3ae>
    1e3a:	23 2d       	mov	r18, r3
    1e3c:	20 64       	ori	r18, 0x40	; 64
    1e3e:	32 2e       	mov	r3, r18
    1e40:	19 c0       	rjmp	.+50     	; 0x1e74 <vfprintf+0xe6>
    1e42:	36 fe       	sbrs	r3, 6
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <vfprintf+0xc4>
    1e46:	8a e0       	ldi	r24, 0x0A	; 10
    1e48:	98 9e       	mul	r9, r24
    1e4a:	20 0d       	add	r18, r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	92 2e       	mov	r9, r18
    1e50:	11 c0       	rjmp	.+34     	; 0x1e74 <vfprintf+0xe6>
    1e52:	ea e0       	ldi	r30, 0x0A	; 10
    1e54:	2e 9e       	mul	r2, r30
    1e56:	20 0d       	add	r18, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	22 2e       	mov	r2, r18
    1e5c:	f3 2d       	mov	r31, r3
    1e5e:	f0 62       	ori	r31, 0x20	; 32
    1e60:	3f 2e       	mov	r3, r31
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <vfprintf+0xe6>
    1e64:	8c 36       	cpi	r24, 0x6C	; 108
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <vfprintf+0xe2>
    1e68:	83 2d       	mov	r24, r3
    1e6a:	80 68       	ori	r24, 0x80	; 128
    1e6c:	38 2e       	mov	r3, r24
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <vfprintf+0xe6>
    1e70:	88 36       	cpi	r24, 0x68	; 104
    1e72:	41 f4       	brne	.+16     	; 0x1e84 <vfprintf+0xf6>
    1e74:	f7 01       	movw	r30, r14
    1e76:	93 fd       	sbrc	r25, 3
    1e78:	85 91       	lpm	r24, Z+
    1e7a:	93 ff       	sbrs	r25, 3
    1e7c:	81 91       	ld	r24, Z+
    1e7e:	7f 01       	movw	r14, r30
    1e80:	81 11       	cpse	r24, r1
    1e82:	b3 cf       	rjmp	.-154    	; 0x1dea <vfprintf+0x5c>
    1e84:	98 2f       	mov	r25, r24
    1e86:	9f 7d       	andi	r25, 0xDF	; 223
    1e88:	95 54       	subi	r25, 0x45	; 69
    1e8a:	93 30       	cpi	r25, 0x03	; 3
    1e8c:	28 f4       	brcc	.+10     	; 0x1e98 <vfprintf+0x10a>
    1e8e:	0c 5f       	subi	r16, 0xFC	; 252
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	9f e3       	ldi	r25, 0x3F	; 63
    1e94:	99 83       	std	Y+1, r25	; 0x01
    1e96:	0d c0       	rjmp	.+26     	; 0x1eb2 <vfprintf+0x124>
    1e98:	83 36       	cpi	r24, 0x63	; 99
    1e9a:	31 f0       	breq	.+12     	; 0x1ea8 <vfprintf+0x11a>
    1e9c:	83 37       	cpi	r24, 0x73	; 115
    1e9e:	71 f0       	breq	.+28     	; 0x1ebc <vfprintf+0x12e>
    1ea0:	83 35       	cpi	r24, 0x53	; 83
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <vfprintf+0x118>
    1ea4:	59 c0       	rjmp	.+178    	; 0x1f58 <vfprintf+0x1ca>
    1ea6:	21 c0       	rjmp	.+66     	; 0x1eea <vfprintf+0x15c>
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	80 81       	ld	r24, Z
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	0e 5f       	subi	r16, 0xFE	; 254
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	88 24       	eor	r8, r8
    1eb4:	83 94       	inc	r8
    1eb6:	91 2c       	mov	r9, r1
    1eb8:	53 01       	movw	r10, r6
    1eba:	13 c0       	rjmp	.+38     	; 0x1ee2 <vfprintf+0x154>
    1ebc:	28 01       	movw	r4, r16
    1ebe:	f2 e0       	ldi	r31, 0x02	; 2
    1ec0:	4f 0e       	add	r4, r31
    1ec2:	51 1c       	adc	r5, r1
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	a0 80       	ld	r10, Z
    1ec8:	b1 80       	ldd	r11, Z+1	; 0x01
    1eca:	36 fe       	sbrs	r3, 6
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <vfprintf+0x146>
    1ece:	69 2d       	mov	r22, r9
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x14a>
    1ed4:	6f ef       	ldi	r22, 0xFF	; 255
    1ed6:	7f ef       	ldi	r23, 0xFF	; 255
    1ed8:	c5 01       	movw	r24, r10
    1eda:	0e 94 b6 10 	call	0x216c	; 0x216c <strnlen>
    1ede:	4c 01       	movw	r8, r24
    1ee0:	82 01       	movw	r16, r4
    1ee2:	f3 2d       	mov	r31, r3
    1ee4:	ff 77       	andi	r31, 0x7F	; 127
    1ee6:	3f 2e       	mov	r3, r31
    1ee8:	16 c0       	rjmp	.+44     	; 0x1f16 <vfprintf+0x188>
    1eea:	28 01       	movw	r4, r16
    1eec:	22 e0       	ldi	r18, 0x02	; 2
    1eee:	42 0e       	add	r4, r18
    1ef0:	51 1c       	adc	r5, r1
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	a0 80       	ld	r10, Z
    1ef6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ef8:	36 fe       	sbrs	r3, 6
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <vfprintf+0x174>
    1efc:	69 2d       	mov	r22, r9
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <vfprintf+0x178>
    1f02:	6f ef       	ldi	r22, 0xFF	; 255
    1f04:	7f ef       	ldi	r23, 0xFF	; 255
    1f06:	c5 01       	movw	r24, r10
    1f08:	0e 94 ab 10 	call	0x2156	; 0x2156 <strnlen_P>
    1f0c:	4c 01       	movw	r8, r24
    1f0e:	f3 2d       	mov	r31, r3
    1f10:	f0 68       	ori	r31, 0x80	; 128
    1f12:	3f 2e       	mov	r3, r31
    1f14:	82 01       	movw	r16, r4
    1f16:	33 fc       	sbrc	r3, 3
    1f18:	1b c0       	rjmp	.+54     	; 0x1f50 <vfprintf+0x1c2>
    1f1a:	82 2d       	mov	r24, r2
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	88 16       	cp	r8, r24
    1f20:	99 06       	cpc	r9, r25
    1f22:	b0 f4       	brcc	.+44     	; 0x1f50 <vfprintf+0x1c2>
    1f24:	b6 01       	movw	r22, r12
    1f26:	80 e2       	ldi	r24, 0x20	; 32
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1f2e:	2a 94       	dec	r2
    1f30:	f4 cf       	rjmp	.-24     	; 0x1f1a <vfprintf+0x18c>
    1f32:	f5 01       	movw	r30, r10
    1f34:	37 fc       	sbrc	r3, 7
    1f36:	85 91       	lpm	r24, Z+
    1f38:	37 fe       	sbrs	r3, 7
    1f3a:	81 91       	ld	r24, Z+
    1f3c:	5f 01       	movw	r10, r30
    1f3e:	b6 01       	movw	r22, r12
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    1f46:	21 10       	cpse	r2, r1
    1f48:	2a 94       	dec	r2
    1f4a:	21 e0       	ldi	r18, 0x01	; 1
    1f4c:	82 1a       	sub	r8, r18
    1f4e:	91 08       	sbc	r9, r1
    1f50:	81 14       	cp	r8, r1
    1f52:	91 04       	cpc	r9, r1
    1f54:	71 f7       	brne	.-36     	; 0x1f32 <vfprintf+0x1a4>
    1f56:	e8 c0       	rjmp	.+464    	; 0x2128 <vfprintf+0x39a>
    1f58:	84 36       	cpi	r24, 0x64	; 100
    1f5a:	11 f0       	breq	.+4      	; 0x1f60 <vfprintf+0x1d2>
    1f5c:	89 36       	cpi	r24, 0x69	; 105
    1f5e:	41 f5       	brne	.+80     	; 0x1fb0 <vfprintf+0x222>
    1f60:	f8 01       	movw	r30, r16
    1f62:	37 fe       	sbrs	r3, 7
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <vfprintf+0x1e6>
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	0c 5f       	subi	r16, 0xFC	; 252
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <vfprintf+0x1f6>
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	07 2e       	mov	r0, r23
    1f7a:	00 0c       	add	r0, r0
    1f7c:	88 0b       	sbc	r24, r24
    1f7e:	99 0b       	sbc	r25, r25
    1f80:	0e 5f       	subi	r16, 0xFE	; 254
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	f3 2d       	mov	r31, r3
    1f86:	ff 76       	andi	r31, 0x6F	; 111
    1f88:	3f 2e       	mov	r3, r31
    1f8a:	97 ff       	sbrs	r25, 7
    1f8c:	09 c0       	rjmp	.+18     	; 0x1fa0 <vfprintf+0x212>
    1f8e:	90 95       	com	r25
    1f90:	80 95       	com	r24
    1f92:	70 95       	com	r23
    1f94:	61 95       	neg	r22
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	f0 68       	ori	r31, 0x80	; 128
    1f9e:	3f 2e       	mov	r3, r31
    1fa0:	2a e0       	ldi	r18, 0x0A	; 10
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	a3 01       	movw	r20, r6
    1fa6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__ultoa_invert>
    1faa:	88 2e       	mov	r8, r24
    1fac:	86 18       	sub	r8, r6
    1fae:	45 c0       	rjmp	.+138    	; 0x203a <vfprintf+0x2ac>
    1fb0:	85 37       	cpi	r24, 0x75	; 117
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <vfprintf+0x232>
    1fb4:	23 2d       	mov	r18, r3
    1fb6:	2f 7e       	andi	r18, 0xEF	; 239
    1fb8:	b2 2e       	mov	r11, r18
    1fba:	2a e0       	ldi	r18, 0x0A	; 10
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	25 c0       	rjmp	.+74     	; 0x200a <vfprintf+0x27c>
    1fc0:	93 2d       	mov	r25, r3
    1fc2:	99 7f       	andi	r25, 0xF9	; 249
    1fc4:	b9 2e       	mov	r11, r25
    1fc6:	8f 36       	cpi	r24, 0x6F	; 111
    1fc8:	c1 f0       	breq	.+48     	; 0x1ffa <vfprintf+0x26c>
    1fca:	18 f4       	brcc	.+6      	; 0x1fd2 <vfprintf+0x244>
    1fcc:	88 35       	cpi	r24, 0x58	; 88
    1fce:	79 f0       	breq	.+30     	; 0x1fee <vfprintf+0x260>
    1fd0:	b5 c0       	rjmp	.+362    	; 0x213c <vfprintf+0x3ae>
    1fd2:	80 37       	cpi	r24, 0x70	; 112
    1fd4:	19 f0       	breq	.+6      	; 0x1fdc <vfprintf+0x24e>
    1fd6:	88 37       	cpi	r24, 0x78	; 120
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <vfprintf+0x254>
    1fda:	b0 c0       	rjmp	.+352    	; 0x213c <vfprintf+0x3ae>
    1fdc:	e9 2f       	mov	r30, r25
    1fde:	e0 61       	ori	r30, 0x10	; 16
    1fe0:	be 2e       	mov	r11, r30
    1fe2:	b4 fe       	sbrs	r11, 4
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <vfprintf+0x272>
    1fe6:	fb 2d       	mov	r31, r11
    1fe8:	f4 60       	ori	r31, 0x04	; 4
    1fea:	bf 2e       	mov	r11, r31
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <vfprintf+0x272>
    1fee:	34 fe       	sbrs	r3, 4
    1ff0:	0a c0       	rjmp	.+20     	; 0x2006 <vfprintf+0x278>
    1ff2:	29 2f       	mov	r18, r25
    1ff4:	26 60       	ori	r18, 0x06	; 6
    1ff6:	b2 2e       	mov	r11, r18
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <vfprintf+0x278>
    1ffa:	28 e0       	ldi	r18, 0x08	; 8
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <vfprintf+0x27c>
    2000:	20 e1       	ldi	r18, 0x10	; 16
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	02 c0       	rjmp	.+4      	; 0x200a <vfprintf+0x27c>
    2006:	20 e1       	ldi	r18, 0x10	; 16
    2008:	32 e0       	ldi	r19, 0x02	; 2
    200a:	f8 01       	movw	r30, r16
    200c:	b7 fe       	sbrs	r11, 7
    200e:	07 c0       	rjmp	.+14     	; 0x201e <vfprintf+0x290>
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	0c 5f       	subi	r16, 0xFC	; 252
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	06 c0       	rjmp	.+12     	; 0x202a <vfprintf+0x29c>
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 5f       	subi	r16, 0xFE	; 254
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	a3 01       	movw	r20, r6
    202c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__ultoa_invert>
    2030:	88 2e       	mov	r8, r24
    2032:	86 18       	sub	r8, r6
    2034:	fb 2d       	mov	r31, r11
    2036:	ff 77       	andi	r31, 0x7F	; 127
    2038:	3f 2e       	mov	r3, r31
    203a:	36 fe       	sbrs	r3, 6
    203c:	0d c0       	rjmp	.+26     	; 0x2058 <vfprintf+0x2ca>
    203e:	23 2d       	mov	r18, r3
    2040:	2e 7f       	andi	r18, 0xFE	; 254
    2042:	a2 2e       	mov	r10, r18
    2044:	89 14       	cp	r8, r9
    2046:	58 f4       	brcc	.+22     	; 0x205e <vfprintf+0x2d0>
    2048:	34 fe       	sbrs	r3, 4
    204a:	0b c0       	rjmp	.+22     	; 0x2062 <vfprintf+0x2d4>
    204c:	32 fc       	sbrc	r3, 2
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <vfprintf+0x2d4>
    2050:	83 2d       	mov	r24, r3
    2052:	8e 7e       	andi	r24, 0xEE	; 238
    2054:	a8 2e       	mov	r10, r24
    2056:	05 c0       	rjmp	.+10     	; 0x2062 <vfprintf+0x2d4>
    2058:	b8 2c       	mov	r11, r8
    205a:	a3 2c       	mov	r10, r3
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <vfprintf+0x2d6>
    205e:	b8 2c       	mov	r11, r8
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x2d6>
    2062:	b9 2c       	mov	r11, r9
    2064:	a4 fe       	sbrs	r10, 4
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <vfprintf+0x2f8>
    2068:	fe 01       	movw	r30, r28
    206a:	e8 0d       	add	r30, r8
    206c:	f1 1d       	adc	r31, r1
    206e:	80 81       	ld	r24, Z
    2070:	80 33       	cpi	r24, 0x30	; 48
    2072:	21 f4       	brne	.+8      	; 0x207c <vfprintf+0x2ee>
    2074:	9a 2d       	mov	r25, r10
    2076:	99 7e       	andi	r25, 0xE9	; 233
    2078:	a9 2e       	mov	r10, r25
    207a:	09 c0       	rjmp	.+18     	; 0x208e <vfprintf+0x300>
    207c:	a2 fe       	sbrs	r10, 2
    207e:	06 c0       	rjmp	.+12     	; 0x208c <vfprintf+0x2fe>
    2080:	b3 94       	inc	r11
    2082:	b3 94       	inc	r11
    2084:	04 c0       	rjmp	.+8      	; 0x208e <vfprintf+0x300>
    2086:	8a 2d       	mov	r24, r10
    2088:	86 78       	andi	r24, 0x86	; 134
    208a:	09 f0       	breq	.+2      	; 0x208e <vfprintf+0x300>
    208c:	b3 94       	inc	r11
    208e:	a3 fc       	sbrc	r10, 3
    2090:	11 c0       	rjmp	.+34     	; 0x20b4 <vfprintf+0x326>
    2092:	a0 fe       	sbrs	r10, 0
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <vfprintf+0x314>
    2096:	b2 14       	cp	r11, r2
    2098:	88 f4       	brcc	.+34     	; 0x20bc <vfprintf+0x32e>
    209a:	28 0c       	add	r2, r8
    209c:	92 2c       	mov	r9, r2
    209e:	9b 18       	sub	r9, r11
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <vfprintf+0x330>
    20a2:	b2 14       	cp	r11, r2
    20a4:	60 f4       	brcc	.+24     	; 0x20be <vfprintf+0x330>
    20a6:	b6 01       	movw	r22, r12
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    20b0:	b3 94       	inc	r11
    20b2:	f7 cf       	rjmp	.-18     	; 0x20a2 <vfprintf+0x314>
    20b4:	b2 14       	cp	r11, r2
    20b6:	18 f4       	brcc	.+6      	; 0x20be <vfprintf+0x330>
    20b8:	2b 18       	sub	r2, r11
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <vfprintf+0x332>
    20bc:	98 2c       	mov	r9, r8
    20be:	21 2c       	mov	r2, r1
    20c0:	a4 fe       	sbrs	r10, 4
    20c2:	10 c0       	rjmp	.+32     	; 0x20e4 <vfprintf+0x356>
    20c4:	b6 01       	movw	r22, r12
    20c6:	80 e3       	ldi	r24, 0x30	; 48
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    20ce:	a2 fe       	sbrs	r10, 2
    20d0:	17 c0       	rjmp	.+46     	; 0x2100 <vfprintf+0x372>
    20d2:	a1 fc       	sbrc	r10, 1
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <vfprintf+0x34e>
    20d6:	88 e7       	ldi	r24, 0x78	; 120
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <vfprintf+0x352>
    20dc:	88 e5       	ldi	r24, 0x58	; 88
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	b6 01       	movw	r22, r12
    20e2:	0c c0       	rjmp	.+24     	; 0x20fc <vfprintf+0x36e>
    20e4:	8a 2d       	mov	r24, r10
    20e6:	86 78       	andi	r24, 0x86	; 134
    20e8:	59 f0       	breq	.+22     	; 0x2100 <vfprintf+0x372>
    20ea:	a1 fe       	sbrs	r10, 1
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <vfprintf+0x364>
    20ee:	8b e2       	ldi	r24, 0x2B	; 43
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <vfprintf+0x366>
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	a7 fc       	sbrc	r10, 7
    20f6:	8d e2       	ldi	r24, 0x2D	; 45
    20f8:	b6 01       	movw	r22, r12
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    2100:	89 14       	cp	r8, r9
    2102:	38 f4       	brcc	.+14     	; 0x2112 <vfprintf+0x384>
    2104:	b6 01       	movw	r22, r12
    2106:	80 e3       	ldi	r24, 0x30	; 48
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    210e:	9a 94       	dec	r9
    2110:	f7 cf       	rjmp	.-18     	; 0x2100 <vfprintf+0x372>
    2112:	8a 94       	dec	r8
    2114:	f3 01       	movw	r30, r6
    2116:	e8 0d       	add	r30, r8
    2118:	f1 1d       	adc	r31, r1
    211a:	80 81       	ld	r24, Z
    211c:	b6 01       	movw	r22, r12
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    2124:	81 10       	cpse	r8, r1
    2126:	f5 cf       	rjmp	.-22     	; 0x2112 <vfprintf+0x384>
    2128:	22 20       	and	r2, r2
    212a:	09 f4       	brne	.+2      	; 0x212e <vfprintf+0x3a0>
    212c:	42 ce       	rjmp	.-892    	; 0x1db2 <vfprintf+0x24>
    212e:	b6 01       	movw	r22, r12
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 c1 10 	call	0x2182	; 0x2182 <fputc>
    2138:	2a 94       	dec	r2
    213a:	f6 cf       	rjmp	.-20     	; 0x2128 <vfprintf+0x39a>
    213c:	f6 01       	movw	r30, r12
    213e:	86 81       	ldd	r24, Z+6	; 0x06
    2140:	97 81       	ldd	r25, Z+7	; 0x07
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <vfprintf+0x3ba>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	2b 96       	adiw	r28, 0x0b	; 11
    214a:	e2 e1       	ldi	r30, 0x12	; 18
    214c:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__>

00002150 <__ctype_isfalse>:
    2150:	99 27       	eor	r25, r25
    2152:	88 27       	eor	r24, r24

00002154 <__ctype_istrue>:
    2154:	08 95       	ret

00002156 <strnlen_P>:
    2156:	fc 01       	movw	r30, r24
    2158:	05 90       	lpm	r0, Z+
    215a:	61 50       	subi	r22, 0x01	; 1
    215c:	70 40       	sbci	r23, 0x00	; 0
    215e:	01 10       	cpse	r0, r1
    2160:	d8 f7       	brcc	.-10     	; 0x2158 <strnlen_P+0x2>
    2162:	80 95       	com	r24
    2164:	90 95       	com	r25
    2166:	8e 0f       	add	r24, r30
    2168:	9f 1f       	adc	r25, r31
    216a:	08 95       	ret

0000216c <strnlen>:
    216c:	fc 01       	movw	r30, r24
    216e:	61 50       	subi	r22, 0x01	; 1
    2170:	70 40       	sbci	r23, 0x00	; 0
    2172:	01 90       	ld	r0, Z+
    2174:	01 10       	cpse	r0, r1
    2176:	d8 f7       	brcc	.-10     	; 0x216e <strnlen+0x2>
    2178:	80 95       	com	r24
    217a:	90 95       	com	r25
    217c:	8e 0f       	add	r24, r30
    217e:	9f 1f       	adc	r25, r31
    2180:	08 95       	ret

00002182 <fputc>:
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	fb 01       	movw	r30, r22
    218c:	23 81       	ldd	r18, Z+3	; 0x03
    218e:	21 fd       	sbrc	r18, 1
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <fputc+0x16>
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	2c c0       	rjmp	.+88     	; 0x21f0 <fputc+0x6e>
    2198:	22 ff       	sbrs	r18, 2
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <fputc+0x46>
    219c:	46 81       	ldd	r20, Z+6	; 0x06
    219e:	57 81       	ldd	r21, Z+7	; 0x07
    21a0:	24 81       	ldd	r18, Z+4	; 0x04
    21a2:	35 81       	ldd	r19, Z+5	; 0x05
    21a4:	42 17       	cp	r20, r18
    21a6:	53 07       	cpc	r21, r19
    21a8:	44 f4       	brge	.+16     	; 0x21ba <fputc+0x38>
    21aa:	a0 81       	ld	r26, Z
    21ac:	b1 81       	ldd	r27, Z+1	; 0x01
    21ae:	9d 01       	movw	r18, r26
    21b0:	2f 5f       	subi	r18, 0xFF	; 255
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	20 83       	st	Z, r18
    21b6:	31 83       	std	Z+1, r19	; 0x01
    21b8:	8c 93       	st	X, r24
    21ba:	26 81       	ldd	r18, Z+6	; 0x06
    21bc:	37 81       	ldd	r19, Z+7	; 0x07
    21be:	2f 5f       	subi	r18, 0xFF	; 255
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	26 83       	std	Z+6, r18	; 0x06
    21c4:	37 83       	std	Z+7, r19	; 0x07
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <fputc+0x6e>
    21c8:	8b 01       	movw	r16, r22
    21ca:	ec 01       	movw	r28, r24
    21cc:	fb 01       	movw	r30, r22
    21ce:	00 84       	ldd	r0, Z+8	; 0x08
    21d0:	f1 85       	ldd	r31, Z+9	; 0x09
    21d2:	e0 2d       	mov	r30, r0
    21d4:	09 95       	icall
    21d6:	89 2b       	or	r24, r25
    21d8:	e1 f6       	brne	.-72     	; 0x2192 <fputc+0x10>
    21da:	d8 01       	movw	r26, r16
    21dc:	16 96       	adiw	r26, 0x06	; 6
    21de:	8d 91       	ld	r24, X+
    21e0:	9c 91       	ld	r25, X
    21e2:	17 97       	sbiw	r26, 0x07	; 7
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	16 96       	adiw	r26, 0x06	; 6
    21e8:	8d 93       	st	X+, r24
    21ea:	9c 93       	st	X, r25
    21ec:	17 97       	sbiw	r26, 0x07	; 7
    21ee:	ce 01       	movw	r24, r28
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <__ultoa_invert>:
    21fa:	fa 01       	movw	r30, r20
    21fc:	aa 27       	eor	r26, r26
    21fe:	28 30       	cpi	r18, 0x08	; 8
    2200:	51 f1       	breq	.+84     	; 0x2256 <__ultoa_invert+0x5c>
    2202:	20 31       	cpi	r18, 0x10	; 16
    2204:	81 f1       	breq	.+96     	; 0x2266 <__ultoa_invert+0x6c>
    2206:	e8 94       	clt
    2208:	6f 93       	push	r22
    220a:	6e 7f       	andi	r22, 0xFE	; 254
    220c:	6e 5f       	subi	r22, 0xFE	; 254
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	af 4f       	sbci	r26, 0xFF	; 255
    2216:	b1 e0       	ldi	r27, 0x01	; 1
    2218:	3e d0       	rcall	.+124    	; 0x2296 <__ultoa_invert+0x9c>
    221a:	b4 e0       	ldi	r27, 0x04	; 4
    221c:	3c d0       	rcall	.+120    	; 0x2296 <__ultoa_invert+0x9c>
    221e:	67 0f       	add	r22, r23
    2220:	78 1f       	adc	r23, r24
    2222:	89 1f       	adc	r24, r25
    2224:	9a 1f       	adc	r25, r26
    2226:	a1 1d       	adc	r26, r1
    2228:	68 0f       	add	r22, r24
    222a:	79 1f       	adc	r23, r25
    222c:	8a 1f       	adc	r24, r26
    222e:	91 1d       	adc	r25, r1
    2230:	a1 1d       	adc	r26, r1
    2232:	6a 0f       	add	r22, r26
    2234:	71 1d       	adc	r23, r1
    2236:	81 1d       	adc	r24, r1
    2238:	91 1d       	adc	r25, r1
    223a:	a1 1d       	adc	r26, r1
    223c:	20 d0       	rcall	.+64     	; 0x227e <__ultoa_invert+0x84>
    223e:	09 f4       	brne	.+2      	; 0x2242 <__ultoa_invert+0x48>
    2240:	68 94       	set
    2242:	3f 91       	pop	r19
    2244:	2a e0       	ldi	r18, 0x0A	; 10
    2246:	26 9f       	mul	r18, r22
    2248:	11 24       	eor	r1, r1
    224a:	30 19       	sub	r19, r0
    224c:	30 5d       	subi	r19, 0xD0	; 208
    224e:	31 93       	st	Z+, r19
    2250:	de f6       	brtc	.-74     	; 0x2208 <__ultoa_invert+0xe>
    2252:	cf 01       	movw	r24, r30
    2254:	08 95       	ret
    2256:	46 2f       	mov	r20, r22
    2258:	47 70       	andi	r20, 0x07	; 7
    225a:	40 5d       	subi	r20, 0xD0	; 208
    225c:	41 93       	st	Z+, r20
    225e:	b3 e0       	ldi	r27, 0x03	; 3
    2260:	0f d0       	rcall	.+30     	; 0x2280 <__ultoa_invert+0x86>
    2262:	c9 f7       	brne	.-14     	; 0x2256 <__ultoa_invert+0x5c>
    2264:	f6 cf       	rjmp	.-20     	; 0x2252 <__ultoa_invert+0x58>
    2266:	46 2f       	mov	r20, r22
    2268:	4f 70       	andi	r20, 0x0F	; 15
    226a:	40 5d       	subi	r20, 0xD0	; 208
    226c:	4a 33       	cpi	r20, 0x3A	; 58
    226e:	18 f0       	brcs	.+6      	; 0x2276 <__ultoa_invert+0x7c>
    2270:	49 5d       	subi	r20, 0xD9	; 217
    2272:	31 fd       	sbrc	r19, 1
    2274:	40 52       	subi	r20, 0x20	; 32
    2276:	41 93       	st	Z+, r20
    2278:	02 d0       	rcall	.+4      	; 0x227e <__ultoa_invert+0x84>
    227a:	a9 f7       	brne	.-22     	; 0x2266 <__ultoa_invert+0x6c>
    227c:	ea cf       	rjmp	.-44     	; 0x2252 <__ultoa_invert+0x58>
    227e:	b4 e0       	ldi	r27, 0x04	; 4
    2280:	a6 95       	lsr	r26
    2282:	97 95       	ror	r25
    2284:	87 95       	ror	r24
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	ba 95       	dec	r27
    228c:	c9 f7       	brne	.-14     	; 0x2280 <__ultoa_invert+0x86>
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	61 05       	cpc	r22, r1
    2292:	71 05       	cpc	r23, r1
    2294:	08 95       	ret
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	0a 2e       	mov	r0, r26
    229c:	06 94       	lsr	r0
    229e:	57 95       	ror	r21
    22a0:	47 95       	ror	r20
    22a2:	37 95       	ror	r19
    22a4:	27 95       	ror	r18
    22a6:	ba 95       	dec	r27
    22a8:	c9 f7       	brne	.-14     	; 0x229c <__ultoa_invert+0xa2>
    22aa:	62 0f       	add	r22, r18
    22ac:	73 1f       	adc	r23, r19
    22ae:	84 1f       	adc	r24, r20
    22b0:	95 1f       	adc	r25, r21
    22b2:	a0 1d       	adc	r26, r0
    22b4:	08 95       	ret

000022b6 <__mulsi3>:
    22b6:	db 01       	movw	r26, r22
    22b8:	8f 93       	push	r24
    22ba:	9f 93       	push	r25
    22bc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__muluhisi3>
    22c0:	bf 91       	pop	r27
    22c2:	af 91       	pop	r26
    22c4:	a2 9f       	mul	r26, r18
    22c6:	80 0d       	add	r24, r0
    22c8:	91 1d       	adc	r25, r1
    22ca:	a3 9f       	mul	r26, r19
    22cc:	90 0d       	add	r25, r0
    22ce:	b2 9f       	mul	r27, r18
    22d0:	90 0d       	add	r25, r0
    22d2:	11 24       	eor	r1, r1
    22d4:	08 95       	ret

000022d6 <__udivmodsi4>:
    22d6:	a1 e2       	ldi	r26, 0x21	; 33
    22d8:	1a 2e       	mov	r1, r26
    22da:	aa 1b       	sub	r26, r26
    22dc:	bb 1b       	sub	r27, r27
    22de:	fd 01       	movw	r30, r26
    22e0:	0d c0       	rjmp	.+26     	; 0x22fc <__udivmodsi4_ep>

000022e2 <__udivmodsi4_loop>:
    22e2:	aa 1f       	adc	r26, r26
    22e4:	bb 1f       	adc	r27, r27
    22e6:	ee 1f       	adc	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	a2 17       	cp	r26, r18
    22ec:	b3 07       	cpc	r27, r19
    22ee:	e4 07       	cpc	r30, r20
    22f0:	f5 07       	cpc	r31, r21
    22f2:	20 f0       	brcs	.+8      	; 0x22fc <__udivmodsi4_ep>
    22f4:	a2 1b       	sub	r26, r18
    22f6:	b3 0b       	sbc	r27, r19
    22f8:	e4 0b       	sbc	r30, r20
    22fa:	f5 0b       	sbc	r31, r21

000022fc <__udivmodsi4_ep>:
    22fc:	66 1f       	adc	r22, r22
    22fe:	77 1f       	adc	r23, r23
    2300:	88 1f       	adc	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	1a 94       	dec	r1
    2306:	69 f7       	brne	.-38     	; 0x22e2 <__udivmodsi4_loop>
    2308:	60 95       	com	r22
    230a:	70 95       	com	r23
    230c:	80 95       	com	r24
    230e:	90 95       	com	r25
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	bd 01       	movw	r22, r26
    2316:	cf 01       	movw	r24, r30
    2318:	08 95       	ret

0000231a <__prologue_saves__>:
    231a:	2f 92       	push	r2
    231c:	3f 92       	push	r3
    231e:	4f 92       	push	r4
    2320:	5f 92       	push	r5
    2322:	6f 92       	push	r6
    2324:	7f 92       	push	r7
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	ca 1b       	sub	r28, r26
    2344:	db 0b       	sbc	r29, r27
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	09 94       	ijmp

0000234c <__epilogue_restores__>:
    234c:	2a 88       	ldd	r2, Y+18	; 0x12
    234e:	39 88       	ldd	r3, Y+17	; 0x11
    2350:	48 88       	ldd	r4, Y+16	; 0x10
    2352:	5f 84       	ldd	r5, Y+15	; 0x0f
    2354:	6e 84       	ldd	r6, Y+14	; 0x0e
    2356:	7d 84       	ldd	r7, Y+13	; 0x0d
    2358:	8c 84       	ldd	r8, Y+12	; 0x0c
    235a:	9b 84       	ldd	r9, Y+11	; 0x0b
    235c:	aa 84       	ldd	r10, Y+10	; 0x0a
    235e:	b9 84       	ldd	r11, Y+9	; 0x09
    2360:	c8 84       	ldd	r12, Y+8	; 0x08
    2362:	df 80       	ldd	r13, Y+7	; 0x07
    2364:	ee 80       	ldd	r14, Y+6	; 0x06
    2366:	fd 80       	ldd	r15, Y+5	; 0x05
    2368:	0c 81       	ldd	r16, Y+4	; 0x04
    236a:	1b 81       	ldd	r17, Y+3	; 0x03
    236c:	aa 81       	ldd	r26, Y+2	; 0x02
    236e:	b9 81       	ldd	r27, Y+1	; 0x01
    2370:	ce 0f       	add	r28, r30
    2372:	d1 1d       	adc	r29, r1
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	ed 01       	movw	r28, r26
    237a:	08 95       	ret

0000237c <_exit>:
    237c:	f8 94       	cli

0000237e <__stop_program>:
    237e:	ff cf       	rjmp	.-2      	; 0x237e <__stop_program>
