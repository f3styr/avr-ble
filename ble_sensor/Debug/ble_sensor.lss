
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00803000  0000234f  00002403  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016d  000061e2  000021e2  00002296  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000007bc  00803088  00803088  0000248b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000248b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000478  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c62  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000313e  00000000  00000000  00009602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000213c  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bec  00000000  00000000  0000e87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000305a  00000000  00000000  0000f468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002206  00000000  00000000  000124c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e0  00000000  00000000  000146c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_15>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_17>
      48:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_18>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_31>
      80:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_32>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000090 <__trampolines_end>:
      90:	63 64       	ori	r22, 0x43	; 67
      92:	69 6e       	ori	r22, 0xE9	; 233
      94:	6f 70       	andi	r22, 0x0F	; 15
      96:	73 75       	andi	r23, 0x53	; 83
      98:	78 58       	subi	r23, 0x88	; 136
      9a:	5b 00       	.word	0x005b	; ????

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	cd bf       	out	0x3d, r28	; 61
      a4:	df e3       	ldi	r29, 0x3F	; 63
      a6:	de bf       	out	0x3e, r29	; 62

000000a8 <__do_copy_data>:
      a8:	10 e3       	ldi	r17, 0x30	; 48
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b0 e3       	ldi	r27, 0x30	; 48
      ae:	ef e4       	ldi	r30, 0x4F	; 79
      b0:	f3 e2       	ldi	r31, 0x23	; 35
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 38       	cpi	r26, 0x88	; 136
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	28 e3       	ldi	r18, 0x38	; 56
      c0:	a8 e8       	ldi	r26, 0x88	; 136
      c2:	b0 e3       	ldi	r27, 0x30	; 48
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a4 34       	cpi	r26, 0x44	; 68
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
      d2:	0c 94 ef 10 	jmp	0x21de	; 0x21de <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      da:	0e 94 4a 05 	call	0xa94	; 0xa94 <system_init>
      de:	08 95       	ret

000000e0 <rx487x_shutdown>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      e0:	8d b1       	in	r24, 0x0d	; 13
      e2:	87 7f       	andi	r24, 0xF7	; 247
      e4:	8d b9       	out	0x0d, r24	; 13
static ble_error_t rx487x_shutdown(struct ble_server* ctx) 
{
	RN487X_RST_set_level(false);
	
	return BLE_NOERR;
}
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	08 95       	ret

000000ea <rn487x_clear_rx_buff>:

/* Helper ASCII Functions */

static void rn487x_clear_rx_buff()
{
	rx_wptr = 0;
      ea:	10 92 0a 33 	sts	0x330A, r1	; 0x80330a <rx_wptr>
      ee:	10 92 0b 33 	sts	0x330B, r1	; 0x80330b <rx_wptr+0x1>
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	ec e0       	ldi	r30, 0x0C	; 12
      f8:	f3 e3       	ldi	r31, 0x33	; 51
      fa:	df 01       	movw	r26, r30
      fc:	9c 01       	movw	r18, r24
      fe:	1d 92       	st	X+, r1
     100:	21 50       	subi	r18, 0x01	; 1
     102:	30 40       	sbci	r19, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <rn487x_clear_rx_buff+0x14>
     106:	08 95       	ret

00000108 <rn487x_usb_cdc_isr>:

}


void rn487x_usb_cdc_isr()
{
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29

	if(usb_rx_wptr < (RN487X_USB_CDC_BUFF_SIZE - 2))
     10c:	80 91 88 32 	lds	r24, 0x3288	; 0x803288 <usb_rx_wptr>
     110:	90 91 89 32 	lds	r25, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     114:	8e 37       	cpi	r24, 0x7E	; 126
     116:	91 05       	cpc	r25, r1
     118:	e8 f4       	brcc	.+58     	; 0x154 <rn487x_usb_cdc_isr+0x4c>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = usb_cdc_get_data();
     11a:	c0 91 88 32 	lds	r28, 0x3288	; 0x803288 <usb_rx_wptr>
     11e:	d0 91 89 32 	lds	r29, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     122:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <usb_cdc_get_data>
     126:	c6 57       	subi	r28, 0x76	; 118
     128:	dd 4c       	sbci	r29, 0xCD	; 205
     12a:	88 83       	st	Y, r24
		printf("%c", rn487x_usb_rx_buff[usb_rx_wptr]);
     12c:	e0 91 88 32 	lds	r30, 0x3288	; 0x803288 <usb_rx_wptr>
     130:	f0 91 89 32 	lds	r31, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     134:	e6 57       	subi	r30, 0x76	; 118
     136:	fd 4c       	sbci	r31, 0xCD	; 205
     138:	80 81       	ld	r24, Z
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <putchar>
		usb_rx_wptr = (usb_rx_wptr + 1);
     140:	80 91 88 32 	lds	r24, 0x3288	; 0x803288 <usb_rx_wptr>
     144:	90 91 89 32 	lds	r25, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     148:	01 96       	adiw	r24, 0x01	; 1
     14a:	80 93 88 32 	sts	0x3288, r24	; 0x803288 <usb_rx_wptr>
     14e:	90 93 89 32 	sts	0x3289, r25	; 0x803289 <usb_rx_wptr+0x1>
     152:	02 c0       	rjmp	.+4      	; 0x158 <rn487x_usb_cdc_isr+0x50>
	}
	else
	{
		usb_cdc_get_data();
     154:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <usb_cdc_get_data>
	}
	
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <rn487x_cb_isr>:
	return BLE_NOERR;

}

static void rn487x_cb_isr()
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
     162:	c0 91 0a 33 	lds	r28, 0x330A	; 0x80330a <rx_wptr>
     166:	d0 91 0b 33 	lds	r29, 0x330B	; 0x80330b <rx_wptr+0x1>
     16a:	0e 94 57 08 	call	0x10ae	; 0x10ae <rx487x_get_data>
     16e:	c4 5f       	subi	r28, 0xF4	; 244
     170:	dc 4c       	sbci	r29, 0xCC	; 204
     172:	88 83       	st	Y, r24
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
     174:	80 91 0a 33 	lds	r24, 0x330A	; 0x80330a <rx_wptr>
     178:	90 91 0b 33 	lds	r25, 0x330B	; 0x80330b <rx_wptr+0x1>
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	99 27       	eor	r25, r25
     180:	80 93 0a 33 	sts	0x330A, r24	; 0x80330a <rx_wptr>
     184:	90 93 0b 33 	sts	0x330B, r25	; 0x80330b <rx_wptr+0x1>
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <rn487x_get_err_from_response>:
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
}

static ble_error_t rn487x_get_err_from_response()
{
	if(	strstr(rn487x_rx_buff, RN487X_RESPONSE_ERR) != NULL)
     18e:	6c ee       	ldi	r22, 0xEC	; 236
     190:	71 e6       	ldi	r23, 0x61	; 97
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	93 e3       	ldi	r25, 0x33	; 51
     196:	0e 94 47 0a 	call	0x148e	; 0x148e <strstr>
     19a:	89 2b       	or	r24, r25
     19c:	11 f0       	breq	.+4      	; 0x1a2 <rn487x_get_err_from_response+0x14>
	return BLE_FAIL;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret
	else
	return BLE_NOERR;
     1a2:	81 e0       	ldi	r24, 0x01	; 1

}
     1a4:	08 95       	ret

000001a6 <rx487x_reboot>:
	return BLE_NOERR;
}

static ble_error_t rx487x_reboot(struct ble_server* ctx)
{
	rn487x_clear_rx_buff();
     1a6:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
     1aa:	8d b1       	in	r24, 0x0d	; 13
     1ac:	87 7f       	andi	r24, 0xF7	; 247
     1ae:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	8d e8       	ldi	r24, 0x8D	; 141
     1b2:	90 e2       	ldi	r25, 0x20	; 32
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <rx487x_reboot+0xe>
     1b8:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     1ba:	8d b1       	in	r24, 0x0d	; 13
     1bc:	88 60       	ori	r24, 0x08	; 8
     1be:	8d b9       	out	0x0d, r24	; 13
     1c0:	9f e3       	ldi	r25, 0x3F	; 63
     1c2:	2d e0       	ldi	r18, 0x0D	; 13
     1c4:	83 e0       	ldi	r24, 0x03	; 3
     1c6:	91 50       	subi	r25, 0x01	; 1
     1c8:	20 40       	sbci	r18, 0x00	; 0
     1ca:	80 40       	sbci	r24, 0x00	; 0
     1cc:	e1 f7       	brne	.-8      	; 0x1c6 <rx487x_reboot+0x20>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <rx487x_reboot+0x2a>
     1d0:	00 00       	nop
	RN487X_RST_set_level(false);
	_delay_ms(RN487X_RESET_DELAY);
	RN487X_RST_set_level(true);
	_delay_ms(RN487X_STARTUP_TIME);
	
	return rn487x_get_err_from_response();
     1d2:	0e 94 c7 00 	call	0x18e	; 0x18e <rn487x_get_err_from_response>
}
     1d6:	08 95       	ret

000001d8 <rn487x_send_ascii_command>:
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
	uint8_t id = 0;
	
	rn487x_clear_rx_buff();
     1e4:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
	
	// enter cmd mode
	rx487x_write('$');
     1e8:	84 e2       	ldi	r24, 0x24	; 36
     1ea:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('$');
     1ee:	84 e2       	ldi	r24, 0x24	; 36
     1f0:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('$');
     1f4:	84 e2       	ldi	r24, 0x24	; 36
     1f6:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
     1fa:	2a e6       	ldi	r18, 0x6A	; 106
     1fc:	84 e0       	ldi	r24, 0x04	; 4
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <rn487x_send_ascii_command+0x28>
     208:	00 c0       	rjmp	.+0      	; 0x20a <rn487x_send_ascii_command+0x32>
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     20a:	f1 2c       	mov	r15, r1
     20c:	08 c0       	rjmp	.+16     	; 0x21e <rn487x_send_ascii_command+0x46>

	_delay_ms(100);

	while(cmd[id] != NULL)
	{
		if(rx487x_is_tx_ready())
     20e:	0e 94 1f 08 	call	0x103e	; 0x103e <rx487x_is_tx_ready>
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <rn487x_send_ascii_command+0x46>
		{
			rx487x_write(cmd[id]);
     216:	88 81       	ld	r24, Y
     218:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
			id++;
     21c:	f3 94       	inc	r15
	rx487x_write('$');
	rx487x_write('$');

	_delay_ms(100);

	while(cmd[id] != NULL)
     21e:	e8 01       	movw	r28, r16
     220:	cf 0d       	add	r28, r15
     222:	d1 1d       	adc	r29, r1
     224:	88 81       	ld	r24, Y
     226:	81 11       	cpse	r24, r1
     228:	f2 cf       	rjmp	.-28     	; 0x20e <rn487x_send_ascii_command+0x36>
     22a:	2f e3       	ldi	r18, 0x3F	; 63
     22c:	8d e0       	ldi	r24, 0x0D	; 13
     22e:	93 e0       	ldi	r25, 0x03	; 3
     230:	21 50       	subi	r18, 0x01	; 1
     232:	80 40       	sbci	r24, 0x00	; 0
     234:	90 40       	sbci	r25, 0x00	; 0
     236:	e1 f7       	brne	.-8      	; 0x230 <rn487x_send_ascii_command+0x58>
     238:	00 c0       	rjmp	.+0      	; 0x23a <rn487x_send_ascii_command+0x62>
     23a:	00 00       	nop
	}

	_delay_ms(RN487X_DELAY_WAIT_FOR_RESPONSE);

	//exit cmd mode
	rx487x_write('-');
     23c:	8d e2       	ldi	r24, 0x2D	; 45
     23e:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('-');
     242:	8d e2       	ldi	r24, 0x2D	; 45
     244:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('-');
     248:	8d e2       	ldi	r24, 0x2D	; 45
     24a:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('\r');
     24e:	8d e0       	ldi	r24, 0x0D	; 13
     250:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
	rx487x_write('\n');
     254:	8a e0       	ldi	r24, 0x0A	; 10
     256:	0e 94 23 08 	call	0x1046	; 0x1046 <rx487x_write>
     25a:	2a e6       	ldi	r18, 0x6A	; 106
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	21 50       	subi	r18, 0x01	; 1
     262:	80 40       	sbci	r24, 0x00	; 0
     264:	90 40       	sbci	r25, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <rn487x_send_ascii_command+0x88>
     268:	00 c0       	rjmp	.+0      	; 0x26a <rn487x_send_ascii_command+0x92>

	_delay_ms(100);
	
	#ifdef PRINT_DEBUG_MSG
	printf("%s", cmd);
     26a:	1f 93       	push	r17
     26c:	0f 93       	push	r16
     26e:	c0 ef       	ldi	r28, 0xF0	; 240
     270:	d1 e6       	ldi	r29, 0x61	; 97
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <printf>
	printf("%s", rn487x_rx_buff);
     27a:	8c e0       	ldi	r24, 0x0C	; 12
     27c:	93 e3       	ldi	r25, 0x33	; 51
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <printf>
	#endif

}
     28a:	8d b7       	in	r24, 0x3d	; 61
     28c:	9e b7       	in	r25, 0x3e	; 62
     28e:	08 96       	adiw	r24, 0x08	; 8
     290:	8d bf       	out	0x3d, r24	; 61
     292:	9e bf       	out	0x3e, r25	; 62
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	08 95       	ret

000002a0 <rn487x_main_loop>:

static void rn487x_main_loop(struct ble_server* ctx)
{

	// enter pressed
	if(usb_rx_wptr > 0 && rn487x_usb_rx_buff[usb_rx_wptr-1] == 13) 
     2a0:	80 91 88 32 	lds	r24, 0x3288	; 0x803288 <usb_rx_wptr>
     2a4:	90 91 89 32 	lds	r25, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	39 f1       	breq	.+78     	; 0x2fa <rn487x_main_loop+0x5a>
     2ac:	e0 91 88 32 	lds	r30, 0x3288	; 0x803288 <usb_rx_wptr>
     2b0:	f0 91 89 32 	lds	r31, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     2b4:	e7 57       	subi	r30, 0x77	; 119
     2b6:	fd 4c       	sbci	r31, 0xCD	; 205
     2b8:	80 81       	ld	r24, Z
     2ba:	8d 30       	cpi	r24, 0x0D	; 13
     2bc:	f1 f4       	brne	.+60     	; 0x2fa <rn487x_main_loop+0x5a>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = '\n';
     2be:	e0 91 88 32 	lds	r30, 0x3288	; 0x803288 <usb_rx_wptr>
     2c2:	f0 91 89 32 	lds	r31, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     2c6:	e6 57       	subi	r30, 0x76	; 118
     2c8:	fd 4c       	sbci	r31, 0xCD	; 205
     2ca:	8a e0       	ldi	r24, 0x0A	; 10
     2cc:	80 83       	st	Z, r24
		rn487x_usb_rx_buff[usb_rx_wptr+1] = '\0';
     2ce:	e0 91 88 32 	lds	r30, 0x3288	; 0x803288 <usb_rx_wptr>
     2d2:	f0 91 89 32 	lds	r31, 0x3289	; 0x803289 <usb_rx_wptr+0x1>
     2d6:	e5 57       	subi	r30, 0x75	; 117
     2d8:	fd 4c       	sbci	r31, 0xCD	; 205
     2da:	10 82       	st	Z, r1

		// send cmd
		rn487x_send_ascii_command(rn487x_usb_rx_buff);
     2dc:	8a e8       	ldi	r24, 0x8A	; 138
     2de:	92 e3       	ldi	r25, 0x32	; 50
     2e0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
		usb_rx_wptr = 0;
     2e4:	10 92 88 32 	sts	0x3288, r1	; 0x803288 <usb_rx_wptr>
     2e8:	10 92 89 32 	sts	0x3289, r1	; 0x803289 <usb_rx_wptr+0x1>
		memset(rn487x_usb_rx_buff, NULL, RN487X_USB_CDC_BUFF_SIZE);
     2ec:	80 e8       	ldi	r24, 0x80	; 128
     2ee:	ea e8       	ldi	r30, 0x8A	; 138
     2f0:	f2 e3       	ldi	r31, 0x32	; 50
     2f2:	df 01       	movw	r26, r30
     2f4:	1d 92       	st	X+, r1
     2f6:	8a 95       	dec	r24
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <rn487x_main_loop+0x54>
     2fa:	08 95       	ret

000002fc <rx487x_factory_reset>:
	return rn487x_get_err_from_response();
}

static ble_error_t rx487x_factory_reset(struct ble_server* ctx)
{	
	rn487x_send_ascii_command("SF,2\r\n");
     2fc:	83 ef       	ldi	r24, 0xF3	; 243
     2fe:	91 e6       	ldi	r25, 0x61	; 97
     300:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     304:	0e 94 c7 00 	call	0x18e	; 0x18e <rn487x_get_err_from_response>
}
     308:	08 95       	ret

0000030a <rn487x_read_value>:
};

/* GATT OPS */

ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	7c 01       	movw	r14, r24
     31c:	6b 01       	movw	r12, r22
	sprintf(rn487x_cmd_buff_a, "SHR,%04X\r\n", characteristic->handle);
     31e:	fc 01       	movw	r30, r24
     320:	83 81       	ldd	r24, Z+3	; 0x03
     322:	8f 93       	push	r24
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	8f 93       	push	r24
     328:	8a ef       	ldi	r24, 0xFA	; 250
     32a:	91 e6       	ldi	r25, 0x61	; 97
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	88 e8       	ldi	r24, 0x88	; 136
     332:	91 e3       	ldi	r25, 0x31	; 49
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     33c:	88 e8       	ldi	r24, 0x88	; 136
     33e:	91 e3       	ldi	r25, 0x31	; 49
     340:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	
	if(rn487x_get_err_from_response())
     344:	0e 94 c7 00 	call	0x18e	; 0x18e <rn487x_get_err_from_response>
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	88 23       	and	r24, r24
     356:	69 f1       	breq	.+90     	; 0x3b2 <rn487x_read_value+0xa8>
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
     358:	f7 01       	movw	r30, r14
     35a:	45 81       	ldd	r20, Z+5	; 0x05
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	44 0f       	add	r20, r20
     360:	55 1f       	adc	r21, r21
     362:	61 e1       	ldi	r22, 0x11	; 17
     364:	73 e3       	ldi	r23, 0x33	; 51
     366:	88 e8       	ldi	r24, 0x88	; 136
     368:	91 e3       	ldi	r25, 0x31	; 49
     36a:	0e 94 38 0a 	call	0x1470	; 0x1470 <strncpy>
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < characteristic->data_len; i++) 
     36e:	c0 e0       	ldi	r28, 0x00	; 0
     370:	d0 e0       	ldi	r29, 0x00	; 0
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;
     372:	08 e8       	ldi	r16, 0x88	; 136
     374:	11 e3       	ldi	r17, 0x31	; 49

		for (short i = 0; i < characteristic->data_len; i++) 
     376:	16 c0       	rjmp	.+44     	; 0x3a4 <rn487x_read_value+0x9a>
		{
			sscanf(pos, "%2hhX", &destination[i]);
     378:	c6 01       	movw	r24, r12
     37a:	8c 0f       	add	r24, r28
     37c:	9d 1f       	adc	r25, r29
     37e:	9f 93       	push	r25
     380:	8f 93       	push	r24
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	92 e6       	ldi	r25, 0x62	; 98
     386:	9f 93       	push	r25
     388:	8f 93       	push	r24
     38a:	1f 93       	push	r17
     38c:	0f 93       	push	r16
     38e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <sscanf>
			pos = pos + 2;
     392:	0e 5f       	subi	r16, 0xFE	; 254
     394:	1f 4f       	sbci	r17, 0xFF	; 255
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < characteristic->data_len; i++) 
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	f7 01       	movw	r30, r14
     3a6:	85 81       	ldd	r24, Z+5	; 0x05
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	c8 17       	cp	r28, r24
     3ac:	d9 07       	cpc	r29, r25
     3ae:	24 f3       	brlt	.-56     	; 0x378 <rn487x_read_value+0x6e>
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <rn487x_read_value+0xac>
		}

	}
	else
	{
		return BLE_FAIL;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <rn487x_read_value+0xac>
	}

}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <rn487x_write_value>:

ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	7c 01       	movw	r14, r24
     3da:	6b 01       	movw	r12, r22
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     3dc:	c0 e0       	ldi	r28, 0x00	; 0
     3de:	d0 e0       	ldi	r29, 0x00	; 0

}

ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     3e0:	08 e8       	ldi	r16, 0x88	; 136
     3e2:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     3e4:	17 c0       	rjmp	.+46     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     3e6:	f6 01       	movw	r30, r12
     3e8:	ec 0f       	add	r30, r28
     3ea:	fd 1f       	adc	r31, r29
     3ec:	80 81       	ld	r24, Z
     3ee:	1f 92       	push	r1
     3f0:	8f 93       	push	r24
     3f2:	8b e0       	ldi	r24, 0x0B	; 11
     3f4:	92 e6       	ldi	r25, 0x62	; 98
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	1f 93       	push	r17
     3fc:	0f 93       	push	r16
     3fe:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
     402:	08 0f       	add	r16, r24
     404:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < characteristic->data_len; i++) 
     406:	21 96       	adiw	r28, 0x01	; 1
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	f7 01       	movw	r30, r14
     416:	85 81       	ldd	r24, Z+5	; 0x05
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	c8 17       	cp	r28, r24
     41c:	d9 07       	cpc	r29, r25
     41e:	1c f3       	brlt	.-58     	; 0x3e6 <rn487x_write_value+0x1e>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "SHW,%04X,%s\r\n", characteristic->handle, rn487x_cmd_buff_b);
     420:	88 e8       	ldi	r24, 0x88	; 136
     422:	90 e3       	ldi	r25, 0x30	; 48
     424:	9f 93       	push	r25
     426:	8f 93       	push	r24
     428:	83 81       	ldd	r24, Z+3	; 0x03
     42a:	8f 93       	push	r24
     42c:	82 81       	ldd	r24, Z+2	; 0x02
     42e:	8f 93       	push	r24
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	92 e6       	ldi	r25, 0x62	; 98
     434:	9f 93       	push	r25
     436:	8f 93       	push	r24
     438:	88 e8       	ldi	r24, 0x88	; 136
     43a:	91 e3       	ldi	r25, 0x31	; 49
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     444:	88 e8       	ldi	r24, 0x88	; 136
     446:	91 e3       	ldi	r25, 0x31	; 49
     448:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     44c:	8d b7       	in	r24, 0x3d	; 61
     44e:	9e b7       	in	r25, 0x3e	; 62
     450:	08 96       	adiw	r24, 0x08	; 8
     452:	8d bf       	out	0x3d, r24	; 61
     454:	9e bf       	out	0x3e, r25	; 62
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	df 90       	pop	r13
     464:	cf 90       	pop	r12
     466:	08 95       	ret

00000468 <rn487x_start_advertising>:

/* GAP OPS */

ble_error_t rn487x_start_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("A\r\n");
     468:	8e e1       	ldi	r24, 0x1E	; 30
     46a:	92 e6       	ldi	r25, 0x62	; 98
     46c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     470:	08 95       	ret

00000472 <rn487x_stop_advertising>:

ble_error_t rn487x_stop_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("Y\r\n");
     472:	82 e2       	ldi	r24, 0x22	; 34
     474:	92 e6       	ldi	r25, 0x62	; 98
     476:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     47a:	08 95       	ret

0000047c <rn487x_kill_connection>:

ble_error_t rn487x_kill_connection(struct ble_server* ctx)
{
	rn487x_send_ascii_command("K,1\r\n");
     47c:	86 e2       	ldi	r24, 0x26	; 38
     47e:	92 e6       	ldi	r25, 0x62	; 98
     480:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     484:	08 95       	ret

00000486 <rn487x_register_service>:
	return BLE_NOERR;
}

ble_error_t rn487x_register_service(struct gatt_service* service)
{
	sprintf(rn487x_cmd_buff_a, "PS,%s\r\n", service->UUID);
     486:	fc 01       	movw	r30, r24
     488:	21 81       	ldd	r18, Z+1	; 0x01
     48a:	2f 93       	push	r18
     48c:	80 81       	ld	r24, Z
     48e:	8f 93       	push	r24
     490:	8c e2       	ldi	r24, 0x2C	; 44
     492:	92 e6       	ldi	r25, 0x62	; 98
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	88 e8       	ldi	r24, 0x88	; 136
     49a:	91 e3       	ldi	r25, 0x31	; 49
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     4a4:	88 e8       	ldi	r24, 0x88	; 136
     4a6:	91 e3       	ldi	r25, 0x31	; 49
     4a8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     4ac:	0e 94 c7 00 	call	0x18e	; 0x18e <rn487x_get_err_from_response>
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
}
     4bc:	08 95       	ret

000004be <rn487x_register_characteristic>:

ble_error_t rn487x_register_characteristic(struct gatt_characteristic* characteristic)
{
     4be:	fc 01       	movw	r30, r24
	sprintf(rn487x_cmd_buff_a, "PC,%s,%02X,%02X\r\n", characteristic->UUID, characteristic->properties, characteristic->data_len);
     4c0:	95 81       	ldd	r25, Z+5	; 0x05
     4c2:	84 81       	ldd	r24, Z+4	; 0x04
     4c4:	1f 92       	push	r1
     4c6:	9f 93       	push	r25
     4c8:	1f 92       	push	r1
     4ca:	8f 93       	push	r24
     4cc:	81 81       	ldd	r24, Z+1	; 0x01
     4ce:	8f 93       	push	r24
     4d0:	80 81       	ld	r24, Z
     4d2:	8f 93       	push	r24
     4d4:	84 e3       	ldi	r24, 0x34	; 52
     4d6:	92 e6       	ldi	r25, 0x62	; 98
     4d8:	9f 93       	push	r25
     4da:	8f 93       	push	r24
     4dc:	88 e8       	ldi	r24, 0x88	; 136
     4de:	91 e3       	ldi	r25, 0x31	; 49
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     4e8:	88 e8       	ldi	r24, 0x88	; 136
     4ea:	91 e3       	ldi	r25, 0x31	; 49
     4ec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     4f0:	0e 94 c7 00 	call	0x18e	; 0x18e <rn487x_get_err_from_response>
     4f4:	2d b7       	in	r18, 0x3d	; 61
     4f6:	3e b7       	in	r19, 0x3e	; 62
     4f8:	26 5f       	subi	r18, 0xF6	; 246
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	2d bf       	out	0x3d, r18	; 61
     4fe:	3e bf       	out	0x3e, r19	; 62
}
     500:	08 95       	ret

00000502 <rn487x_gatt_init>:
};

/* Helper GATT Functions */

ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
     502:	2f 92       	push	r2
     504:	3f 92       	push	r3
     506:	4f 92       	push	r4
     508:	5f 92       	push	r5
     50a:	6f 92       	push	r6
     50c:	7f 92       	push	r7
     50e:	8f 92       	push	r8
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	e2 97       	sbiw	r28, 0x32	; 50
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	de bf       	out	0x3e, r29	; 62
     530:	2c 01       	movw	r4, r24
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;
     532:	dc 01       	movw	r26, r24
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	22 88       	ldd	r2, Z+18	; 0x12
     53a:	33 88       	ldd	r3, Z+19	; 0x13

	for(short i = 0; i < ctx->config->services_count; i++)
     53c:	61 2c       	mov	r6, r1
     53e:	71 2c       	mov	r7, r1
     540:	6a c0       	rjmp	.+212    	; 0x616 <rn487x_gatt_init+0x114>
	{
		struct gatt_service* service = (*services)[i];
     542:	f3 01       	movw	r30, r6
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e2 0d       	add	r30, r2
     54a:	f3 1d       	adc	r31, r3
     54c:	c0 80       	ld	r12, Z
     54e:	d1 80       	ldd	r13, Z+1	; 0x01
		
		rn487x_register_service(service);
     550:	c6 01       	movw	r24, r12
     552:	0e 94 43 02 	call	0x486	; 0x486 <rn487x_register_service>

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;
     556:	f6 01       	movw	r30, r12
     558:	86 80       	ldd	r8, Z+6	; 0x06
     55a:	97 80       	ldd	r9, Z+7	; 0x07

		for(short j = 0; j < service->characteristics_count; j++)
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	4d c0       	rjmp	.+154    	; 0x5fc <rn487x_gatt_init+0xfa>
		{
			struct gatt_characteristic* characteristic = (*characteristics)[j];
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	f4 01       	movw	r30, r8
     568:	e8 0f       	add	r30, r24
     56a:	f9 1f       	adc	r31, r25
     56c:	00 81       	ld	r16, Z
     56e:	11 81       	ldd	r17, Z+1	; 0x01

			if(rn487x_register_characteristic(characteristic))
     570:	c8 01       	movw	r24, r16
     572:	0e 94 5f 02 	call	0x4be	; 0x4be <rn487x_register_characteristic>
     576:	88 23       	and	r24, r24
     578:	09 f4       	brne	.+2      	; 0x57c <rn487x_gatt_init+0x7a>
     57a:	65 c0       	rjmp	.+202    	; 0x646 <rn487x_gatt_init+0x144>
			{
				uint8_t buff[50];
				uint8_t* res;

				// list all characteristics in the service
				sprintf(buff, "LS,%s\r\n", service->UUID);
     57c:	d6 01       	movw	r26, r12
     57e:	11 96       	adiw	r26, 0x01	; 1
     580:	8c 91       	ld	r24, X
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	8f 93       	push	r24
     586:	8c 91       	ld	r24, X
     588:	8f 93       	push	r24
     58a:	86 e4       	ldi	r24, 0x46	; 70
     58c:	92 e6       	ldi	r25, 0x62	; 98
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	fe 01       	movw	r30, r28
     594:	31 96       	adiw	r30, 0x01	; 1
     596:	7f 01       	movw	r14, r30
     598:	ff 93       	push	r31
     59a:	ef 93       	push	r30
     59c:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
				rn487x_send_ascii_command(buff);
     5a0:	c7 01       	movw	r24, r14
     5a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

				// find this characteristic from the LS
				// XXXX...X,0000,00
				res = strstr(rn487x_rx_buff, characteristic->UUID);
     5a6:	d8 01       	movw	r26, r16
     5a8:	ed 90       	ld	r14, X+
     5aa:	fc 90       	ld	r15, X
     5ac:	b7 01       	movw	r22, r14
     5ae:	8c e0       	ldi	r24, 0x0C	; 12
     5b0:	93 e3       	ldi	r25, 0x33	; 51
     5b2:	0e 94 47 0a 	call	0x148e	; 0x148e <strstr>
				res =  res +  strlen(characteristic->UUID) + 1;
     5b6:	f7 01       	movw	r30, r14
     5b8:	01 90       	ld	r0, Z+
     5ba:	00 20       	and	r0, r0
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <rn487x_gatt_init+0xb6>
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	ee 19       	sub	r30, r14
     5c2:	ff 09       	sbc	r31, r15
     5c4:	31 96       	adiw	r30, 0x01	; 1
				
				//uint8_t* endptr;
				characteristic->handle = strtol(res, NULL, 16);
     5c6:	40 e1       	ldi	r20, 0x10	; 16
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	8e 0f       	add	r24, r30
     5d0:	9f 1f       	adc	r25, r31
     5d2:	0e 94 19 09 	call	0x1232	; 0x1232 <strtol>
     5d6:	f8 01       	movw	r30, r16
     5d8:	62 83       	std	Z+2, r22	; 0x02
     5da:	73 83       	std	Z+3, r23	; 0x03

				#ifdef PRINT_DEBUG_MSG
				printf("Registered characteristic %s, with handle %04X\r\n", characteristic->UUID, characteristic->handle);
     5dc:	7f 93       	push	r23
     5de:	6f 93       	push	r22
     5e0:	81 81       	ldd	r24, Z+1	; 0x01
     5e2:	8f 93       	push	r24
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 93       	push	r24
     5e8:	8e e4       	ldi	r24, 0x4E	; 78
     5ea:	92 e6       	ldi	r25, 0x62	; 98
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <printf>
		
		rn487x_register_service(service);

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;

		for(short j = 0; j < service->characteristics_count; j++)
     5f4:	c5 01       	movw	r24, r10
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	d6 01       	movw	r26, r12
     5fe:	14 96       	adiw	r26, 0x04	; 4
     600:	2d 91       	ld	r18, X+
     602:	3c 91       	ld	r19, X
     604:	15 97       	sbiw	r26, 0x05	; 5
     606:	5c 01       	movw	r10, r24
     608:	82 17       	cp	r24, r18
     60a:	93 07       	cpc	r25, r19
     60c:	08 f4       	brcc	.+2      	; 0x610 <rn487x_gatt_init+0x10e>
     60e:	a9 cf       	rjmp	.-174    	; 0x562 <rn487x_gatt_init+0x60>
ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;

	for(short i = 0; i < ctx->config->services_count; i++)
     610:	bf ef       	ldi	r27, 0xFF	; 255
     612:	6b 1a       	sub	r6, r27
     614:	7b 0a       	sbc	r7, r27
     616:	d2 01       	movw	r26, r4
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	81 89       	ldd	r24, Z+17	; 0x11
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	68 16       	cp	r6, r24
     624:	79 06       	cpc	r7, r25
     626:	0c f4       	brge	.+2      	; 0x62a <rn487x_gatt_init+0x128>
     628:	8c cf       	rjmp	.-232    	; 0x542 <rn487x_gatt_init+0x40>
				return BLE_FAIL;
			}
		}
	}

	ctx->sys->reboot(ctx);
     62a:	12 96       	adiw	r26, 0x02	; 2
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	13 97       	sbiw	r26, 0x03	; 3
     632:	02 80       	ldd	r0, Z+2	; 0x02
     634:	f3 81       	ldd	r31, Z+3	; 0x03
     636:	e0 2d       	mov	r30, r0
     638:	c2 01       	movw	r24, r4
     63a:	09 95       	icall
	rn487x_send_ascii_command("LS\r\n");
     63c:	8f e7       	ldi	r24, 0x7F	; 127
     63e:	92 e6       	ldi	r25, 0x62	; 98
     640:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return BLE_NOERR;
     644:	81 e0       	ldi	r24, 0x01	; 1
}
     646:	e2 96       	adiw	r28, 0x32	; 50
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	7f 90       	pop	r7
     666:	6f 90       	pop	r6
     668:	5f 90       	pop	r5
     66a:	4f 90       	pop	r4
     66c:	3f 90       	pop	r3
     66e:	2f 90       	pop	r2
     670:	08 95       	ret

00000672 <rn487x_set_address>:
}

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	7b 01       	movw	r14, r22
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     680:	c0 e0       	ldi	r28, 0x00	; 0
     682:	d0 e0       	ldi	r29, 0x00	; 0

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     684:	08 e8       	ldi	r16, 0x88	; 136
     686:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     688:	17 c0       	rjmp	.+46     	; 0x6b8 <rn487x_set_address+0x46>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     68a:	f7 01       	movw	r30, r14
     68c:	ec 0f       	add	r30, r28
     68e:	fd 1f       	adc	r31, r29
     690:	80 81       	ld	r24, Z
     692:	1f 92       	push	r1
     694:	8f 93       	push	r24
     696:	8b e0       	ldi	r24, 0x0B	; 11
     698:	92 e6       	ldi	r25, 0x62	; 98
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	1f 93       	push	r17
     6a0:	0f 93       	push	r16
     6a2:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
     6a6:	08 0f       	add	r16, r24
     6a8:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     6aa:	21 96       	adiw	r28, 0x01	; 1
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	c6 30       	cpi	r28, 0x06	; 6
     6ba:	d1 05       	cpc	r29, r1
     6bc:	34 f3       	brlt	.-52     	; 0x68a <rn487x_set_address+0x18>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "&,%s\r\n", rn487x_cmd_buff_b);
     6be:	88 e8       	ldi	r24, 0x88	; 136
     6c0:	90 e3       	ldi	r25, 0x30	; 48
     6c2:	9f 93       	push	r25
     6c4:	8f 93       	push	r24
     6c6:	84 e8       	ldi	r24, 0x84	; 132
     6c8:	92 e6       	ldi	r25, 0x62	; 98
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	88 e8       	ldi	r24, 0x88	; 136
     6d0:	91 e3       	ldi	r25, 0x31	; 49
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     6da:	88 e8       	ldi	r24, 0x88	; 136
     6dc:	91 e3       	ldi	r25, 0x31	; 49
     6de:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <rn487x_set_device_name>:

ble_error_t rn487x_set_device_name(struct ble_server* ctx, const uint8_t* name)
{
	sprintf(rn487x_cmd_buff_a, "S-,%s\r\n", name);
     6fc:	7f 93       	push	r23
     6fe:	6f 93       	push	r22
     700:	8b e8       	ldi	r24, 0x8B	; 139
     702:	92 e6       	ldi	r25, 0x62	; 98
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	88 e8       	ldi	r24, 0x88	; 136
     70a:	91 e3       	ldi	r25, 0x31	; 49
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     714:	88 e8       	ldi	r24, 0x88	; 136
     716:	91 e3       	ldi	r25, 0x31	; 49
     718:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	08 95       	ret

0000072a <rn487x_set_appearance>:

ble_error_t rn487x_set_appearance(struct ble_server* ctx, const ble_gap_appearance_t appearance)
{
	sprintf(rn487x_cmd_buff_a, "SDA,%04X\r\n", appearance);
     72a:	7f 93       	push	r23
     72c:	6f 93       	push	r22
     72e:	83 e9       	ldi	r24, 0x93	; 147
     730:	92 e6       	ldi	r25, 0x62	; 98
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	88 e8       	ldi	r24, 0x88	; 136
     738:	91 e3       	ldi	r25, 0x31	; 49
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     742:	88 e8       	ldi	r24, 0x88	; 136
     744:	91 e3       	ldi	r25, 0x31	; 49
     746:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	08 95       	ret

00000758 <rn487x_set_connection_params>:
ble_error_t rn487x_set_connection_params(struct ble_server* ctx,
											const uint16_t min_interval,
											const uint16_t max_interval,
											const uint16_t latency,
											const uint16_t timeout)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
	// ST,<hex16>,<hex16>,<hex16>,<hex16>
	sprintf(rn487x_cmd_buff_a, "ST,%04X,%04X,%04X,%04X\r\n",
     75c:	1f 93       	push	r17
     75e:	0f 93       	push	r16
     760:	3f 93       	push	r19
     762:	2f 93       	push	r18
     764:	5f 93       	push	r21
     766:	4f 93       	push	r20
     768:	7f 93       	push	r23
     76a:	6f 93       	push	r22
     76c:	8e e9       	ldi	r24, 0x9E	; 158
     76e:	92 e6       	ldi	r25, 0x62	; 98
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	88 e8       	ldi	r24, 0x88	; 136
     776:	91 e3       	ldi	r25, 0x31	; 49
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	min_interval, max_interval, latency, timeout);

	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     780:	88 e8       	ldi	r24, 0x88	; 136
     782:	91 e3       	ldi	r25, 0x31	; 49
     784:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

}
     788:	8d b7       	in	r24, 0x3d	; 61
     78a:	9e b7       	in	r25, 0x3e	; 62
     78c:	0c 96       	adiw	r24, 0x0c	; 12
     78e:	8d bf       	out	0x3d, r24	; 61
     790:	9e bf       	out	0x3e, r25	; 62
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <rn487x_set_security>:

ble_error_t rn487x_set_security(struct ble_server* ctx,
										const ble_io_capabilities_t io_capabilities,
										const uint8_t* passkey)
{
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	14 2f       	mov	r17, r20
     7a2:	05 2f       	mov	r16, r21
	sprintf(rn487x_cmd_buff_a, "SA,%d\r\n", io_capabilities);
     7a4:	1f 92       	push	r1
     7a6:	6f 93       	push	r22
     7a8:	87 eb       	ldi	r24, 0xB7	; 183
     7aa:	92 e6       	ldi	r25, 0x62	; 98
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	c8 e8       	ldi	r28, 0x88	; 136
     7b2:	d1 e3       	ldi	r29, 0x31	; 49
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

	sprintf(rn487x_cmd_buff_a, "SP,%s\r\n", passkey);
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	8f eb       	ldi	r24, 0xBF	; 191
     7c8:	92 e6       	ldi	r25, 0x62	; 98
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	0e 94 ae 0a 	call	0x155c	; 0x155c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     7dc:	8d b7       	in	r24, 0x3d	; 61
     7de:	9e b7       	in	r25, 0x3e	; 62
     7e0:	0c 96       	adiw	r24, 0x0c	; 12
     7e2:	8d bf       	out	0x3d, r24	; 61
     7e4:	9e bf       	out	0x3e, r25	; 62
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <rn487x_gap_init>:

ble_error_t rn487x_gap_init(struct ble_server* ctx)
{
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
	if(ctx->config->address != NULL)
     7fa:	e8 81       	ld	r30, Y
     7fc:	f9 81       	ldd	r31, Y+1	; 0x01
     7fe:	60 81       	ld	r22, Z
     800:	71 81       	ldd	r23, Z+1	; 0x01
     802:	61 15       	cp	r22, r1
     804:	71 05       	cpc	r23, r1
     806:	11 f0       	breq	.+4      	; 0x80c <rn487x_gap_init+0x1c>
	rn487x_set_address(ctx, ctx->config->address);
     808:	0e 94 39 03 	call	0x672	; 0x672 <rn487x_set_address>

	if(ctx->config->device_name != NULL)
     80c:	e8 81       	ld	r30, Y
     80e:	f9 81       	ldd	r31, Y+1	; 0x01
     810:	62 81       	ldd	r22, Z+2	; 0x02
     812:	73 81       	ldd	r23, Z+3	; 0x03
     814:	61 15       	cp	r22, r1
     816:	71 05       	cpc	r23, r1
     818:	19 f0       	breq	.+6      	; 0x820 <rn487x_gap_init+0x30>
	rn487x_set_device_name(ctx, ctx->config->device_name);
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <rn487x_set_device_name>

	rn487x_set_security(ctx, ctx->config->io_capabilities, ctx->config->passkey);
     820:	e8 81       	ld	r30, Y
     822:	f9 81       	ldd	r31, Y+1	; 0x01
     824:	45 81       	ldd	r20, Z+5	; 0x05
     826:	56 81       	ldd	r21, Z+6	; 0x06
     828:	64 81       	ldd	r22, Z+4	; 0x04
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 cc 03 	call	0x798	; 0x798 <rn487x_set_security>
	rn487x_set_appearance(ctx, ctx->config->advertisement_appearance);
     830:	e8 81       	ld	r30, Y
     832:	f9 81       	ldd	r31, Y+1	; 0x01
     834:	67 81       	ldd	r22, Z+7	; 0x07
     836:	70 85       	ldd	r23, Z+8	; 0x08
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 95 03 	call	0x72a	; 0x72a <rn487x_set_appearance>
	rn487x_set_connection_params(ctx, ctx->config->connection_min_interval, ctx->config->connection_max_interval, ctx->config->connection_latency, ctx->config->connection_timeout);
     83e:	e8 81       	ld	r30, Y
     840:	f9 81       	ldd	r31, Y+1	; 0x01
     842:	07 85       	ldd	r16, Z+15	; 0x0f
     844:	10 89       	ldd	r17, Z+16	; 0x10
     846:	25 85       	ldd	r18, Z+13	; 0x0d
     848:	36 85       	ldd	r19, Z+14	; 0x0e
     84a:	43 85       	ldd	r20, Z+11	; 0x0b
     84c:	54 85       	ldd	r21, Z+12	; 0x0c
     84e:	61 85       	ldd	r22, Z+9	; 0x09
     850:	72 85       	ldd	r23, Z+10	; 0x0a
     852:	ce 01       	movw	r24, r28
     854:	0e 94 ac 03 	call	0x758	; 0x758 <rn487x_set_connection_params>
	
	ctx->sys->reboot(ctx);
     858:	ea 81       	ldd	r30, Y+2	; 0x02
     85a:	fb 81       	ldd	r31, Y+3	; 0x03
     85c:	02 80       	ldd	r0, Z+2	; 0x02
     85e:	f3 81       	ldd	r31, Z+3	; 0x03
     860:	e0 2d       	mov	r30, r0
     862:	ce 01       	movw	r24, r28
     864:	09 95       	icall
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <rn487x_init>:
		//	
	}
}

static void rn487x_init(struct ble_server* ctx)
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24

	#ifdef PRINT_DEBUG_MSG
	printf("\r\nInitializing rn487x\r\n");
     876:	87 ec       	ldi	r24, 0xC7	; 199
     878:	92 e6       	ldi	r25, 0x62	; 98
     87a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <puts>
	#endif

	rx487x_set_ISR_cb(rn487x_cb_isr, RX_CB);
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	8f ea       	ldi	r24, 0xAF	; 175
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 be 07 	call	0xf7c	; 0xf7c <rx487x_set_ISR_cb>
	usb_cdc_set_ISR_cb(rn487x_usb_cdc_isr, RX_CB);
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	84 e8       	ldi	r24, 0x84	; 132
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <usb_cdc_set_ISR_cb>

	ctx->sys->reboot(ctx);
     892:	ea 81       	ldd	r30, Y+2	; 0x02
     894:	fb 81       	ldd	r31, Y+3	; 0x03
     896:	02 80       	ldd	r0, Z+2	; 0x02
     898:	f3 81       	ldd	r31, Z+3	; 0x03
     89a:	e0 2d       	mov	r30, r0
     89c:	ce 01       	movw	r24, r28
     89e:	09 95       	icall
	ctx->sys->factory_reset(ctx);
     8a0:	ea 81       	ldd	r30, Y+2	; 0x02
     8a2:	fb 81       	ldd	r31, Y+3	; 0x03
     8a4:	04 80       	ldd	r0, Z+4	; 0x04
     8a6:	f5 81       	ldd	r31, Z+5	; 0x05
     8a8:	e0 2d       	mov	r30, r0
     8aa:	ce 01       	movw	r24, r28
     8ac:	09 95       	icall

	rn487x_gap_init(ctx);
     8ae:	ce 01       	movw	r24, r28
     8b0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <rn487x_gap_init>
	rn487x_gatt_init(ctx);
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 81 02 	call	0x502	; 0x502 <rn487x_gatt_init>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <main>:
volatile size_t ble_wptr;
volatile size_t ble_rptr;


int main(void)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	2a 97       	sbiw	r28, 0x0a	; 10
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	de bf       	out	0x3e, r29	; 62
	ENABLE_INTERRUPTS();
     8ce:	78 94       	sei
	
	
	atmel_start_init();
     8d0:	0e 94 6d 00 	call	0xda	; 0xda <atmel_start_init>


	temp_read_characteristic.data_len = 10;
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <temp_read_characteristic+0x5>
	rn487x.init(&rn487x);
     8da:	0a e2       	ldi	r16, 0x2A	; 42
     8dc:	10 e3       	ldi	r17, 0x30	; 48
     8de:	d8 01       	movw	r26, r16
     8e0:	1a 96       	adiw	r26, 0x0a	; 10
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	1b 97       	sbiw	r26, 0x0b	; 11
     8e8:	c8 01       	movw	r24, r16
     8ea:	09 95       	icall
	volatile uint8_t data[] = {0x23, 0x33, 0x44, 0x55, 0xAA, 0xFF, 0xDD, 0xAA, 0x33, 0xAA };	
     8ec:	8a e0       	ldi	r24, 0x0A	; 10
     8ee:	e2 ee       	ldi	r30, 0xE2	; 226
     8f0:	f1 e6       	ldi	r31, 0x61	; 97
     8f2:	de 01       	movw	r26, r28
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	01 90       	ld	r0, Z+
     8f8:	0d 92       	st	X+, r0
     8fa:	8a 95       	dec	r24
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x36>
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     8fe:	d8 01       	movw	r26, r16
     900:	14 96       	adiw	r26, 0x04	; 4
     902:	ed 91       	ld	r30, X+
     904:	fc 91       	ld	r31, X
     906:	15 97       	sbiw	r26, 0x05	; 5
     908:	02 80       	ldd	r0, Z+2	; 0x02
     90a:	f3 81       	ldd	r31, Z+3	; 0x03
     90c:	e0 2d       	mov	r30, r0
     90e:	be 01       	movw	r22, r28
     910:	6f 5f       	subi	r22, 0xFF	; 255
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	84 e2       	ldi	r24, 0x24	; 36
     916:	90 e3       	ldi	r25, 0x30	; 48
     918:	09 95       	icall
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     91a:	d8 01       	movw	r26, r16
     91c:	14 96       	adiw	r26, 0x04	; 4
     91e:	ed 91       	ld	r30, X+
     920:	fc 91       	ld	r31, X
     922:	15 97       	sbiw	r26, 0x05	; 5
     924:	02 80       	ldd	r0, Z+2	; 0x02
     926:	f3 81       	ldd	r31, Z+3	; 0x03
     928:	e0 2d       	mov	r30, r0
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	84 e2       	ldi	r24, 0x24	; 36
     932:	90 e3       	ldi	r25, 0x30	; 48
     934:	09 95       	icall
	rn487x.gatt->read_value(&temp_read_characteristic, data);
     936:	d8 01       	movw	r26, r16
     938:	14 96       	adiw	r26, 0x04	; 4
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	15 97       	sbiw	r26, 0x05	; 5
     940:	01 90       	ld	r0, Z+
     942:	f0 81       	ld	r31, Z
     944:	e0 2d       	mov	r30, r0
     946:	be 01       	movw	r22, r28
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	84 e2       	ldi	r24, 0x24	; 36
     94e:	90 e3       	ldi	r25, 0x30	; 48
     950:	09 95       	icall
	

	while(1) {
		rn487x.main_loop(&rn487x);
     952:	e0 91 38 30 	lds	r30, 0x3038	; 0x803038 <rn487x+0xe>
     956:	f0 91 39 30 	lds	r31, 0x3039	; 0x803039 <rn487x+0xf>
     95a:	8a e2       	ldi	r24, 0x2A	; 42
     95c:	90 e3       	ldi	r25, 0x30	; 48
     95e:	09 95       	icall
     960:	f8 cf       	rjmp	.-16     	; 0x952 <main+0x92>

00000962 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	08 95       	ret

00000966 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	08 95       	ret

0000096e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 c0       	rjmp	.+16     	; 0x982 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     972:	e8 2f       	mov	r30, r24
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	e0 5f       	subi	r30, 0xF0	; 240
     978:	fb 4f       	sbci	r31, 0xFB	; 251
     97a:	90 81       	ld	r25, Z
     97c:	98 60       	ori	r25, 0x08	; 8
     97e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	88 30       	cpi	r24, 0x08	; 8
     984:	b0 f3       	brcs	.-20     	; 0x972 <mcu_init+0x4>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 c0       	rjmp	.+16     	; 0x99a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     98a:	e8 2f       	mov	r30, r24
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e0 5d       	subi	r30, 0xD0	; 208
     990:	fb 4f       	sbci	r31, 0xFB	; 251
     992:	90 81       	ld	r25, Z
     994:	98 60       	ori	r25, 0x08	; 8
     996:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     998:	8f 5f       	subi	r24, 0xFF	; 255
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	b0 f3       	brcs	.-20     	; 0x98a <mcu_init+0x1c>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9a2:	e8 2f       	mov	r30, r24
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	e0 5b       	subi	r30, 0xB0	; 176
     9a8:	fb 4f       	sbci	r31, 0xFB	; 251
     9aa:	90 81       	ld	r25, Z
     9ac:	98 60       	ori	r25, 0x08	; 8
     9ae:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	88 30       	cpi	r24, 0x08	; 8
     9b4:	b0 f3       	brcs	.-20     	; 0x9a2 <mcu_init+0x34>
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9ba:	e8 2f       	mov	r30, r24
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e0 59       	subi	r30, 0x90	; 144
     9c0:	fb 4f       	sbci	r31, 0xFB	; 251
     9c2:	90 81       	ld	r25, Z
     9c4:	98 60       	ori	r25, 0x08	; 8
     9c6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	88 30       	cpi	r24, 0x08	; 8
     9cc:	b0 f3       	brcs	.-20     	; 0x9ba <mcu_init+0x4c>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9d2:	e8 2f       	mov	r30, r24
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e0 57       	subi	r30, 0x70	; 112
     9d8:	fb 4f       	sbci	r31, 0xFB	; 251
     9da:	90 81       	ld	r25, Z
     9dc:	98 60       	ori	r25, 0x08	; 8
     9de:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	88 30       	cpi	r24, 0x08	; 8
     9e4:	b0 f3       	brcs	.-20     	; 0x9d2 <mcu_init+0x64>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     9ea:	e8 2f       	mov	r30, r24
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	e0 55       	subi	r30, 0x50	; 80
     9f0:	fb 4f       	sbci	r31, 0xFB	; 251
     9f2:	90 81       	ld	r25, Z
     9f4:	98 60       	ori	r25, 0x08	; 8
     9f6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     9f8:	8f 5f       	subi	r24, 0xFF	; 255
     9fa:	88 30       	cpi	r24, 0x08	; 8
     9fc:	b0 f3       	brcs	.-20     	; 0x9ea <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     9fe:	08 95       	ret

00000a00 <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     a00:	80 b1       	in	r24, 0x00	; 0
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a06:	e1 e1       	ldi	r30, 0x11	; 17
     a08:	f4 e0       	ldi	r31, 0x04	; 4
     a0a:	80 81       	ld	r24, Z
     a0c:	87 7f       	andi	r24, 0xF7	; 247
     a0e:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     a10:	81 b1       	in	r24, 0x01	; 1
     a12:	8e 7f       	andi	r24, 0xFE	; 254
     a14:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     a16:	80 b1       	in	r24, 0x00	; 0
     a18:	81 60       	ori	r24, 0x01	; 1
     a1a:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
     a1c:	0e 94 3f 08 	call	0x107e	; 0x107e <rx487x_init>
     a20:	08 95       	ret

00000a22 <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     a22:	84 b3       	in	r24, 0x14	; 20
     a24:	8d 7f       	andi	r24, 0xFD	; 253
     a26:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a28:	e1 eb       	ldi	r30, 0xB1	; 177
     a2a:	f4 e0       	ldi	r31, 0x04	; 4
     a2c:	80 81       	ld	r24, Z
     a2e:	87 7f       	andi	r24, 0xF7	; 247
     a30:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     a32:	85 b3       	in	r24, 0x15	; 21
     a34:	8e 7f       	andi	r24, 0xFE	; 254
     a36:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     a38:	84 b3       	in	r24, 0x14	; 20
     a3a:	81 60       	ori	r24, 0x01	; 1
     a3c:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
     a3e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <usb_cdc_init>
     a42:	08 95       	ret

00000a44 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
     a44:	0e 94 56 07 	call	0xeac	; 0xeac <system_timer_init>
     a48:	08 95       	ret

00000a4a <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     a4a:	81 b1       	in	r24, 0x01	; 1
     a4c:	87 7f       	andi	r24, 0xF7	; 247
     a4e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     a50:	80 b1       	in	r24, 0x00	; 0
     a52:	88 60       	ori	r24, 0x08	; 8
     a54:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a56:	e3 e1       	ldi	r30, 0x13	; 19
     a58:	f4 e0       	ldi	r31, 0x04	; 4
     a5a:	80 81       	ld	r24, Z
     a5c:	87 7f       	andi	r24, 0xF7	; 247
     a5e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     a60:	80 81       	ld	r24, Z
     a62:	8f 77       	andi	r24, 0x7F	; 127
     a64:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a66:	80 81       	ld	r24, Z
     a68:	88 7f       	andi	r24, 0xF8	; 248
     a6a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     a6c:	81 b1       	in	r24, 0x01	; 1
     a6e:	8b 7f       	andi	r24, 0xFB	; 251
     a70:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     a72:	80 b1       	in	r24, 0x00	; 0
     a74:	84 60       	ori	r24, 0x04	; 4
     a76:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a78:	e2 e1       	ldi	r30, 0x12	; 18
     a7a:	f4 e0       	ldi	r31, 0x04	; 4
     a7c:	80 81       	ld	r24, Z
     a7e:	87 7f       	andi	r24, 0xF7	; 247
     a80:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     a82:	80 81       	ld	r24, Z
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a88:	80 81       	ld	r24, Z
     a8a:	88 7f       	andi	r24, 0xF8	; 248
     a8c:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
     a8e:	0e 94 29 07 	call	0xe52	; 0xe52 <i2c_init>
     a92:	08 95       	ret

00000a94 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     a94:	0e 94 b7 04 	call	0x96e	; 0x96e <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     a98:	8d b1       	in	r24, 0x0d	; 13
     a9a:	88 60       	ori	r24, 0x08	; 8
     a9c:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     a9e:	8c b1       	in	r24, 0x0c	; 12
     aa0:	88 60       	ori	r24, 0x08	; 8
     aa2:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     aa4:	85 b3       	in	r24, 0x15	; 21
     aa6:	8f 7e       	andi	r24, 0xEF	; 239
     aa8:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     aaa:	84 b3       	in	r24, 0x14	; 20
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ab0:	e4 eb       	ldi	r30, 0xB4	; 180
     ab2:	f4 e0       	ldi	r31, 0x04	; 4
     ab4:	80 81       	ld	r24, Z
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     aba:	80 81       	ld	r24, Z
     abc:	8f 77       	andi	r24, 0x7F	; 127
     abe:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     ac0:	80 81       	ld	r24, Z
     ac2:	88 7f       	andi	r24, 0xF8	; 248
     ac4:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
     ac6:	0e 94 b3 04 	call	0x966	; 0x966 <CLKCTRL_init>

	rx487x_initialization();
     aca:	0e 94 00 05 	call	0xa00	; 0xa00 <rx487x_initialization>

	usb_cdc_initialization();
     ace:	0e 94 11 05 	call	0xa22	; 0xa22 <usb_cdc_initialization>

	system_timer_initialization();
     ad2:	0e 94 22 05 	call	0xa44	; 0xa44 <system_timer_initialization>

	CPUINT_init();
     ad6:	0e 94 b5 04 	call	0x96a	; 0x96a <CPUINT_init>

	SLPCTRL_init();
     ada:	0e 94 54 07 	call	0xea8	; 0xea8 <SLPCTRL_init>

	i2c_initialization();
     ade:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_initialization>

	BOD_init();
     ae2:	0e 94 b1 04 	call	0x962	; 0x962 <BOD_init>
     ae6:	08 95       	ret

00000ae8 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
}
     ae8:	e0 ea       	ldi	r30, 0xA0	; 160
     aea:	f8 e0       	ldi	r31, 0x08	; 8
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	88 60       	ori	r24, 0x08	; 8
     af0:	84 83       	std	Z+4, r24	; 0x04
     af2:	85 81       	ldd	r24, Z+5	; 0x05
     af4:	81 60       	ori	r24, 0x01	; 1
     af6:	85 83       	std	Z+5, r24	; 0x05
     af8:	ec e0       	ldi	r30, 0x0C	; 12
     afa:	f4 e3       	ldi	r31, 0x34	; 52
     afc:	80 81       	ld	r24, Z
     afe:	8e 7f       	andi	r24, 0xFE	; 254
     b00:	80 83       	st	Z, r24
     b02:	13 86       	std	Z+11, r1	; 0x0b
     b04:	8e e0       	ldi	r24, 0x0E	; 14
     b06:	08 95       	ret

00000b08 <i2c_do_I2C_IDLE>:
     b08:	ec e0       	ldi	r30, 0x0C	; 12
     b0a:	f4 e3       	ldi	r31, 0x34	; 52
     b0c:	80 81       	ld	r24, Z
     b0e:	8e 7f       	andi	r24, 0xFE	; 254
     b10:	80 83       	st	Z, r24
     b12:	13 86       	std	Z+11, r1	; 0x0b
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	08 95       	ret

00000b18 <i2c_do_I2C_SEND_STOP>:
     b18:	e0 ea       	ldi	r30, 0xA0	; 160
     b1a:	f8 e0       	ldi	r31, 0x08	; 8
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	83 60       	ori	r24, 0x03	; 3
     b20:	84 83       	std	Z+4, r24	; 0x04
     b22:	0e 94 84 05 	call	0xb08	; 0xb08 <i2c_do_I2C_IDLE>
     b26:	08 95       	ret

00000b28 <i2c_do_I2C_SEND_ADR_READ>:
     b28:	ec e0       	ldi	r30, 0x0C	; 12
     b2a:	f4 e3       	ldi	r31, 0x34	; 52
     b2c:	80 81       	ld	r24, Z
     b2e:	88 60       	ori	r24, 0x08	; 8
     b30:	80 83       	st	Z, r24
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	81 60       	ori	r24, 0x01	; 1
     b3c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	08 95       	ret

00000b44 <i2c_do_I2C_SEND_RESTART>:
     b44:	0e 94 94 05 	call	0xb28	; 0xb28 <i2c_do_I2C_SEND_ADR_READ>
     b48:	08 95       	ret

00000b4a <i2c_do_I2C_SEND_RESTART_READ>:
     b4a:	0e 94 94 05 	call	0xb28	; 0xb28 <i2c_do_I2C_SEND_ADR_READ>
     b4e:	08 95       	ret

00000b50 <i2c_do_I2C_SEND_ADR_WRITE>:
     b50:	ec e0       	ldi	r30, 0x0C	; 12
     b52:	f4 e3       	ldi	r31, 0x34	; 52
     b54:	80 81       	ld	r24, Z
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	80 83       	st	Z, r24
     b5a:	81 81       	ldd	r24, Z+1	; 0x01
     b5c:	88 0f       	add	r24, r24
     b5e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	08 95       	ret

00000b66 <i2c_do_I2C_SEND_RESTART_WRITE>:
     b66:	0e 94 a8 05 	call	0xb50	; 0xb50 <i2c_do_I2C_SEND_ADR_WRITE>
     b6a:	08 95       	ret

00000b6c <i2c_do_I2C_DO_ADDRESS_NACK>:
     b6c:	ac e0       	ldi	r26, 0x0C	; 12
     b6e:	b4 e3       	ldi	r27, 0x34	; 52
     b70:	8c 91       	ld	r24, X
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	8c 93       	st	X, r24
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	1b 96       	adiw	r26, 0x0b	; 11
     b7a:	8c 93       	st	X, r24
     b7c:	1b 97       	sbiw	r26, 0x0b	; 11
     b7e:	50 96       	adiw	r26, 0x10	; 16
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	51 97       	sbiw	r26, 0x11	; 17
     b86:	5c 96       	adiw	r26, 0x1c	; 28
     b88:	8d 91       	ld	r24, X+
     b8a:	9c 91       	ld	r25, X
     b8c:	5d 97       	sbiw	r26, 0x1d	; 29
     b8e:	09 95       	icall
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	19 f0       	breq	.+6      	; 0xb9a <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	21 f0       	breq	.+8      	; 0xba0 <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
     b98:	06 c0       	rjmp	.+12     	; 0xba6 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
     b9a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <i2c_do_I2C_SEND_RESTART_READ>
     b9e:	08 95       	ret
     ba0:	0e 94 b3 05 	call	0xb66	; 0xb66 <i2c_do_I2C_SEND_RESTART_WRITE>
     ba4:	08 95       	ret
     ba6:	0e 94 8c 05 	call	0xb18	; 0xb18 <i2c_do_I2C_SEND_STOP>
     baa:	08 95       	ret

00000bac <i2c_do_I2C_RX_DO_ACK>:
     bac:	e0 ea       	ldi	r30, 0xA0	; 160
     bae:	f8 e0       	ldi	r31, 0x08	; 8
     bb0:	84 81       	ldd	r24, Z+4	; 0x04
     bb2:	8b 7f       	andi	r24, 0xFB	; 251
     bb4:	84 83       	std	Z+4, r24	; 0x04
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	08 95       	ret

00000bba <i2c_do_I2C_TX_DO_ACK>:
     bba:	e0 ea       	ldi	r30, 0xA0	; 160
     bbc:	f8 e0       	ldi	r31, 0x08	; 8
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	8b 7f       	andi	r24, 0xFB	; 251
     bc2:	84 83       	std	Z+4, r24	; 0x04
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	08 95       	ret

00000bc8 <i2c_do_I2C_DO_NACK_STOP>:
     bc8:	e0 ea       	ldi	r30, 0xA0	; 160
     bca:	f8 e0       	ldi	r31, 0x08	; 8
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	84 83       	std	Z+4, r24	; 0x04
     bd2:	84 81       	ldd	r24, Z+4	; 0x04
     bd4:	83 60       	ori	r24, 0x03	; 3
     bd6:	84 83       	std	Z+4, r24	; 0x04
     bd8:	0e 94 84 05 	call	0xb08	; 0xb08 <i2c_do_I2C_IDLE>
     bdc:	08 95       	ret

00000bde <i2c_do_I2C_DO_NACK_RESTART>:
     bde:	e0 ea       	ldi	r30, 0xA0	; 160
     be0:	f8 e0       	ldi	r31, 0x08	; 8
     be2:	84 81       	ldd	r24, Z+4	; 0x04
     be4:	84 60       	ori	r24, 0x04	; 4
     be6:	84 83       	std	Z+4, r24	; 0x04
     be8:	88 e0       	ldi	r24, 0x08	; 8
     bea:	08 95       	ret

00000bec <i2c_do_I2C_TX>:
     bec:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     bf0:	84 ff       	sbrs	r24, 4
     bf2:	19 c0       	rjmp	.+50     	; 0xc26 <i2c_do_I2C_TX+0x3a>
     bf4:	ac e0       	ldi	r26, 0x0C	; 12
     bf6:	b4 e3       	ldi	r27, 0x34	; 52
     bf8:	52 96       	adiw	r26, 0x12	; 18
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	53 97       	sbiw	r26, 0x13	; 19
     c00:	5e 96       	adiw	r26, 0x1e	; 30
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	5f 97       	sbiw	r26, 0x1f	; 31
     c08:	09 95       	icall
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	19 f0       	breq	.+6      	; 0xc14 <i2c_do_I2C_TX+0x28>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	21 f0       	breq	.+8      	; 0xc1a <i2c_do_I2C_TX+0x2e>
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <i2c_do_I2C_TX+0x34>
     c14:	0e 94 a5 05 	call	0xb4a	; 0xb4a <i2c_do_I2C_SEND_RESTART_READ>
     c18:	08 95       	ret
     c1a:	0e 94 b3 05 	call	0xb66	; 0xb66 <i2c_do_I2C_SEND_RESTART_WRITE>
     c1e:	08 95       	ret
     c20:	0e 94 8c 05 	call	0xb18	; 0xb18 <i2c_do_I2C_SEND_STOP>
     c24:	08 95       	ret
     c26:	ec e0       	ldi	r30, 0x0C	; 12
     c28:	f4 e3       	ldi	r31, 0x34	; 52
     c2a:	80 81       	ld	r24, Z
     c2c:	87 7f       	andi	r24, 0xF7	; 247
     c2e:	80 83       	st	Z, r24
     c30:	a2 81       	ldd	r26, Z+2	; 0x02
     c32:	b3 81       	ldd	r27, Z+3	; 0x03
     c34:	cd 01       	movw	r24, r26
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	82 83       	std	Z+2, r24	; 0x02
     c3a:	93 83       	std	Z+3, r25	; 0x03
     c3c:	8c 91       	ld	r24, X
     c3e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     c42:	84 81       	ldd	r24, Z+4	; 0x04
     c44:	95 81       	ldd	r25, Z+5	; 0x05
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	84 83       	std	Z+4, r24	; 0x04
     c4a:	95 83       	std	Z+5, r25	; 0x05
     c4c:	89 2b       	or	r24, r25
     c4e:	11 f0       	breq	.+4      	; 0xc54 <i2c_do_I2C_TX+0x68>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	08 95       	ret
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	08 95       	ret

00000c58 <i2c_do_I2C_RX>:
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec e0       	ldi	r30, 0x0C	; 12
     c5e:	f4 e3       	ldi	r31, 0x34	; 52
     c60:	80 81       	ld	r24, Z
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	80 83       	st	Z, r24
     c66:	84 81       	ldd	r24, Z+4	; 0x04
     c68:	95 81       	ldd	r25, Z+5	; 0x05
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	31 f4       	brne	.+12     	; 0xc7a <i2c_do_I2C_RX+0x22>
     c6e:	e0 ea       	ldi	r30, 0xA0	; 160
     c70:	f8 e0       	ldi	r31, 0x08	; 8
     c72:	84 81       	ldd	r24, Z+4	; 0x04
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	84 83       	std	Z+4, r24	; 0x04
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <i2c_do_I2C_RX+0x2c>
     c7a:	e0 ea       	ldi	r30, 0xA0	; 160
     c7c:	f8 e0       	ldi	r31, 0x08	; 8
     c7e:	84 81       	ldd	r24, Z+4	; 0x04
     c80:	8b 7f       	andi	r24, 0xFB	; 251
     c82:	84 83       	std	Z+4, r24	; 0x04
     c84:	ec e0       	ldi	r30, 0x0C	; 12
     c86:	f4 e3       	ldi	r31, 0x34	; 52
     c88:	84 81       	ldd	r24, Z+4	; 0x04
     c8a:	95 81       	ldd	r25, Z+5	; 0x05
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	84 83       	std	Z+4, r24	; 0x04
     c90:	95 83       	std	Z+5, r25	; 0x05
     c92:	89 2b       	or	r24, r25
     c94:	a9 f0       	breq	.+42     	; 0xcc0 <i2c_do_I2C_RX+0x68>
     c96:	df 01       	movw	r26, r30
     c98:	c2 81       	ldd	r28, Z+2	; 0x02
     c9a:	d3 81       	ldd	r29, Z+3	; 0x03
     c9c:	e0 ea       	ldi	r30, 0xA0	; 160
     c9e:	f8 e0       	ldi	r31, 0x08	; 8
     ca0:	80 85       	ldd	r24, Z+8	; 0x08
     ca2:	88 83       	st	Y, r24
     ca4:	12 96       	adiw	r26, 0x02	; 2
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	13 97       	sbiw	r26, 0x03	; 3
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	8d 93       	st	X+, r24
     cb2:	9c 93       	st	X, r25
     cb4:	13 97       	sbiw	r26, 0x03	; 3
     cb6:	84 81       	ldd	r24, Z+4	; 0x04
     cb8:	82 60       	ori	r24, 0x02	; 2
     cba:	84 83       	std	Z+4, r24	; 0x04
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	26 c0       	rjmp	.+76     	; 0xd0c <i2c_do_I2C_RX+0xb4>
     cc0:	ac e0       	ldi	r26, 0x0C	; 12
     cc2:	b4 e3       	ldi	r27, 0x34	; 52
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     cd0:	80 83       	st	Z, r24
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	12 96       	adiw	r26, 0x02	; 2
     cde:	8d 93       	st	X+, r24
     ce0:	9c 93       	st	X, r25
     ce2:	13 97       	sbiw	r26, 0x03	; 3
     ce4:	8c 91       	ld	r24, X
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	8c 93       	st	X, r24
     cea:	1c 96       	adiw	r26, 0x0c	; 12
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	1d 97       	sbiw	r26, 0x0d	; 13
     cf2:	58 96       	adiw	r26, 0x18	; 24
     cf4:	8d 91       	ld	r24, X+
     cf6:	9c 91       	ld	r25, X
     cf8:	59 97       	sbiw	r26, 0x19	; 25
     cfa:	09 95       	icall
     cfc:	82 50       	subi	r24, 0x02	; 2
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	18 f4       	brcc	.+6      	; 0xd08 <i2c_do_I2C_RX+0xb0>
     d02:	0e 94 ef 05 	call	0xbde	; 0xbde <i2c_do_I2C_DO_NACK_RESTART>
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <i2c_do_I2C_RX+0xb4>
     d08:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <i2c_do_I2C_DO_NACK_STOP>
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <i2c_do_I2C_TX_EMPTY>:
     d12:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     d16:	84 ff       	sbrs	r24, 4
     d18:	19 c0       	rjmp	.+50     	; 0xd4c <i2c_do_I2C_TX_EMPTY+0x3a>
     d1a:	ac e0       	ldi	r26, 0x0C	; 12
     d1c:	b4 e3       	ldi	r27, 0x34	; 52
     d1e:	52 96       	adiw	r26, 0x12	; 18
     d20:	ed 91       	ld	r30, X+
     d22:	fc 91       	ld	r31, X
     d24:	53 97       	sbiw	r26, 0x13	; 19
     d26:	5e 96       	adiw	r26, 0x1e	; 30
     d28:	8d 91       	ld	r24, X+
     d2a:	9c 91       	ld	r25, X
     d2c:	5f 97       	sbiw	r26, 0x1f	; 31
     d2e:	09 95       	icall
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	19 f0       	breq	.+6      	; 0xd3a <i2c_do_I2C_TX_EMPTY+0x28>
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	21 f0       	breq	.+8      	; 0xd40 <i2c_do_I2C_TX_EMPTY+0x2e>
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <i2c_do_I2C_TX_EMPTY+0x34>
     d3a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <i2c_do_I2C_SEND_RESTART_READ>
     d3e:	08 95       	ret
     d40:	0e 94 b3 05 	call	0xb66	; 0xb66 <i2c_do_I2C_SEND_RESTART_WRITE>
     d44:	08 95       	ret
     d46:	0e 94 8c 05 	call	0xb18	; 0xb18 <i2c_do_I2C_SEND_STOP>
     d4a:	08 95       	ret
     d4c:	ac e0       	ldi	r26, 0x0C	; 12
     d4e:	b4 e3       	ldi	r27, 0x34	; 52
     d50:	8c 91       	ld	r24, X
     d52:	84 60       	ori	r24, 0x04	; 4
     d54:	8c 93       	st	X, r24
     d56:	1c 96       	adiw	r26, 0x0c	; 12
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	1d 97       	sbiw	r26, 0x0d	; 13
     d5e:	58 96       	adiw	r26, 0x18	; 24
     d60:	8d 91       	ld	r24, X+
     d62:	9c 91       	ld	r25, X
     d64:	59 97       	sbiw	r26, 0x19	; 25
     d66:	09 95       	icall
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	39 f0       	breq	.+14     	; 0xd7a <i2c_do_I2C_TX_EMPTY+0x68>
     d6c:	84 30       	cpi	r24, 0x04	; 4
     d6e:	41 f0       	breq	.+16     	; 0xd80 <i2c_do_I2C_TX_EMPTY+0x6e>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	49 f4       	brne	.+18     	; 0xd86 <i2c_do_I2C_TX_EMPTY+0x74>
     d74:	0e 94 a5 05 	call	0xb4a	; 0xb4a <i2c_do_I2C_SEND_RESTART_READ>
     d78:	08 95       	ret
     d7a:	0e 94 b3 05 	call	0xb66	; 0xb66 <i2c_do_I2C_SEND_RESTART_WRITE>
     d7e:	08 95       	ret
     d80:	0e 94 f6 05 	call	0xbec	; 0xbec <i2c_do_I2C_TX>
     d84:	08 95       	ret
     d86:	0e 94 8c 05 	call	0xb18	; 0xb18 <i2c_do_I2C_SEND_STOP>
     d8a:	08 95       	ret

00000d8c <i2c_do_I2C_BUS_COLLISION>:
     d8c:	e0 ea       	ldi	r30, 0xA0	; 160
     d8e:	f8 e0       	ldi	r31, 0x08	; 8
     d90:	85 81       	ldd	r24, Z+5	; 0x05
     d92:	88 60       	ori	r24, 0x08	; 8
     d94:	85 83       	std	Z+5, r24	; 0x05
     d96:	ac e0       	ldi	r26, 0x0C	; 12
     d98:	b4 e3       	ldi	r27, 0x34	; 52
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	1b 96       	adiw	r26, 0x0b	; 11
     d9e:	8c 93       	st	X, r24
     da0:	1b 97       	sbiw	r26, 0x0b	; 11
     da2:	1e 96       	adiw	r26, 0x0e	; 14
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	1f 97       	sbiw	r26, 0x0f	; 15
     daa:	5a 96       	adiw	r26, 0x1a	; 26
     dac:	8d 91       	ld	r24, X+
     dae:	9c 91       	ld	r25, X
     db0:	5b 97       	sbiw	r26, 0x1b	; 27
     db2:	09 95       	icall
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	19 f0       	breq	.+6      	; 0xdbe <i2c_do_I2C_BUS_COLLISION+0x32>
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	21 f0       	breq	.+8      	; 0xdc4 <i2c_do_I2C_BUS_COLLISION+0x38>
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <i2c_do_I2C_BUS_COLLISION+0x3e>
     dbe:	0e 94 a5 05 	call	0xb4a	; 0xb4a <i2c_do_I2C_SEND_RESTART_READ>
     dc2:	08 95       	ret
     dc4:	0e 94 b3 05 	call	0xb66	; 0xb66 <i2c_do_I2C_SEND_RESTART_WRITE>
     dc8:	08 95       	ret
     dca:	0e 94 74 05 	call	0xae8	; 0xae8 <i2c_do_I2C_RESET>
     dce:	08 95       	ret

00000dd0 <i2c_do_I2C_BUS_ERROR>:
     dd0:	e0 ea       	ldi	r30, 0xA0	; 160
     dd2:	f8 e0       	ldi	r31, 0x08	; 8
     dd4:	84 81       	ldd	r24, Z+4	; 0x04
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	84 83       	std	Z+4, r24	; 0x04
     dda:	85 81       	ldd	r24, Z+5	; 0x05
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	85 83       	std	Z+5, r24	; 0x05
     de0:	ec e0       	ldi	r30, 0x0C	; 12
     de2:	f4 e3       	ldi	r31, 0x34	; 52
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	83 87       	std	Z+11, r24	; 0x0b
     dee:	8e e0       	ldi	r24, 0x0E	; 14
     df0:	08 95       	ret

00000df2 <i2c_master_isr>:
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	e0 ea       	ldi	r30, 0xA0	; 160
     df8:	f8 e0       	ldi	r31, 0x08	; 8
     dfa:	85 81       	ldd	r24, Z+5	; 0x05
     dfc:	80 6c       	ori	r24, 0xC0	; 192
     dfe:	85 83       	std	Z+5, r24	; 0x05
     e00:	80 91 0c 34 	lds	r24, 0x340C	; 0x80340c <i2c_status>
     e04:	83 ff       	sbrs	r24, 3
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <i2c_master_isr+0x24>
     e08:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     e0c:	84 ff       	sbrs	r24, 4
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <i2c_master_isr+0x24>
     e10:	8f e0       	ldi	r24, 0x0F	; 15
     e12:	80 93 16 34 	sts	0x3416, r24	; 0x803416 <i2c_status+0xa>
     e16:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     e1a:	83 ff       	sbrs	r24, 3
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <i2c_master_isr+0x32>
     e1e:	80 e1       	ldi	r24, 0x10	; 16
     e20:	80 93 16 34 	sts	0x3416, r24	; 0x803416 <i2c_status+0xa>
     e24:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     e28:	82 ff       	sbrs	r24, 2
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <i2c_master_isr+0x40>
     e2c:	81 e1       	ldi	r24, 0x11	; 17
     e2e:	80 93 16 34 	sts	0x3416, r24	; 0x803416 <i2c_status+0xa>
     e32:	cc e0       	ldi	r28, 0x0C	; 12
     e34:	d4 e3       	ldi	r29, 0x34	; 52
     e36:	ea 85       	ldd	r30, Y+10	; 0x0a
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	e2 5b       	subi	r30, 0xB2	; 178
     e40:	ff 4c       	sbci	r31, 0xCF	; 207
     e42:	01 90       	ld	r0, Z+
     e44:	f0 81       	ld	r31, Z
     e46:	e0 2d       	mov	r30, r0
     e48:	09 95       	icall
     e4a:	8a 87       	std	Y+10, r24	; 0x0a
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <i2c_init>:
     e52:	e0 ea       	ldi	r30, 0xA0	; 160
     e54:	f8 e0       	ldi	r31, 0x08	; 8
     e56:	8b e0       	ldi	r24, 0x0B	; 11
     e58:	86 83       	std	Z+6, r24	; 0x06
     e5a:	81 ec       	ldi	r24, 0xC1	; 193
     e5c:	83 83       	std	Z+3, r24	; 0x03
     e5e:	08 95       	ret

00000e60 <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
	i2c_master_isr();
     e82:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <i2c_master_isr>
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret

00000eac <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret

00000eb0 <rx487x_default_rx_isr_cb>:
 *
 * \return Nothing
 */
void usb_cdc_disable()
{
	USART2.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     eb0:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
     eb4:	e0 91 3b 37 	lds	r30, 0x373B	; 0x80373b <rx487x_rx_head>
     eb8:	ef 5f       	subi	r30, 0xFF	; 255
     eba:	80 91 3a 37 	lds	r24, 0x373A	; 0x80373a <rx487x_rx_tail>
     ebe:	e8 17       	cp	r30, r24
     ec0:	59 f0       	breq	.+22     	; 0xed8 <rx487x_default_rx_isr_cb+0x28>
     ec2:	e0 93 3b 37 	sts	0x373B, r30	; 0x80373b <rx487x_rx_head>
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	e4 5c       	subi	r30, 0xC4	; 196
     eca:	f8 4c       	sbci	r31, 0xC8	; 200
     ecc:	90 83       	st	Z, r25
     ece:	80 91 39 37 	lds	r24, 0x3739	; 0x803739 <rx487x_rx_elements>
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 39 37 	sts	0x3739, r24	; 0x803739 <rx487x_rx_elements>
     ed8:	08 95       	ret

00000eda <rx487x_default_udre_isr_cb>:
     eda:	80 91 36 36 	lds	r24, 0x3636	; 0x803636 <rx487x_tx_elements>
     ede:	88 23       	and	r24, r24
     ee0:	81 f0       	breq	.+32     	; 0xf02 <rx487x_default_udre_isr_cb+0x28>
     ee2:	e0 91 37 36 	lds	r30, 0x3637	; 0x803637 <rx487x_tx_tail>
     ee6:	ef 5f       	subi	r30, 0xFF	; 255
     ee8:	e0 93 37 36 	sts	0x3637, r30	; 0x803637 <rx487x_tx_tail>
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	e7 5c       	subi	r30, 0xC7	; 199
     ef0:	f9 4c       	sbci	r31, 0xC9	; 201
     ef2:	80 81       	ld	r24, Z
     ef4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
     ef8:	80 91 36 36 	lds	r24, 0x3636	; 0x803636 <rx487x_tx_elements>
     efc:	81 50       	subi	r24, 0x01	; 1
     efe:	80 93 36 36 	sts	0x3636, r24	; 0x803636 <rx487x_tx_elements>
     f02:	80 91 36 36 	lds	r24, 0x3636	; 0x803636 <rx487x_tx_elements>
     f06:	81 11       	cpse	r24, r1
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <rx487x_default_udre_isr_cb+0x3a>
     f0a:	e0 e0       	ldi	r30, 0x00	; 0
     f0c:	f8 e0       	ldi	r31, 0x08	; 8
     f0e:	85 81       	ldd	r24, Z+5	; 0x05
     f10:	8f 7d       	andi	r24, 0xDF	; 223
     f12:	85 83       	std	Z+5, r24	; 0x05
     f14:	08 95       	ret

00000f16 <usb_cdc_default_rx_isr_cb>:
     f16:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
     f1a:	e0 91 35 35 	lds	r30, 0x3535	; 0x803535 <usb_cdc_rx_head>
     f1e:	ef 5f       	subi	r30, 0xFF	; 255
     f20:	80 91 34 35 	lds	r24, 0x3534	; 0x803534 <usb_cdc_rx_tail>
     f24:	e8 17       	cp	r30, r24
     f26:	59 f0       	breq	.+22     	; 0xf3e <usb_cdc_default_rx_isr_cb+0x28>
     f28:	e0 93 35 35 	sts	0x3535, r30	; 0x803535 <usb_cdc_rx_head>
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ea 5c       	subi	r30, 0xCA	; 202
     f30:	fa 4c       	sbci	r31, 0xCA	; 202
     f32:	90 83       	st	Z, r25
     f34:	80 91 33 35 	lds	r24, 0x3533	; 0x803533 <usb_cdc_rx_elements>
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	80 93 33 35 	sts	0x3533, r24	; 0x803533 <usb_cdc_rx_elements>
     f3e:	08 95       	ret

00000f40 <usb_cdc_default_udre_isr_cb>:
     f40:	80 91 30 34 	lds	r24, 0x3430	; 0x803430 <usb_cdc_tx_elements>
     f44:	88 23       	and	r24, r24
     f46:	81 f0       	breq	.+32     	; 0xf68 <usb_cdc_default_udre_isr_cb+0x28>
     f48:	e0 91 31 34 	lds	r30, 0x3431	; 0x803431 <usb_cdc_tx_tail>
     f4c:	ef 5f       	subi	r30, 0xFF	; 255
     f4e:	e0 93 31 34 	sts	0x3431, r30	; 0x803431 <usb_cdc_tx_tail>
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	ed 5c       	subi	r30, 0xCD	; 205
     f56:	fb 4c       	sbci	r31, 0xCB	; 203
     f58:	80 81       	ld	r24, Z
     f5a:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
     f5e:	80 91 30 34 	lds	r24, 0x3430	; 0x803430 <usb_cdc_tx_elements>
     f62:	81 50       	subi	r24, 0x01	; 1
     f64:	80 93 30 34 	sts	0x3430, r24	; 0x803430 <usb_cdc_tx_elements>
     f68:	80 91 30 34 	lds	r24, 0x3430	; 0x803430 <usb_cdc_tx_elements>
     f6c:	81 11       	cpse	r24, r1
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <usb_cdc_default_udre_isr_cb+0x3a>
     f70:	e0 e4       	ldi	r30, 0x40	; 64
     f72:	f8 e0       	ldi	r31, 0x08	; 8
     f74:	85 81       	ldd	r24, Z+5	; 0x05
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	85 83       	std	Z+5, r24	; 0x05
     f7a:	08 95       	ret

00000f7c <rx487x_set_ISR_cb>:
     f7c:	61 30       	cpi	r22, 0x01	; 1
     f7e:	19 f0       	breq	.+6      	; 0xf86 <rx487x_set_ISR_cb+0xa>
     f80:	62 30       	cpi	r22, 0x02	; 2
     f82:	31 f0       	breq	.+12     	; 0xf90 <rx487x_set_ISR_cb+0x14>
     f84:	08 95       	ret
     f86:	80 93 86 30 	sts	0x3086, r24	; 0x803086 <rx487x_rx_isr_cb>
     f8a:	90 93 87 30 	sts	0x3087, r25	; 0x803087 <rx487x_rx_isr_cb+0x1>
     f8e:	08 95       	ret
     f90:	80 93 84 30 	sts	0x3084, r24	; 0x803084 <rx487x_udre_isr_cb>
     f94:	90 93 85 30 	sts	0x3085, r25	; 0x803085 <rx487x_udre_isr_cb+0x1>
     f98:	08 95       	ret

00000f9a <__vector_17>:
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	e0 91 86 30 	lds	r30, 0x3086	; 0x803086 <rx487x_rx_isr_cb>
     fc0:	f0 91 87 30 	lds	r31, 0x3087	; 0x803087 <rx487x_rx_isr_cb+0x1>
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	09 f0       	breq	.+2      	; 0xfca <__vector_17+0x30>
     fc8:	09 95       	icall
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_18>:
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
    100e:	e0 91 84 30 	lds	r30, 0x3084	; 0x803084 <rx487x_udre_isr_cb>
    1012:	f0 91 85 30 	lds	r31, 0x3085	; 0x803085 <rx487x_udre_isr_cb+0x1>
    1016:	30 97       	sbiw	r30, 0x00	; 0
    1018:	09 f0       	breq	.+2      	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
    101a:	09 95       	icall
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <rx487x_is_tx_ready>:
    103e:	80 91 36 36 	lds	r24, 0x3636	; 0x803636 <rx487x_tx_elements>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	08 95       	ret

00001046 <rx487x_write>:
    1046:	90 91 38 36 	lds	r25, 0x3638	; 0x803638 <rx487x_tx_head>
    104a:	9f 5f       	subi	r25, 0xFF	; 255
    104c:	20 91 36 36 	lds	r18, 0x3636	; 0x803636 <rx487x_tx_elements>
    1050:	e9 2f       	mov	r30, r25
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e7 5c       	subi	r30, 0xC7	; 199
    1056:	f9 4c       	sbci	r31, 0xC9	; 201
    1058:	80 83       	st	Z, r24
    105a:	90 93 38 36 	sts	0x3638, r25	; 0x803638 <rx487x_tx_head>
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	0f 92       	push	r0
    1064:	80 91 36 36 	lds	r24, 0x3636	; 0x803636 <rx487x_tx_elements>
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 36 36 	sts	0x3636, r24	; 0x803636 <rx487x_tx_elements>
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	e0 e0       	ldi	r30, 0x00	; 0
    1074:	f8 e0       	ldi	r31, 0x08	; 8
    1076:	85 81       	ldd	r24, Z+5	; 0x05
    1078:	80 62       	ori	r24, 0x20	; 32
    107a:	85 83       	std	Z+5, r24	; 0x05
    107c:	08 95       	ret

0000107e <rx487x_init>:
    107e:	e0 e0       	ldi	r30, 0x00	; 0
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	84 e7       	ldi	r24, 0x74	; 116
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	80 87       	std	Z+8, r24	; 0x08
    1088:	91 87       	std	Z+9, r25	; 0x09
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	85 83       	std	Z+5, r24	; 0x05
    108e:	80 ec       	ldi	r24, 0xC0	; 192
    1090:	86 83       	std	Z+6, r24	; 0x06
    1092:	10 92 3a 37 	sts	0x373A, r1	; 0x80373a <rx487x_rx_tail>
    1096:	10 92 3b 37 	sts	0x373B, r1	; 0x80373b <rx487x_rx_head>
    109a:	10 92 39 37 	sts	0x3739, r1	; 0x803739 <rx487x_rx_elements>
    109e:	10 92 37 36 	sts	0x3637, r1	; 0x803637 <rx487x_tx_tail>
    10a2:	10 92 38 36 	sts	0x3638, r1	; 0x803638 <rx487x_tx_head>
    10a6:	10 92 36 36 	sts	0x3636, r1	; 0x803636 <rx487x_tx_elements>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <rx487x_get_data>:
    10ae:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    10b2:	08 95       	ret

000010b4 <usb_cdc_set_ISR_cb>:
    10b4:	61 30       	cpi	r22, 0x01	; 1
    10b6:	19 f0       	breq	.+6      	; 0x10be <usb_cdc_set_ISR_cb+0xa>
    10b8:	62 30       	cpi	r22, 0x02	; 2
    10ba:	31 f0       	breq	.+12     	; 0x10c8 <usb_cdc_set_ISR_cb+0x14>
    10bc:	08 95       	ret
    10be:	80 93 74 30 	sts	0x3074, r24	; 0x803074 <usb_cdc_rx_isr_cb>
    10c2:	90 93 75 30 	sts	0x3075, r25	; 0x803075 <usb_cdc_rx_isr_cb+0x1>
    10c6:	08 95       	ret
    10c8:	80 93 72 30 	sts	0x3072, r24	; 0x803072 <usb_cdc_udre_isr_cb>
    10cc:	90 93 73 30 	sts	0x3073, r25	; 0x803073 <usb_cdc_udre_isr_cb+0x1>
    10d0:	08 95       	ret

000010d2 <__vector_31>:
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	e0 91 74 30 	lds	r30, 0x3074	; 0x803074 <usb_cdc_rx_isr_cb>
    10f8:	f0 91 75 30 	lds	r31, 0x3075	; 0x803075 <usb_cdc_rx_isr_cb+0x1>
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__vector_31+0x30>
    1100:	09 95       	icall
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_32>:
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
    1146:	e0 91 72 30 	lds	r30, 0x3072	; 0x803072 <usb_cdc_udre_isr_cb>
    114a:	f0 91 73 30 	lds	r31, 0x3073	; 0x803073 <usb_cdc_udre_isr_cb+0x1>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_32+0x30>
    1152:	09 95       	icall
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <usb_cdc_write>:
    1176:	90 91 32 34 	lds	r25, 0x3432	; 0x803432 <usb_cdc_tx_head>
    117a:	9f 5f       	subi	r25, 0xFF	; 255
    117c:	20 91 30 34 	lds	r18, 0x3430	; 0x803430 <usb_cdc_tx_elements>
    1180:	e9 2f       	mov	r30, r25
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	ed 5c       	subi	r30, 0xCD	; 205
    1186:	fb 4c       	sbci	r31, 0xCB	; 203
    1188:	80 83       	st	Z, r24
    118a:	90 93 32 34 	sts	0x3432, r25	; 0x803432 <usb_cdc_tx_head>
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	0f 92       	push	r0
    1194:	80 91 30 34 	lds	r24, 0x3430	; 0x803430 <usb_cdc_tx_elements>
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	80 93 30 34 	sts	0x3430, r24	; 0x803430 <usb_cdc_tx_elements>
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	e0 e4       	ldi	r30, 0x40	; 64
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	85 81       	ldd	r24, Z+5	; 0x05
    11a8:	80 62       	ori	r24, 0x20	; 32
    11aa:	85 83       	std	Z+5, r24	; 0x05
    11ac:	08 95       	ret

000011ae <usb_cdc_printCHAR>:
    11ae:	0e 94 bb 08 	call	0x1176	; 0x1176 <usb_cdc_write>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <usb_cdc_init>:
    11b8:	e0 e4       	ldi	r30, 0x40	; 64
    11ba:	f8 e0       	ldi	r31, 0x08	; 8
    11bc:	84 e7       	ldi	r24, 0x74	; 116
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	80 87       	std	Z+8, r24	; 0x08
    11c2:	91 87       	std	Z+9, r25	; 0x09
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	85 83       	std	Z+5, r24	; 0x05
    11c8:	80 ec       	ldi	r24, 0xC0	; 192
    11ca:	86 83       	std	Z+6, r24	; 0x06
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	83 87       	std	Z+11, r24	; 0x0b
    11d0:	10 92 34 35 	sts	0x3534, r1	; 0x803534 <usb_cdc_rx_tail>
    11d4:	10 92 35 35 	sts	0x3535, r1	; 0x803535 <usb_cdc_rx_head>
    11d8:	10 92 33 35 	sts	0x3533, r1	; 0x803533 <usb_cdc_rx_elements>
    11dc:	10 92 31 34 	sts	0x3431, r1	; 0x803431 <usb_cdc_tx_tail>
    11e0:	10 92 32 34 	sts	0x3432, r1	; 0x803432 <usb_cdc_tx_head>
    11e4:	10 92 30 34 	sts	0x3430, r1	; 0x803430 <usb_cdc_tx_elements>
    11e8:	86 e7       	ldi	r24, 0x76	; 118
    11ea:	90 e3       	ldi	r25, 0x30	; 48
    11ec:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <__iob+0x2>
    11f0:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <__iob+0x3>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret

000011f8 <usb_cdc_get_data>:
 *
 * \return Data register from usb_cdc module
 */
uint8_t usb_cdc_get_data()
{
	return USART2.RXDATAL;
    11f8:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
}
    11fc:	08 95       	ret

000011fe <__muluhisi3>:
    11fe:	0e 94 0a 09 	call	0x1214	; 0x1214 <__umulhisi3>
    1202:	a5 9f       	mul	r26, r21
    1204:	90 0d       	add	r25, r0
    1206:	b4 9f       	mul	r27, r20
    1208:	90 0d       	add	r25, r0
    120a:	a4 9f       	mul	r26, r20
    120c:	80 0d       	add	r24, r0
    120e:	91 1d       	adc	r25, r1
    1210:	11 24       	eor	r1, r1
    1212:	08 95       	ret

00001214 <__umulhisi3>:
    1214:	a2 9f       	mul	r26, r18
    1216:	b0 01       	movw	r22, r0
    1218:	b3 9f       	mul	r27, r19
    121a:	c0 01       	movw	r24, r0
    121c:	a3 9f       	mul	r26, r19
    121e:	70 0d       	add	r23, r0
    1220:	81 1d       	adc	r24, r1
    1222:	11 24       	eor	r1, r1
    1224:	91 1d       	adc	r25, r1
    1226:	b2 9f       	mul	r27, r18
    1228:	70 0d       	add	r23, r0
    122a:	81 1d       	adc	r24, r1
    122c:	11 24       	eor	r1, r1
    122e:	91 1d       	adc	r25, r1
    1230:	08 95       	ret

00001232 <strtol>:
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__prologue_saves__+0x2>
    123e:	5c 01       	movw	r10, r24
    1240:	6b 01       	movw	r12, r22
    1242:	7a 01       	movw	r14, r20
    1244:	61 15       	cp	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	19 f0       	breq	.+6      	; 0x1250 <strtol+0x1e>
    124a:	fb 01       	movw	r30, r22
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	e1 14       	cp	r14, r1
    1252:	f1 04       	cpc	r15, r1
    1254:	29 f0       	breq	.+10     	; 0x1260 <strtol+0x2e>
    1256:	c7 01       	movw	r24, r14
    1258:	02 97       	sbiw	r24, 0x02	; 2
    125a:	83 97       	sbiw	r24, 0x23	; 35
    125c:	08 f0       	brcs	.+2      	; 0x1260 <strtol+0x2e>
    125e:	e5 c0       	rjmp	.+458    	; 0x142a <strtol+0x1f8>
    1260:	e5 01       	movw	r28, r10
    1262:	21 96       	adiw	r28, 0x01	; 1
    1264:	f5 01       	movw	r30, r10
    1266:	10 81       	ld	r17, Z
    1268:	81 2f       	mov	r24, r17
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 2f 0a 	call	0x145e	; 0x145e <isspace>
    1270:	89 2b       	or	r24, r25
    1272:	11 f0       	breq	.+4      	; 0x1278 <strtol+0x46>
    1274:	5e 01       	movw	r10, r28
    1276:	f4 cf       	rjmp	.-24     	; 0x1260 <strtol+0x2e>
    1278:	1d 32       	cpi	r17, 0x2D	; 45
    127a:	29 f4       	brne	.+10     	; 0x1286 <strtol+0x54>
    127c:	21 96       	adiw	r28, 0x01	; 1
    127e:	f5 01       	movw	r30, r10
    1280:	11 81       	ldd	r17, Z+1	; 0x01
    1282:	01 e0       	ldi	r16, 0x01	; 1
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <strtol+0x62>
    1286:	1b 32       	cpi	r17, 0x2B	; 43
    1288:	21 f4       	brne	.+8      	; 0x1292 <strtol+0x60>
    128a:	e5 01       	movw	r28, r10
    128c:	22 96       	adiw	r28, 0x02	; 2
    128e:	f5 01       	movw	r30, r10
    1290:	11 81       	ldd	r17, Z+1	; 0x01
    1292:	00 e0       	ldi	r16, 0x00	; 0
    1294:	e1 14       	cp	r14, r1
    1296:	f1 04       	cpc	r15, r1
    1298:	09 f1       	breq	.+66     	; 0x12dc <strtol+0xaa>
    129a:	f0 e1       	ldi	r31, 0x10	; 16
    129c:	ef 16       	cp	r14, r31
    129e:	f1 04       	cpc	r15, r1
    12a0:	29 f4       	brne	.+10     	; 0x12ac <strtol+0x7a>
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <strtol+0xf0>
    12a4:	10 e3       	ldi	r17, 0x30	; 48
    12a6:	e1 14       	cp	r14, r1
    12a8:	f1 04       	cpc	r15, r1
    12aa:	21 f1       	breq	.+72     	; 0x12f4 <strtol+0xc2>
    12ac:	28 e0       	ldi	r18, 0x08	; 8
    12ae:	e2 16       	cp	r14, r18
    12b0:	f1 04       	cpc	r15, r1
    12b2:	01 f1       	breq	.+64     	; 0x12f4 <strtol+0xc2>
    12b4:	54 f4       	brge	.+20     	; 0x12ca <strtol+0x98>
    12b6:	e2 e0       	ldi	r30, 0x02	; 2
    12b8:	ee 16       	cp	r14, r30
    12ba:	f1 04       	cpc	r15, r1
    12bc:	21 f5       	brne	.+72     	; 0x1306 <strtol+0xd4>
    12be:	81 2c       	mov	r8, r1
    12c0:	91 2c       	mov	r9, r1
    12c2:	a1 2c       	mov	r10, r1
    12c4:	b0 e4       	ldi	r27, 0x40	; 64
    12c6:	bb 2e       	mov	r11, r27
    12c8:	3e c0       	rjmp	.+124    	; 0x1346 <strtol+0x114>
    12ca:	fa e0       	ldi	r31, 0x0A	; 10
    12cc:	ef 16       	cp	r14, r31
    12ce:	f1 04       	cpc	r15, r1
    12d0:	39 f0       	breq	.+14     	; 0x12e0 <strtol+0xae>
    12d2:	20 e1       	ldi	r18, 0x10	; 16
    12d4:	e2 16       	cp	r14, r18
    12d6:	f1 04       	cpc	r15, r1
    12d8:	b1 f4       	brne	.+44     	; 0x1306 <strtol+0xd4>
    12da:	30 c0       	rjmp	.+96     	; 0x133c <strtol+0x10a>
    12dc:	10 33       	cpi	r17, 0x30	; 48
    12de:	19 f1       	breq	.+70     	; 0x1326 <strtol+0xf4>
    12e0:	fa e0       	ldi	r31, 0x0A	; 10
    12e2:	ef 2e       	mov	r14, r31
    12e4:	f1 2c       	mov	r15, r1
    12e6:	ac ec       	ldi	r26, 0xCC	; 204
    12e8:	8a 2e       	mov	r8, r26
    12ea:	98 2c       	mov	r9, r8
    12ec:	a8 2c       	mov	r10, r8
    12ee:	ac e0       	ldi	r26, 0x0C	; 12
    12f0:	ba 2e       	mov	r11, r26
    12f2:	29 c0       	rjmp	.+82     	; 0x1346 <strtol+0x114>
    12f4:	78 e0       	ldi	r23, 0x08	; 8
    12f6:	e7 2e       	mov	r14, r23
    12f8:	f1 2c       	mov	r15, r1
    12fa:	81 2c       	mov	r8, r1
    12fc:	91 2c       	mov	r9, r1
    12fe:	a1 2c       	mov	r10, r1
    1300:	e0 e1       	ldi	r30, 0x10	; 16
    1302:	be 2e       	mov	r11, r30
    1304:	20 c0       	rjmp	.+64     	; 0x1346 <strtol+0x114>
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e8       	ldi	r25, 0x80	; 128
    130e:	97 01       	movw	r18, r14
    1310:	0f 2c       	mov	r0, r15
    1312:	00 0c       	add	r0, r0
    1314:	44 0b       	sbc	r20, r20
    1316:	55 0b       	sbc	r21, r21
    1318:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodsi4>
    131c:	49 01       	movw	r8, r18
    131e:	5a 01       	movw	r10, r20
    1320:	12 c0       	rjmp	.+36     	; 0x1346 <strtol+0x114>
    1322:	10 33       	cpi	r17, 0x30	; 48
    1324:	59 f4       	brne	.+22     	; 0x133c <strtol+0x10a>
    1326:	88 81       	ld	r24, Y
    1328:	8f 7d       	andi	r24, 0xDF	; 223
    132a:	88 35       	cpi	r24, 0x58	; 88
    132c:	09 f0       	breq	.+2      	; 0x1330 <strtol+0xfe>
    132e:	ba cf       	rjmp	.-140    	; 0x12a4 <strtol+0x72>
    1330:	19 81       	ldd	r17, Y+1	; 0x01
    1332:	22 96       	adiw	r28, 0x02	; 2
    1334:	02 60       	ori	r16, 0x02	; 2
    1336:	80 e1       	ldi	r24, 0x10	; 16
    1338:	e8 2e       	mov	r14, r24
    133a:	f1 2c       	mov	r15, r1
    133c:	81 2c       	mov	r8, r1
    133e:	91 2c       	mov	r9, r1
    1340:	a1 2c       	mov	r10, r1
    1342:	68 e0       	ldi	r22, 0x08	; 8
    1344:	b6 2e       	mov	r11, r22
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	cb 01       	movw	r24, r22
    134e:	27 01       	movw	r4, r14
    1350:	0f 2c       	mov	r0, r15
    1352:	00 0c       	add	r0, r0
    1354:	66 08       	sbc	r6, r6
    1356:	77 08       	sbc	r7, r7
    1358:	fe 01       	movw	r30, r28
    135a:	50 ed       	ldi	r21, 0xD0	; 208
    135c:	35 2e       	mov	r3, r21
    135e:	31 0e       	add	r3, r17
    1360:	29 e0       	ldi	r18, 0x09	; 9
    1362:	23 15       	cp	r18, r3
    1364:	70 f4       	brcc	.+28     	; 0x1382 <strtol+0x150>
    1366:	2f eb       	ldi	r18, 0xBF	; 191
    1368:	21 0f       	add	r18, r17
    136a:	2a 31       	cpi	r18, 0x1A	; 26
    136c:	18 f4       	brcc	.+6      	; 0x1374 <strtol+0x142>
    136e:	39 ec       	ldi	r19, 0xC9	; 201
    1370:	33 2e       	mov	r3, r19
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <strtol+0x14e>
    1374:	2f e9       	ldi	r18, 0x9F	; 159
    1376:	21 0f       	add	r18, r17
    1378:	2a 31       	cpi	r18, 0x1A	; 26
    137a:	18 f5       	brcc	.+70     	; 0x13c2 <strtol+0x190>
    137c:	29 ea       	ldi	r18, 0xA9	; 169
    137e:	32 2e       	mov	r3, r18
    1380:	31 0e       	add	r3, r17
    1382:	23 2d       	mov	r18, r3
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	2e 15       	cp	r18, r14
    1388:	3f 05       	cpc	r19, r15
    138a:	dc f4       	brge	.+54     	; 0x13c2 <strtol+0x190>
    138c:	47 fd       	sbrc	r20, 7
    138e:	16 c0       	rjmp	.+44     	; 0x13bc <strtol+0x18a>
    1390:	86 16       	cp	r8, r22
    1392:	97 06       	cpc	r9, r23
    1394:	a8 06       	cpc	r10, r24
    1396:	b9 06       	cpc	r11, r25
    1398:	70 f0       	brcs	.+28     	; 0x13b6 <strtol+0x184>
    139a:	a3 01       	movw	r20, r6
    139c:	92 01       	movw	r18, r4
    139e:	0e 94 8c 10 	call	0x2118	; 0x2118 <__mulsi3>
    13a2:	63 0d       	add	r22, r3
    13a4:	71 1d       	adc	r23, r1
    13a6:	81 1d       	adc	r24, r1
    13a8:	91 1d       	adc	r25, r1
    13aa:	61 30       	cpi	r22, 0x01	; 1
    13ac:	71 05       	cpc	r23, r1
    13ae:	81 05       	cpc	r24, r1
    13b0:	20 e8       	ldi	r18, 0x80	; 128
    13b2:	92 07       	cpc	r25, r18
    13b4:	10 f0       	brcs	.+4      	; 0x13ba <strtol+0x188>
    13b6:	4f ef       	ldi	r20, 0xFF	; 255
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <strtol+0x18a>
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	21 96       	adiw	r28, 0x01	; 1
    13be:	10 81       	ld	r17, Z
    13c0:	cb cf       	rjmp	.-106    	; 0x1358 <strtol+0x126>
    13c2:	20 2f       	mov	r18, r16
    13c4:	21 70       	andi	r18, 0x01	; 1
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <strtol+0x1b6>
    13cc:	44 23       	and	r20, r20
    13ce:	29 f0       	breq	.+10     	; 0x13da <strtol+0x1a8>
    13d0:	21 97       	sbiw	r28, 0x01	; 1
    13d2:	f6 01       	movw	r30, r12
    13d4:	c0 83       	st	Z, r28
    13d6:	d1 83       	std	Z+1, r29	; 0x01
    13d8:	07 c0       	rjmp	.+14     	; 0x13e8 <strtol+0x1b6>
    13da:	01 ff       	sbrs	r16, 1
    13dc:	19 c0       	rjmp	.+50     	; 0x1410 <strtol+0x1de>
    13de:	22 97       	sbiw	r28, 0x02	; 2
    13e0:	f6 01       	movw	r30, r12
    13e2:	c0 83       	st	Z, r28
    13e4:	d1 83       	std	Z+1, r29	; 0x01
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <strtol+0x1de>
    13e8:	47 ff       	sbrs	r20, 7
    13ea:	12 c0       	rjmp	.+36     	; 0x1410 <strtol+0x1de>
    13ec:	22 23       	and	r18, r18
    13ee:	29 f0       	breq	.+10     	; 0x13fa <strtol+0x1c8>
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e8       	ldi	r25, 0x80	; 128
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <strtol+0x1d0>
    13fa:	6f ef       	ldi	r22, 0xFF	; 255
    13fc:	7f ef       	ldi	r23, 0xFF	; 255
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f e7       	ldi	r25, 0x7F	; 127
    1402:	22 e2       	ldi	r18, 0x22	; 34
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	20 93 42 38 	sts	0x3842, r18	; 0x803842 <errno>
    140a:	30 93 43 38 	sts	0x3843, r19	; 0x803843 <errno+0x1>
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <strtol+0x1f0>
    1410:	22 23       	and	r18, r18
    1412:	81 f0       	breq	.+32     	; 0x1434 <strtol+0x202>
    1414:	90 95       	com	r25
    1416:	80 95       	com	r24
    1418:	70 95       	com	r23
    141a:	61 95       	neg	r22
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	8f 4f       	sbci	r24, 0xFF	; 255
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	46 2f       	mov	r20, r22
    1424:	37 2f       	mov	r19, r23
    1426:	28 2f       	mov	r18, r24
    1428:	12 c0       	rjmp	.+36     	; 0x144e <strtol+0x21c>
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0d c0       	rjmp	.+26     	; 0x144e <strtol+0x21c>
    1434:	97 ff       	sbrs	r25, 7
    1436:	f5 cf       	rjmp	.-22     	; 0x1422 <strtol+0x1f0>
    1438:	82 e2       	ldi	r24, 0x22	; 34
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <errno>
    1440:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <errno+0x1>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f e7       	ldi	r25, 0x7F	; 127
    144c:	ea cf       	rjmp	.-44     	; 0x1422 <strtol+0x1f0>
    144e:	64 2f       	mov	r22, r20
    1450:	73 2f       	mov	r23, r19
    1452:	82 2f       	mov	r24, r18
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	e1 e1       	ldi	r30, 0x11	; 17
    145a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__+0x2>

0000145e <isspace>:
    145e:	91 11       	cpse	r25, r1
    1460:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__ctype_isfalse>
    1464:	80 32       	cpi	r24, 0x20	; 32
    1466:	19 f0       	breq	.+6      	; 0x146e <isspace+0x10>
    1468:	89 50       	subi	r24, 0x09	; 9
    146a:	85 50       	subi	r24, 0x05	; 5
    146c:	c8 f7       	brcc	.-14     	; 0x1460 <isspace+0x2>
    146e:	08 95       	ret

00001470 <strncpy>:
    1470:	fb 01       	movw	r30, r22
    1472:	dc 01       	movw	r26, r24
    1474:	41 50       	subi	r20, 0x01	; 1
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	48 f0       	brcs	.+18     	; 0x148c <strncpy+0x1c>
    147a:	01 90       	ld	r0, Z+
    147c:	0d 92       	st	X+, r0
    147e:	00 20       	and	r0, r0
    1480:	c9 f7       	brne	.-14     	; 0x1474 <strncpy+0x4>
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <strncpy+0x16>
    1484:	1d 92       	st	X+, r1
    1486:	41 50       	subi	r20, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	e0 f7       	brcc	.-8      	; 0x1484 <strncpy+0x14>
    148c:	08 95       	ret

0000148e <strstr>:
    148e:	fb 01       	movw	r30, r22
    1490:	51 91       	ld	r21, Z+
    1492:	55 23       	and	r21, r21
    1494:	a9 f0       	breq	.+42     	; 0x14c0 <strstr+0x32>
    1496:	bf 01       	movw	r22, r30
    1498:	dc 01       	movw	r26, r24
    149a:	4d 91       	ld	r20, X+
    149c:	45 17       	cp	r20, r21
    149e:	41 11       	cpse	r20, r1
    14a0:	e1 f7       	brne	.-8      	; 0x149a <strstr+0xc>
    14a2:	59 f4       	brne	.+22     	; 0x14ba <strstr+0x2c>
    14a4:	cd 01       	movw	r24, r26
    14a6:	01 90       	ld	r0, Z+
    14a8:	00 20       	and	r0, r0
    14aa:	49 f0       	breq	.+18     	; 0x14be <strstr+0x30>
    14ac:	4d 91       	ld	r20, X+
    14ae:	40 15       	cp	r20, r0
    14b0:	41 11       	cpse	r20, r1
    14b2:	c9 f3       	breq	.-14     	; 0x14a6 <strstr+0x18>
    14b4:	fb 01       	movw	r30, r22
    14b6:	41 11       	cpse	r20, r1
    14b8:	ef cf       	rjmp	.-34     	; 0x1498 <strstr+0xa>
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	08 95       	ret

000014c2 <printf>:
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e6       	ldi	r30, 0x67	; 103
    14c8:	fa e0       	ldi	r31, 0x0A	; 10
    14ca:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x20>
    14ce:	ae 01       	movw	r20, r28
    14d0:	4b 5f       	subi	r20, 0xFB	; 251
    14d2:	5f 4f       	sbci	r21, 0xFF	; 255
    14d4:	fa 01       	movw	r30, r20
    14d6:	61 91       	ld	r22, Z+
    14d8:	71 91       	ld	r23, Z+
    14da:	af 01       	movw	r20, r30
    14dc:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <__iob+0x2>
    14e0:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <__iob+0x3>
    14e4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <vfprintf>
    14e8:	e2 e0       	ldi	r30, 0x02	; 2
    14ea:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__+0x20>

000014ee <putchar>:
    14ee:	60 91 3e 38 	lds	r22, 0x383E	; 0x80383e <__iob+0x2>
    14f2:	70 91 3f 38 	lds	r23, 0x383F	; 0x80383f <__iob+0x3>
    14f6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    14fa:	08 95       	ret

000014fc <puts>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <__iob+0x2>
    1508:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <__iob+0x3>
    150c:	23 81       	ldd	r18, Z+3	; 0x03
    150e:	21 ff       	sbrs	r18, 1
    1510:	1b c0       	rjmp	.+54     	; 0x1548 <puts+0x4c>
    1512:	8c 01       	movw	r16, r24
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    1516:	c0 e0       	ldi	r28, 0x00	; 0
    1518:	f8 01       	movw	r30, r16
    151a:	81 91       	ld	r24, Z+
    151c:	8f 01       	movw	r16, r30
    151e:	60 91 3e 38 	lds	r22, 0x383E	; 0x80383e <__iob+0x2>
    1522:	70 91 3f 38 	lds	r23, 0x383F	; 0x80383f <__iob+0x3>
    1526:	db 01       	movw	r26, r22
    1528:	18 96       	adiw	r26, 0x08	; 8
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	19 97       	sbiw	r26, 0x09	; 9
    1530:	88 23       	and	r24, r24
    1532:	31 f0       	breq	.+12     	; 0x1540 <puts+0x44>
    1534:	09 95       	icall
    1536:	89 2b       	or	r24, r25
    1538:	79 f3       	breq	.-34     	; 0x1518 <puts+0x1c>
    153a:	df ef       	ldi	r29, 0xFF	; 255
    153c:	cf ef       	ldi	r28, 0xFF	; 255
    153e:	ec cf       	rjmp	.-40     	; 0x1518 <puts+0x1c>
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	09 95       	icall
    1544:	89 2b       	or	r24, r25
    1546:	19 f0       	breq	.+6      	; 0x154e <puts+0x52>
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <puts+0x56>
    154e:	8d 2f       	mov	r24, r29
    1550:	9c 2f       	mov	r25, r28
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <sprintf>:
    155c:	ae e0       	ldi	r26, 0x0E	; 14
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 eb       	ldi	r30, 0xB4	; 180
    1562:	fa e0       	ldi	r31, 0x0A	; 10
    1564:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__+0x1c>
    1568:	0d 89       	ldd	r16, Y+21	; 0x15
    156a:	1e 89       	ldd	r17, Y+22	; 0x16
    156c:	86 e0       	ldi	r24, 0x06	; 6
    156e:	8c 83       	std	Y+4, r24	; 0x04
    1570:	09 83       	std	Y+1, r16	; 0x01
    1572:	1a 83       	std	Y+2, r17	; 0x02
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	9f e7       	ldi	r25, 0x7F	; 127
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	ae 01       	movw	r20, r28
    157e:	47 5e       	subi	r20, 0xE7	; 231
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	6f 89       	ldd	r22, Y+23	; 0x17
    1584:	78 8d       	ldd	r23, Y+24	; 0x18
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <vfprintf>
    158e:	ef 81       	ldd	r30, Y+7	; 0x07
    1590:	f8 85       	ldd	r31, Y+8	; 0x08
    1592:	e0 0f       	add	r30, r16
    1594:	f1 1f       	adc	r31, r17
    1596:	10 82       	st	Z, r1
    1598:	2e 96       	adiw	r28, 0x0e	; 14
    159a:	e4 e0       	ldi	r30, 0x04	; 4
    159c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__epilogue_restores__+0x1c>

000015a0 <sscanf>:
    15a0:	ae e0       	ldi	r26, 0x0E	; 14
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e6 ed       	ldi	r30, 0xD6	; 214
    15a6:	fa e0       	ldi	r31, 0x0A	; 10
    15a8:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x20>
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	ae 01       	movw	r20, r28
    15ba:	49 5e       	subi	r20, 0xE9	; 233
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	6d 89       	ldd	r22, Y+21	; 0x15
    15c0:	7e 89       	ldd	r23, Y+22	; 0x16
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <vfscanf>
    15ca:	2e 96       	adiw	r28, 0x0e	; 14
    15cc:	e2 e0       	ldi	r30, 0x02	; 2
    15ce:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__+0x20>

000015d2 <vfprintf>:
    15d2:	ab e0       	ldi	r26, 0x0B	; 11
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ef ee       	ldi	r30, 0xEF	; 239
    15d8:	fa e0       	ldi	r31, 0x0A	; 10
    15da:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
    15de:	6c 01       	movw	r12, r24
    15e0:	7b 01       	movw	r14, r22
    15e2:	8a 01       	movw	r16, r20
    15e4:	fc 01       	movw	r30, r24
    15e6:	16 82       	std	Z+6, r1	; 0x06
    15e8:	17 82       	std	Z+7, r1	; 0x07
    15ea:	83 81       	ldd	r24, Z+3	; 0x03
    15ec:	81 ff       	sbrs	r24, 1
    15ee:	cc c1       	rjmp	.+920    	; 0x1988 <vfprintf+0x3b6>
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	3c 01       	movw	r6, r24
    15f6:	f6 01       	movw	r30, r12
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	f7 01       	movw	r30, r14
    15fc:	93 fd       	sbrc	r25, 3
    15fe:	85 91       	lpm	r24, Z+
    1600:	93 ff       	sbrs	r25, 3
    1602:	81 91       	ld	r24, Z+
    1604:	7f 01       	movw	r14, r30
    1606:	88 23       	and	r24, r24
    1608:	09 f4       	brne	.+2      	; 0x160c <vfprintf+0x3a>
    160a:	ba c1       	rjmp	.+884    	; 0x1980 <vfprintf+0x3ae>
    160c:	85 32       	cpi	r24, 0x25	; 37
    160e:	39 f4       	brne	.+14     	; 0x161e <vfprintf+0x4c>
    1610:	93 fd       	sbrc	r25, 3
    1612:	85 91       	lpm	r24, Z+
    1614:	93 ff       	sbrs	r25, 3
    1616:	81 91       	ld	r24, Z+
    1618:	7f 01       	movw	r14, r30
    161a:	85 32       	cpi	r24, 0x25	; 37
    161c:	29 f4       	brne	.+10     	; 0x1628 <vfprintf+0x56>
    161e:	b6 01       	movw	r22, r12
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1626:	e7 cf       	rjmp	.-50     	; 0x15f6 <vfprintf+0x24>
    1628:	91 2c       	mov	r9, r1
    162a:	21 2c       	mov	r2, r1
    162c:	31 2c       	mov	r3, r1
    162e:	ff e1       	ldi	r31, 0x1F	; 31
    1630:	f3 15       	cp	r31, r3
    1632:	d8 f0       	brcs	.+54     	; 0x166a <vfprintf+0x98>
    1634:	8b 32       	cpi	r24, 0x2B	; 43
    1636:	79 f0       	breq	.+30     	; 0x1656 <vfprintf+0x84>
    1638:	38 f4       	brcc	.+14     	; 0x1648 <vfprintf+0x76>
    163a:	80 32       	cpi	r24, 0x20	; 32
    163c:	79 f0       	breq	.+30     	; 0x165c <vfprintf+0x8a>
    163e:	83 32       	cpi	r24, 0x23	; 35
    1640:	a1 f4       	brne	.+40     	; 0x166a <vfprintf+0x98>
    1642:	23 2d       	mov	r18, r3
    1644:	20 61       	ori	r18, 0x10	; 16
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <vfprintf+0xb0>
    1648:	8d 32       	cpi	r24, 0x2D	; 45
    164a:	61 f0       	breq	.+24     	; 0x1664 <vfprintf+0x92>
    164c:	80 33       	cpi	r24, 0x30	; 48
    164e:	69 f4       	brne	.+26     	; 0x166a <vfprintf+0x98>
    1650:	23 2d       	mov	r18, r3
    1652:	21 60       	ori	r18, 0x01	; 1
    1654:	16 c0       	rjmp	.+44     	; 0x1682 <vfprintf+0xb0>
    1656:	83 2d       	mov	r24, r3
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	38 2e       	mov	r3, r24
    165c:	e3 2d       	mov	r30, r3
    165e:	e4 60       	ori	r30, 0x04	; 4
    1660:	3e 2e       	mov	r3, r30
    1662:	2a c0       	rjmp	.+84     	; 0x16b8 <vfprintf+0xe6>
    1664:	f3 2d       	mov	r31, r3
    1666:	f8 60       	ori	r31, 0x08	; 8
    1668:	1d c0       	rjmp	.+58     	; 0x16a4 <vfprintf+0xd2>
    166a:	37 fc       	sbrc	r3, 7
    166c:	2d c0       	rjmp	.+90     	; 0x16c8 <vfprintf+0xf6>
    166e:	20 ed       	ldi	r18, 0xD0	; 208
    1670:	28 0f       	add	r18, r24
    1672:	2a 30       	cpi	r18, 0x0A	; 10
    1674:	40 f0       	brcs	.+16     	; 0x1686 <vfprintf+0xb4>
    1676:	8e 32       	cpi	r24, 0x2E	; 46
    1678:	b9 f4       	brne	.+46     	; 0x16a8 <vfprintf+0xd6>
    167a:	36 fc       	sbrc	r3, 6
    167c:	81 c1       	rjmp	.+770    	; 0x1980 <vfprintf+0x3ae>
    167e:	23 2d       	mov	r18, r3
    1680:	20 64       	ori	r18, 0x40	; 64
    1682:	32 2e       	mov	r3, r18
    1684:	19 c0       	rjmp	.+50     	; 0x16b8 <vfprintf+0xe6>
    1686:	36 fe       	sbrs	r3, 6
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <vfprintf+0xc4>
    168a:	8a e0       	ldi	r24, 0x0A	; 10
    168c:	98 9e       	mul	r9, r24
    168e:	20 0d       	add	r18, r0
    1690:	11 24       	eor	r1, r1
    1692:	92 2e       	mov	r9, r18
    1694:	11 c0       	rjmp	.+34     	; 0x16b8 <vfprintf+0xe6>
    1696:	ea e0       	ldi	r30, 0x0A	; 10
    1698:	2e 9e       	mul	r2, r30
    169a:	20 0d       	add	r18, r0
    169c:	11 24       	eor	r1, r1
    169e:	22 2e       	mov	r2, r18
    16a0:	f3 2d       	mov	r31, r3
    16a2:	f0 62       	ori	r31, 0x20	; 32
    16a4:	3f 2e       	mov	r3, r31
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <vfprintf+0xe6>
    16a8:	8c 36       	cpi	r24, 0x6C	; 108
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <vfprintf+0xe2>
    16ac:	83 2d       	mov	r24, r3
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	38 2e       	mov	r3, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0xe6>
    16b4:	88 36       	cpi	r24, 0x68	; 104
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <vfprintf+0xf6>
    16b8:	f7 01       	movw	r30, r14
    16ba:	93 fd       	sbrc	r25, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	93 ff       	sbrs	r25, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	7f 01       	movw	r14, r30
    16c4:	81 11       	cpse	r24, r1
    16c6:	b3 cf       	rjmp	.-154    	; 0x162e <vfprintf+0x5c>
    16c8:	98 2f       	mov	r25, r24
    16ca:	9f 7d       	andi	r25, 0xDF	; 223
    16cc:	95 54       	subi	r25, 0x45	; 69
    16ce:	93 30       	cpi	r25, 0x03	; 3
    16d0:	28 f4       	brcc	.+10     	; 0x16dc <vfprintf+0x10a>
    16d2:	0c 5f       	subi	r16, 0xFC	; 252
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	9f e3       	ldi	r25, 0x3F	; 63
    16d8:	99 83       	std	Y+1, r25	; 0x01
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <vfprintf+0x124>
    16dc:	83 36       	cpi	r24, 0x63	; 99
    16de:	31 f0       	breq	.+12     	; 0x16ec <vfprintf+0x11a>
    16e0:	83 37       	cpi	r24, 0x73	; 115
    16e2:	71 f0       	breq	.+28     	; 0x1700 <vfprintf+0x12e>
    16e4:	83 35       	cpi	r24, 0x53	; 83
    16e6:	09 f0       	breq	.+2      	; 0x16ea <vfprintf+0x118>
    16e8:	59 c0       	rjmp	.+178    	; 0x179c <vfprintf+0x1ca>
    16ea:	21 c0       	rjmp	.+66     	; 0x172e <vfprintf+0x15c>
    16ec:	f8 01       	movw	r30, r16
    16ee:	80 81       	ld	r24, Z
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	0e 5f       	subi	r16, 0xFE	; 254
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	88 24       	eor	r8, r8
    16f8:	83 94       	inc	r8
    16fa:	91 2c       	mov	r9, r1
    16fc:	53 01       	movw	r10, r6
    16fe:	13 c0       	rjmp	.+38     	; 0x1726 <vfprintf+0x154>
    1700:	28 01       	movw	r4, r16
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	4f 0e       	add	r4, r31
    1706:	51 1c       	adc	r5, r1
    1708:	f8 01       	movw	r30, r16
    170a:	a0 80       	ld	r10, Z
    170c:	b1 80       	ldd	r11, Z+1	; 0x01
    170e:	36 fe       	sbrs	r3, 6
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x146>
    1712:	69 2d       	mov	r22, r9
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x14a>
    1718:	6f ef       	ldi	r22, 0xFF	; 255
    171a:	7f ef       	ldi	r23, 0xFF	; 255
    171c:	c5 01       	movw	r24, r10
    171e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strnlen>
    1722:	4c 01       	movw	r8, r24
    1724:	82 01       	movw	r16, r4
    1726:	f3 2d       	mov	r31, r3
    1728:	ff 77       	andi	r31, 0x7F	; 127
    172a:	3f 2e       	mov	r3, r31
    172c:	16 c0       	rjmp	.+44     	; 0x175a <vfprintf+0x188>
    172e:	28 01       	movw	r4, r16
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	42 0e       	add	r4, r18
    1734:	51 1c       	adc	r5, r1
    1736:	f8 01       	movw	r30, r16
    1738:	a0 80       	ld	r10, Z
    173a:	b1 80       	ldd	r11, Z+1	; 0x01
    173c:	36 fe       	sbrs	r3, 6
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <vfprintf+0x174>
    1740:	69 2d       	mov	r22, r9
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x178>
    1746:	6f ef       	ldi	r22, 0xFF	; 255
    1748:	7f ef       	ldi	r23, 0xFF	; 255
    174a:	c5 01       	movw	r24, r10
    174c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <strnlen_P>
    1750:	4c 01       	movw	r8, r24
    1752:	f3 2d       	mov	r31, r3
    1754:	f0 68       	ori	r31, 0x80	; 128
    1756:	3f 2e       	mov	r3, r31
    1758:	82 01       	movw	r16, r4
    175a:	33 fc       	sbrc	r3, 3
    175c:	1b c0       	rjmp	.+54     	; 0x1794 <vfprintf+0x1c2>
    175e:	82 2d       	mov	r24, r2
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	88 16       	cp	r8, r24
    1764:	99 06       	cpc	r9, r25
    1766:	b0 f4       	brcc	.+44     	; 0x1794 <vfprintf+0x1c2>
    1768:	b6 01       	movw	r22, r12
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1772:	2a 94       	dec	r2
    1774:	f4 cf       	rjmp	.-24     	; 0x175e <vfprintf+0x18c>
    1776:	f5 01       	movw	r30, r10
    1778:	37 fc       	sbrc	r3, 7
    177a:	85 91       	lpm	r24, Z+
    177c:	37 fe       	sbrs	r3, 7
    177e:	81 91       	ld	r24, Z+
    1780:	5f 01       	movw	r10, r30
    1782:	b6 01       	movw	r22, r12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    178a:	21 10       	cpse	r2, r1
    178c:	2a 94       	dec	r2
    178e:	21 e0       	ldi	r18, 0x01	; 1
    1790:	82 1a       	sub	r8, r18
    1792:	91 08       	sbc	r9, r1
    1794:	81 14       	cp	r8, r1
    1796:	91 04       	cpc	r9, r1
    1798:	71 f7       	brne	.-36     	; 0x1776 <vfprintf+0x1a4>
    179a:	e8 c0       	rjmp	.+464    	; 0x196c <vfprintf+0x39a>
    179c:	84 36       	cpi	r24, 0x64	; 100
    179e:	11 f0       	breq	.+4      	; 0x17a4 <vfprintf+0x1d2>
    17a0:	89 36       	cpi	r24, 0x69	; 105
    17a2:	41 f5       	brne	.+80     	; 0x17f4 <vfprintf+0x222>
    17a4:	f8 01       	movw	r30, r16
    17a6:	37 fe       	sbrs	r3, 7
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <vfprintf+0x1e6>
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	0c 5f       	subi	r16, 0xFC	; 252
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	08 c0       	rjmp	.+16     	; 0x17c8 <vfprintf+0x1f6>
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	07 2e       	mov	r0, r23
    17be:	00 0c       	add	r0, r0
    17c0:	88 0b       	sbc	r24, r24
    17c2:	99 0b       	sbc	r25, r25
    17c4:	0e 5f       	subi	r16, 0xFE	; 254
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	f3 2d       	mov	r31, r3
    17ca:	ff 76       	andi	r31, 0x6F	; 111
    17cc:	3f 2e       	mov	r3, r31
    17ce:	97 ff       	sbrs	r25, 7
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <vfprintf+0x212>
    17d2:	90 95       	com	r25
    17d4:	80 95       	com	r24
    17d6:	70 95       	com	r23
    17d8:	61 95       	neg	r22
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	8f 4f       	sbci	r24, 0xFF	; 255
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	f0 68       	ori	r31, 0x80	; 128
    17e2:	3f 2e       	mov	r3, r31
    17e4:	2a e0       	ldi	r18, 0x0A	; 10
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	a3 01       	movw	r20, r6
    17ea:	0e 94 2e 10 	call	0x205c	; 0x205c <__ultoa_invert>
    17ee:	88 2e       	mov	r8, r24
    17f0:	86 18       	sub	r8, r6
    17f2:	45 c0       	rjmp	.+138    	; 0x187e <vfprintf+0x2ac>
    17f4:	85 37       	cpi	r24, 0x75	; 117
    17f6:	31 f4       	brne	.+12     	; 0x1804 <vfprintf+0x232>
    17f8:	23 2d       	mov	r18, r3
    17fa:	2f 7e       	andi	r18, 0xEF	; 239
    17fc:	b2 2e       	mov	r11, r18
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	25 c0       	rjmp	.+74     	; 0x184e <vfprintf+0x27c>
    1804:	93 2d       	mov	r25, r3
    1806:	99 7f       	andi	r25, 0xF9	; 249
    1808:	b9 2e       	mov	r11, r25
    180a:	8f 36       	cpi	r24, 0x6F	; 111
    180c:	c1 f0       	breq	.+48     	; 0x183e <vfprintf+0x26c>
    180e:	18 f4       	brcc	.+6      	; 0x1816 <vfprintf+0x244>
    1810:	88 35       	cpi	r24, 0x58	; 88
    1812:	79 f0       	breq	.+30     	; 0x1832 <vfprintf+0x260>
    1814:	b5 c0       	rjmp	.+362    	; 0x1980 <vfprintf+0x3ae>
    1816:	80 37       	cpi	r24, 0x70	; 112
    1818:	19 f0       	breq	.+6      	; 0x1820 <vfprintf+0x24e>
    181a:	88 37       	cpi	r24, 0x78	; 120
    181c:	21 f0       	breq	.+8      	; 0x1826 <vfprintf+0x254>
    181e:	b0 c0       	rjmp	.+352    	; 0x1980 <vfprintf+0x3ae>
    1820:	e9 2f       	mov	r30, r25
    1822:	e0 61       	ori	r30, 0x10	; 16
    1824:	be 2e       	mov	r11, r30
    1826:	b4 fe       	sbrs	r11, 4
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x272>
    182a:	fb 2d       	mov	r31, r11
    182c:	f4 60       	ori	r31, 0x04	; 4
    182e:	bf 2e       	mov	r11, r31
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x272>
    1832:	34 fe       	sbrs	r3, 4
    1834:	0a c0       	rjmp	.+20     	; 0x184a <vfprintf+0x278>
    1836:	29 2f       	mov	r18, r25
    1838:	26 60       	ori	r18, 0x06	; 6
    183a:	b2 2e       	mov	r11, r18
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x278>
    183e:	28 e0       	ldi	r18, 0x08	; 8
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x27c>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x27c>
    184a:	20 e1       	ldi	r18, 0x10	; 16
    184c:	32 e0       	ldi	r19, 0x02	; 2
    184e:	f8 01       	movw	r30, r16
    1850:	b7 fe       	sbrs	r11, 7
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <vfprintf+0x290>
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	0c 5f       	subi	r16, 0xFC	; 252
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x29c>
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 5f       	subi	r16, 0xFE	; 254
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	a3 01       	movw	r20, r6
    1870:	0e 94 2e 10 	call	0x205c	; 0x205c <__ultoa_invert>
    1874:	88 2e       	mov	r8, r24
    1876:	86 18       	sub	r8, r6
    1878:	fb 2d       	mov	r31, r11
    187a:	ff 77       	andi	r31, 0x7F	; 127
    187c:	3f 2e       	mov	r3, r31
    187e:	36 fe       	sbrs	r3, 6
    1880:	0d c0       	rjmp	.+26     	; 0x189c <vfprintf+0x2ca>
    1882:	23 2d       	mov	r18, r3
    1884:	2e 7f       	andi	r18, 0xFE	; 254
    1886:	a2 2e       	mov	r10, r18
    1888:	89 14       	cp	r8, r9
    188a:	58 f4       	brcc	.+22     	; 0x18a2 <vfprintf+0x2d0>
    188c:	34 fe       	sbrs	r3, 4
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <vfprintf+0x2d4>
    1890:	32 fc       	sbrc	r3, 2
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <vfprintf+0x2d4>
    1894:	83 2d       	mov	r24, r3
    1896:	8e 7e       	andi	r24, 0xEE	; 238
    1898:	a8 2e       	mov	r10, r24
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <vfprintf+0x2d4>
    189c:	b8 2c       	mov	r11, r8
    189e:	a3 2c       	mov	r10, r3
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <vfprintf+0x2d6>
    18a2:	b8 2c       	mov	r11, r8
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <vfprintf+0x2d6>
    18a6:	b9 2c       	mov	r11, r9
    18a8:	a4 fe       	sbrs	r10, 4
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <vfprintf+0x2f8>
    18ac:	fe 01       	movw	r30, r28
    18ae:	e8 0d       	add	r30, r8
    18b0:	f1 1d       	adc	r31, r1
    18b2:	80 81       	ld	r24, Z
    18b4:	80 33       	cpi	r24, 0x30	; 48
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <vfprintf+0x2ee>
    18b8:	9a 2d       	mov	r25, r10
    18ba:	99 7e       	andi	r25, 0xE9	; 233
    18bc:	a9 2e       	mov	r10, r25
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x300>
    18c0:	a2 fe       	sbrs	r10, 2
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x2fe>
    18c4:	b3 94       	inc	r11
    18c6:	b3 94       	inc	r11
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <vfprintf+0x300>
    18ca:	8a 2d       	mov	r24, r10
    18cc:	86 78       	andi	r24, 0x86	; 134
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x300>
    18d0:	b3 94       	inc	r11
    18d2:	a3 fc       	sbrc	r10, 3
    18d4:	11 c0       	rjmp	.+34     	; 0x18f8 <vfprintf+0x326>
    18d6:	a0 fe       	sbrs	r10, 0
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x314>
    18da:	b2 14       	cp	r11, r2
    18dc:	88 f4       	brcc	.+34     	; 0x1900 <vfprintf+0x32e>
    18de:	28 0c       	add	r2, r8
    18e0:	92 2c       	mov	r9, r2
    18e2:	9b 18       	sub	r9, r11
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <vfprintf+0x330>
    18e6:	b2 14       	cp	r11, r2
    18e8:	60 f4       	brcc	.+24     	; 0x1902 <vfprintf+0x330>
    18ea:	b6 01       	movw	r22, r12
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    18f4:	b3 94       	inc	r11
    18f6:	f7 cf       	rjmp	.-18     	; 0x18e6 <vfprintf+0x314>
    18f8:	b2 14       	cp	r11, r2
    18fa:	18 f4       	brcc	.+6      	; 0x1902 <vfprintf+0x330>
    18fc:	2b 18       	sub	r2, r11
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x332>
    1900:	98 2c       	mov	r9, r8
    1902:	21 2c       	mov	r2, r1
    1904:	a4 fe       	sbrs	r10, 4
    1906:	10 c0       	rjmp	.+32     	; 0x1928 <vfprintf+0x356>
    1908:	b6 01       	movw	r22, r12
    190a:	80 e3       	ldi	r24, 0x30	; 48
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1912:	a2 fe       	sbrs	r10, 2
    1914:	17 c0       	rjmp	.+46     	; 0x1944 <vfprintf+0x372>
    1916:	a1 fc       	sbrc	r10, 1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <vfprintf+0x34e>
    191a:	88 e7       	ldi	r24, 0x78	; 120
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <vfprintf+0x352>
    1920:	88 e5       	ldi	r24, 0x58	; 88
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	b6 01       	movw	r22, r12
    1926:	0c c0       	rjmp	.+24     	; 0x1940 <vfprintf+0x36e>
    1928:	8a 2d       	mov	r24, r10
    192a:	86 78       	andi	r24, 0x86	; 134
    192c:	59 f0       	breq	.+22     	; 0x1944 <vfprintf+0x372>
    192e:	a1 fe       	sbrs	r10, 1
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x364>
    1932:	8b e2       	ldi	r24, 0x2B	; 43
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <vfprintf+0x366>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	a7 fc       	sbrc	r10, 7
    193a:	8d e2       	ldi	r24, 0x2D	; 45
    193c:	b6 01       	movw	r22, r12
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1944:	89 14       	cp	r8, r9
    1946:	38 f4       	brcc	.+14     	; 0x1956 <vfprintf+0x384>
    1948:	b6 01       	movw	r22, r12
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1952:	9a 94       	dec	r9
    1954:	f7 cf       	rjmp	.-18     	; 0x1944 <vfprintf+0x372>
    1956:	8a 94       	dec	r8
    1958:	f3 01       	movw	r30, r6
    195a:	e8 0d       	add	r30, r8
    195c:	f1 1d       	adc	r31, r1
    195e:	80 81       	ld	r24, Z
    1960:	b6 01       	movw	r22, r12
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    1968:	81 10       	cpse	r8, r1
    196a:	f5 cf       	rjmp	.-22     	; 0x1956 <vfprintf+0x384>
    196c:	22 20       	and	r2, r2
    196e:	09 f4       	brne	.+2      	; 0x1972 <vfprintf+0x3a0>
    1970:	42 ce       	rjmp	.-892    	; 0x15f6 <vfprintf+0x24>
    1972:	b6 01       	movw	r22, r12
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <fputc>
    197c:	2a 94       	dec	r2
    197e:	f6 cf       	rjmp	.-20     	; 0x196c <vfprintf+0x39a>
    1980:	f6 01       	movw	r30, r12
    1982:	86 81       	ldd	r24, Z+6	; 0x06
    1984:	97 81       	ldd	r25, Z+7	; 0x07
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x3ba>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	2b 96       	adiw	r28, 0x0b	; 11
    198e:	e2 e1       	ldi	r30, 0x12	; 18
    1990:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__>

00001994 <putval>:
    1994:	20 fd       	sbrc	r18, 0
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <putval+0x16>
    1998:	fc 01       	movw	r30, r24
    199a:	23 fd       	sbrc	r18, 3
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <putval+0x14>
    199e:	22 ff       	sbrs	r18, 2
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <putval+0x12>
    19a2:	73 83       	std	Z+3, r23	; 0x03
    19a4:	62 83       	std	Z+2, r22	; 0x02
    19a6:	51 83       	std	Z+1, r21	; 0x01
    19a8:	40 83       	st	Z, r20
    19aa:	08 95       	ret

000019ac <mulacc>:
    19ac:	44 fd       	sbrc	r20, 4
    19ae:	17 c0       	rjmp	.+46     	; 0x19de <mulacc+0x32>
    19b0:	46 fd       	sbrc	r20, 6
    19b2:	17 c0       	rjmp	.+46     	; 0x19e2 <mulacc+0x36>
    19b4:	ab 01       	movw	r20, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	da 01       	movw	r26, r20
    19ba:	fb 01       	movw	r30, r22
    19bc:	aa 0f       	add	r26, r26
    19be:	bb 1f       	adc	r27, r27
    19c0:	ee 1f       	adc	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	10 94       	com	r1
    19c6:	d1 f7       	brne	.-12     	; 0x19bc <mulacc+0x10>
    19c8:	4a 0f       	add	r20, r26
    19ca:	5b 1f       	adc	r21, r27
    19cc:	6e 1f       	adc	r22, r30
    19ce:	7f 1f       	adc	r23, r31
    19d0:	cb 01       	movw	r24, r22
    19d2:	ba 01       	movw	r22, r20
    19d4:	66 0f       	add	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <mulacc+0x44>
    19de:	33 e0       	ldi	r19, 0x03	; 3
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <mulacc+0x38>
    19e2:	34 e0       	ldi	r19, 0x04	; 4
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	31 50       	subi	r19, 0x01	; 1
    19ee:	d1 f7       	brne	.-12     	; 0x19e4 <mulacc+0x38>
    19f0:	62 0f       	add	r22, r18
    19f2:	71 1d       	adc	r23, r1
    19f4:	81 1d       	adc	r24, r1
    19f6:	91 1d       	adc	r25, r1
    19f8:	08 95       	ret

000019fa <skip_spaces>:
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	8c 01       	movw	r16, r24
    1a04:	c8 01       	movw	r24, r16
    1a06:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	97 fd       	sbrc	r25, 7
    1a0e:	08 c0       	rjmp	.+16     	; 0x1a20 <skip_spaces+0x26>
    1a10:	0e 94 2f 0a 	call	0x145e	; 0x145e <isspace>
    1a14:	89 2b       	or	r24, r25
    1a16:	b1 f7       	brne	.-20     	; 0x1a04 <skip_spaces+0xa>
    1a18:	b8 01       	movw	r22, r16
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	0e 94 15 10 	call	0x202a	; 0x202a <ungetc>
    1a20:	ce 01       	movw	r24, r28
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	08 95       	ret

00001a2c <conv_int>:
    1a2c:	8f 92       	push	r8
    1a2e:	9f 92       	push	r9
    1a30:	af 92       	push	r10
    1a32:	bf 92       	push	r11
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	8c 01       	movw	r16, r24
    1a42:	d6 2f       	mov	r29, r22
    1a44:	7a 01       	movw	r14, r20
    1a46:	b2 2e       	mov	r11, r18
    1a48:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	33 27       	eor	r19, r19
    1a50:	2b 32       	cpi	r18, 0x2B	; 43
    1a52:	31 05       	cpc	r19, r1
    1a54:	31 f0       	breq	.+12     	; 0x1a62 <conv_int+0x36>
    1a56:	2d 32       	cpi	r18, 0x2D	; 45
    1a58:	31 05       	cpc	r19, r1
    1a5a:	61 f4       	brne	.+24     	; 0x1a74 <conv_int+0x48>
    1a5c:	8b 2d       	mov	r24, r11
    1a5e:	80 68       	ori	r24, 0x80	; 128
    1a60:	b8 2e       	mov	r11, r24
    1a62:	d1 50       	subi	r29, 0x01	; 1
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <conv_int+0x3e>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	68 c0       	rjmp	.+208    	; 0x1b3a <conv_int+0x10e>
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1a70:	97 fd       	sbrc	r25, 7
    1a72:	f9 cf       	rjmp	.-14     	; 0x1a66 <conv_int+0x3a>
    1a74:	cb 2d       	mov	r28, r11
    1a76:	cd 7f       	andi	r28, 0xFD	; 253
    1a78:	2b 2d       	mov	r18, r11
    1a7a:	20 73       	andi	r18, 0x30	; 48
    1a7c:	09 f5       	brne	.+66     	; 0x1ac0 <conv_int+0x94>
    1a7e:	80 33       	cpi	r24, 0x30	; 48
    1a80:	f9 f4       	brne	.+62     	; 0x1ac0 <conv_int+0x94>
    1a82:	aa 24       	eor	r10, r10
    1a84:	aa 94       	dec	r10
    1a86:	ad 0e       	add	r10, r29
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <conv_int+0x60>
    1a8a:	43 c0       	rjmp	.+134    	; 0x1b12 <conv_int+0xe6>
    1a8c:	c8 01       	movw	r24, r16
    1a8e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1a92:	97 fd       	sbrc	r25, 7
    1a94:	3e c0       	rjmp	.+124    	; 0x1b12 <conv_int+0xe6>
    1a96:	9c 01       	movw	r18, r24
    1a98:	2f 7d       	andi	r18, 0xDF	; 223
    1a9a:	33 27       	eor	r19, r19
    1a9c:	28 35       	cpi	r18, 0x58	; 88
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	49 f4       	brne	.+18     	; 0x1ab4 <conv_int+0x88>
    1aa2:	c2 64       	ori	r28, 0x42	; 66
    1aa4:	d2 50       	subi	r29, 0x02	; 2
    1aa6:	a9 f1       	breq	.+106    	; 0x1b12 <conv_int+0xe6>
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1aae:	97 ff       	sbrs	r25, 7
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <conv_int+0x94>
    1ab2:	2f c0       	rjmp	.+94     	; 0x1b12 <conv_int+0xe6>
    1ab4:	b6 fe       	sbrs	r11, 6
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <conv_int+0x90>
    1ab8:	c2 60       	ori	r28, 0x02	; 2
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <conv_int+0x92>
    1abc:	c2 61       	ori	r28, 0x12	; 18
    1abe:	da 2d       	mov	r29, r10
    1ac0:	81 2c       	mov	r8, r1
    1ac2:	91 2c       	mov	r9, r1
    1ac4:	54 01       	movw	r10, r8
    1ac6:	20 ed       	ldi	r18, 0xD0	; 208
    1ac8:	28 0f       	add	r18, r24
    1aca:	28 30       	cpi	r18, 0x08	; 8
    1acc:	80 f0       	brcs	.+32     	; 0x1aee <conv_int+0xc2>
    1ace:	c4 ff       	sbrs	r28, 4
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <conv_int+0xae>
    1ad2:	b8 01       	movw	r22, r16
    1ad4:	0e 94 15 10 	call	0x202a	; 0x202a <ungetc>
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <conv_int+0xe0>
    1ada:	2a 30       	cpi	r18, 0x0A	; 10
    1adc:	40 f0       	brcs	.+16     	; 0x1aee <conv_int+0xc2>
    1ade:	c6 ff       	sbrs	r28, 6
    1ae0:	f8 cf       	rjmp	.-16     	; 0x1ad2 <conv_int+0xa6>
    1ae2:	2f 7d       	andi	r18, 0xDF	; 223
    1ae4:	3f ee       	ldi	r19, 0xEF	; 239
    1ae6:	32 0f       	add	r19, r18
    1ae8:	36 30       	cpi	r19, 0x06	; 6
    1aea:	98 f7       	brcc	.-26     	; 0x1ad2 <conv_int+0xa6>
    1aec:	27 50       	subi	r18, 0x07	; 7
    1aee:	4c 2f       	mov	r20, r28
    1af0:	c5 01       	movw	r24, r10
    1af2:	b4 01       	movw	r22, r8
    1af4:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <mulacc>
    1af8:	4b 01       	movw	r8, r22
    1afa:	5c 01       	movw	r10, r24
    1afc:	c2 60       	ori	r28, 0x02	; 2
    1afe:	d1 50       	subi	r29, 0x01	; 1
    1b00:	59 f0       	breq	.+22     	; 0x1b18 <conv_int+0xec>
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1b08:	97 ff       	sbrs	r25, 7
    1b0a:	dd cf       	rjmp	.-70     	; 0x1ac6 <conv_int+0x9a>
    1b0c:	c1 fd       	sbrc	r28, 1
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <conv_int+0xec>
    1b10:	aa cf       	rjmp	.-172    	; 0x1a66 <conv_int+0x3a>
    1b12:	81 2c       	mov	r8, r1
    1b14:	91 2c       	mov	r9, r1
    1b16:	54 01       	movw	r10, r8
    1b18:	c7 ff       	sbrs	r28, 7
    1b1a:	08 c0       	rjmp	.+16     	; 0x1b2c <conv_int+0x100>
    1b1c:	b0 94       	com	r11
    1b1e:	a0 94       	com	r10
    1b20:	90 94       	com	r9
    1b22:	80 94       	com	r8
    1b24:	81 1c       	adc	r8, r1
    1b26:	91 1c       	adc	r9, r1
    1b28:	a1 1c       	adc	r10, r1
    1b2a:	b1 1c       	adc	r11, r1
    1b2c:	2c 2f       	mov	r18, r28
    1b2e:	b5 01       	movw	r22, r10
    1b30:	a4 01       	movw	r20, r8
    1b32:	c7 01       	movw	r24, r14
    1b34:	0e 94 ca 0c 	call	0x1994	; 0x1994 <putval>
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	9f 90       	pop	r9
    1b4c:	8f 90       	pop	r8
    1b4e:	08 95       	ret

00001b50 <conv_brk>:
    1b50:	a0 e2       	ldi	r26, 0x20	; 32
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ee ea       	ldi	r30, 0xAE	; 174
    1b56:	fd e0       	ldi	r31, 0x0D	; 13
    1b58:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x6>
    1b5c:	5c 01       	movw	r10, r24
    1b5e:	96 2e       	mov	r9, r22
    1b60:	7a 01       	movw	r14, r20
    1b62:	f9 01       	movw	r30, r18
    1b64:	8e 01       	movw	r16, r28
    1b66:	0f 5f       	subi	r16, 0xFF	; 255
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	68 01       	movw	r12, r16
    1b6c:	80 e2       	ldi	r24, 0x20	; 32
    1b6e:	d8 01       	movw	r26, r16
    1b70:	1d 92       	st	X+, r1
    1b72:	8a 95       	dec	r24
    1b74:	e9 f7       	brne	.-6      	; 0x1b70 <conv_brk+0x20>
    1b76:	d5 01       	movw	r26, r10
    1b78:	13 96       	adiw	r26, 0x03	; 3
    1b7a:	8c 90       	ld	r8, X
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	61 2c       	mov	r6, r1
    1b82:	71 2c       	mov	r7, r1
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	83 fc       	sbrc	r8, 3
    1b8c:	25 91       	lpm	r18, Z+
    1b8e:	83 fe       	sbrs	r8, 3
    1b90:	21 91       	ld	r18, Z+
    1b92:	8f 01       	movw	r16, r30
    1b94:	52 2e       	mov	r5, r18
    1b96:	21 11       	cpse	r18, r1
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <conv_brk+0x50>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	92 c0       	rjmp	.+292    	; 0x1cc4 <conv_brk+0x174>
    1ba0:	2e 35       	cpi	r18, 0x5E	; 94
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <conv_brk+0x58>
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	51 f1       	breq	.+84     	; 0x1bfc <conv_brk+0xac>
    1ba8:	43 2f       	mov	r20, r19
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	48 17       	cp	r20, r24
    1bae:	59 07       	cpc	r21, r25
    1bb0:	3c f4       	brge	.+14     	; 0x1bc0 <conv_brk+0x70>
    1bb2:	2d 35       	cpi	r18, 0x5D	; 93
    1bb4:	59 f1       	breq	.+86     	; 0x1c0c <conv_brk+0xbc>
    1bb6:	2d 32       	cpi	r18, 0x2D	; 45
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <conv_brk+0x70>
    1bba:	77 20       	and	r7, r7
    1bbc:	09 f1       	breq	.+66     	; 0x1c00 <conv_brk+0xb0>
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <conv_brk+0x76>
    1bc0:	77 20       	and	r7, r7
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <conv_brk+0x76>
    1bc4:	6a c0       	rjmp	.+212    	; 0x1c9a <conv_brk+0x14a>
    1bc6:	45 2d       	mov	r20, r5
    1bc8:	46 95       	lsr	r20
    1bca:	46 95       	lsr	r20
    1bcc:	46 95       	lsr	r20
    1bce:	d6 01       	movw	r26, r12
    1bd0:	a4 0f       	add	r26, r20
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	45 2d       	mov	r20, r5
    1bd6:	47 70       	andi	r20, 0x07	; 7
    1bd8:	8b 01       	movw	r16, r22
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <conv_brk+0x90>
    1bdc:	00 0f       	add	r16, r16
    1bde:	11 1f       	adc	r17, r17
    1be0:	4a 95       	dec	r20
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <conv_brk+0x8c>
    1be4:	a8 01       	movw	r20, r16
    1be6:	5c 91       	ld	r21, X
    1be8:	45 2b       	or	r20, r21
    1bea:	4c 93       	st	X, r20
    1bec:	65 14       	cp	r6, r5
    1bee:	59 f0       	breq	.+22     	; 0x1c06 <conv_brk+0xb6>
    1bf0:	56 14       	cp	r5, r6
    1bf2:	10 f4       	brcc	.+4      	; 0x1bf8 <conv_brk+0xa8>
    1bf4:	53 94       	inc	r5
    1bf6:	e7 cf       	rjmp	.-50     	; 0x1bc6 <conv_brk+0x76>
    1bf8:	5a 94       	dec	r5
    1bfa:	e5 cf       	rjmp	.-54     	; 0x1bc6 <conv_brk+0x76>
    1bfc:	31 e0       	ldi	r19, 0x01	; 1
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <conv_brk+0xb8>
    1c00:	77 24       	eor	r7, r7
    1c02:	73 94       	inc	r7
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <conv_brk+0xb8>
    1c06:	71 2c       	mov	r7, r1
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	bf cf       	rjmp	.-130    	; 0x1b8a <conv_brk+0x3a>
    1c0c:	77 20       	and	r7, r7
    1c0e:	19 f0       	breq	.+6      	; 0x1c16 <conv_brk+0xc6>
    1c10:	8e 81       	ldd	r24, Y+6	; 0x06
    1c12:	80 62       	ori	r24, 0x20	; 32
    1c14:	8e 83       	std	Y+6, r24	; 0x06
    1c16:	31 11       	cpse	r19, r1
    1c18:	03 c0       	rjmp	.+6      	; 0x1c20 <conv_brk+0xd0>
    1c1a:	88 24       	eor	r8, r8
    1c1c:	83 94       	inc	r8
    1c1e:	17 c0       	rjmp	.+46     	; 0x1c4e <conv_brk+0xfe>
    1c20:	f6 01       	movw	r30, r12
    1c22:	9e 01       	movw	r18, r28
    1c24:	2f 5d       	subi	r18, 0xDF	; 223
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 95       	com	r24
    1c2c:	81 93       	st	Z+, r24
    1c2e:	2e 17       	cp	r18, r30
    1c30:	3f 07       	cpc	r19, r31
    1c32:	d1 f7       	brne	.-12     	; 0x1c28 <conv_brk+0xd8>
    1c34:	f2 cf       	rjmp	.-28     	; 0x1c1a <conv_brk+0xca>
    1c36:	e1 14       	cp	r14, r1
    1c38:	f1 04       	cpc	r15, r1
    1c3a:	29 f0       	breq	.+10     	; 0x1c46 <conv_brk+0xf6>
    1c3c:	d7 01       	movw	r26, r14
    1c3e:	8c 93       	st	X, r24
    1c40:	f7 01       	movw	r30, r14
    1c42:	31 96       	adiw	r30, 0x01	; 1
    1c44:	7f 01       	movw	r14, r30
    1c46:	9a 94       	dec	r9
    1c48:	81 2c       	mov	r8, r1
    1c4a:	99 20       	and	r9, r9
    1c4c:	f9 f0       	breq	.+62     	; 0x1c8c <conv_brk+0x13c>
    1c4e:	c5 01       	movw	r24, r10
    1c50:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1c54:	97 fd       	sbrc	r25, 7
    1c56:	18 c0       	rjmp	.+48     	; 0x1c88 <conv_brk+0x138>
    1c58:	fc 01       	movw	r30, r24
    1c5a:	ff 27       	eor	r31, r31
    1c5c:	23 e0       	ldi	r18, 0x03	; 3
    1c5e:	f5 95       	asr	r31
    1c60:	e7 95       	ror	r30
    1c62:	2a 95       	dec	r18
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <conv_brk+0x10e>
    1c66:	ec 0d       	add	r30, r12
    1c68:	fd 1d       	adc	r31, r13
    1c6a:	20 81       	ld	r18, Z
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	ac 01       	movw	r20, r24
    1c70:	47 70       	andi	r20, 0x07	; 7
    1c72:	55 27       	eor	r21, r21
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <conv_brk+0x12a>
    1c76:	35 95       	asr	r19
    1c78:	27 95       	ror	r18
    1c7a:	4a 95       	dec	r20
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <conv_brk+0x126>
    1c7e:	20 fd       	sbrc	r18, 0
    1c80:	da cf       	rjmp	.-76     	; 0x1c36 <conv_brk+0xe6>
    1c82:	b5 01       	movw	r22, r10
    1c84:	0e 94 15 10 	call	0x202a	; 0x202a <ungetc>
    1c88:	81 10       	cpse	r8, r1
    1c8a:	87 cf       	rjmp	.-242    	; 0x1b9a <conv_brk+0x4a>
    1c8c:	e1 14       	cp	r14, r1
    1c8e:	f1 04       	cpc	r15, r1
    1c90:	11 f0       	breq	.+4      	; 0x1c96 <conv_brk+0x146>
    1c92:	d7 01       	movw	r26, r14
    1c94:	1c 92       	st	X, r1
    1c96:	c8 01       	movw	r24, r16
    1c98:	15 c0       	rjmp	.+42     	; 0x1cc4 <conv_brk+0x174>
    1c9a:	42 2f       	mov	r20, r18
    1c9c:	46 95       	lsr	r20
    1c9e:	46 95       	lsr	r20
    1ca0:	46 95       	lsr	r20
    1ca2:	d6 01       	movw	r26, r12
    1ca4:	a4 0f       	add	r26, r20
    1ca6:	b1 1d       	adc	r27, r1
    1ca8:	42 2f       	mov	r20, r18
    1caa:	47 70       	andi	r20, 0x07	; 7
    1cac:	8b 01       	movw	r16, r22
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <conv_brk+0x164>
    1cb0:	00 0f       	add	r16, r16
    1cb2:	11 1f       	adc	r17, r17
    1cb4:	4a 95       	dec	r20
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <conv_brk+0x160>
    1cb8:	a8 01       	movw	r20, r16
    1cba:	5c 91       	ld	r21, X
    1cbc:	45 2b       	or	r20, r21
    1cbe:	4c 93       	st	X, r20
    1cc0:	62 2e       	mov	r6, r18
    1cc2:	a2 cf       	rjmp	.-188    	; 0x1c08 <conv_brk+0xb8>
    1cc4:	a0 96       	adiw	r28, 0x20	; 32
    1cc6:	ef e0       	ldi	r30, 0x0F	; 15
    1cc8:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x6>

00001ccc <vfscanf>:
    1ccc:	a0 e0       	ldi	r26, 0x00	; 0
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ec e6       	ldi	r30, 0x6C	; 108
    1cd2:	fe e0       	ldi	r31, 0x0E	; 14
    1cd4:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__prologue_saves__+0x6>
    1cd8:	6c 01       	movw	r12, r24
    1cda:	eb 01       	movw	r28, r22
    1cdc:	5a 01       	movw	r10, r20
    1cde:	fc 01       	movw	r30, r24
    1ce0:	16 82       	std	Z+6, r1	; 0x06
    1ce2:	17 82       	std	Z+7, r1	; 0x07
    1ce4:	51 2c       	mov	r5, r1
    1ce6:	f6 01       	movw	r30, r12
    1ce8:	e3 80       	ldd	r14, Z+3	; 0x03
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 fc       	sbrc	r14, 3
    1cee:	85 91       	lpm	r24, Z+
    1cf0:	e3 fe       	sbrs	r14, 3
    1cf2:	81 91       	ld	r24, Z+
    1cf4:	18 2f       	mov	r17, r24
    1cf6:	ef 01       	movw	r28, r30
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <vfscanf+0x32>
    1cfc:	ee c0       	rjmp	.+476    	; 0x1eda <vfscanf+0x20e>
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 2f 0a 	call	0x145e	; 0x145e <isspace>
    1d04:	89 2b       	or	r24, r25
    1d06:	21 f0       	breq	.+8      	; 0x1d10 <vfscanf+0x44>
    1d08:	c6 01       	movw	r24, r12
    1d0a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <skip_spaces>
    1d0e:	eb cf       	rjmp	.-42     	; 0x1ce6 <vfscanf+0x1a>
    1d10:	15 32       	cpi	r17, 0x25	; 37
    1d12:	41 f4       	brne	.+16     	; 0x1d24 <vfscanf+0x58>
    1d14:	fe 01       	movw	r30, r28
    1d16:	e3 fc       	sbrc	r14, 3
    1d18:	15 91       	lpm	r17, Z+
    1d1a:	e3 fe       	sbrs	r14, 3
    1d1c:	11 91       	ld	r17, Z+
    1d1e:	ef 01       	movw	r28, r30
    1d20:	15 32       	cpi	r17, 0x25	; 37
    1d22:	81 f4       	brne	.+32     	; 0x1d44 <vfscanf+0x78>
    1d24:	c6 01       	movw	r24, r12
    1d26:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1d2a:	97 fd       	sbrc	r25, 7
    1d2c:	d4 c0       	rjmp	.+424    	; 0x1ed6 <vfscanf+0x20a>
    1d2e:	41 2f       	mov	r20, r17
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	9c 01       	movw	r18, r24
    1d34:	33 27       	eor	r19, r19
    1d36:	24 17       	cp	r18, r20
    1d38:	35 07       	cpc	r19, r21
    1d3a:	a9 f2       	breq	.-86     	; 0x1ce6 <vfscanf+0x1a>
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 15 10 	call	0x202a	; 0x202a <ungetc>
    1d42:	cb c0       	rjmp	.+406    	; 0x1eda <vfscanf+0x20e>
    1d44:	1a 32       	cpi	r17, 0x2A	; 42
    1d46:	39 f4       	brne	.+14     	; 0x1d56 <vfscanf+0x8a>
    1d48:	e3 fc       	sbrc	r14, 3
    1d4a:	15 91       	lpm	r17, Z+
    1d4c:	e3 fe       	sbrs	r14, 3
    1d4e:	11 91       	ld	r17, Z+
    1d50:	ef 01       	movw	r28, r30
    1d52:	01 e0       	ldi	r16, 0x01	; 1
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <vfscanf+0x8c>
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	f1 2c       	mov	r15, r1
    1d5a:	20 ed       	ldi	r18, 0xD0	; 208
    1d5c:	21 0f       	add	r18, r17
    1d5e:	2a 30       	cpi	r18, 0x0A	; 10
    1d60:	80 f4       	brcc	.+32     	; 0x1d82 <vfscanf+0xb6>
    1d62:	02 60       	ori	r16, 0x02	; 2
    1d64:	6f 2d       	mov	r22, r15
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <mulacc>
    1d72:	f6 2e       	mov	r15, r22
    1d74:	fe 01       	movw	r30, r28
    1d76:	e3 fc       	sbrc	r14, 3
    1d78:	15 91       	lpm	r17, Z+
    1d7a:	e3 fe       	sbrs	r14, 3
    1d7c:	11 91       	ld	r17, Z+
    1d7e:	ef 01       	movw	r28, r30
    1d80:	ec cf       	rjmp	.-40     	; 0x1d5a <vfscanf+0x8e>
    1d82:	01 ff       	sbrs	r16, 1
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <vfscanf+0xc0>
    1d86:	f1 10       	cpse	r15, r1
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <vfscanf+0xc4>
    1d8a:	a7 c0       	rjmp	.+334    	; 0x1eda <vfscanf+0x20e>
    1d8c:	ff 24       	eor	r15, r15
    1d8e:	fa 94       	dec	r15
    1d90:	18 36       	cpi	r17, 0x68	; 104
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <vfscanf+0xce>
    1d94:	1c 36       	cpi	r17, 0x6C	; 108
    1d96:	51 f0       	breq	.+20     	; 0x1dac <vfscanf+0xe0>
    1d98:	10 c0       	rjmp	.+32     	; 0x1dba <vfscanf+0xee>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e3 fc       	sbrc	r14, 3
    1d9e:	15 91       	lpm	r17, Z+
    1da0:	e3 fe       	sbrs	r14, 3
    1da2:	11 91       	ld	r17, Z+
    1da4:	ef 01       	movw	r28, r30
    1da6:	18 36       	cpi	r17, 0x68	; 104
    1da8:	41 f4       	brne	.+16     	; 0x1dba <vfscanf+0xee>
    1daa:	08 60       	ori	r16, 0x08	; 8
    1dac:	04 60       	ori	r16, 0x04	; 4
    1dae:	fe 01       	movw	r30, r28
    1db0:	e3 fc       	sbrc	r14, 3
    1db2:	15 91       	lpm	r17, Z+
    1db4:	e3 fe       	sbrs	r14, 3
    1db6:	11 91       	ld	r17, Z+
    1db8:	ef 01       	movw	r28, r30
    1dba:	11 23       	and	r17, r17
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <vfscanf+0xf4>
    1dbe:	8d c0       	rjmp	.+282    	; 0x1eda <vfscanf+0x20e>
    1dc0:	61 2f       	mov	r22, r17
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	80 e9       	ldi	r24, 0x90	; 144
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <strchr_P>
    1dcc:	89 2b       	or	r24, r25
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <vfscanf+0x106>
    1dd0:	84 c0       	rjmp	.+264    	; 0x1eda <vfscanf+0x20e>
    1dd2:	00 fd       	sbrc	r16, 0
    1dd4:	07 c0       	rjmp	.+14     	; 0x1de4 <vfscanf+0x118>
    1dd6:	f5 01       	movw	r30, r10
    1dd8:	80 80       	ld	r8, Z
    1dda:	91 80       	ldd	r9, Z+1	; 0x01
    1ddc:	c5 01       	movw	r24, r10
    1dde:	02 96       	adiw	r24, 0x02	; 2
    1de0:	5c 01       	movw	r10, r24
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <vfscanf+0x11c>
    1de4:	81 2c       	mov	r8, r1
    1de6:	91 2c       	mov	r9, r1
    1de8:	1e 36       	cpi	r17, 0x6E	; 110
    1dea:	51 f4       	brne	.+20     	; 0x1e00 <vfscanf+0x134>
    1dec:	f6 01       	movw	r30, r12
    1dee:	46 81       	ldd	r20, Z+6	; 0x06
    1df0:	57 81       	ldd	r21, Z+7	; 0x07
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	20 2f       	mov	r18, r16
    1df8:	c4 01       	movw	r24, r8
    1dfa:	0e 94 ca 0c 	call	0x1994	; 0x1994 <putval>
    1dfe:	73 cf       	rjmp	.-282    	; 0x1ce6 <vfscanf+0x1a>
    1e00:	13 36       	cpi	r17, 0x63	; 99
    1e02:	a9 f4       	brne	.+42     	; 0x1e2e <vfscanf+0x162>
    1e04:	01 fd       	sbrc	r16, 1
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <vfscanf+0x140>
    1e08:	ff 24       	eor	r15, r15
    1e0a:	f3 94       	inc	r15
    1e0c:	c6 01       	movw	r24, r12
    1e0e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1e12:	97 fd       	sbrc	r25, 7
    1e14:	60 c0       	rjmp	.+192    	; 0x1ed6 <vfscanf+0x20a>
    1e16:	81 14       	cp	r8, r1
    1e18:	91 04       	cpc	r9, r1
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <vfscanf+0x15a>
    1e1c:	f4 01       	movw	r30, r8
    1e1e:	80 83       	st	Z, r24
    1e20:	c4 01       	movw	r24, r8
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	4c 01       	movw	r8, r24
    1e26:	fa 94       	dec	r15
    1e28:	f1 10       	cpse	r15, r1
    1e2a:	f0 cf       	rjmp	.-32     	; 0x1e0c <vfscanf+0x140>
    1e2c:	50 c0       	rjmp	.+160    	; 0x1ece <vfscanf+0x202>
    1e2e:	1b 35       	cpi	r17, 0x5B	; 91
    1e30:	59 f4       	brne	.+22     	; 0x1e48 <vfscanf+0x17c>
    1e32:	9e 01       	movw	r18, r28
    1e34:	a4 01       	movw	r20, r8
    1e36:	6f 2d       	mov	r22, r15
    1e38:	c6 01       	movw	r24, r12
    1e3a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <conv_brk>
    1e3e:	ec 01       	movw	r28, r24
    1e40:	89 2b       	or	r24, r25
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <vfscanf+0x17a>
    1e44:	44 c0       	rjmp	.+136    	; 0x1ece <vfscanf+0x202>
    1e46:	3e c0       	rjmp	.+124    	; 0x1ec4 <vfscanf+0x1f8>
    1e48:	c6 01       	movw	r24, r12
    1e4a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <skip_spaces>
    1e4e:	97 fd       	sbrc	r25, 7
    1e50:	42 c0       	rjmp	.+132    	; 0x1ed6 <vfscanf+0x20a>
    1e52:	1f 36       	cpi	r17, 0x6F	; 111
    1e54:	61 f1       	breq	.+88     	; 0x1eae <vfscanf+0x1e2>
    1e56:	28 f4       	brcc	.+10     	; 0x1e62 <vfscanf+0x196>
    1e58:	14 36       	cpi	r17, 0x64	; 100
    1e5a:	39 f1       	breq	.+78     	; 0x1eaa <vfscanf+0x1de>
    1e5c:	19 36       	cpi	r17, 0x69	; 105
    1e5e:	51 f1       	breq	.+84     	; 0x1eb4 <vfscanf+0x1e8>
    1e60:	28 c0       	rjmp	.+80     	; 0x1eb2 <vfscanf+0x1e6>
    1e62:	13 37       	cpi	r17, 0x73	; 115
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <vfscanf+0x1b6>
    1e66:	15 37       	cpi	r17, 0x75	; 117
    1e68:	01 f1       	breq	.+64     	; 0x1eaa <vfscanf+0x1de>
    1e6a:	23 c0       	rjmp	.+70     	; 0x1eb2 <vfscanf+0x1e6>
    1e6c:	81 14       	cp	r8, r1
    1e6e:	91 04       	cpc	r9, r1
    1e70:	29 f0       	breq	.+10     	; 0x1e7c <vfscanf+0x1b0>
    1e72:	f4 01       	movw	r30, r8
    1e74:	60 82       	st	Z, r6
    1e76:	c4 01       	movw	r24, r8
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	4c 01       	movw	r8, r24
    1e7c:	fa 94       	dec	r15
    1e7e:	ff 20       	and	r15, r15
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <vfscanf+0x1d2>
    1e82:	c6 01       	movw	r24, r12
    1e84:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <fgetc>
    1e88:	3c 01       	movw	r6, r24
    1e8a:	97 fd       	sbrc	r25, 7
    1e8c:	08 c0       	rjmp	.+16     	; 0x1e9e <vfscanf+0x1d2>
    1e8e:	0e 94 2f 0a 	call	0x145e	; 0x145e <isspace>
    1e92:	89 2b       	or	r24, r25
    1e94:	59 f3       	breq	.-42     	; 0x1e6c <vfscanf+0x1a0>
    1e96:	b6 01       	movw	r22, r12
    1e98:	c3 01       	movw	r24, r6
    1e9a:	0e 94 15 10 	call	0x202a	; 0x202a <ungetc>
    1e9e:	81 14       	cp	r8, r1
    1ea0:	91 04       	cpc	r9, r1
    1ea2:	a9 f0       	breq	.+42     	; 0x1ece <vfscanf+0x202>
    1ea4:	f4 01       	movw	r30, r8
    1ea6:	10 82       	st	Z, r1
    1ea8:	12 c0       	rjmp	.+36     	; 0x1ece <vfscanf+0x202>
    1eaa:	00 62       	ori	r16, 0x20	; 32
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <vfscanf+0x1e8>
    1eae:	00 61       	ori	r16, 0x10	; 16
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <vfscanf+0x1e8>
    1eb2:	00 64       	ori	r16, 0x40	; 64
    1eb4:	20 2f       	mov	r18, r16
    1eb6:	a4 01       	movw	r20, r8
    1eb8:	6f 2d       	mov	r22, r15
    1eba:	c6 01       	movw	r24, r12
    1ebc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <conv_int>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <vfscanf+0x202>
    1ec4:	f6 01       	movw	r30, r12
    1ec6:	83 81       	ldd	r24, Z+3	; 0x03
    1ec8:	80 73       	andi	r24, 0x30	; 48
    1eca:	29 f4       	brne	.+10     	; 0x1ed6 <vfscanf+0x20a>
    1ecc:	06 c0       	rjmp	.+12     	; 0x1eda <vfscanf+0x20e>
    1ece:	00 fd       	sbrc	r16, 0
    1ed0:	0a cf       	rjmp	.-492    	; 0x1ce6 <vfscanf+0x1a>
    1ed2:	53 94       	inc	r5
    1ed4:	08 cf       	rjmp	.-496    	; 0x1ce6 <vfscanf+0x1a>
    1ed6:	55 20       	and	r5, r5
    1ed8:	19 f0       	breq	.+6      	; 0x1ee0 <vfscanf+0x214>
    1eda:	85 2d       	mov	r24, r5
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfscanf+0x218>
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	9f ef       	ldi	r25, 0xFF	; 255
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	ef e0       	ldi	r30, 0x0F	; 15
    1eea:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x6>

00001eee <__ctype_isfalse>:
    1eee:	99 27       	eor	r25, r25
    1ef0:	88 27       	eor	r24, r24

00001ef2 <__ctype_istrue>:
    1ef2:	08 95       	ret

00001ef4 <strchr_P>:
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	05 90       	lpm	r0, Z+
    1ef8:	06 16       	cp	r0, r22
    1efa:	21 f0       	breq	.+8      	; 0x1f04 <strchr_P+0x10>
    1efc:	00 20       	and	r0, r0
    1efe:	d9 f7       	brne	.-10     	; 0x1ef6 <strchr_P+0x2>
    1f00:	c0 01       	movw	r24, r0
    1f02:	08 95       	ret
    1f04:	31 97       	sbiw	r30, 0x01	; 1
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret

00001f0a <strnlen_P>:
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	05 90       	lpm	r0, Z+
    1f0e:	61 50       	subi	r22, 0x01	; 1
    1f10:	70 40       	sbci	r23, 0x00	; 0
    1f12:	01 10       	cpse	r0, r1
    1f14:	d8 f7       	brcc	.-10     	; 0x1f0c <strnlen_P+0x2>
    1f16:	80 95       	com	r24
    1f18:	90 95       	com	r25
    1f1a:	8e 0f       	add	r24, r30
    1f1c:	9f 1f       	adc	r25, r31
    1f1e:	08 95       	ret

00001f20 <strnlen>:
    1f20:	fc 01       	movw	r30, r24
    1f22:	61 50       	subi	r22, 0x01	; 1
    1f24:	70 40       	sbci	r23, 0x00	; 0
    1f26:	01 90       	ld	r0, Z+
    1f28:	01 10       	cpse	r0, r1
    1f2a:	d8 f7       	brcc	.-10     	; 0x1f22 <strnlen+0x2>
    1f2c:	80 95       	com	r24
    1f2e:	90 95       	com	r25
    1f30:	8e 0f       	add	r24, r30
    1f32:	9f 1f       	adc	r25, r31
    1f34:	08 95       	ret

00001f36 <fgetc>:
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	ec 01       	movw	r28, r24
    1f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3e:	20 ff       	sbrs	r18, 0
    1f40:	33 c0       	rjmp	.+102    	; 0x1fa8 <fgetc+0x72>
    1f42:	26 ff       	sbrs	r18, 6
    1f44:	0a c0       	rjmp	.+20     	; 0x1f5a <fgetc+0x24>
    1f46:	2f 7b       	andi	r18, 0xBF	; 191
    1f48:	2b 83       	std	Y+3, r18	; 0x03
    1f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	8e 83       	std	Y+6, r24	; 0x06
    1f52:	9f 83       	std	Y+7, r25	; 0x07
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	29 c0       	rjmp	.+82     	; 0x1fac <fgetc+0x76>
    1f5a:	22 ff       	sbrs	r18, 2
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <fgetc+0x46>
    1f5e:	e8 81       	ld	r30, Y
    1f60:	f9 81       	ldd	r31, Y+1	; 0x01
    1f62:	80 81       	ld	r24, Z
    1f64:	08 2e       	mov	r0, r24
    1f66:	00 0c       	add	r0, r0
    1f68:	99 0b       	sbc	r25, r25
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	19 f4       	brne	.+6      	; 0x1f74 <fgetc+0x3e>
    1f6e:	20 62       	ori	r18, 0x20	; 32
    1f70:	2b 83       	std	Y+3, r18	; 0x03
    1f72:	1a c0       	rjmp	.+52     	; 0x1fa8 <fgetc+0x72>
    1f74:	31 96       	adiw	r30, 0x01	; 1
    1f76:	e8 83       	st	Y, r30
    1f78:	f9 83       	std	Y+1, r31	; 0x01
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <fgetc+0x62>
    1f7c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f7e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f80:	09 95       	icall
    1f82:	97 ff       	sbrs	r25, 7
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <fgetc+0x62>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	11 f0       	breq	.+4      	; 0x1f90 <fgetc+0x5a>
    1f8c:	80 e2       	ldi	r24, 0x20	; 32
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <fgetc+0x5c>
    1f90:	80 e1       	ldi	r24, 0x10	; 16
    1f92:	82 2b       	or	r24, r18
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <fgetc+0x72>
    1f98:	2e 81       	ldd	r18, Y+6	; 0x06
    1f9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	2e 83       	std	Y+6, r18	; 0x06
    1fa2:	3f 83       	std	Y+7, r19	; 0x07
    1fa4:	99 27       	eor	r25, r25
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <fgetc+0x76>
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	9f ef       	ldi	r25, 0xFF	; 255
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <fputc>:
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	fb 01       	movw	r30, r22
    1fbc:	23 81       	ldd	r18, Z+3	; 0x03
    1fbe:	21 fd       	sbrc	r18, 1
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <fputc+0x16>
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	9f ef       	ldi	r25, 0xFF	; 255
    1fc6:	2c c0       	rjmp	.+88     	; 0x2020 <fputc+0x6e>
    1fc8:	22 ff       	sbrs	r18, 2
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <fputc+0x46>
    1fcc:	46 81       	ldd	r20, Z+6	; 0x06
    1fce:	57 81       	ldd	r21, Z+7	; 0x07
    1fd0:	24 81       	ldd	r18, Z+4	; 0x04
    1fd2:	35 81       	ldd	r19, Z+5	; 0x05
    1fd4:	42 17       	cp	r20, r18
    1fd6:	53 07       	cpc	r21, r19
    1fd8:	44 f4       	brge	.+16     	; 0x1fea <fputc+0x38>
    1fda:	a0 81       	ld	r26, Z
    1fdc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fde:	9d 01       	movw	r18, r26
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	20 83       	st	Z, r18
    1fe6:	31 83       	std	Z+1, r19	; 0x01
    1fe8:	8c 93       	st	X, r24
    1fea:	26 81       	ldd	r18, Z+6	; 0x06
    1fec:	37 81       	ldd	r19, Z+7	; 0x07
    1fee:	2f 5f       	subi	r18, 0xFF	; 255
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	26 83       	std	Z+6, r18	; 0x06
    1ff4:	37 83       	std	Z+7, r19	; 0x07
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <fputc+0x6e>
    1ff8:	8b 01       	movw	r16, r22
    1ffa:	ec 01       	movw	r28, r24
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	00 84       	ldd	r0, Z+8	; 0x08
    2000:	f1 85       	ldd	r31, Z+9	; 0x09
    2002:	e0 2d       	mov	r30, r0
    2004:	09 95       	icall
    2006:	89 2b       	or	r24, r25
    2008:	e1 f6       	brne	.-72     	; 0x1fc2 <fputc+0x10>
    200a:	d8 01       	movw	r26, r16
    200c:	16 96       	adiw	r26, 0x06	; 6
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	17 97       	sbiw	r26, 0x07	; 7
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	16 96       	adiw	r26, 0x06	; 6
    2018:	8d 93       	st	X+, r24
    201a:	9c 93       	st	X, r25
    201c:	17 97       	sbiw	r26, 0x07	; 7
    201e:	ce 01       	movw	r24, r28
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <ungetc>:
    202a:	fb 01       	movw	r30, r22
    202c:	23 81       	ldd	r18, Z+3	; 0x03
    202e:	20 ff       	sbrs	r18, 0
    2030:	12 c0       	rjmp	.+36     	; 0x2056 <ungetc+0x2c>
    2032:	26 fd       	sbrc	r18, 6
    2034:	10 c0       	rjmp	.+32     	; 0x2056 <ungetc+0x2c>
    2036:	8f 3f       	cpi	r24, 0xFF	; 255
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	93 07       	cpc	r25, r19
    203c:	61 f0       	breq	.+24     	; 0x2056 <ungetc+0x2c>
    203e:	82 83       	std	Z+2, r24	; 0x02
    2040:	2f 7d       	andi	r18, 0xDF	; 223
    2042:	20 64       	ori	r18, 0x40	; 64
    2044:	23 83       	std	Z+3, r18	; 0x03
    2046:	26 81       	ldd	r18, Z+6	; 0x06
    2048:	37 81       	ldd	r19, Z+7	; 0x07
    204a:	21 50       	subi	r18, 0x01	; 1
    204c:	31 09       	sbc	r19, r1
    204e:	26 83       	std	Z+6, r18	; 0x06
    2050:	37 83       	std	Z+7, r19	; 0x07
    2052:	99 27       	eor	r25, r25
    2054:	08 95       	ret
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	08 95       	ret

0000205c <__ultoa_invert>:
    205c:	fa 01       	movw	r30, r20
    205e:	aa 27       	eor	r26, r26
    2060:	28 30       	cpi	r18, 0x08	; 8
    2062:	51 f1       	breq	.+84     	; 0x20b8 <__ultoa_invert+0x5c>
    2064:	20 31       	cpi	r18, 0x10	; 16
    2066:	81 f1       	breq	.+96     	; 0x20c8 <__ultoa_invert+0x6c>
    2068:	e8 94       	clt
    206a:	6f 93       	push	r22
    206c:	6e 7f       	andi	r22, 0xFE	; 254
    206e:	6e 5f       	subi	r22, 0xFE	; 254
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	8f 4f       	sbci	r24, 0xFF	; 255
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	af 4f       	sbci	r26, 0xFF	; 255
    2078:	b1 e0       	ldi	r27, 0x01	; 1
    207a:	3e d0       	rcall	.+124    	; 0x20f8 <__ultoa_invert+0x9c>
    207c:	b4 e0       	ldi	r27, 0x04	; 4
    207e:	3c d0       	rcall	.+120    	; 0x20f8 <__ultoa_invert+0x9c>
    2080:	67 0f       	add	r22, r23
    2082:	78 1f       	adc	r23, r24
    2084:	89 1f       	adc	r24, r25
    2086:	9a 1f       	adc	r25, r26
    2088:	a1 1d       	adc	r26, r1
    208a:	68 0f       	add	r22, r24
    208c:	79 1f       	adc	r23, r25
    208e:	8a 1f       	adc	r24, r26
    2090:	91 1d       	adc	r25, r1
    2092:	a1 1d       	adc	r26, r1
    2094:	6a 0f       	add	r22, r26
    2096:	71 1d       	adc	r23, r1
    2098:	81 1d       	adc	r24, r1
    209a:	91 1d       	adc	r25, r1
    209c:	a1 1d       	adc	r26, r1
    209e:	20 d0       	rcall	.+64     	; 0x20e0 <__ultoa_invert+0x84>
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <__ultoa_invert+0x48>
    20a2:	68 94       	set
    20a4:	3f 91       	pop	r19
    20a6:	2a e0       	ldi	r18, 0x0A	; 10
    20a8:	26 9f       	mul	r18, r22
    20aa:	11 24       	eor	r1, r1
    20ac:	30 19       	sub	r19, r0
    20ae:	30 5d       	subi	r19, 0xD0	; 208
    20b0:	31 93       	st	Z+, r19
    20b2:	de f6       	brtc	.-74     	; 0x206a <__ultoa_invert+0xe>
    20b4:	cf 01       	movw	r24, r30
    20b6:	08 95       	ret
    20b8:	46 2f       	mov	r20, r22
    20ba:	47 70       	andi	r20, 0x07	; 7
    20bc:	40 5d       	subi	r20, 0xD0	; 208
    20be:	41 93       	st	Z+, r20
    20c0:	b3 e0       	ldi	r27, 0x03	; 3
    20c2:	0f d0       	rcall	.+30     	; 0x20e2 <__ultoa_invert+0x86>
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__ultoa_invert+0x5c>
    20c6:	f6 cf       	rjmp	.-20     	; 0x20b4 <__ultoa_invert+0x58>
    20c8:	46 2f       	mov	r20, r22
    20ca:	4f 70       	andi	r20, 0x0F	; 15
    20cc:	40 5d       	subi	r20, 0xD0	; 208
    20ce:	4a 33       	cpi	r20, 0x3A	; 58
    20d0:	18 f0       	brcs	.+6      	; 0x20d8 <__ultoa_invert+0x7c>
    20d2:	49 5d       	subi	r20, 0xD9	; 217
    20d4:	31 fd       	sbrc	r19, 1
    20d6:	40 52       	subi	r20, 0x20	; 32
    20d8:	41 93       	st	Z+, r20
    20da:	02 d0       	rcall	.+4      	; 0x20e0 <__ultoa_invert+0x84>
    20dc:	a9 f7       	brne	.-22     	; 0x20c8 <__ultoa_invert+0x6c>
    20de:	ea cf       	rjmp	.-44     	; 0x20b4 <__ultoa_invert+0x58>
    20e0:	b4 e0       	ldi	r27, 0x04	; 4
    20e2:	a6 95       	lsr	r26
    20e4:	97 95       	ror	r25
    20e6:	87 95       	ror	r24
    20e8:	77 95       	ror	r23
    20ea:	67 95       	ror	r22
    20ec:	ba 95       	dec	r27
    20ee:	c9 f7       	brne	.-14     	; 0x20e2 <__ultoa_invert+0x86>
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	61 05       	cpc	r22, r1
    20f4:	71 05       	cpc	r23, r1
    20f6:	08 95       	ret
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	0a 2e       	mov	r0, r26
    20fe:	06 94       	lsr	r0
    2100:	57 95       	ror	r21
    2102:	47 95       	ror	r20
    2104:	37 95       	ror	r19
    2106:	27 95       	ror	r18
    2108:	ba 95       	dec	r27
    210a:	c9 f7       	brne	.-14     	; 0x20fe <__ultoa_invert+0xa2>
    210c:	62 0f       	add	r22, r18
    210e:	73 1f       	adc	r23, r19
    2110:	84 1f       	adc	r24, r20
    2112:	95 1f       	adc	r25, r21
    2114:	a0 1d       	adc	r26, r0
    2116:	08 95       	ret

00002118 <__mulsi3>:
    2118:	db 01       	movw	r26, r22
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__muluhisi3>
    2122:	bf 91       	pop	r27
    2124:	af 91       	pop	r26
    2126:	a2 9f       	mul	r26, r18
    2128:	80 0d       	add	r24, r0
    212a:	91 1d       	adc	r25, r1
    212c:	a3 9f       	mul	r26, r19
    212e:	90 0d       	add	r25, r0
    2130:	b2 9f       	mul	r27, r18
    2132:	90 0d       	add	r25, r0
    2134:	11 24       	eor	r1, r1
    2136:	08 95       	ret

00002138 <__udivmodsi4>:
    2138:	a1 e2       	ldi	r26, 0x21	; 33
    213a:	1a 2e       	mov	r1, r26
    213c:	aa 1b       	sub	r26, r26
    213e:	bb 1b       	sub	r27, r27
    2140:	fd 01       	movw	r30, r26
    2142:	0d c0       	rjmp	.+26     	; 0x215e <__udivmodsi4_ep>

00002144 <__udivmodsi4_loop>:
    2144:	aa 1f       	adc	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	ee 1f       	adc	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a2 17       	cp	r26, r18
    214e:	b3 07       	cpc	r27, r19
    2150:	e4 07       	cpc	r30, r20
    2152:	f5 07       	cpc	r31, r21
    2154:	20 f0       	brcs	.+8      	; 0x215e <__udivmodsi4_ep>
    2156:	a2 1b       	sub	r26, r18
    2158:	b3 0b       	sbc	r27, r19
    215a:	e4 0b       	sbc	r30, r20
    215c:	f5 0b       	sbc	r31, r21

0000215e <__udivmodsi4_ep>:
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a 94       	dec	r1
    2168:	69 f7       	brne	.-38     	; 0x2144 <__udivmodsi4_loop>
    216a:	60 95       	com	r22
    216c:	70 95       	com	r23
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	08 95       	ret

0000217c <__prologue_saves__>:
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	ca 1b       	sub	r28, r26
    21a6:	db 0b       	sbc	r29, r27
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	09 94       	ijmp

000021ae <__epilogue_restores__>:
    21ae:	2a 88       	ldd	r2, Y+18	; 0x12
    21b0:	39 88       	ldd	r3, Y+17	; 0x11
    21b2:	48 88       	ldd	r4, Y+16	; 0x10
    21b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    21bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21be:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c0:	b9 84       	ldd	r11, Y+9	; 0x09
    21c2:	c8 84       	ldd	r12, Y+8	; 0x08
    21c4:	df 80       	ldd	r13, Y+7	; 0x07
    21c6:	ee 80       	ldd	r14, Y+6	; 0x06
    21c8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ca:	0c 81       	ldd	r16, Y+4	; 0x04
    21cc:	1b 81       	ldd	r17, Y+3	; 0x03
    21ce:	aa 81       	ldd	r26, Y+2	; 0x02
    21d0:	b9 81       	ldd	r27, Y+1	; 0x01
    21d2:	ce 0f       	add	r28, r30
    21d4:	d1 1d       	adc	r29, r1
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	ed 01       	movw	r28, r26
    21dc:	08 95       	ret

000021de <_exit>:
    21de:	f8 94       	cli

000021e0 <__stop_program>:
    21e0:	ff cf       	rjmp	.-2      	; 0x21e0 <__stop_program>
