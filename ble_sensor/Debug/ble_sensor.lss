
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00803000  00003733  000037e7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000353a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f9  0000753a  0000353a  000035ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000080f  0080308e  0080308e  00003875  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003875  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005b8  00000000  00000000  00003914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000082cf  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000354b  00000000  00000000  0000c19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002c2f  00000000  00000000  0000f6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fcc  00000000  00000000  00012318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003385  00000000  00000000  000132e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000360b  00000000  00000000  00016669  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f0  00000000  00000000  00019c74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_15>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_17>
      48:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_18>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_31>
      80:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_32>
      84:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000090 <__trampolines_end>:
      90:	6e 61       	ori	r22, 0x1E	; 30
      92:	6e 00       	.word	0x006e	; ????

00000094 <__c.2332>:
      94:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c4:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d4:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     104:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     114:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     124:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     134:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     144:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     154:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     164:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     174:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     184:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000192 <__c.2474>:
     192:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	df e3       	ldi	r29, 0x3F	; 63
     1a8:	de bf       	out	0x3e, r29	; 62

000001aa <__do_copy_data>:
     1aa:	10 e3       	ldi	r17, 0x30	; 48
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b0 e3       	ldi	r27, 0x30	; 48
     1b0:	e3 e3       	ldi	r30, 0x33	; 51
     1b2:	f7 e3       	ldi	r31, 0x37	; 55
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	ae 38       	cpi	r26, 0x8E	; 142
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	28 e3       	ldi	r18, 0x38	; 56
     1c2:	ae e8       	ldi	r26, 0x8E	; 142
     1c4:	b0 e3       	ldi	r27, 0x30	; 48
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	ad 39       	cpi	r26, 0x9D	; 157
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <main>
     1d4:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     1dc:	0e 94 3a 09 	call	0x1274	; 0x1274 <system_init>
     1e0:	08 95       	ret

000001e2 <rx487x_shutdown>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     1e2:	8d b1       	in	r24, 0x0d	; 13
     1e4:	87 7f       	andi	r24, 0xF7	; 247
     1e6:	8d b9       	out	0x0d, r24	; 13
static ble_error_t rx487x_shutdown(struct ble_server* ctx) 
{
	RN487X_RST_set_level(false);
	
	return 1;
}
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	08 95       	ret

000001ec <rn487x_clear_rx_buff>:
}


static void rn487x_clear_rx_buff()
{
	rx_wptr = 0;
     1ec:	10 92 1e 33 	sts	0x331E, r1	; 0x80331e <rx_wptr>
     1f0:	10 92 1f 33 	sts	0x331F, r1	; 0x80331f <rx_wptr+0x1>
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	e0 e2       	ldi	r30, 0x20	; 32
     1fa:	f3 e3       	ldi	r31, 0x33	; 51
     1fc:	df 01       	movw	r26, r30
     1fe:	9c 01       	movw	r18, r24
     200:	1d 92       	st	X+, r1
     202:	21 50       	subi	r18, 0x01	; 1
     204:	30 40       	sbci	r19, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <rn487x_clear_rx_buff+0x14>
     208:	08 95       	ret

0000020a <rn487x_get_err_from_response>:
}

static ble_error_t rn487x_get_err_from_response()
{
	if(	strstr(rn487x_rx_buff, RN487X_RESPONSE_ERR) != NULL)
     20a:	64 e4       	ldi	r22, 0x44	; 68
     20c:	75 e7       	ldi	r23, 0x75	; 117
     20e:	80 e2       	ldi	r24, 0x20	; 32
     210:	93 e3       	ldi	r25, 0x33	; 51
     212:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
     216:	89 2b       	or	r24, r25
     218:	11 f0       	breq	.+4      	; 0x21e <rn487x_get_err_from_response+0x14>
	return 0;
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	08 95       	ret
	else
	return 1;
     21e:	81 e0       	ldi	r24, 0x01	; 1

}
     220:	08 95       	ret

00000222 <rx487x_reboot>:
	return 1;
}

static ble_error_t rx487x_reboot(struct ble_server* ctx)
{
	rn487x_clear_rx_buff();
     222:	0e 94 f6 00 	call	0x1ec	; 0x1ec <rn487x_clear_rx_buff>
     226:	8d b1       	in	r24, 0x0d	; 13
     228:	87 7f       	andi	r24, 0xF7	; 247
     22a:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	8d e8       	ldi	r24, 0x8D	; 141
     22e:	90 e2       	ldi	r25, 0x20	; 32
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <rx487x_reboot+0xe>
     234:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     236:	8d b1       	in	r24, 0x0d	; 13
     238:	88 60       	ori	r24, 0x08	; 8
     23a:	8d b9       	out	0x0d, r24	; 13
     23c:	9f e3       	ldi	r25, 0x3F	; 63
     23e:	2d e0       	ldi	r18, 0x0D	; 13
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	91 50       	subi	r25, 0x01	; 1
     244:	20 40       	sbci	r18, 0x00	; 0
     246:	80 40       	sbci	r24, 0x00	; 0
     248:	e1 f7       	brne	.-8      	; 0x242 <rx487x_reboot+0x20>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <rx487x_reboot+0x2a>
     24c:	00 00       	nop
	RN487X_RST_set_level(false);
	_delay_ms(RN487X_RESET_DELAY);
	RN487X_RST_set_level(true);
	_delay_ms(RN487X_STARTUP_TIME);
	
	if(strstr(rn487x_rx_buff, "%REBOOT%"))
     24e:	68 e4       	ldi	r22, 0x48	; 72
     250:	75 e7       	ldi	r23, 0x75	; 117
     252:	80 e2       	ldi	r24, 0x20	; 32
     254:	93 e3       	ldi	r25, 0x33	; 51
     256:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
     25a:	89 2b       	or	r24, r25
     25c:	11 f0       	breq	.+4      	; 0x262 <rx487x_reboot+0x40>
	{
		return 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	08 95       	ret
	}
	else
	{
		//perror("Failed to reboot\r\n");
		return 0;
     262:	80 e0       	ldi	r24, 0x00	; 0
	}

}
     264:	08 95       	ret

00000266 <rn487x_usb_cdc_isr>:
	#endif

}

void rn487x_usb_cdc_isr()
{
     266:	cf 93       	push	r28
     268:	df 93       	push	r29

	if(usb_rx_wptr < (RN487X_USB_CDC_BUFF_SIZE - 2))
     26a:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     26e:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     272:	8e 37       	cpi	r24, 0x7E	; 126
     274:	91 05       	cpc	r25, r1
     276:	e8 f4       	brcc	.+58     	; 0x2b2 <rn487x_usb_cdc_isr+0x4c>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = usb_cdc_get_data();
     278:	c0 91 9c 32 	lds	r28, 0x329C	; 0x80329c <usb_rx_wptr>
     27c:	d0 91 9d 32 	lds	r29, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     280:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <usb_cdc_get_data>
     284:	c2 56       	subi	r28, 0x62	; 98
     286:	dd 4c       	sbci	r29, 0xCD	; 205
     288:	88 83       	st	Y, r24
		printf("%c", rn487x_usb_rx_buff[usb_rx_wptr]);
     28a:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     28e:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     292:	e2 56       	subi	r30, 0x62	; 98
     294:	fd 4c       	sbci	r31, 0xCD	; 205
     296:	80 81       	ld	r24, Z
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <putchar>
		usb_rx_wptr = (usb_rx_wptr + 1);
     29e:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     2a2:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	80 93 9c 32 	sts	0x329C, r24	; 0x80329c <usb_rx_wptr>
     2ac:	90 93 9d 32 	sts	0x329D, r25	; 0x80329d <usb_rx_wptr+0x1>
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <rn487x_usb_cdc_isr+0x50>
	}
	else
	{
		usb_cdc_get_data();
     2b2:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <usb_cdc_get_data>
	}


	
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <rn487x_cb_isr>:

}


static void rn487x_cb_isr()
{
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
     2c0:	c0 91 1e 33 	lds	r28, 0x331E	; 0x80331e <rx_wptr>
     2c4:	d0 91 1f 33 	lds	r29, 0x331F	; 0x80331f <rx_wptr+0x1>
     2c8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <rx487x_get_data>
     2cc:	c0 5e       	subi	r28, 0xE0	; 224
     2ce:	dc 4c       	sbci	r29, 0xCC	; 204
     2d0:	88 83       	st	Y, r24
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
     2d2:	80 91 1e 33 	lds	r24, 0x331E	; 0x80331e <rx_wptr>
     2d6:	90 91 1f 33 	lds	r25, 0x331F	; 0x80331f <rx_wptr+0x1>
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	99 27       	eor	r25, r25
     2de:	80 93 1e 33 	sts	0x331E, r24	; 0x80331e <rx_wptr>
     2e2:	90 93 1f 33 	sts	0x331F, r25	; 0x80331f <rx_wptr+0x1>
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <rn487x_send_ascii_command>:

void rn487x_send_ascii_command(const uint8_t* cmd)
{
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	8c 01       	movw	r16, r24
	uint8_t id = 0;
	

	rn487x_clear_rx_buff();
     2f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <rn487x_clear_rx_buff>
	
	// enter cmd mode
	rx487x_write('$');
     2fc:	84 e2       	ldi	r24, 0x24	; 36
     2fe:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('$');
     302:	84 e2       	ldi	r24, 0x24	; 36
     304:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('$');
     308:	84 e2       	ldi	r24, 0x24	; 36
     30a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
     30e:	2a e6       	ldi	r18, 0x6A	; 106
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	21 50       	subi	r18, 0x01	; 1
     316:	80 40       	sbci	r24, 0x00	; 0
     318:	90 40       	sbci	r25, 0x00	; 0
     31a:	e1 f7       	brne	.-8      	; 0x314 <rn487x_send_ascii_command+0x28>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <rn487x_send_ascii_command+0x32>
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     31e:	f1 2c       	mov	r15, r1
     320:	08 c0       	rjmp	.+16     	; 0x332 <rn487x_send_ascii_command+0x46>

	_delay_ms(100);

	while(cmd[id] != NULL)
	{
		if(rx487x_is_tx_ready())
     322:	0e 94 75 0d 	call	0x1aea	; 0x1aea <rx487x_is_tx_ready>
     326:	88 23       	and	r24, r24
     328:	21 f0       	breq	.+8      	; 0x332 <rn487x_send_ascii_command+0x46>
		{
			rx487x_write(cmd[id]);
     32a:	88 81       	ld	r24, Y
     32c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
			id++;
     330:	f3 94       	inc	r15
	rx487x_write('$');
	rx487x_write('$');

	_delay_ms(100);

	while(cmd[id] != NULL)
     332:	e8 01       	movw	r28, r16
     334:	cf 0d       	add	r28, r15
     336:	d1 1d       	adc	r29, r1
     338:	88 81       	ld	r24, Y
     33a:	81 11       	cpse	r24, r1
     33c:	f2 cf       	rjmp	.-28     	; 0x322 <rn487x_send_ascii_command+0x36>
     33e:	2f e3       	ldi	r18, 0x3F	; 63
     340:	8d e0       	ldi	r24, 0x0D	; 13
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	21 50       	subi	r18, 0x01	; 1
     346:	80 40       	sbci	r24, 0x00	; 0
     348:	90 40       	sbci	r25, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <rn487x_send_ascii_command+0x58>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <rn487x_send_ascii_command+0x62>
     34e:	00 00       	nop
	}

	_delay_ms(RN487X_DELAY_WAIT_FOR_RESPONSE);

	//exit cmd mode
	rx487x_write('-');
     350:	8d e2       	ldi	r24, 0x2D	; 45
     352:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('-');
     356:	8d e2       	ldi	r24, 0x2D	; 45
     358:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('-');
     35c:	8d e2       	ldi	r24, 0x2D	; 45
     35e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('\r');
     362:	8d e0       	ldi	r24, 0x0D	; 13
     364:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
	rx487x_write('\n');
     368:	8a e0       	ldi	r24, 0x0A	; 10
     36a:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <rx487x_write>
     36e:	2a e6       	ldi	r18, 0x6A	; 106
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <rn487x_send_ascii_command+0x88>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <rn487x_send_ascii_command+0x92>

	_delay_ms(100);
	
	#ifdef PRINT_DEBUG_MSG
	printf("%s", cmd);
     37e:	1f 93       	push	r17
     380:	0f 93       	push	r16
     382:	c1 e5       	ldi	r28, 0x51	; 81
     384:	d5 e7       	ldi	r29, 0x75	; 117
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
	printf("%s", rn487x_rx_buff);
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	93 e3       	ldi	r25, 0x33	; 51
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
	#endif

}
     39e:	8d b7       	in	r24, 0x3d	; 61
     3a0:	9e b7       	in	r25, 0x3e	; 62
     3a2:	08 96       	adiw	r24, 0x08	; 8
     3a4:	8d bf       	out	0x3d, r24	; 61
     3a6:	9e bf       	out	0x3e, r25	; 62
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	08 95       	ret

000003b4 <rx487x_factory_reset>:

}

static ble_error_t rx487x_factory_reset(struct ble_server* ctx)
{	
	rn487x_send_ascii_command("SF,2\r\n");
     3b4:	84 e5       	ldi	r24, 0x54	; 84
     3b6:	95 e7       	ldi	r25, 0x75	; 117
     3b8:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     3bc:	0e 94 05 01 	call	0x20a	; 0x20a <rn487x_get_err_from_response>
	else
	{
		//perror("Factory reset failed\r\n");
		return 0;
	}
}
     3c0:	08 95       	ret

000003c2 <rn487x_start_advertising>:

/* GAP OPS */

ble_error_t rn487x_start_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("A\r\n");
     3c2:	8b e5       	ldi	r24, 0x5B	; 91
     3c4:	95 e7       	ldi	r25, 0x75	; 117
     3c6:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     3ca:	08 95       	ret

000003cc <rn487x_stop_advertising>:

ble_error_t rn487x_stop_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("Y\r\n");
     3cc:	8f e5       	ldi	r24, 0x5F	; 95
     3ce:	95 e7       	ldi	r25, 0x75	; 117
     3d0:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     3d4:	08 95       	ret

000003d6 <rn487x_kill_connection>:

ble_error_t rn487x_kill_connection(struct ble_server* ctx)
{
	rn487x_send_ascii_command("K,1\r\n");
     3d6:	83 e6       	ldi	r24, 0x63	; 99
     3d8:	95 e7       	ldi	r25, 0x75	; 117
     3da:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     3de:	08 95       	ret

000003e0 <rn487x_clear_bonding_info>:

ble_error_t rn487x_clear_bonding_info(struct ble_server* ctx)
{
	rn487x_send_ascii_command("U,Z\r\n");
     3e0:	89 e6       	ldi	r24, 0x69	; 105
     3e2:	95 e7       	ldi	r25, 0x75	; 117
     3e4:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     3e8:	08 95       	ret

000003ea <rn487x_register_service>:
	return BLE_NOERR;
}

ble_error_t rn487x_register_service(struct gatt_service* service)
{
	sprintf(rn487x_cmd_buff_a, "PS,%s\r\n", service->UUID);
     3ea:	fc 01       	movw	r30, r24
     3ec:	21 81       	ldd	r18, Z+1	; 0x01
     3ee:	2f 93       	push	r18
     3f0:	80 81       	ld	r24, Z
     3f2:	8f 93       	push	r24
     3f4:	8f e6       	ldi	r24, 0x6F	; 111
     3f6:	95 e7       	ldi	r25, 0x75	; 117
     3f8:	9f 93       	push	r25
     3fa:	8f 93       	push	r24
     3fc:	8c e9       	ldi	r24, 0x9C	; 156
     3fe:	91 e3       	ldi	r25, 0x31	; 49
     400:	9f 93       	push	r25
     402:	8f 93       	push	r24
     404:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     408:	8c e9       	ldi	r24, 0x9C	; 156
     40a:	91 e3       	ldi	r25, 0x31	; 49
     40c:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     410:	0e 94 05 01 	call	0x20a	; 0x20a <rn487x_get_err_from_response>
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
}
     420:	08 95       	ret

00000422 <rn487x_register_characteristic>:

ble_error_t rn487x_register_characteristic(struct gatt_characteristic* characteristic)
{
     422:	fc 01       	movw	r30, r24
	sprintf(rn487x_cmd_buff_a, "PC,%s,%02X,%02X\r\n", characteristic->UUID, characteristic->properties, characteristic->data_len);
     424:	95 81       	ldd	r25, Z+5	; 0x05
     426:	84 81       	ldd	r24, Z+4	; 0x04
     428:	1f 92       	push	r1
     42a:	9f 93       	push	r25
     42c:	1f 92       	push	r1
     42e:	8f 93       	push	r24
     430:	81 81       	ldd	r24, Z+1	; 0x01
     432:	8f 93       	push	r24
     434:	80 81       	ld	r24, Z
     436:	8f 93       	push	r24
     438:	87 e7       	ldi	r24, 0x77	; 119
     43a:	95 e7       	ldi	r25, 0x75	; 117
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	8c e9       	ldi	r24, 0x9C	; 156
     442:	91 e3       	ldi	r25, 0x31	; 49
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     44c:	8c e9       	ldi	r24, 0x9C	; 156
     44e:	91 e3       	ldi	r25, 0x31	; 49
     450:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     454:	0e 94 05 01 	call	0x20a	; 0x20a <rn487x_get_err_from_response>
     458:	2d b7       	in	r18, 0x3d	; 61
     45a:	3e b7       	in	r19, 0x3e	; 62
     45c:	26 5f       	subi	r18, 0xF6	; 246
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	2d bf       	out	0x3d, r18	; 61
     462:	3e bf       	out	0x3e, r19	; 62
}
     464:	08 95       	ret

00000466 <rn487x_gatt_init>:
};

/* Helper GATT Functions */

ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
     466:	2f 92       	push	r2
     468:	3f 92       	push	r3
     46a:	4f 92       	push	r4
     46c:	5f 92       	push	r5
     46e:	6f 92       	push	r6
     470:	7f 92       	push	r7
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	e2 97       	sbiw	r28, 0x32	; 50
     490:	cd bf       	out	0x3d, r28	; 61
     492:	de bf       	out	0x3e, r29	; 62
     494:	2c 01       	movw	r4, r24
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;
     496:	dc 01       	movw	r26, r24
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
     49c:	22 88       	ldd	r2, Z+18	; 0x12
     49e:	33 88       	ldd	r3, Z+19	; 0x13

	for(short i = 0; i < ctx->config->services_count; i++)
     4a0:	61 2c       	mov	r6, r1
     4a2:	71 2c       	mov	r7, r1
     4a4:	6a c0       	rjmp	.+212    	; 0x57a <rn487x_gatt_init+0x114>
	{
		struct gatt_service* service = (*services)[i];
     4a6:	f3 01       	movw	r30, r6
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	e2 0d       	add	r30, r2
     4ae:	f3 1d       	adc	r31, r3
     4b0:	c0 80       	ld	r12, Z
     4b2:	d1 80       	ldd	r13, Z+1	; 0x01
		
		rn487x_register_service(service);
     4b4:	c6 01       	movw	r24, r12
     4b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <rn487x_register_service>

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;
     4ba:	f6 01       	movw	r30, r12
     4bc:	86 80       	ldd	r8, Z+6	; 0x06
     4be:	97 80       	ldd	r9, Z+7	; 0x07

		for(short j = 0; j < service->characteristics_count; j++)
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	4d c0       	rjmp	.+154    	; 0x560 <rn487x_gatt_init+0xfa>
		{
			struct gatt_characteristic* characteristic = (*characteristics)[j];
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	f4 01       	movw	r30, r8
     4cc:	e8 0f       	add	r30, r24
     4ce:	f9 1f       	adc	r31, r25
     4d0:	00 81       	ld	r16, Z
     4d2:	11 81       	ldd	r17, Z+1	; 0x01

			if(rn487x_register_characteristic(characteristic))
     4d4:	c8 01       	movw	r24, r16
     4d6:	0e 94 11 02 	call	0x422	; 0x422 <rn487x_register_characteristic>
     4da:	88 23       	and	r24, r24
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <rn487x_gatt_init+0x7a>
     4de:	65 c0       	rjmp	.+202    	; 0x5aa <rn487x_gatt_init+0x144>
			{
				uint8_t buff[50];
				uint8_t* res;

				// list all characteristics in the service
				sprintf(buff, "LS,%s\r\n", service->UUID);
     4e0:	d6 01       	movw	r26, r12
     4e2:	11 96       	adiw	r26, 0x01	; 1
     4e4:	8c 91       	ld	r24, X
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	8f 93       	push	r24
     4ea:	8c 91       	ld	r24, X
     4ec:	8f 93       	push	r24
     4ee:	89 e8       	ldi	r24, 0x89	; 137
     4f0:	95 e7       	ldi	r25, 0x75	; 117
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	fe 01       	movw	r30, r28
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	7f 01       	movw	r14, r30
     4fc:	ff 93       	push	r31
     4fe:	ef 93       	push	r30
     500:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
				rn487x_send_ascii_command(buff);
     504:	c7 01       	movw	r24, r14
     506:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>

				// find this characteristic from the LS
				// XXXX...X,0000,00
				res = strstr(rn487x_rx_buff, characteristic->UUID);
     50a:	d8 01       	movw	r26, r16
     50c:	ed 90       	ld	r14, X+
     50e:	fc 90       	ld	r15, X
     510:	b7 01       	movw	r22, r14
     512:	80 e2       	ldi	r24, 0x20	; 32
     514:	93 e3       	ldi	r25, 0x33	; 51
     516:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
				res =  res +  strlen(characteristic->UUID) + 1;
     51a:	f7 01       	movw	r30, r14
     51c:	01 90       	ld	r0, Z+
     51e:	00 20       	and	r0, r0
     520:	e9 f7       	brne	.-6      	; 0x51c <rn487x_gatt_init+0xb6>
     522:	31 97       	sbiw	r30, 0x01	; 1
     524:	ee 19       	sub	r30, r14
     526:	ff 09       	sbc	r31, r15
     528:	31 96       	adiw	r30, 0x01	; 1
				
				//uint8_t* endptr;
				characteristic->handle = strtol(res, NULL, 16);
     52a:	40 e1       	ldi	r20, 0x10	; 16
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	8e 0f       	add	r24, r30
     534:	9f 1f       	adc	r25, r31
     536:	0e 94 ff 13 	call	0x27fe	; 0x27fe <strtol>
     53a:	f8 01       	movw	r30, r16
     53c:	62 83       	std	Z+2, r22	; 0x02
     53e:	73 83       	std	Z+3, r23	; 0x03

				#ifdef PRINT_DEBUG_MSG
				printf("Registered characteristic %s, with handle %04X\r\n", characteristic->UUID, characteristic->handle);
     540:	7f 93       	push	r23
     542:	6f 93       	push	r22
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	8f 93       	push	r24
     548:	80 81       	ld	r24, Z
     54a:	8f 93       	push	r24
     54c:	81 e9       	ldi	r24, 0x91	; 145
     54e:	95 e7       	ldi	r25, 0x75	; 117
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
		
		rn487x_register_service(service);

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;

		for(short j = 0; j < service->characteristics_count; j++)
     558:	c5 01       	movw	r24, r10
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	d6 01       	movw	r26, r12
     562:	14 96       	adiw	r26, 0x04	; 4
     564:	2d 91       	ld	r18, X+
     566:	3c 91       	ld	r19, X
     568:	15 97       	sbiw	r26, 0x05	; 5
     56a:	5c 01       	movw	r10, r24
     56c:	82 17       	cp	r24, r18
     56e:	93 07       	cpc	r25, r19
     570:	08 f4       	brcc	.+2      	; 0x574 <rn487x_gatt_init+0x10e>
     572:	a9 cf       	rjmp	.-174    	; 0x4c6 <rn487x_gatt_init+0x60>
ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;

	for(short i = 0; i < ctx->config->services_count; i++)
     574:	bf ef       	ldi	r27, 0xFF	; 255
     576:	6b 1a       	sub	r6, r27
     578:	7b 0a       	sbc	r7, r27
     57a:	d2 01       	movw	r26, r4
     57c:	ed 91       	ld	r30, X+
     57e:	fc 91       	ld	r31, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	81 89       	ldd	r24, Z+17	; 0x11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	68 16       	cp	r6, r24
     588:	79 06       	cpc	r7, r25
     58a:	0c f4       	brge	.+2      	; 0x58e <rn487x_gatt_init+0x128>
     58c:	8c cf       	rjmp	.-232    	; 0x4a6 <rn487x_gatt_init+0x40>
				return BLE_FAIL;
			}
		}
	}

	ctx->sys->reboot(ctx);
     58e:	12 96       	adiw	r26, 0x02	; 2
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	13 97       	sbiw	r26, 0x03	; 3
     596:	02 80       	ldd	r0, Z+2	; 0x02
     598:	f3 81       	ldd	r31, Z+3	; 0x03
     59a:	e0 2d       	mov	r30, r0
     59c:	c2 01       	movw	r24, r4
     59e:	09 95       	icall
	rn487x_send_ascii_command("LS\r\n");
     5a0:	82 ec       	ldi	r24, 0xC2	; 194
     5a2:	95 e7       	ldi	r25, 0x75	; 117
     5a4:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
	return BLE_NOERR;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
}
     5aa:	e2 96       	adiw	r28, 0x32	; 50
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	7f 90       	pop	r7
     5ca:	6f 90       	pop	r6
     5cc:	5f 90       	pop	r5
     5ce:	4f 90       	pop	r4
     5d0:	3f 90       	pop	r3
     5d2:	2f 90       	pop	r2
     5d4:	08 95       	ret

000005d6 <rn487x_set_address>:
}

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	7b 01       	movw	r14, r22
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     5e8:	0c e9       	ldi	r16, 0x9C	; 156
     5ea:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     5ec:	17 c0       	rjmp	.+46     	; 0x61c <rn487x_set_address+0x46>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     5ee:	f7 01       	movw	r30, r14
     5f0:	ec 0f       	add	r30, r28
     5f2:	fd 1f       	adc	r31, r29
     5f4:	80 81       	ld	r24, Z
     5f6:	1f 92       	push	r1
     5f8:	8f 93       	push	r24
     5fa:	87 ec       	ldi	r24, 0xC7	; 199
     5fc:	95 e7       	ldi	r25, 0x75	; 117
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	1f 93       	push	r17
     604:	0f 93       	push	r16
     606:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
     60a:	08 0f       	add	r16, r24
     60c:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     60e:	21 96       	adiw	r28, 0x01	; 1
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	c6 30       	cpi	r28, 0x06	; 6
     61e:	d1 05       	cpc	r29, r1
     620:	34 f3       	brlt	.-52     	; 0x5ee <rn487x_set_address+0x18>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "&,%s\r\n", rn487x_cmd_buff_b);
     622:	8c e9       	ldi	r24, 0x9C	; 156
     624:	90 e3       	ldi	r25, 0x30	; 48
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	8c ec       	ldi	r24, 0xCC	; 204
     62c:	95 e7       	ldi	r25, 0x75	; 117
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	8c e9       	ldi	r24, 0x9C	; 156
     634:	91 e3       	ldi	r25, 0x31	; 49
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     63e:	8c e9       	ldi	r24, 0x9C	; 156
     640:	91 e3       	ldi	r25, 0x31	; 49
     642:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	08 95       	ret

00000660 <rn487x_set_device_name>:

ble_error_t rn487x_set_device_name(struct ble_server* ctx, const uint8_t* name)
{
	sprintf(rn487x_cmd_buff_a, "S-,%s\r\n", name);
     660:	7f 93       	push	r23
     662:	6f 93       	push	r22
     664:	83 ed       	ldi	r24, 0xD3	; 211
     666:	95 e7       	ldi	r25, 0x75	; 117
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	8c e9       	ldi	r24, 0x9C	; 156
     66e:	91 e3       	ldi	r25, 0x31	; 49
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     678:	8c e9       	ldi	r24, 0x9C	; 156
     67a:	91 e3       	ldi	r25, 0x31	; 49
     67c:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	08 95       	ret

0000068e <rn487x_set_appearance>:

ble_error_t rn487x_set_appearance(struct ble_server* ctx, const ble_gap_appearance_t appearance)
{
	sprintf(rn487x_cmd_buff_a, "SDA,%04X\r\n", appearance);
     68e:	7f 93       	push	r23
     690:	6f 93       	push	r22
     692:	8b ed       	ldi	r24, 0xDB	; 219
     694:	95 e7       	ldi	r25, 0x75	; 117
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	8c e9       	ldi	r24, 0x9C	; 156
     69c:	91 e3       	ldi	r25, 0x31	; 49
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     6a6:	8c e9       	ldi	r24, 0x9C	; 156
     6a8:	91 e3       	ldi	r25, 0x31	; 49
     6aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	08 95       	ret

000006bc <rn487x_set_connection_params>:
ble_error_t rn487x_set_connection_params(struct ble_server* ctx,
											const uint16_t min_interval,
											const uint16_t max_interval,
											const uint16_t latency,
											const uint16_t timeout)
{
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
	// ST,<hex16>,<hex16>,<hex16>,<hex16>
	sprintf(rn487x_cmd_buff_a, "ST,%04X,%04X,%04X,%04X\r\n",
     6c0:	1f 93       	push	r17
     6c2:	0f 93       	push	r16
     6c4:	3f 93       	push	r19
     6c6:	2f 93       	push	r18
     6c8:	5f 93       	push	r21
     6ca:	4f 93       	push	r20
     6cc:	7f 93       	push	r23
     6ce:	6f 93       	push	r22
     6d0:	86 ee       	ldi	r24, 0xE6	; 230
     6d2:	95 e7       	ldi	r25, 0x75	; 117
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	8c e9       	ldi	r24, 0x9C	; 156
     6da:	91 e3       	ldi	r25, 0x31	; 49
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	min_interval, max_interval, latency, timeout);

	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     6e4:	8c e9       	ldi	r24, 0x9C	; 156
     6e6:	91 e3       	ldi	r25, 0x31	; 49
     6e8:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>

}
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	0c 96       	adiw	r24, 0x0c	; 12
     6f2:	8d bf       	out	0x3d, r24	; 61
     6f4:	9e bf       	out	0x3e, r25	; 62
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <rn487x_set_security>:

ble_error_t rn487x_set_security(struct ble_server* ctx,
										const ble_io_capabilities_t io_capabilities,
										const uint8_t* passkey)
{
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	14 2f       	mov	r17, r20
     706:	05 2f       	mov	r16, r21
	sprintf(rn487x_cmd_buff_a, "SA,%d\r\n", io_capabilities);
     708:	1f 92       	push	r1
     70a:	6f 93       	push	r22
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	95 e7       	ldi	r25, 0x75	; 117
     710:	9f 93       	push	r25
     712:	8f 93       	push	r24
     714:	cc e9       	ldi	r28, 0x9C	; 156
     716:	d1 e3       	ldi	r29, 0x31	; 49
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     720:	ce 01       	movw	r24, r28
     722:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>

	sprintf(rn487x_cmd_buff_a, "SP,%s\r\n", passkey);
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	87 e0       	ldi	r24, 0x07	; 7
     72c:	96 e7       	ldi	r25, 0x76	; 118
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     73a:	ce 01       	movw	r24, r28
     73c:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     740:	8d b7       	in	r24, 0x3d	; 61
     742:	9e b7       	in	r25, 0x3e	; 62
     744:	0c 96       	adiw	r24, 0x0c	; 12
     746:	8d bf       	out	0x3d, r24	; 61
     748:	9e bf       	out	0x3e, r25	; 62
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <rn487x_gap_init>:

ble_error_t rn487x_gap_init(struct ble_server* ctx)
{
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	ec 01       	movw	r28, r24
	if(ctx->config->address != NULL)
     75e:	e8 81       	ld	r30, Y
     760:	f9 81       	ldd	r31, Y+1	; 0x01
     762:	60 81       	ld	r22, Z
     764:	71 81       	ldd	r23, Z+1	; 0x01
     766:	61 15       	cp	r22, r1
     768:	71 05       	cpc	r23, r1
     76a:	11 f0       	breq	.+4      	; 0x770 <rn487x_gap_init+0x1c>
	rn487x_set_address(ctx, ctx->config->address);
     76c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <rn487x_set_address>

	if(ctx->config->device_name != NULL)
     770:	e8 81       	ld	r30, Y
     772:	f9 81       	ldd	r31, Y+1	; 0x01
     774:	62 81       	ldd	r22, Z+2	; 0x02
     776:	73 81       	ldd	r23, Z+3	; 0x03
     778:	61 15       	cp	r22, r1
     77a:	71 05       	cpc	r23, r1
     77c:	19 f0       	breq	.+6      	; 0x784 <rn487x_gap_init+0x30>
	rn487x_set_device_name(ctx, ctx->config->device_name);
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 30 03 	call	0x660	; 0x660 <rn487x_set_device_name>

	rn487x_set_security(ctx, ctx->config->io_capabilities, ctx->config->passkey);
     784:	e8 81       	ld	r30, Y
     786:	f9 81       	ldd	r31, Y+1	; 0x01
     788:	45 81       	ldd	r20, Z+5	; 0x05
     78a:	56 81       	ldd	r21, Z+6	; 0x06
     78c:	64 81       	ldd	r22, Z+4	; 0x04
     78e:	ce 01       	movw	r24, r28
     790:	0e 94 7e 03 	call	0x6fc	; 0x6fc <rn487x_set_security>
	rn487x_set_appearance(ctx, ctx->config->advertisement_appearance);
     794:	e8 81       	ld	r30, Y
     796:	f9 81       	ldd	r31, Y+1	; 0x01
     798:	67 81       	ldd	r22, Z+7	; 0x07
     79a:	70 85       	ldd	r23, Z+8	; 0x08
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 47 03 	call	0x68e	; 0x68e <rn487x_set_appearance>
	rn487x_set_connection_params(ctx, ctx->config->connection_min_interval, ctx->config->connection_max_interval, ctx->config->connection_latency, ctx->config->connection_timeout);
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	07 85       	ldd	r16, Z+15	; 0x0f
     7a8:	10 89       	ldd	r17, Z+16	; 0x10
     7aa:	25 85       	ldd	r18, Z+13	; 0x0d
     7ac:	36 85       	ldd	r19, Z+14	; 0x0e
     7ae:	43 85       	ldd	r20, Z+11	; 0x0b
     7b0:	54 85       	ldd	r21, Z+12	; 0x0c
     7b2:	61 85       	ldd	r22, Z+9	; 0x09
     7b4:	72 85       	ldd	r23, Z+10	; 0x0a
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <rn487x_set_connection_params>
	
	ctx->sys->reboot(ctx);
     7bc:	ea 81       	ldd	r30, Y+2	; 0x02
     7be:	fb 81       	ldd	r31, Y+3	; 0x03
     7c0:	02 80       	ldd	r0, Z+2	; 0x02
     7c2:	f3 81       	ldd	r31, Z+3	; 0x03
     7c4:	e0 2d       	mov	r30, r0
     7c6:	ce 01       	movw	r24, r28
     7c8:	09 95       	icall
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <rn487x_init>:
	rn487x_parse_responses(ctx);
	//rn487x_clear_rx_buff();
}

ble_error_t rn487x_init(struct ble_server* ctx)
{
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24

	#ifdef PRINT_DEBUG_MSG
	printf("\r\nInitializing rn487x\r\n");
     7da:	8f e0       	ldi	r24, 0x0F	; 15
     7dc:	96 e7       	ldi	r25, 0x76	; 118
     7de:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <puts>
	#endif

	rx487x_set_ISR_cb(rn487x_cb_isr, RX_CB);
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	8e e5       	ldi	r24, 0x5E	; 94
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <rx487x_set_ISR_cb>
	usb_cdc_set_ISR_cb(rn487x_usb_cdc_isr, RX_CB);
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	83 e3       	ldi	r24, 0x33	; 51
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <usb_cdc_set_ISR_cb>

	ctx->sys->reboot(ctx);
     7f6:	ea 81       	ldd	r30, Y+2	; 0x02
     7f8:	fb 81       	ldd	r31, Y+3	; 0x03
     7fa:	02 80       	ldd	r0, Z+2	; 0x02
     7fc:	f3 81       	ldd	r31, Z+3	; 0x03
     7fe:	e0 2d       	mov	r30, r0
     800:	ce 01       	movw	r24, r28
     802:	09 95       	icall
	ctx->sys->factory_reset(ctx);
     804:	ea 81       	ldd	r30, Y+2	; 0x02
     806:	fb 81       	ldd	r31, Y+3	; 0x03
     808:	04 80       	ldd	r0, Z+4	; 0x04
     80a:	f5 81       	ldd	r31, Z+5	; 0x05
     80c:	e0 2d       	mov	r30, r0
     80e:	ce 01       	movw	r24, r28
     810:	09 95       	icall

	rn487x_gap_init(ctx);
     812:	ce 01       	movw	r24, r28
     814:	0e 94 aa 03 	call	0x754	; 0x754 <rn487x_gap_init>
	rn487x_gatt_init(ctx);
     818:	ce 01       	movw	r24, r28
     81a:	0e 94 33 02 	call	0x466	; 0x466 <rn487x_gatt_init>

	rn487x_clear_rx_buff();
     81e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <rn487x_clear_rx_buff>
     822:	2a e6       	ldi	r18, 0x6A	; 106
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <rn487x_init+0x54>
     830:	00 c0       	rjmp	.+0      	; 0x832 <rn487x_init+0x5e>
	_delay_ms(100);
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <rn487x_read_handle>:
}

/* Helper ASCII Functions */

ble_error_t rn487x_read_handle(uint8_t handle, uint8_t data_len, uint8_t destination[])
{
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	e6 2e       	mov	r14, r22
     84a:	6a 01       	movw	r12, r20
	sprintf(rn487x_cmd_buff_a, "SHR,%04X\r\n", handle);
     84c:	1f 92       	push	r1
     84e:	8f 93       	push	r24
     850:	86 e2       	ldi	r24, 0x26	; 38
     852:	96 e7       	ldi	r25, 0x76	; 118
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	8c e9       	ldi	r24, 0x9C	; 156
     85a:	91 e3       	ldi	r25, 0x31	; 49
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     864:	8c e9       	ldi	r24, 0x9C	; 156
     866:	91 e3       	ldi	r25, 0x31	; 49
     868:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
	
	if(rn487x_get_err_from_response())
     86c:	0e 94 05 01 	call	0x20a	; 0x20a <rn487x_get_err_from_response>
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	88 23       	and	r24, r24
     87e:	49 f1       	breq	.+82     	; 0x8d2 <rn487x_read_handle+0x9a>
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
     880:	f1 2c       	mov	r15, r1
     882:	a7 01       	movw	r20, r14
     884:	44 0f       	add	r20, r20
     886:	55 1f       	adc	r21, r21
     888:	65 e2       	ldi	r22, 0x25	; 37
     88a:	73 e3       	ldi	r23, 0x33	; 51
     88c:	8c e9       	ldi	r24, 0x9C	; 156
     88e:	91 e3       	ldi	r25, 0x31	; 49
     890:	0e 94 01 16 	call	0x2c02	; 0x2c02 <strncpy>
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < data_len; i++)
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;
     898:	0c e9       	ldi	r16, 0x9C	; 156
     89a:	11 e3       	ldi	r17, 0x31	; 49

		for (short i = 0; i < data_len; i++)
     89c:	16 c0       	rjmp	.+44     	; 0x8ca <rn487x_read_handle+0x92>
		{
			sscanf(pos, "%2hhX", &destination[i]);
     89e:	c6 01       	movw	r24, r12
     8a0:	8c 0f       	add	r24, r28
     8a2:	9d 1f       	adc	r25, r29
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	81 e3       	ldi	r24, 0x31	; 49
     8aa:	96 e7       	ldi	r25, 0x76	; 118
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <sscanf>
			pos = pos + 2;
     8b8:	0e 5f       	subi	r16, 0xFE	; 254
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < data_len; i++)
     8bc:	21 96       	adiw	r28, 0x01	; 1
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	ce 15       	cp	r28, r14
     8cc:	df 05       	cpc	r29, r15
     8ce:	3c f3       	brlt	.-50     	; 0x89e <rn487x_read_handle+0x66>
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <rn487x_read_handle+0x9e>
		}

	}
	else
	{
		return BLE_FAIL;
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <rn487x_read_handle+0x9e>
	}

}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <rn487x_read_value>:
};

/* GATT OPS */

ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     8e8:	ab 01       	movw	r20, r22
	return rn487x_read_handle(characteristic->handle, characteristic->data_len, destination);
     8ea:	fc 01       	movw	r30, r24
     8ec:	65 81       	ldd	r22, Z+5	; 0x05
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	0e 94 1c 04 	call	0x838	; 0x838 <rn487x_read_handle>
}
     8f4:	08 95       	ret

000008f6 <rn487x_read_notification>:
{
	return rn487x_write_handle(characteristic->handle, characteristic->data_len, payload);
}

ble_error_t rn487x_read_notification(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     8f6:	fc 01       	movw	r30, r24
     8f8:	ab 01       	movw	r20, r22
	return rn487x_read_handle(characteristic->handle+1, characteristic->data_len, destination);
     8fa:	82 81       	ldd	r24, Z+2	; 0x02
     8fc:	65 81       	ldd	r22, Z+5	; 0x05
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	0e 94 1c 04 	call	0x838	; 0x838 <rn487x_read_handle>
}
     904:	08 95       	ret

00000906 <rn487x_write_handle>:
	}

}

ble_error_t rn487x_write_handle(uint8_t handle, uint8_t data_len, const uint8_t payload[])
{
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	c8 2e       	mov	r12, r24
     918:	d6 2e       	mov	r13, r22
     91a:	7a 01       	movw	r14, r20
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < data_len; i++)
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	d0 e0       	ldi	r29, 0x00	; 0

}

ble_error_t rn487x_write_handle(uint8_t handle, uint8_t data_len, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     920:	0c e9       	ldi	r16, 0x9C	; 156
     922:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < data_len; i++)
     924:	17 c0       	rjmp	.+46     	; 0x954 <rn487x_write_handle+0x4e>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     926:	f7 01       	movw	r30, r14
     928:	ec 0f       	add	r30, r28
     92a:	fd 1f       	adc	r31, r29
     92c:	80 81       	ld	r24, Z
     92e:	1f 92       	push	r1
     930:	8f 93       	push	r24
     932:	87 ec       	ldi	r24, 0xC7	; 199
     934:	95 e7       	ldi	r25, 0x75	; 117
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	1f 93       	push	r17
     93c:	0f 93       	push	r16
     93e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
     942:	08 0f       	add	r16, r24
     944:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < data_len; i++)
     946:	21 96       	adiw	r28, 0x01	; 1
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	8d 2d       	mov	r24, r13
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	c8 17       	cp	r28, r24
     95a:	d9 07       	cpc	r29, r25
     95c:	24 f3       	brlt	.-56     	; 0x926 <rn487x_write_handle+0x20>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "SHW,%04X,%s\r\n", handle, rn487x_cmd_buff_b);
     95e:	8c e9       	ldi	r24, 0x9C	; 156
     960:	90 e3       	ldi	r25, 0x30	; 48
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	1f 92       	push	r1
     968:	cf 92       	push	r12
     96a:	87 e3       	ldi	r24, 0x37	; 55
     96c:	96 e7       	ldi	r25, 0x76	; 118
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	8c e9       	ldi	r24, 0x9C	; 156
     974:	91 e3       	ldi	r25, 0x31	; 49
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     97e:	8c e9       	ldi	r24, 0x9C	; 156
     980:	91 e3       	ldi	r25, 0x31	; 49
     982:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>
}
     986:	8d b7       	in	r24, 0x3d	; 61
     988:	9e b7       	in	r25, 0x3e	; 62
     98a:	08 96       	adiw	r24, 0x08	; 8
     98c:	8d bf       	out	0x3d, r24	; 61
     98e:	9e bf       	out	0x3e, r25	; 62
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <rn487x_write_value>:
{
	return rn487x_read_handle(characteristic->handle, characteristic->data_len, destination);
}

ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     9a2:	ab 01       	movw	r20, r22
	return rn487x_write_handle(characteristic->handle, characteristic->data_len, payload);
     9a4:	fc 01       	movw	r30, r24
     9a6:	65 81       	ldd	r22, Z+5	; 0x05
     9a8:	82 81       	ldd	r24, Z+2	; 0x02
     9aa:	0e 94 83 04 	call	0x906	; 0x906 <rn487x_write_handle>
}
     9ae:	08 95       	ret

000009b0 <rn487x_send_notification>:
{
	return rn487x_read_handle(characteristic->handle+1, characteristic->data_len, destination);
}

ble_error_t rn487x_send_notification(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     9b0:	fc 01       	movw	r30, r24
     9b2:	ab 01       	movw	r20, r22
	return rn487x_write_handle(characteristic->handle+1, characteristic->data_len, payload);
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	65 81       	ldd	r22, Z+5	; 0x05
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	0e 94 83 04 	call	0x906	; 0x906 <rn487x_write_handle>
}
     9be:	08 95       	ret

000009c0 <rn487x_get_response>:
}

uint8_t* rn487x_get_response(void)
{
	return rn487x_rx_buff;
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	93 e3       	ldi	r25, 0x33	; 51
     9c4:	08 95       	ret

000009c6 <rn487x_parse_responses>:
	//.probe = rn487x_probe,
	
};

static void rn487x_parse_responses(struct ble_server* ctx)
{
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24

	if(ctx->events->cb_on_new_connection && 
     9d4:	08 85       	ldd	r16, Y+8	; 0x08
     9d6:	19 85       	ldd	r17, Y+9	; 0x09
     9d8:	f8 01       	movw	r30, r16
     9da:	e0 80       	ld	r14, Z
     9dc:	f1 80       	ldd	r15, Z+1	; 0x01
     9de:	e1 14       	cp	r14, r1
     9e0:	f1 04       	cpc	r15, r1
     9e2:	59 f0       	breq	.+22     	; 0x9fa <rn487x_parse_responses+0x34>
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
     9e4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     9e8:	65 e4       	ldi	r22, 0x45	; 69
     9ea:	76 e7       	ldi	r23, 0x76	; 118
     9ec:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
};

static void rn487x_parse_responses(struct ble_server* ctx)
{

	if(ctx->events->cb_on_new_connection && 
     9f0:	89 2b       	or	r24, r25
     9f2:	19 f0       	breq	.+6      	; 0x9fa <rn487x_parse_responses+0x34>
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
	{
		ctx->events->cb_on_new_connection();
     9f4:	f7 01       	movw	r30, r14
     9f6:	09 95       	icall
     9f8:	54 c0       	rjmp	.+168    	; 0xaa2 <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_connection_secured&& 
     9fa:	f8 01       	movw	r30, r16
     9fc:	e4 80       	ldd	r14, Z+4	; 0x04
     9fe:	f5 80       	ldd	r15, Z+5	; 0x05
     a00:	e1 14       	cp	r14, r1
     a02:	f1 04       	cpc	r15, r1
     a04:	59 f0       	breq	.+22     	; 0xa1c <rn487x_parse_responses+0x56>
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
     a06:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     a0a:	6f e4       	ldi	r22, 0x4F	; 79
     a0c:	76 e7       	ldi	r23, 0x76	; 118
     a0e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
	if(ctx->events->cb_on_new_connection && 
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
	{
		ctx->events->cb_on_new_connection();
	}
	else if(ctx->events->cb_on_connection_secured&& 
     a12:	89 2b       	or	r24, r25
     a14:	19 f0       	breq	.+6      	; 0xa1c <rn487x_parse_responses+0x56>
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
	{
		ctx->events->cb_on_connection_secured();
     a16:	f7 01       	movw	r30, r14
     a18:	09 95       	icall
     a1a:	43 c0       	rjmp	.+134    	; 0xaa2 <rn487x_parse_responses+0xdc>
	}	
	else if(ctx->events->cb_on_disconnect &&
     a1c:	f8 01       	movw	r30, r16
     a1e:	e2 80       	ldd	r14, Z+2	; 0x02
     a20:	f3 80       	ldd	r15, Z+3	; 0x03
     a22:	e1 14       	cp	r14, r1
     a24:	f1 04       	cpc	r15, r1
     a26:	59 f0       	breq	.+22     	; 0xa3e <rn487x_parse_responses+0x78>
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
     a28:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     a2c:	69 e5       	ldi	r22, 0x59	; 89
     a2e:	76 e7       	ldi	r23, 0x76	; 118
     a30:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
	else if(ctx->events->cb_on_connection_secured&& 
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
	{
		ctx->events->cb_on_connection_secured();
	}	
	else if(ctx->events->cb_on_disconnect &&
     a34:	89 2b       	or	r24, r25
     a36:	19 f0       	breq	.+6      	; 0xa3e <rn487x_parse_responses+0x78>
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
	{
		ctx->events->cb_on_disconnect();
     a38:	f7 01       	movw	r30, r14
     a3a:	09 95       	icall
     a3c:	32 c0       	rjmp	.+100    	; 0xaa2 <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_recieve_notification && 
     a3e:	f8 01       	movw	r30, r16
     a40:	e2 84       	ldd	r14, Z+10	; 0x0a
     a42:	f3 84       	ldd	r15, Z+11	; 0x0b
     a44:	e1 14       	cp	r14, r1
     a46:	f1 04       	cpc	r15, r1
     a48:	59 f0       	breq	.+22     	; 0xa60 <rn487x_parse_responses+0x9a>
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
     a4a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     a4e:	66 e6       	ldi	r22, 0x66	; 102
     a50:	76 e7       	ldi	r23, 0x76	; 118
     a52:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
	else if(ctx->events->cb_on_disconnect &&
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
	{
		ctx->events->cb_on_disconnect();
	}
	else if(ctx->events->cb_on_recieve_notification && 
     a56:	89 2b       	or	r24, r25
     a58:	19 f0       	breq	.+6      	; 0xa60 <rn487x_parse_responses+0x9a>
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
	{
		ctx->events->cb_on_recieve_notification();
     a5a:	f7 01       	movw	r30, r14
     a5c:	09 95       	icall
     a5e:	21 c0       	rjmp	.+66     	; 0xaa2 <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_recieve_write_request &&
     a60:	f8 01       	movw	r30, r16
     a62:	e4 84       	ldd	r14, Z+12	; 0x0c
     a64:	f5 84       	ldd	r15, Z+13	; 0x0d
     a66:	e1 14       	cp	r14, r1
     a68:	f1 04       	cpc	r15, r1
     a6a:	59 f0       	breq	.+22     	; 0xa82 <rn487x_parse_responses+0xbc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
     a6c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     a70:	6b e6       	ldi	r22, 0x6B	; 107
     a72:	76 e7       	ldi	r23, 0x76	; 118
     a74:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
	else if(ctx->events->cb_on_recieve_notification && 
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
	{
		ctx->events->cb_on_recieve_notification();
	}
	else if(ctx->events->cb_on_recieve_write_request &&
     a78:	89 2b       	or	r24, r25
     a7a:	19 f0       	breq	.+6      	; 0xa82 <rn487x_parse_responses+0xbc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
	{
		ctx->events->cb_on_recieve_write_request();
     a7c:	f7 01       	movw	r30, r14
     a7e:	09 95       	icall
     a80:	10 c0       	rjmp	.+32     	; 0xaa2 <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_bond && 
     a82:	f8 01       	movw	r30, r16
     a84:	06 81       	ldd	r16, Z+6	; 0x06
     a86:	17 81       	ldd	r17, Z+7	; 0x07
     a88:	01 15       	cp	r16, r1
     a8a:	11 05       	cpc	r17, r1
     a8c:	51 f0       	breq	.+20     	; 0xaa2 <rn487x_parse_responses+0xdc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_BONDED) != NULL)
     a8e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     a92:	60 e7       	ldi	r22, 0x70	; 112
     a94:	76 e7       	ldi	r23, 0x76	; 118
     a96:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strstr>
	else if(ctx->events->cb_on_recieve_write_request &&
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
	{
		ctx->events->cb_on_recieve_write_request();
	}
	else if(ctx->events->cb_on_bond && 
     a9a:	89 2b       	or	r24, r25
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <rn487x_parse_responses+0xdc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_BONDED) != NULL)
	{
		ctx->events->cb_on_bond();
     a9e:	f8 01       	movw	r30, r16
     aa0:	09 95       	icall
	}
	// for custom events
	if(ctx->events->cb_on_uart_response && rx_wptr > 0)
     aa2:	e8 85       	ldd	r30, Y+8	; 0x08
     aa4:	f9 85       	ldd	r31, Y+9	; 0x09
     aa6:	00 84       	ldd	r0, Z+8	; 0x08
     aa8:	f1 85       	ldd	r31, Z+9	; 0x09
     aaa:	e0 2d       	mov	r30, r0
     aac:	30 97       	sbiw	r30, 0x00	; 0
     aae:	39 f0       	breq	.+14     	; 0xabe <rn487x_parse_responses+0xf8>
     ab0:	80 91 1e 33 	lds	r24, 0x331E	; 0x80331e <rx_wptr>
     ab4:	90 91 1f 33 	lds	r25, 0x331F	; 0x80331f <rx_wptr+0x1>
     ab8:	89 2b       	or	r24, r25
     aba:	09 f0       	breq	.+2      	; 0xabe <rn487x_parse_responses+0xf8>
	{
		ctx->events->cb_on_uart_response();
     abc:	09 95       	icall
	}


	rn487x_clear_rx_buff();
     abe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <rn487x_clear_rx_buff>
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <rn487x_main_loop>:

static void rn487x_main_loop(struct ble_server* ctx)
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
	// enter pressed
	if(usb_rx_wptr > 0 && rn487x_usb_rx_buff[usb_rx_wptr-1] == 13) 
     ad6:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     ada:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     ade:	89 2b       	or	r24, r25
     ae0:	39 f1       	breq	.+78     	; 0xb30 <rn487x_main_loop+0x60>
     ae2:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     ae6:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     aea:	e3 56       	subi	r30, 0x63	; 99
     aec:	fd 4c       	sbci	r31, 0xCD	; 205
     aee:	80 81       	ld	r24, Z
     af0:	8d 30       	cpi	r24, 0x0D	; 13
     af2:	f1 f4       	brne	.+60     	; 0xb30 <rn487x_main_loop+0x60>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = '\n';
     af4:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     af8:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     afc:	e2 56       	subi	r30, 0x62	; 98
     afe:	fd 4c       	sbci	r31, 0xCD	; 205
     b00:	8a e0       	ldi	r24, 0x0A	; 10
     b02:	80 83       	st	Z, r24
		rn487x_usb_rx_buff[usb_rx_wptr+1] = '\0';
     b04:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     b08:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     b0c:	e1 56       	subi	r30, 0x61	; 97
     b0e:	fd 4c       	sbci	r31, 0xCD	; 205
     b10:	10 82       	st	Z, r1

		// send cmd
		rn487x_send_ascii_command(rn487x_usb_rx_buff);
     b12:	8e e9       	ldi	r24, 0x9E	; 158
     b14:	92 e3       	ldi	r25, 0x32	; 50
     b16:	0e 94 76 01 	call	0x2ec	; 0x2ec <rn487x_send_ascii_command>

		// reset buffer
		memset(rn487x_usb_rx_buff, NULL, RN487X_USB_CDC_BUFF_SIZE);
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	ee e9       	ldi	r30, 0x9E	; 158
     b1e:	f2 e3       	ldi	r31, 0x32	; 50
     b20:	df 01       	movw	r26, r30
     b22:	1d 92       	st	X+, r1
     b24:	8a 95       	dec	r24
     b26:	e9 f7       	brne	.-6      	; 0xb22 <rn487x_main_loop+0x52>
		usb_rx_wptr = 0;
     b28:	10 92 9c 32 	sts	0x329C, r1	; 0x80329c <usb_rx_wptr>
     b2c:	10 92 9d 32 	sts	0x329D, r1	; 0x80329d <usb_rx_wptr+0x1>
     b30:	bf e3       	ldi	r27, 0x3F	; 63
     b32:	2d e0       	ldi	r18, 0x0D	; 13
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	b1 50       	subi	r27, 0x01	; 1
     b38:	20 40       	sbci	r18, 0x00	; 0
     b3a:	80 40       	sbci	r24, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <rn487x_main_loop+0x66>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <rn487x_main_loop+0x70>
     b40:	00 00       	nop
	// on connection
	// on disconnect
	// on characteristic write
	//	

	printf("%s", rn487x_get_response());
     b42:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <rn487x_get_response>
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	81 e5       	ldi	r24, 0x51	; 81
     b4c:	95 e7       	ldi	r25, 0x75	; 117
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
	rn487x_parse_responses(ctx);
     b56:	ce 01       	movw	r24, r28
     b58:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <rn487x_parse_responses>
	//rn487x_clear_rx_buff();
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <calibrate>:

void calibrate()
{
	    int16_t data = 0;

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_RH_X2);
     b6a:	60 e3       	ldi	r22, 0x30	; 48
     b6c:	8f e5       	ldi	r24, 0x5F	; 95
     b6e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     b72:	90 e0       	ldi	r25, 0x00	; 0
	    H0_RH_X2 = data;
     b74:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <H0_RH_X2>
     b78:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <H0_RH_X2+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_RH_X2);
     b7c:	61 e3       	ldi	r22, 0x31	; 49
     b7e:	8f e5       	ldi	r24, 0x5F	; 95
     b80:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     b84:	90 e0       	ldi	r25, 0x00	; 0
	    H1_RH_X2 = data;
     b86:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <H1_RH_X2>
     b8a:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <H1_RH_X2+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_DEGC_X8);
     b8e:	62 e3       	ldi	r22, 0x32	; 50
     b90:	8f e5       	ldi	r24, 0x5F	; 95
     b92:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     b96:	90 e0       	ldi	r25, 0x00	; 0
	    T0_DEGC_X8 = data;
     b98:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <T0_DEGC_X8>
     b9c:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <T0_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_T0_MSB);
     ba0:	65 e3       	ldi	r22, 0x35	; 53
     ba2:	8f e5       	ldi	r24, 0x5F	; 95
     ba4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
	    T0_DEGC_X8 |= (data & 0x03) << 8;
     ba8:	83 70       	andi	r24, 0x03	; 3
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	98 2f       	mov	r25, r24
     bae:	88 27       	eor	r24, r24
     bb0:	20 91 5f 38 	lds	r18, 0x385F	; 0x80385f <T0_DEGC_X8>
     bb4:	30 91 60 38 	lds	r19, 0x3860	; 0x803860 <T0_DEGC_X8+0x1>
     bb8:	82 2b       	or	r24, r18
     bba:	93 2b       	or	r25, r19
     bbc:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <T0_DEGC_X8>
     bc0:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <T0_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_DEGC_X8);
     bc4:	63 e3       	ldi	r22, 0x33	; 51
     bc6:	8f e5       	ldi	r24, 0x5F	; 95
     bc8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     bcc:	90 e0       	ldi	r25, 0x00	; 0
	    T1_DEGC_X8 = data;
     bce:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <T1_DEGC_X8>
     bd2:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <T1_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_T0_MSB);
     bd6:	65 e3       	ldi	r22, 0x35	; 53
     bd8:	8f e5       	ldi	r24, 0x5F	; 95
     bda:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
	    T1_DEGC_X8 |= (data & 0x0C) << 6;
     bde:	8c 70       	andi	r24, 0x0C	; 12
     be0:	20 e4       	ldi	r18, 0x40	; 64
     be2:	82 9f       	mul	r24, r18
     be4:	c0 01       	movw	r24, r0
     be6:	11 24       	eor	r1, r1
     be8:	20 91 56 38 	lds	r18, 0x3856	; 0x803856 <T1_DEGC_X8>
     bec:	30 91 57 38 	lds	r19, 0x3857	; 0x803857 <T1_DEGC_X8+0x1>
     bf0:	82 2b       	or	r24, r18
     bf2:	93 2b       	or	r25, r19
     bf4:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <T1_DEGC_X8>
     bf8:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <T1_DEGC_X8+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_T0_OUT_L);
     bfc:	66 e3       	ldi	r22, 0x36	; 54
     bfe:	8f e5       	ldi	r24, 0x5F	; 95
     c00:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c04:	90 e0       	ldi	r25, 0x00	; 0
	    H0_T0 = data;
     c06:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <H0_T0>
     c0a:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <H0_T0+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H0_T0_OUT_H);
     c0e:	67 e3       	ldi	r22, 0x37	; 55
     c10:	8f e5       	ldi	r24, 0x5F	; 95
     c12:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c16:	90 e0       	ldi	r25, 0x00	; 0
	    H0_T0 |= data << 8;
     c18:	98 2f       	mov	r25, r24
     c1a:	88 27       	eor	r24, r24
     c1c:	20 91 59 38 	lds	r18, 0x3859	; 0x803859 <H0_T0>
     c20:	30 91 5a 38 	lds	r19, 0x385A	; 0x80385a <H0_T0+0x1>
     c24:	82 2b       	or	r24, r18
     c26:	93 2b       	or	r25, r19
     c28:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <H0_T0>
     c2c:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <H0_T0+0x1>

	    if (H0_T0 > 32768) {
		    H0_T0 -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_T0_OUT_L);
     c30:	6a e3       	ldi	r22, 0x3A	; 58
     c32:	8f e5       	ldi	r24, 0x5F	; 95
     c34:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c38:	90 e0       	ldi	r25, 0x00	; 0
	    H1_T0 = data;
     c3a:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <H1_T0>
     c3e:	90 93 62 38 	sts	0x3862, r25	; 0x803862 <H1_T0+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_H1_T0_OUT_H);
     c42:	6b e3       	ldi	r22, 0x3B	; 59
     c44:	8f e5       	ldi	r24, 0x5F	; 95
     c46:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c4a:	90 e0       	ldi	r25, 0x00	; 0
	    H1_T0 |= data << 8;
     c4c:	98 2f       	mov	r25, r24
     c4e:	88 27       	eor	r24, r24
     c50:	20 91 61 38 	lds	r18, 0x3861	; 0x803861 <H1_T0>
     c54:	30 91 62 38 	lds	r19, 0x3862	; 0x803862 <H1_T0+0x1>
     c58:	82 2b       	or	r24, r18
     c5a:	93 2b       	or	r25, r19
     c5c:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <H1_T0>
     c60:	90 93 62 38 	sts	0x3862, r25	; 0x803862 <H1_T0+0x1>

	    if (H1_T0 > 32768) {
		    H1_T0 -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_OUT_L);
     c64:	6c e3       	ldi	r22, 0x3C	; 60
     c66:	8f e5       	ldi	r24, 0x5F	; 95
     c68:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c6c:	90 e0       	ldi	r25, 0x00	; 0
	    T0_OUT = data;
     c6e:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <T0_OUT>
     c72:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <T0_OUT+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T0_OUT_H);
     c76:	6d e3       	ldi	r22, 0x3D	; 61
     c78:	8f e5       	ldi	r24, 0x5F	; 95
     c7a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     c7e:	90 e0       	ldi	r25, 0x00	; 0
	    T0_OUT |= data << 8;
     c80:	98 2f       	mov	r25, r24
     c82:	88 27       	eor	r24, r24
     c84:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <T0_OUT>
     c88:	30 91 55 38 	lds	r19, 0x3855	; 0x803855 <T0_OUT+0x1>
     c8c:	82 2b       	or	r24, r18
     c8e:	93 2b       	or	r25, r19
     c90:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <T0_OUT>
     c94:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <T0_OUT+0x1>

	    if (T0_OUT > 32768) {
		    T0_OUT -= 65536;
	    }

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_OUT_L);
     c98:	6e e3       	ldi	r22, 0x3E	; 62
     c9a:	8f e5       	ldi	r24, 0x5F	; 95
     c9c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     ca0:	90 e0       	ldi	r25, 0x00	; 0
	    T1_OUT = data;
     ca2:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <T1_OUT>
     ca6:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <T1_OUT+0x1>

	    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_REG_CALIB_T1_OUT_H);
     caa:	6f e3       	ldi	r22, 0x3F	; 63
     cac:	8f e5       	ldi	r24, 0x5F	; 95
     cae:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     cb2:	90 e0       	ldi	r25, 0x00	; 0
	    T1_OUT |= data << 8;
     cb4:	98 2f       	mov	r25, r24
     cb6:	88 27       	eor	r24, r24
     cb8:	20 91 5b 38 	lds	r18, 0x385B	; 0x80385b <T1_OUT>
     cbc:	30 91 5c 38 	lds	r19, 0x385C	; 0x80385c <T1_OUT+0x1>
     cc0:	82 2b       	or	r24, r18
     cc2:	93 2b       	or	r25, r19
     cc4:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <T1_OUT>
     cc8:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <T1_OUT+0x1>
     ccc:	08 95       	ret

00000cce <tempandhum_init>:
     cce:	2f e3       	ldi	r18, 0x3F	; 63
     cd0:	8d e0       	ldi	r24, 0x0D	; 13
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	21 50       	subi	r18, 0x01	; 1
     cd6:	80 40       	sbci	r24, 0x00	; 0
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <tempandhum_init+0x6>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <tempandhum_init+0x10>
     cde:	00 00       	nop
void tempandhum_init(void)
{

	_delay_ms(1000);		

	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_AV_CONF, TEMPANDHUM_AV_CONF_DEFAULT_VALUE);
     ce0:	4b e1       	ldi	r20, 0x1B	; 27
     ce2:	60 e1       	ldi	r22, 0x10	; 16
     ce4:	8f e5       	ldi	r24, 0x5F	; 95
     ce6:	0e 94 24 0c 	call	0x1848	; 0x1848 <i2c_write1ByteRegister>
     cea:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG1,TEMPANDHUM_CTRL_REG1_DEFAULT_VALUE);	
     cee:	47 ee       	ldi	r20, 0xE7	; 231
     cf0:	60 e2       	ldi	r22, 0x20	; 32
     cf2:	8f e5       	ldi	r24, 0x5F	; 95
     cf4:	0e 94 24 0c 	call	0x1848	; 0x1848 <i2c_write1ByteRegister>
     cf8:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG2, TEMPANDHUM_CTRL_REG2_DEFAULT_VALUE);	
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	61 e2       	ldi	r22, 0x21	; 33
     d00:	8f e5       	ldi	r24, 0x5F	; 95
     d02:	0e 94 24 0c 	call	0x1848	; 0x1848 <i2c_write1ByteRegister>
     d06:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <err>
	err = i2c_write1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_CTRL_REG3, TEMPANDHUM_CTRL_REG3_DEFAULT_VALUE);
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	62 e2       	ldi	r22, 0x22	; 34
     d0e:	8f e5       	ldi	r24, 0x5F	; 95
     d10:	0e 94 24 0c 	call	0x1848	; 0x1848 <i2c_write1ByteRegister>
     d14:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <err>

	calibrate();
     d18:	0e 94 b5 05 	call	0xb6a	; 0xb6a <calibrate>
     d1c:	08 95       	ret

00000d1e <temphum_get_humidity>:
		    T1_OUT -= 65536;
	    }
}

float temphum_get_humidity(void)
{
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
    int32_t data = 0;
    int32_t humidity = 0;

    data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
     d36:	67 e2       	ldi	r22, 0x27	; 39
     d38:	8f e5       	ldi	r24, 0x5F	; 95
     d3a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>


    if (!(data & 0x02)) 
     d3e:	81 ff       	sbrs	r24, 1
     d40:	72 c0       	rjmp	.+228    	; 0xe26 <temphum_get_humidity+0x108>
	    //printf("sensor not ready\r\n");
		return 0;
    }


	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_HUMIDITY_OUT_L);
     d42:	68 e2       	ldi	r22, 0x28	; 40
     d44:	8f e5       	ldi	r24, 0x5F	; 95
     d46:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     d4a:	c8 2e       	mov	r12, r24
     d4c:	d1 2c       	mov	r13, r1
     d4e:	e1 2c       	mov	r14, r1
     d50:	f1 2c       	mov	r15, r1
	humidity = data;
	
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_HUMIDITY_OUT_H);
     d52:	69 e2       	ldi	r22, 0x29	; 41
     d54:	8f e5       	ldi	r24, 0x5F	; 95
     d56:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
	humidity |= data << 8;
     d60:	ba 2f       	mov	r27, r26
     d62:	a9 2f       	mov	r26, r25
     d64:	98 2f       	mov	r25, r24
     d66:	88 27       	eor	r24, r24
     d68:	c8 2a       	or	r12, r24
     d6a:	d9 2a       	or	r13, r25
     d6c:	ea 2a       	or	r14, r26
     d6e:	fb 2a       	or	r15, r27
			
    if (humidity > 32768) {
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	c8 16       	cp	r12, r24
     d74:	80 e8       	ldi	r24, 0x80	; 128
     d76:	d8 06       	cpc	r13, r24
     d78:	e1 04       	cpc	r14, r1
     d7a:	f1 04       	cpc	r15, r1
     d7c:	1c f0       	brlt	.+6      	; 0xd84 <temphum_get_humidity+0x66>
	    humidity -= 65536;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	e8 1a       	sub	r14, r24
     d82:	f1 08       	sbc	r15, r1
    }

    float result = H0_RH_X2 / 2.0 + (humidity - H0_T0) * (H1_RH_X2 - H0_RH_X2) / 2.0 / (H1_T0 - H0_T0);
     d84:	00 91 52 38 	lds	r16, 0x3852	; 0x803852 <H0_RH_X2>
     d88:	10 91 53 38 	lds	r17, 0x3853	; 0x803853 <H0_RH_X2+0x1>
     d8c:	b8 01       	movw	r22, r16
     d8e:	01 2e       	mov	r0, r17
     d90:	00 0c       	add	r0, r0
     d92:	88 0b       	sbc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     da6:	4b 01       	movw	r8, r22
     da8:	5c 01       	movw	r10, r24
     daa:	c0 91 59 38 	lds	r28, 0x3859	; 0x803859 <H0_T0>
     dae:	d0 91 5a 38 	lds	r29, 0x385A	; 0x80385a <H0_T0+0x1>
     db2:	ce 01       	movw	r24, r28
     db4:	0d 2e       	mov	r0, r29
     db6:	00 0c       	add	r0, r0
     db8:	aa 0b       	sbc	r26, r26
     dba:	bb 0b       	sbc	r27, r27
     dbc:	a7 01       	movw	r20, r14
     dbe:	96 01       	movw	r18, r12
     dc0:	28 1b       	sub	r18, r24
     dc2:	39 0b       	sbc	r19, r25
     dc4:	4a 0b       	sbc	r20, r26
     dc6:	5b 0b       	sbc	r21, r27
     dc8:	a0 91 50 38 	lds	r26, 0x3850	; 0x803850 <H1_RH_X2>
     dcc:	b0 91 51 38 	lds	r27, 0x3851	; 0x803851 <H1_RH_X2+0x1>
     dd0:	a0 1b       	sub	r26, r16
     dd2:	b1 0b       	sbc	r27, r17
     dd4:	0e 94 ac 13 	call	0x2758	; 0x2758 <__mulshisi3>
     dd8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     de8:	6b 01       	movw	r12, r22
     dea:	7c 01       	movw	r14, r24
     dec:	60 91 61 38 	lds	r22, 0x3861	; 0x803861 <H1_T0>
     df0:	70 91 62 38 	lds	r23, 0x3862	; 0x803862 <H1_T0+0x1>
     df4:	6c 1b       	sub	r22, r28
     df6:	7d 0b       	sbc	r23, r29
     df8:	07 2e       	mov	r0, r23
     dfa:	00 0c       	add	r0, r0
     dfc:	88 0b       	sbc	r24, r24
     dfe:	99 0b       	sbc	r25, r25
     e00:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c5 01       	movw	r24, r10
     e16:	b4 01       	movw	r22, r8
     e18:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__addsf3>
	
	return result;
     e1c:	56 2f       	mov	r21, r22
     e1e:	47 2f       	mov	r20, r23
     e20:	38 2f       	mov	r19, r24
     e22:	29 2f       	mov	r18, r25
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <temphum_get_humidity+0x110>


    if (!(data & 0x02)) 
	{
	    //printf("sensor not ready\r\n");
		return 0;
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	20 e0       	ldi	r18, 0x00	; 0
    }

    float result = H0_RH_X2 / 2.0 + (humidity - H0_T0) * (H1_RH_X2 - H0_RH_X2) / 2.0 / (H1_T0 - H0_T0);
	
	return result;
}
     e2e:	65 2f       	mov	r22, r21
     e30:	74 2f       	mov	r23, r20
     e32:	83 2f       	mov	r24, r19
     e34:	92 2f       	mov	r25, r18
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	8f 90       	pop	r8
     e4e:	08 95       	ret

00000e50 <temphum_get_temp>:

float temphum_get_temp(void)
{
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29

	int32_t data = 0;
	int32_t temperature = 0;
	
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
     e68:	67 e2       	ldi	r22, 0x27	; 39
     e6a:	8f e5       	ldi	r24, 0x5F	; 95
     e6c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
	
	if(!(data & 0x01))
     e70:	80 ff       	sbrs	r24, 0
     e72:	72 c0       	rjmp	.+228    	; 0xf58 <temphum_get_temp+0x108>
		//printf("sensor not ready\r\n");
		return 0; //
	}
	else
	{
		data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_TEMP_OUT_L);
     e74:	6a e2       	ldi	r22, 0x2A	; 42
     e76:	8f e5       	ldi	r24, 0x5F	; 95
     e78:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     e7c:	c8 2e       	mov	r12, r24
     e7e:	d1 2c       	mov	r13, r1
     e80:	e1 2c       	mov	r14, r1
     e82:	f1 2c       	mov	r15, r1
		temperature = data;
		
		data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_TEMP_OUT_H);
     e84:	6b e2       	ldi	r22, 0x2B	; 43
     e86:	8f e5       	ldi	r24, 0x5F	; 95
     e88:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <i2c_read1ByteRegister>
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e0       	ldi	r26, 0x00	; 0
     e90:	b0 e0       	ldi	r27, 0x00	; 0
		temperature |= data << 8;
     e92:	ba 2f       	mov	r27, r26
     e94:	a9 2f       	mov	r26, r25
     e96:	98 2f       	mov	r25, r24
     e98:	88 27       	eor	r24, r24
     e9a:	c8 2a       	or	r12, r24
     e9c:	d9 2a       	or	r13, r25
     e9e:	ea 2a       	or	r14, r26
     ea0:	fb 2a       	or	r15, r27
	}
		
	if (temperature > 32768) 
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	c8 16       	cp	r12, r24
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	d8 06       	cpc	r13, r24
     eaa:	e1 04       	cpc	r14, r1
     eac:	f1 04       	cpc	r15, r1
     eae:	1c f0       	brlt	.+6      	; 0xeb6 <temphum_get_temp+0x66>
	{
		temperature -= 65536;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	e8 1a       	sub	r14, r24
     eb4:	f1 08       	sbc	r15, r1
	}

	float result = T0_DEGC_X8 / 8.0 + (temperature - T0_OUT) * (T1_DEGC_X8 - T0_DEGC_X8) / 8.0 / (T1_OUT - T0_OUT);
     eb6:	00 91 5f 38 	lds	r16, 0x385F	; 0x80385f <T0_DEGC_X8>
     eba:	10 91 60 38 	lds	r17, 0x3860	; 0x803860 <T0_DEGC_X8+0x1>
     ebe:	b8 01       	movw	r22, r16
     ec0:	01 2e       	mov	r0, r17
     ec2:	00 0c       	add	r0, r0
     ec4:	88 0b       	sbc	r24, r24
     ec6:	99 0b       	sbc	r25, r25
     ec8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	5e e3       	ldi	r21, 0x3E	; 62
     ed4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     ed8:	4b 01       	movw	r8, r22
     eda:	5c 01       	movw	r10, r24
     edc:	c0 91 54 38 	lds	r28, 0x3854	; 0x803854 <T0_OUT>
     ee0:	d0 91 55 38 	lds	r29, 0x3855	; 0x803855 <T0_OUT+0x1>
     ee4:	ce 01       	movw	r24, r28
     ee6:	0d 2e       	mov	r0, r29
     ee8:	00 0c       	add	r0, r0
     eea:	aa 0b       	sbc	r26, r26
     eec:	bb 0b       	sbc	r27, r27
     eee:	a7 01       	movw	r20, r14
     ef0:	96 01       	movw	r18, r12
     ef2:	28 1b       	sub	r18, r24
     ef4:	39 0b       	sbc	r19, r25
     ef6:	4a 0b       	sbc	r20, r26
     ef8:	5b 0b       	sbc	r21, r27
     efa:	a0 91 56 38 	lds	r26, 0x3856	; 0x803856 <T1_DEGC_X8>
     efe:	b0 91 57 38 	lds	r27, 0x3857	; 0x803857 <T1_DEGC_X8+0x1>
     f02:	a0 1b       	sub	r26, r16
     f04:	b1 0b       	sbc	r27, r17
     f06:	0e 94 ac 13 	call	0x2758	; 0x2758 <__mulshisi3>
     f0a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	5e e3       	ldi	r21, 0x3E	; 62
     f16:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
     f1e:	60 91 5b 38 	lds	r22, 0x385B	; 0x80385b <T1_OUT>
     f22:	70 91 5c 38 	lds	r23, 0x385C	; 0x80385c <T1_OUT+0x1>
     f26:	6c 1b       	sub	r22, r28
     f28:	7d 0b       	sbc	r23, r29
     f2a:	07 2e       	mov	r0, r23
     f2c:	00 0c       	add	r0, r0
     f2e:	88 0b       	sbc	r24, r24
     f30:	99 0b       	sbc	r25, r25
     f32:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__floatsisf>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__divsf3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	c5 01       	movw	r24, r10
     f48:	b4 01       	movw	r22, r8
     f4a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__addsf3>
	
	//printf("temp %.2f C\r\n", result);
	
	return result;
     f4e:	56 2f       	mov	r21, r22
     f50:	47 2f       	mov	r20, r23
     f52:	38 2f       	mov	r19, r24
     f54:	29 2f       	mov	r18, r25
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <temphum_get_temp+0x110>
	data = i2c_read1ByteRegister(TEMPANDHUM_I2C_ADDR, TEMPANDHUM_STATUS_REG);
	
	if(!(data & 0x01))
	{
		//printf("sensor not ready\r\n");
		return 0; //
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	20 e0       	ldi	r18, 0x00	; 0
	//printf("temp %.2f C\r\n", result);
	
	return result;

	
}
     f60:	65 2f       	mov	r22, r21
     f62:	74 2f       	mov	r23, r20
     f64:	83 2f       	mov	r24, r19
     f66:	92 2f       	mov	r25, r18
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	08 95       	ret

00000f82 <on_disconnect>:
	printf("---------------------On Connect------------------------\n\r");
	printf("---------------------On Connect------------------------\n\r");
}

void on_disconnect()
{
     f82:	08 95       	ret

00000f84 <on_connection_secured>:

}

void on_connection_secured(void)
{
     f84:	08 95       	ret

00000f86 <on_recieve_notification>:

}

void on_recieve_notification(void)
{
     f86:	08 95       	ret

00000f88 <on_uart_response>:

}

void on_uart_response(void)
{
     f88:	08 95       	ret

00000f8a <on_connect>:
		//rn487x.gatt->send_notification(&humidity_read_characteristic, write_buff);
	}
}

void on_connect(void)
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
	printf("---------------------On Connect------------------------\n\r");
     f8e:	ca ee       	ldi	r28, 0xEA	; 234
     f90:	d6 e7       	ldi	r29, 0x76	; 118
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
	printf("---------------------On Connect------------------------\n\r");
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
	printf("---------------------On Connect------------------------\n\r");
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <printf>
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <main>:

uint8_t write_buff[WRITE_BUFF_LEN];


int main(void)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2a 97       	sbiw	r28, 0x0a	; 10
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	de bf       	out	0x3e, r29	; 62
	ENABLE_INTERRUPTS();
     fca:	78 94       	sei
	
	
	atmel_start_init();
     fcc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <atmel_start_init>

	tempandhum_init();
     fd0:	0e 94 67 06 	call	0xcce	; 0xcce <tempandhum_init>
	//tempandhum_init();	

	rn487x.events->cb_on_new_connection = on_connect;
     fd4:	00 e3       	ldi	r16, 0x30	; 48
     fd6:	10 e3       	ldi	r17, 0x30	; 48
     fd8:	d8 01       	movw	r26, r16
     fda:	18 96       	adiw	r26, 0x08	; 8
     fdc:	ed 91       	ld	r30, X+
     fde:	fc 91       	ld	r31, X
     fe0:	19 97       	sbiw	r26, 0x09	; 9
     fe2:	85 ec       	ldi	r24, 0xC5	; 197
     fe4:	97 e0       	ldi	r25, 0x07	; 7
     fe6:	80 83       	st	Z, r24
     fe8:	91 83       	std	Z+1, r25	; 0x01
	rn487x.events->cb_on_connection_secured = on_connection_secured;
     fea:	18 96       	adiw	r26, 0x08	; 8
     fec:	ed 91       	ld	r30, X+
     fee:	fc 91       	ld	r31, X
     ff0:	19 97       	sbiw	r26, 0x09	; 9
     ff2:	82 ec       	ldi	r24, 0xC2	; 194
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	84 83       	std	Z+4, r24	; 0x04
     ff8:	95 83       	std	Z+5, r25	; 0x05
	rn487x.events->cb_on_disconnect = on_disconnect;
     ffa:	18 96       	adiw	r26, 0x08	; 8
     ffc:	ed 91       	ld	r30, X+
     ffe:	fc 91       	ld	r31, X
    1000:	19 97       	sbiw	r26, 0x09	; 9
    1002:	81 ec       	ldi	r24, 0xC1	; 193
    1004:	97 e0       	ldi	r25, 0x07	; 7
    1006:	82 83       	std	Z+2, r24	; 0x02
    1008:	93 83       	std	Z+3, r25	; 0x03
	rn487x.events->cb_on_uart_response = on_uart_response;
    100a:	18 96       	adiw	r26, 0x08	; 8
    100c:	ed 91       	ld	r30, X+
    100e:	fc 91       	ld	r31, X
    1010:	19 97       	sbiw	r26, 0x09	; 9
    1012:	84 ec       	ldi	r24, 0xC4	; 196
    1014:	97 e0       	ldi	r25, 0x07	; 7
    1016:	80 87       	std	Z+8, r24	; 0x08
    1018:	91 87       	std	Z+9, r25	; 0x09
	rn487x.events->cb_on_recieve_notification = on_recieve_notification;
    101a:	18 96       	adiw	r26, 0x08	; 8
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	19 97       	sbiw	r26, 0x09	; 9
    1022:	83 ec       	ldi	r24, 0xC3	; 195
    1024:	97 e0       	ldi	r25, 0x07	; 7
    1026:	82 87       	std	Z+10, r24	; 0x0a
    1028:	93 87       	std	Z+11, r25	; 0x0b

	// float char
	// 23.9 C
	// uint8 char/char
	// 23 rH
	rn487x.init(&rn487x);
    102a:	1a 96       	adiw	r26, 0x0a	; 10
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	1b 97       	sbiw	r26, 0x0b	; 11
    1032:	c8 01       	movw	r24, r16
    1034:	09 95       	icall


	volatile uint8_t data[] = {0x23, 0x33, 0x44, 0x55, 0xAA, 0xFF, 0xDD, 0xAA, 0x33, 0xAA };	
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	ea e3       	ldi	r30, 0x3A	; 58
    103a:	f5 e7       	ldi	r31, 0x75	; 117
    103c:	de 01       	movw	r26, r28
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	01 90       	ld	r0, Z+
    1042:	0d 92       	st	X+, r0
    1044:	8a 95       	dec	r24
    1046:	e1 f7       	brne	.-8      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
	rn487x.gatt->write_value(&temp_read_characteristic, data);
    1048:	d8 01       	movw	r26, r16
    104a:	14 96       	adiw	r26, 0x04	; 4
    104c:	ed 91       	ld	r30, X+
    104e:	fc 91       	ld	r31, X
    1050:	15 97       	sbiw	r26, 0x05	; 5
    1052:	06 80       	ldd	r0, Z+6	; 0x06
    1054:	f7 81       	ldd	r31, Z+7	; 0x07
    1056:	e0 2d       	mov	r30, r0
    1058:	be 01       	movw	r22, r28
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8a e2       	ldi	r24, 0x2A	; 42
    1060:	90 e3       	ldi	r25, 0x30	; 48
    1062:	09 95       	icall
	rn487x.gatt->write_value(&temp_read_characteristic, data);
    1064:	d8 01       	movw	r26, r16
    1066:	14 96       	adiw	r26, 0x04	; 4
    1068:	ed 91       	ld	r30, X+
    106a:	fc 91       	ld	r31, X
    106c:	15 97       	sbiw	r26, 0x05	; 5
    106e:	06 80       	ldd	r0, Z+6	; 0x06
    1070:	f7 81       	ldd	r31, Z+7	; 0x07
    1072:	e0 2d       	mov	r30, r0
    1074:	be 01       	movw	r22, r28
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8a e2       	ldi	r24, 0x2A	; 42
    107c:	90 e3       	ldi	r25, 0x30	; 48
    107e:	09 95       	icall
	rn487x.gatt->read_value(&temp_read_characteristic, data);
    1080:	d8 01       	movw	r26, r16
    1082:	14 96       	adiw	r26, 0x04	; 4
    1084:	ed 91       	ld	r30, X+
    1086:	fc 91       	ld	r31, X
    1088:	15 97       	sbiw	r26, 0x05	; 5
    108a:	04 80       	ldd	r0, Z+4	; 0x04
    108c:	f5 81       	ldd	r31, Z+5	; 0x05
    108e:	e0 2d       	mov	r30, r0
    1090:	be 01       	movw	r22, r28
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8a e2       	ldi	r24, 0x2A	; 42
    1098:	90 e3       	ldi	r25, 0x30	; 48
    109a:	09 95       	icall
	

	while(1) {
		
		rn487x.main_loop(&rn487x);
    109c:	0f 2e       	mov	r0, r31
    109e:	f0 e3       	ldi	r31, 0x30	; 48
    10a0:	ef 2e       	mov	r14, r31
    10a2:	f0 e3       	ldi	r31, 0x30	; 48
    10a4:	ff 2e       	mov	r15, r31
    10a6:	f0 2d       	mov	r31, r0
    10a8:	d7 01       	movw	r26, r14
    10aa:	1e 96       	adiw	r26, 0x0e	; 14
    10ac:	ed 91       	ld	r30, X+
    10ae:	fc 91       	ld	r31, X
    10b0:	1f 97       	sbiw	r26, 0x0f	; 15
    10b2:	c7 01       	movw	r24, r14
    10b4:	09 95       	icall

		float value = temphum_get_temp();
    10b6:	0e 94 28 07 	call	0xe50	; 0xe50 <temphum_get_temp>
		memset(write_buff, NULL, WRITE_BUFF_LEN);
    10ba:	03 e6       	ldi	r16, 0x63	; 99
    10bc:	18 e3       	ldi	r17, 0x38	; 56
    10be:	0f 2e       	mov	r0, r31
    10c0:	f2 e3       	ldi	r31, 0x32	; 50
    10c2:	df 2e       	mov	r13, r31
    10c4:	f0 2d       	mov	r31, r0
    10c6:	f8 01       	movw	r30, r16
    10c8:	2d 2d       	mov	r18, r13
    10ca:	11 92       	st	Z+, r1
    10cc:	2a 95       	dec	r18
    10ce:	e9 f7       	brne	.-6      	; 0x10ca <__DATA_REGION_LENGTH__+0xca>
		sprintf(write_buff, "%.2f C", value);
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	7f 93       	push	r23
    10d6:	6f 93       	push	r22
    10d8:	84 e2       	ldi	r24, 0x24	; 36
    10da:	97 e7       	ldi	r25, 0x77	; 119
    10dc:	9f 93       	push	r25
    10de:	8f 93       	push	r24
    10e0:	1f 93       	push	r17
    10e2:	0f 93       	push	r16
    10e4:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
		rn487x.gatt->write_value(&temp_read_characteristic, write_buff);
    10e8:	d7 01       	movw	r26, r14
    10ea:	14 96       	adiw	r26, 0x04	; 4
    10ec:	ed 91       	ld	r30, X+
    10ee:	fc 91       	ld	r31, X
    10f0:	15 97       	sbiw	r26, 0x05	; 5
    10f2:	06 80       	ldd	r0, Z+6	; 0x06
    10f4:	f7 81       	ldd	r31, Z+7	; 0x07
    10f6:	e0 2d       	mov	r30, r0
    10f8:	b8 01       	movw	r22, r16
    10fa:	8a e2       	ldi	r24, 0x2A	; 42
    10fc:	90 e3       	ldi	r25, 0x30	; 48
    10fe:	09 95       	icall
		//rn487x.gatt->send_notification(&temp_read_characteristic, write_buff);

		value = temphum_get_humidity();
    1100:	0e 94 8f 06 	call	0xd1e	; 0xd1e <temphum_get_humidity>
		memset(write_buff, NULL, WRITE_BUFF_LEN);
    1104:	f8 01       	movw	r30, r16
    1106:	11 92       	st	Z+, r1
    1108:	da 94       	dec	r13
    110a:	e9 f7       	brne	.-6      	; 0x1106 <__DATA_REGION_LENGTH__+0x106>
		sprintf(write_buff, "%.2f rH", value);
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	7f 93       	push	r23
    1112:	6f 93       	push	r22
    1114:	8b e2       	ldi	r24, 0x2B	; 43
    1116:	97 e7       	ldi	r25, 0x77	; 119
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	1f 93       	push	r17
    111e:	0f 93       	push	r16
    1120:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <sprintf>
		rn487x.gatt->write_value(&humidity_read_characteristic, write_buff);
    1124:	d7 01       	movw	r26, r14
    1126:	14 96       	adiw	r26, 0x04	; 4
    1128:	ed 91       	ld	r30, X+
    112a:	fc 91       	ld	r31, X
    112c:	15 97       	sbiw	r26, 0x05	; 5
    112e:	06 80       	ldd	r0, Z+6	; 0x06
    1130:	f7 81       	ldd	r31, Z+7	; 0x07
    1132:	e0 2d       	mov	r30, r0
    1134:	b8 01       	movw	r22, r16
    1136:	84 e2       	ldi	r24, 0x24	; 36
    1138:	90 e3       	ldi	r25, 0x30	; 48
    113a:	09 95       	icall
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	ad cf       	rjmp	.-166    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>

00001142 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	08 95       	ret

00001146 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	08 95       	ret

0000114a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	e0 5f       	subi	r30, 0xF0	; 240
    1158:	fb 4f       	sbci	r31, 0xFB	; 251
    115a:	90 81       	ld	r25, Z
    115c:	98 60       	ori	r25, 0x08	; 8
    115e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	b0 f3       	brcs	.-20     	; 0x1152 <mcu_init+0x4>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 c0       	rjmp	.+16     	; 0x117a <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    116a:	e8 2f       	mov	r30, r24
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e0 5d       	subi	r30, 0xD0	; 208
    1170:	fb 4f       	sbci	r31, 0xFB	; 251
    1172:	90 81       	ld	r25, Z
    1174:	98 60       	ori	r25, 0x08	; 8
    1176:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1178:	8f 5f       	subi	r24, 0xFF	; 255
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	b0 f3       	brcs	.-20     	; 0x116a <mcu_init+0x1c>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1182:	e8 2f       	mov	r30, r24
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	e0 5b       	subi	r30, 0xB0	; 176
    1188:	fb 4f       	sbci	r31, 0xFB	; 251
    118a:	90 81       	ld	r25, Z
    118c:	98 60       	ori	r25, 0x08	; 8
    118e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	88 30       	cpi	r24, 0x08	; 8
    1194:	b0 f3       	brcs	.-20     	; 0x1182 <mcu_init+0x34>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    119a:	e8 2f       	mov	r30, r24
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	e0 59       	subi	r30, 0x90	; 144
    11a0:	fb 4f       	sbci	r31, 0xFB	; 251
    11a2:	90 81       	ld	r25, Z
    11a4:	98 60       	ori	r25, 0x08	; 8
    11a6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	88 30       	cpi	r24, 0x08	; 8
    11ac:	b0 f3       	brcs	.-20     	; 0x119a <mcu_init+0x4c>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    11b2:	e8 2f       	mov	r30, r24
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	e0 57       	subi	r30, 0x70	; 112
    11b8:	fb 4f       	sbci	r31, 0xFB	; 251
    11ba:	90 81       	ld	r25, Z
    11bc:	98 60       	ori	r25, 0x08	; 8
    11be:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	88 30       	cpi	r24, 0x08	; 8
    11c4:	b0 f3       	brcs	.-20     	; 0x11b2 <mcu_init+0x64>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 c0       	rjmp	.+16     	; 0x11da <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    11ca:	e8 2f       	mov	r30, r24
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	e0 55       	subi	r30, 0x50	; 80
    11d0:	fb 4f       	sbci	r31, 0xFB	; 251
    11d2:	90 81       	ld	r25, Z
    11d4:	98 60       	ori	r25, 0x08	; 8
    11d6:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	b0 f3       	brcs	.-20     	; 0x11ca <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    11de:	08 95       	ret

000011e0 <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    11e0:	80 b1       	in	r24, 0x00	; 0
    11e2:	8d 7f       	andi	r24, 0xFD	; 253
    11e4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11e6:	e1 e1       	ldi	r30, 0x11	; 17
    11e8:	f4 e0       	ldi	r31, 0x04	; 4
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    11f0:	81 b1       	in	r24, 0x01	; 1
    11f2:	8e 7f       	andi	r24, 0xFE	; 254
    11f4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    11f6:	80 b1       	in	r24, 0x00	; 0
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
    11fc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <rx487x_init>
    1200:	08 95       	ret

00001202 <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    1202:	84 b3       	in	r24, 0x14	; 20
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1208:	e1 eb       	ldi	r30, 0xB1	; 177
    120a:	f4 e0       	ldi	r31, 0x04	; 4
    120c:	80 81       	ld	r24, Z
    120e:	87 7f       	andi	r24, 0xF7	; 247
    1210:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    1212:	85 b3       	in	r24, 0x15	; 21
    1214:	8e 7f       	andi	r24, 0xFE	; 254
    1216:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    1218:	84 b3       	in	r24, 0x14	; 20
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
    121e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <usb_cdc_init>
    1222:	08 95       	ret

00001224 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
    1224:	0e 94 ac 0c 	call	0x1958	; 0x1958 <system_timer_init>
    1228:	08 95       	ret

0000122a <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    122a:	81 b1       	in	r24, 0x01	; 1
    122c:	87 7f       	andi	r24, 0xF7	; 247
    122e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1230:	80 b1       	in	r24, 0x00	; 0
    1232:	88 60       	ori	r24, 0x08	; 8
    1234:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1236:	e3 e1       	ldi	r30, 0x13	; 19
    1238:	f4 e0       	ldi	r31, 0x04	; 4
    123a:	80 81       	ld	r24, Z
    123c:	87 7f       	andi	r24, 0xF7	; 247
    123e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    1240:	80 81       	ld	r24, Z
    1242:	8f 77       	andi	r24, 0x7F	; 127
    1244:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1246:	80 81       	ld	r24, Z
    1248:	88 7f       	andi	r24, 0xF8	; 248
    124a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    124c:	81 b1       	in	r24, 0x01	; 1
    124e:	8b 7f       	andi	r24, 0xFB	; 251
    1250:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1252:	80 b1       	in	r24, 0x00	; 0
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1258:	e2 e1       	ldi	r30, 0x12	; 18
    125a:	f4 e0       	ldi	r31, 0x04	; 4
    125c:	80 81       	ld	r24, Z
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    1262:	80 81       	ld	r24, Z
    1264:	8f 77       	andi	r24, 0x7F	; 127
    1266:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1268:	80 81       	ld	r24, Z
    126a:	88 7f       	andi	r24, 0xF8	; 248
    126c:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
    126e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <i2c_init>
    1272:	08 95       	ret

00001274 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    1274:	0e 94 a7 08 	call	0x114e	; 0x114e <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
    1278:	8d b1       	in	r24, 0x0d	; 13
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    127e:	8c b1       	in	r24, 0x0c	; 12
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    1284:	85 b3       	in	r24, 0x15	; 21
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    128a:	84 b3       	in	r24, 0x14	; 20
    128c:	80 61       	ori	r24, 0x10	; 16
    128e:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1290:	e4 eb       	ldi	r30, 0xB4	; 180
    1292:	f4 e0       	ldi	r31, 0x04	; 4
    1294:	80 81       	ld	r24, Z
    1296:	87 7f       	andi	r24, 0xF7	; 247
    1298:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
    129a:	80 81       	ld	r24, Z
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    12a0:	80 81       	ld	r24, Z
    12a2:	88 7f       	andi	r24, 0xF8	; 248
    12a4:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
    12a6:	0e 94 a3 08 	call	0x1146	; 0x1146 <CLKCTRL_init>

	rx487x_initialization();
    12aa:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <rx487x_initialization>

	usb_cdc_initialization();
    12ae:	0e 94 01 09 	call	0x1202	; 0x1202 <usb_cdc_initialization>

	system_timer_initialization();
    12b2:	0e 94 12 09 	call	0x1224	; 0x1224 <system_timer_initialization>

	CPUINT_init();
    12b6:	0e 94 a5 08 	call	0x114a	; 0x114a <CPUINT_init>

	SLPCTRL_init();
    12ba:	0e 94 aa 0c 	call	0x1954	; 0x1954 <SLPCTRL_init>

	i2c_initialization();
    12be:	0e 94 15 09 	call	0x122a	; 0x122a <i2c_initialization>

	BOD_init();
    12c2:	0e 94 a1 08 	call	0x1142	; 0x1142 <BOD_init>
    12c6:	08 95       	ret

000012c8 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(true);
 */
i2c_error_t i2c_master_read(void)
{
	return i2c_master_operation(true);
}
    12c8:	e0 ea       	ldi	r30, 0xA0	; 160
    12ca:	f8 e0       	ldi	r31, 0x08	; 8
    12cc:	84 81       	ldd	r24, Z+4	; 0x04
    12ce:	88 60       	ori	r24, 0x08	; 8
    12d0:	84 83       	std	Z+4, r24	; 0x04
    12d2:	85 81       	ldd	r24, Z+5	; 0x05
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	85 83       	std	Z+5, r24	; 0x05
    12d8:	e0 e2       	ldi	r30, 0x20	; 32
    12da:	f4 e3       	ldi	r31, 0x34	; 52
    12dc:	80 81       	ld	r24, Z
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	80 83       	st	Z, r24
    12e2:	13 86       	std	Z+11, r1	; 0x0b
    12e4:	8e e0       	ldi	r24, 0x0E	; 14
    12e6:	08 95       	ret

000012e8 <i2c_do_I2C_IDLE>:
    12e8:	e0 e2       	ldi	r30, 0x20	; 32
    12ea:	f4 e3       	ldi	r31, 0x34	; 52
    12ec:	80 81       	ld	r24, Z
    12ee:	8e 7f       	andi	r24, 0xFE	; 254
    12f0:	80 83       	st	Z, r24
    12f2:	13 86       	std	Z+11, r1	; 0x0b
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <i2c_do_I2C_SEND_STOP>:
    12f8:	e0 ea       	ldi	r30, 0xA0	; 160
    12fa:	f8 e0       	ldi	r31, 0x08	; 8
    12fc:	84 81       	ldd	r24, Z+4	; 0x04
    12fe:	83 60       	ori	r24, 0x03	; 3
    1300:	84 83       	std	Z+4, r24	; 0x04
    1302:	0e 94 74 09 	call	0x12e8	; 0x12e8 <i2c_do_I2C_IDLE>
    1306:	08 95       	ret

00001308 <i2c_do_I2C_SEND_ADR_READ>:
    1308:	e0 e2       	ldi	r30, 0x20	; 32
    130a:	f4 e3       	ldi	r31, 0x34	; 52
    130c:	80 81       	ld	r24, Z
    130e:	88 60       	ori	r24, 0x08	; 8
    1310:	80 83       	st	Z, r24
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	08 95       	ret

00001324 <i2c_do_I2C_SEND_RESTART>:
    1324:	0e 94 84 09 	call	0x1308	; 0x1308 <i2c_do_I2C_SEND_ADR_READ>
    1328:	08 95       	ret

0000132a <i2c_do_I2C_SEND_RESTART_READ>:
    132a:	0e 94 84 09 	call	0x1308	; 0x1308 <i2c_do_I2C_SEND_ADR_READ>
    132e:	08 95       	ret

00001330 <i2c_do_I2C_SEND_ADR_WRITE>:
    1330:	e0 e2       	ldi	r30, 0x20	; 32
    1332:	f4 e3       	ldi	r31, 0x34	; 52
    1334:	80 81       	ld	r24, Z
    1336:	88 60       	ori	r24, 0x08	; 8
    1338:	80 83       	st	Z, r24
    133a:	81 81       	ldd	r24, Z+1	; 0x01
    133c:	88 0f       	add	r24, r24
    133e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	08 95       	ret

00001346 <i2c_do_I2C_SEND_RESTART_WRITE>:
    1346:	0e 94 98 09 	call	0x1330	; 0x1330 <i2c_do_I2C_SEND_ADR_WRITE>
    134a:	08 95       	ret

0000134c <i2c_do_I2C_DO_ADDRESS_NACK>:
    134c:	a0 e2       	ldi	r26, 0x20	; 32
    134e:	b4 e3       	ldi	r27, 0x34	; 52
    1350:	8c 91       	ld	r24, X
    1352:	87 7f       	andi	r24, 0xF7	; 247
    1354:	8c 93       	st	X, r24
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	1b 96       	adiw	r26, 0x0b	; 11
    135a:	8c 93       	st	X, r24
    135c:	1b 97       	sbiw	r26, 0x0b	; 11
    135e:	50 96       	adiw	r26, 0x10	; 16
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	51 97       	sbiw	r26, 0x11	; 17
    1366:	5c 96       	adiw	r26, 0x1c	; 28
    1368:	8d 91       	ld	r24, X+
    136a:	9c 91       	ld	r25, X
    136c:	5d 97       	sbiw	r26, 0x1d	; 29
    136e:	09 95       	icall
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	19 f0       	breq	.+6      	; 0x137a <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	21 f0       	breq	.+8      	; 0x1380 <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
    1378:	06 c0       	rjmp	.+12     	; 0x1386 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
    137a:	0e 94 95 09 	call	0x132a	; 0x132a <i2c_do_I2C_SEND_RESTART_READ>
    137e:	08 95       	ret
    1380:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_do_I2C_SEND_RESTART_WRITE>
    1384:	08 95       	ret
    1386:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_do_I2C_SEND_STOP>
    138a:	08 95       	ret

0000138c <i2c_do_I2C_RX_DO_ACK>:
    138c:	e0 ea       	ldi	r30, 0xA0	; 160
    138e:	f8 e0       	ldi	r31, 0x08	; 8
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	84 83       	std	Z+4, r24	; 0x04
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	08 95       	ret

0000139a <i2c_do_I2C_TX_DO_ACK>:
    139a:	e0 ea       	ldi	r30, 0xA0	; 160
    139c:	f8 e0       	ldi	r31, 0x08	; 8
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	8b 7f       	andi	r24, 0xFB	; 251
    13a2:	84 83       	std	Z+4, r24	; 0x04
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	08 95       	ret

000013a8 <i2c_do_I2C_DO_NACK_STOP>:
    13a8:	e0 ea       	ldi	r30, 0xA0	; 160
    13aa:	f8 e0       	ldi	r31, 0x08	; 8
    13ac:	84 81       	ldd	r24, Z+4	; 0x04
    13ae:	84 60       	ori	r24, 0x04	; 4
    13b0:	84 83       	std	Z+4, r24	; 0x04
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	83 60       	ori	r24, 0x03	; 3
    13b6:	84 83       	std	Z+4, r24	; 0x04
    13b8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <i2c_do_I2C_IDLE>
    13bc:	08 95       	ret

000013be <i2c_do_I2C_DO_NACK_RESTART>:
    13be:	e0 ea       	ldi	r30, 0xA0	; 160
    13c0:	f8 e0       	ldi	r31, 0x08	; 8
    13c2:	84 81       	ldd	r24, Z+4	; 0x04
    13c4:	84 60       	ori	r24, 0x04	; 4
    13c6:	84 83       	std	Z+4, r24	; 0x04
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	08 95       	ret

000013cc <i2c_do_I2C_TX>:
    13cc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    13d0:	84 ff       	sbrs	r24, 4
    13d2:	19 c0       	rjmp	.+50     	; 0x1406 <i2c_do_I2C_TX+0x3a>
    13d4:	a0 e2       	ldi	r26, 0x20	; 32
    13d6:	b4 e3       	ldi	r27, 0x34	; 52
    13d8:	52 96       	adiw	r26, 0x12	; 18
    13da:	ed 91       	ld	r30, X+
    13dc:	fc 91       	ld	r31, X
    13de:	53 97       	sbiw	r26, 0x13	; 19
    13e0:	5e 96       	adiw	r26, 0x1e	; 30
    13e2:	8d 91       	ld	r24, X+
    13e4:	9c 91       	ld	r25, X
    13e6:	5f 97       	sbiw	r26, 0x1f	; 31
    13e8:	09 95       	icall
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <i2c_do_I2C_TX+0x28>
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	21 f0       	breq	.+8      	; 0x13fa <i2c_do_I2C_TX+0x2e>
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <i2c_do_I2C_TX+0x34>
    13f4:	0e 94 95 09 	call	0x132a	; 0x132a <i2c_do_I2C_SEND_RESTART_READ>
    13f8:	08 95       	ret
    13fa:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_do_I2C_SEND_RESTART_WRITE>
    13fe:	08 95       	ret
    1400:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_do_I2C_SEND_STOP>
    1404:	08 95       	ret
    1406:	e0 e2       	ldi	r30, 0x20	; 32
    1408:	f4 e3       	ldi	r31, 0x34	; 52
    140a:	80 81       	ld	r24, Z
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	80 83       	st	Z, r24
    1410:	a2 81       	ldd	r26, Z+2	; 0x02
    1412:	b3 81       	ldd	r27, Z+3	; 0x03
    1414:	cd 01       	movw	r24, r26
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	82 83       	std	Z+2, r24	; 0x02
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	8c 91       	ld	r24, X
    141e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
    1422:	84 81       	ldd	r24, Z+4	; 0x04
    1424:	95 81       	ldd	r25, Z+5	; 0x05
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	84 83       	std	Z+4, r24	; 0x04
    142a:	95 83       	std	Z+5, r25	; 0x05
    142c:	89 2b       	or	r24, r25
    142e:	11 f0       	breq	.+4      	; 0x1434 <i2c_do_I2C_TX+0x68>
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	08 95       	ret
    1434:	85 e0       	ldi	r24, 0x05	; 5
    1436:	08 95       	ret

00001438 <i2c_do_I2C_RX>:
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	e0 e2       	ldi	r30, 0x20	; 32
    143e:	f4 e3       	ldi	r31, 0x34	; 52
    1440:	80 81       	ld	r24, Z
    1442:	87 7f       	andi	r24, 0xF7	; 247
    1444:	80 83       	st	Z, r24
    1446:	84 81       	ldd	r24, Z+4	; 0x04
    1448:	95 81       	ldd	r25, Z+5	; 0x05
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	31 f4       	brne	.+12     	; 0x145a <i2c_do_I2C_RX+0x22>
    144e:	e0 ea       	ldi	r30, 0xA0	; 160
    1450:	f8 e0       	ldi	r31, 0x08	; 8
    1452:	84 81       	ldd	r24, Z+4	; 0x04
    1454:	84 60       	ori	r24, 0x04	; 4
    1456:	84 83       	std	Z+4, r24	; 0x04
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <i2c_do_I2C_RX+0x2c>
    145a:	e0 ea       	ldi	r30, 0xA0	; 160
    145c:	f8 e0       	ldi	r31, 0x08	; 8
    145e:	84 81       	ldd	r24, Z+4	; 0x04
    1460:	8b 7f       	andi	r24, 0xFB	; 251
    1462:	84 83       	std	Z+4, r24	; 0x04
    1464:	e0 e2       	ldi	r30, 0x20	; 32
    1466:	f4 e3       	ldi	r31, 0x34	; 52
    1468:	84 81       	ldd	r24, Z+4	; 0x04
    146a:	95 81       	ldd	r25, Z+5	; 0x05
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	84 83       	std	Z+4, r24	; 0x04
    1470:	95 83       	std	Z+5, r25	; 0x05
    1472:	89 2b       	or	r24, r25
    1474:	a9 f0       	breq	.+42     	; 0x14a0 <i2c_do_I2C_RX+0x68>
    1476:	df 01       	movw	r26, r30
    1478:	c2 81       	ldd	r28, Z+2	; 0x02
    147a:	d3 81       	ldd	r29, Z+3	; 0x03
    147c:	e0 ea       	ldi	r30, 0xA0	; 160
    147e:	f8 e0       	ldi	r31, 0x08	; 8
    1480:	80 85       	ldd	r24, Z+8	; 0x08
    1482:	88 83       	st	Y, r24
    1484:	12 96       	adiw	r26, 0x02	; 2
    1486:	8d 91       	ld	r24, X+
    1488:	9c 91       	ld	r25, X
    148a:	13 97       	sbiw	r26, 0x03	; 3
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	8d 93       	st	X+, r24
    1492:	9c 93       	st	X, r25
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	84 81       	ldd	r24, Z+4	; 0x04
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	84 83       	std	Z+4, r24	; 0x04
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	26 c0       	rjmp	.+76     	; 0x14ec <i2c_do_I2C_RX+0xb4>
    14a0:	a0 e2       	ldi	r26, 0x20	; 32
    14a2:	b4 e3       	ldi	r27, 0x34	; 52
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	13 97       	sbiw	r26, 0x03	; 3
    14ac:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
    14b0:	80 83       	st	Z, r24
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X
    14b8:	13 97       	sbiw	r26, 0x03	; 3
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	8d 93       	st	X+, r24
    14c0:	9c 93       	st	X, r25
    14c2:	13 97       	sbiw	r26, 0x03	; 3
    14c4:	8c 91       	ld	r24, X
    14c6:	84 60       	ori	r24, 0x04	; 4
    14c8:	8c 93       	st	X, r24
    14ca:	1c 96       	adiw	r26, 0x0c	; 12
    14cc:	ed 91       	ld	r30, X+
    14ce:	fc 91       	ld	r31, X
    14d0:	1d 97       	sbiw	r26, 0x0d	; 13
    14d2:	58 96       	adiw	r26, 0x18	; 24
    14d4:	8d 91       	ld	r24, X+
    14d6:	9c 91       	ld	r25, X
    14d8:	59 97       	sbiw	r26, 0x19	; 25
    14da:	09 95       	icall
    14dc:	82 50       	subi	r24, 0x02	; 2
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	18 f4       	brcc	.+6      	; 0x14e8 <i2c_do_I2C_RX+0xb0>
    14e2:	0e 94 df 09 	call	0x13be	; 0x13be <i2c_do_I2C_DO_NACK_RESTART>
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <i2c_do_I2C_RX+0xb4>
    14e8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <i2c_do_I2C_DO_NACK_STOP>
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <i2c_do_I2C_TX_EMPTY>:
    14f2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    14f6:	84 ff       	sbrs	r24, 4
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <i2c_do_I2C_TX_EMPTY+0x3a>
    14fa:	a0 e2       	ldi	r26, 0x20	; 32
    14fc:	b4 e3       	ldi	r27, 0x34	; 52
    14fe:	52 96       	adiw	r26, 0x12	; 18
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	53 97       	sbiw	r26, 0x13	; 19
    1506:	5e 96       	adiw	r26, 0x1e	; 30
    1508:	8d 91       	ld	r24, X+
    150a:	9c 91       	ld	r25, X
    150c:	5f 97       	sbiw	r26, 0x1f	; 31
    150e:	09 95       	icall
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	19 f0       	breq	.+6      	; 0x151a <i2c_do_I2C_TX_EMPTY+0x28>
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	21 f0       	breq	.+8      	; 0x1520 <i2c_do_I2C_TX_EMPTY+0x2e>
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <i2c_do_I2C_TX_EMPTY+0x34>
    151a:	0e 94 95 09 	call	0x132a	; 0x132a <i2c_do_I2C_SEND_RESTART_READ>
    151e:	08 95       	ret
    1520:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_do_I2C_SEND_RESTART_WRITE>
    1524:	08 95       	ret
    1526:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_do_I2C_SEND_STOP>
    152a:	08 95       	ret
    152c:	a0 e2       	ldi	r26, 0x20	; 32
    152e:	b4 e3       	ldi	r27, 0x34	; 52
    1530:	8c 91       	ld	r24, X
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24
    1536:	1c 96       	adiw	r26, 0x0c	; 12
    1538:	ed 91       	ld	r30, X+
    153a:	fc 91       	ld	r31, X
    153c:	1d 97       	sbiw	r26, 0x0d	; 13
    153e:	58 96       	adiw	r26, 0x18	; 24
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	59 97       	sbiw	r26, 0x19	; 25
    1546:	09 95       	icall
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	39 f0       	breq	.+14     	; 0x155a <i2c_do_I2C_TX_EMPTY+0x68>
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	41 f0       	breq	.+16     	; 0x1560 <i2c_do_I2C_TX_EMPTY+0x6e>
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	49 f4       	brne	.+18     	; 0x1566 <i2c_do_I2C_TX_EMPTY+0x74>
    1554:	0e 94 95 09 	call	0x132a	; 0x132a <i2c_do_I2C_SEND_RESTART_READ>
    1558:	08 95       	ret
    155a:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_do_I2C_SEND_RESTART_WRITE>
    155e:	08 95       	ret
    1560:	0e 94 e6 09 	call	0x13cc	; 0x13cc <i2c_do_I2C_TX>
    1564:	08 95       	ret
    1566:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_do_I2C_SEND_STOP>
    156a:	08 95       	ret

0000156c <i2c_do_I2C_BUS_COLLISION>:
    156c:	e0 ea       	ldi	r30, 0xA0	; 160
    156e:	f8 e0       	ldi	r31, 0x08	; 8
    1570:	85 81       	ldd	r24, Z+5	; 0x05
    1572:	88 60       	ori	r24, 0x08	; 8
    1574:	85 83       	std	Z+5, r24	; 0x05
    1576:	a0 e2       	ldi	r26, 0x20	; 32
    1578:	b4 e3       	ldi	r27, 0x34	; 52
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	1b 96       	adiw	r26, 0x0b	; 11
    157e:	8c 93       	st	X, r24
    1580:	1b 97       	sbiw	r26, 0x0b	; 11
    1582:	1e 96       	adiw	r26, 0x0e	; 14
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	1f 97       	sbiw	r26, 0x0f	; 15
    158a:	5a 96       	adiw	r26, 0x1a	; 26
    158c:	8d 91       	ld	r24, X+
    158e:	9c 91       	ld	r25, X
    1590:	5b 97       	sbiw	r26, 0x1b	; 27
    1592:	09 95       	icall
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	19 f0       	breq	.+6      	; 0x159e <i2c_do_I2C_BUS_COLLISION+0x32>
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	21 f0       	breq	.+8      	; 0x15a4 <i2c_do_I2C_BUS_COLLISION+0x38>
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <i2c_do_I2C_BUS_COLLISION+0x3e>
    159e:	0e 94 95 09 	call	0x132a	; 0x132a <i2c_do_I2C_SEND_RESTART_READ>
    15a2:	08 95       	ret
    15a4:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_do_I2C_SEND_RESTART_WRITE>
    15a8:	08 95       	ret
    15aa:	0e 94 64 09 	call	0x12c8	; 0x12c8 <i2c_do_I2C_RESET>
    15ae:	08 95       	ret

000015b0 <i2c_do_I2C_BUS_ERROR>:
    15b0:	e0 ea       	ldi	r30, 0xA0	; 160
    15b2:	f8 e0       	ldi	r31, 0x08	; 8
    15b4:	84 81       	ldd	r24, Z+4	; 0x04
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	84 83       	std	Z+4, r24	; 0x04
    15ba:	85 81       	ldd	r24, Z+5	; 0x05
    15bc:	81 60       	ori	r24, 0x01	; 1
    15be:	85 83       	std	Z+5, r24	; 0x05
    15c0:	e0 e2       	ldi	r30, 0x20	; 32
    15c2:	f4 e3       	ldi	r31, 0x34	; 52
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	80 83       	st	Z, r24
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	83 87       	std	Z+11, r24	; 0x0b
    15ce:	8e e0       	ldi	r24, 0x0E	; 14
    15d0:	08 95       	ret

000015d2 <i2c_master_isr>:
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	e0 ea       	ldi	r30, 0xA0	; 160
    15d8:	f8 e0       	ldi	r31, 0x08	; 8
    15da:	85 81       	ldd	r24, Z+5	; 0x05
    15dc:	80 6c       	ori	r24, 0xC0	; 192
    15de:	85 83       	std	Z+5, r24	; 0x05
    15e0:	80 91 20 34 	lds	r24, 0x3420	; 0x803420 <i2c_status>
    15e4:	83 ff       	sbrs	r24, 3
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <i2c_master_isr+0x24>
    15e8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    15ec:	84 ff       	sbrs	r24, 4
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <i2c_master_isr+0x24>
    15f0:	8f e0       	ldi	r24, 0x0F	; 15
    15f2:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    15f6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    15fa:	83 ff       	sbrs	r24, 3
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <i2c_master_isr+0x32>
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    1604:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    1608:	82 ff       	sbrs	r24, 2
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <i2c_master_isr+0x40>
    160c:	81 e1       	ldi	r24, 0x11	; 17
    160e:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    1612:	c0 e2       	ldi	r28, 0x20	; 32
    1614:	d4 e3       	ldi	r29, 0x34	; 52
    1616:	ea 85       	ldd	r30, Y+10	; 0x0a
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	ec 5a       	subi	r30, 0xAC	; 172
    1620:	ff 4c       	sbci	r31, 0xCF	; 207
    1622:	01 90       	ld	r0, Z+
    1624:	f0 81       	ld	r31, Z
    1626:	e0 2d       	mov	r30, r0
    1628:	09 95       	icall
    162a:	8a 87       	std	Y+10, r24	; 0x0a
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <i2c_return_stop>:
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	08 95       	ret

00001636 <i2c_return_reset>:
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	08 95       	ret

0000163a <i2c_set_callback>:
    163a:	61 15       	cp	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	91 f0       	breq	.+36     	; 0x1664 <i2c_set_callback+0x2a>
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	36 96       	adiw	r30, 0x06	; 6
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	e0 5e       	subi	r30, 0xE0	; 224
    164c:	fb 4c       	sbci	r31, 0xCB	; 203
    164e:	60 83       	st	Z, r22
    1650:	71 83       	std	Z+1, r23	; 0x01
    1652:	fc 01       	movw	r30, r24
    1654:	3c 96       	adiw	r30, 0x0c	; 12
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	e0 5e       	subi	r30, 0xE0	; 224
    165c:	fb 4c       	sbci	r31, 0xCB	; 203
    165e:	40 83       	st	Z, r20
    1660:	51 83       	std	Z+1, r21	; 0x01
    1662:	08 95       	ret
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	36 96       	adiw	r30, 0x06	; 6
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	e0 5e       	subi	r30, 0xE0	; 224
    1670:	fb 4c       	sbci	r31, 0xCB	; 203
    1672:	29 e1       	ldi	r18, 0x19	; 25
    1674:	3b e0       	ldi	r19, 0x0B	; 11
    1676:	20 83       	st	Z, r18
    1678:	31 83       	std	Z+1, r19	; 0x01
    167a:	fc 01       	movw	r30, r24
    167c:	3c 96       	adiw	r30, 0x0c	; 12
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	e0 5e       	subi	r30, 0xE0	; 224
    1684:	fb 4c       	sbci	r31, 0xCB	; 203
    1686:	10 82       	st	Z, r1
    1688:	11 82       	std	Z+1, r1	; 0x01
    168a:	08 95       	ret

0000168c <i2c_set_data_complete_callback>:
    168c:	ab 01       	movw	r20, r22
    168e:	bc 01       	movw	r22, r24
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 1d 0b 	call	0x163a	; 0x163a <i2c_set_callback>
    1696:	08 95       	ret

00001698 <i2c_set_address_nack_callback>:
    1698:	ab 01       	movw	r20, r22
    169a:	bc 01       	movw	r22, r24
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	0e 94 1d 0b 	call	0x163a	; 0x163a <i2c_set_callback>
    16a2:	08 95       	ret

000016a4 <i2c_init>:
    16a4:	e0 ea       	ldi	r30, 0xA0	; 160
    16a6:	f8 e0       	ldi	r31, 0x08	; 8
    16a8:	8b e0       	ldi	r24, 0x0B	; 11
    16aa:	86 83       	std	Z+6, r24	; 0x06
    16ac:	81 ec       	ldi	r24, 0xC1	; 193
    16ae:	83 83       	std	Z+3, r24	; 0x03
    16b0:	08 95       	ret

000016b2 <i2c_open>:
    16b2:	90 91 20 34 	lds	r25, 0x3420	; 0x803420 <i2c_status>
    16b6:	91 fd       	sbrc	r25, 1
    16b8:	37 c0       	rjmp	.+110    	; 0x1728 <i2c_open+0x76>
    16ba:	e0 e2       	ldi	r30, 0x20	; 32
    16bc:	f4 e3       	ldi	r31, 0x34	; 52
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	89 2f       	mov	r24, r25
    16c2:	8e 7f       	andi	r24, 0xFE	; 254
    16c4:	82 60       	ori	r24, 0x02	; 2
    16c6:	9e e0       	ldi	r25, 0x0E	; 14
    16c8:	92 87       	std	Z+10, r25	; 0x0a
    16ca:	24 ef       	ldi	r18, 0xF4	; 244
    16cc:	31 e0       	ldi	r19, 0x01	; 1
    16ce:	20 87       	std	Z+8, r18	; 0x08
    16d0:	31 87       	std	Z+9, r19	; 0x09
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	84 60       	ori	r24, 0x04	; 4
    16d6:	80 83       	st	Z, r24
    16d8:	89 e1       	ldi	r24, 0x19	; 25
    16da:	9b e0       	ldi	r25, 0x0B	; 11
    16dc:	84 87       	std	Z+12, r24	; 0x0c
    16de:	95 87       	std	Z+13, r25	; 0x0d
    16e0:	10 8e       	std	Z+24, r1	; 0x18
    16e2:	11 8e       	std	Z+25, r1	; 0x19
    16e4:	86 87       	std	Z+14, r24	; 0x0e
    16e6:	97 87       	std	Z+15, r25	; 0x0f
    16e8:	12 8e       	std	Z+26, r1	; 0x1a
    16ea:	13 8e       	std	Z+27, r1	; 0x1b
    16ec:	80 8b       	std	Z+16, r24	; 0x10
    16ee:	91 8b       	std	Z+17, r25	; 0x11
    16f0:	14 8e       	std	Z+28, r1	; 0x1c
    16f2:	15 8e       	std	Z+29, r1	; 0x1d
    16f4:	82 8b       	std	Z+18, r24	; 0x12
    16f6:	93 8b       	std	Z+19, r25	; 0x13
    16f8:	16 8e       	std	Z+30, r1	; 0x1e
    16fa:	17 8e       	std	Z+31, r1	; 0x1f
    16fc:	8b e1       	ldi	r24, 0x1B	; 27
    16fe:	9b e0       	ldi	r25, 0x0B	; 11
    1700:	84 8b       	std	Z+20, r24	; 0x14
    1702:	95 8b       	std	Z+21, r25	; 0x15
    1704:	10 a2       	std	Z+32, r1	; 0x20
    1706:	11 a2       	std	Z+33, r1	; 0x21
    1708:	e0 ea       	ldi	r30, 0xA0	; 160
    170a:	f8 e0       	ldi	r31, 0x08	; 8
    170c:	84 81       	ldd	r24, Z+4	; 0x04
    170e:	88 60       	ori	r24, 0x08	; 8
    1710:	84 83       	std	Z+4, r24	; 0x04
    1712:	85 81       	ldd	r24, Z+5	; 0x05
    1714:	81 60       	ori	r24, 0x01	; 1
    1716:	85 83       	std	Z+5, r24	; 0x05
    1718:	85 81       	ldd	r24, Z+5	; 0x05
    171a:	80 6c       	ori	r24, 0xC0	; 192
    171c:	85 83       	std	Z+5, r24	; 0x05
    171e:	83 81       	ldd	r24, Z+3	; 0x03
    1720:	80 6c       	ori	r24, 0xC0	; 192
    1722:	83 83       	std	Z+3, r24	; 0x03
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	08 95       	ret

0000172c <i2c_close>:
    172c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    1730:	82 ff       	sbrs	r24, 2
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <i2c_close+0x16>
    1734:	e0 e2       	ldi	r30, 0x20	; 32
    1736:	f4 e3       	ldi	r31, 0x34	; 52
    1738:	80 81       	ld	r24, Z
    173a:	8e 7f       	andi	r24, 0xFE	; 254
    173c:	80 83       	st	Z, r24
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	83 87       	std	Z+11, r24	; 0x0b
    1742:	80 91 20 34 	lds	r24, 0x3420	; 0x803420 <i2c_status>
    1746:	80 fd       	sbrc	r24, 0
    1748:	17 c0       	rjmp	.+46     	; 0x1778 <i2c_close+0x4c>
    174a:	e0 e2       	ldi	r30, 0x20	; 32
    174c:	f4 e3       	ldi	r31, 0x34	; 52
    174e:	8d 7f       	andi	r24, 0xFD	; 253
    1750:	80 83       	st	Z, r24
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	81 83       	std	Z+1, r24	; 0x01
    1756:	a0 ea       	ldi	r26, 0xA0	; 160
    1758:	b8 e0       	ldi	r27, 0x08	; 8
    175a:	15 96       	adiw	r26, 0x05	; 5
    175c:	8c 91       	ld	r24, X
    175e:	15 97       	sbiw	r26, 0x05	; 5
    1760:	80 6c       	ori	r24, 0xC0	; 192
    1762:	15 96       	adiw	r26, 0x05	; 5
    1764:	8c 93       	st	X, r24
    1766:	15 97       	sbiw	r26, 0x05	; 5
    1768:	13 96       	adiw	r26, 0x03	; 3
    176a:	8c 91       	ld	r24, X
    176c:	13 97       	sbiw	r26, 0x03	; 3
    176e:	8f 73       	andi	r24, 0x3F	; 63
    1770:	13 96       	adiw	r26, 0x03	; 3
    1772:	8c 93       	st	X, r24
    1774:	83 85       	ldd	r24, Z+11	; 0x0b
    1776:	08 95       	ret
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	08 95       	ret

0000177c <i2c_set_buffer>:
    177c:	9c 01       	movw	r18, r24
    177e:	90 91 20 34 	lds	r25, 0x3420	; 0x803420 <i2c_status>
    1782:	92 ff       	sbrs	r25, 2
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <i2c_set_buffer+0x1c>
    1786:	e0 e2       	ldi	r30, 0x20	; 32
    1788:	f4 e3       	ldi	r31, 0x34	; 52
    178a:	22 83       	std	Z+2, r18	; 0x02
    178c:	33 83       	std	Z+3, r19	; 0x03
    178e:	64 83       	std	Z+4, r22	; 0x04
    1790:	75 83       	std	Z+5, r23	; 0x05
    1792:	89 2f       	mov	r24, r25
    1794:	8b 7f       	andi	r24, 0xFB	; 251
    1796:	80 83       	st	Z, r24
    1798:	08 95       	ret

0000179a <i2c_master_operation>:
    179a:	90 91 20 34 	lds	r25, 0x3420	; 0x803420 <i2c_status>
    179e:	90 fd       	sbrc	r25, 0
    17a0:	11 c0       	rjmp	.+34     	; 0x17c4 <i2c_master_operation+0x2a>
    17a2:	e0 e2       	ldi	r30, 0x20	; 32
    17a4:	f4 e3       	ldi	r31, 0x34	; 52
    17a6:	91 60       	ori	r25, 0x01	; 1
    17a8:	90 83       	st	Z, r25
    17aa:	88 23       	and	r24, r24
    17ac:	21 f0       	breq	.+8      	; 0x17b6 <i2c_master_operation+0x1c>
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <i2c_master_operation+0x22>
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    17bc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <i2c_master_isr>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	08 95       	ret
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret

000017c8 <i2c_master_write>:
/**
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	0e 94 cd 0b 	call	0x179a	; 0x179a <i2c_master_operation>
}
    17ce:	08 95       	ret

000017d0 <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
	i2c_master_isr();
    17f2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <i2c_master_isr>
}
    17f6:	ff 91       	pop	r31
    17f8:	ef 91       	pop	r30
    17fa:	bf 91       	pop	r27
    17fc:	af 91       	pop	r26
    17fe:	9f 91       	pop	r25
    1800:	8f 91       	pop	r24
    1802:	7f 91       	pop	r23
    1804:	6f 91       	pop	r22
    1806:	5f 91       	pop	r21
    1808:	4f 91       	pop	r20
    180a:	3f 91       	pop	r19
    180c:	2f 91       	pop	r18
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	0f 90       	pop	r0
    1814:	1f 90       	pop	r1
    1816:	18 95       	reti

00001818 <i2c_wr1RegCompleteHandler>:
		; // sit here until finished.
	if (!timeout)
		return I2C_FAIL;

	return I2C_NOERR;
}
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	0e 94 be 0b 	call	0x177c	; 0x177c <i2c_set_buffer>
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 46 0b 	call	0x168c	; 0x168c <i2c_set_data_complete_callback>
    182c:	84 e0       	ldi	r24, 0x04	; 4
    182e:	08 95       	ret

00001830 <i2c_rd1RegCompleteHandler>:
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	0e 94 be 0b 	call	0x177c	; 0x177c <i2c_set_buffer>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 46 0b 	call	0x168c	; 0x168c <i2c_set_data_complete_callback>
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	08 95       	ret

00001848 <i2c_write1ByteRegister>:
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 d0       	rcall	.+0      	; 0x1854 <i2c_write1ByteRegister+0xc>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	f8 2e       	mov	r15, r24
    185a:	69 83       	std	Y+1, r22	; 0x01
    185c:	4a 83       	std	Y+2, r20	; 0x02
    185e:	00 e1       	ldi	r16, 0x10	; 16
    1860:	17 e2       	ldi	r17, 0x27	; 39
    1862:	8f 2d       	mov	r24, r15
    1864:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <i2c_open>
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	19 f4       	brne	.+6      	; 0x1872 <i2c_write1ByteRegister+0x2a>
    186c:	01 50       	subi	r16, 0x01	; 1
    186e:	11 09       	sbc	r17, r1
    1870:	c1 f7       	brne	.-16     	; 0x1862 <i2c_write1ByteRegister+0x1a>
    1872:	01 2b       	or	r16, r17
    1874:	11 f1       	breq	.+68     	; 0x18ba <i2c_write1ByteRegister+0x72>
    1876:	be 01       	movw	r22, r28
    1878:	6e 5f       	subi	r22, 0xFE	; 254
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8c e0       	ldi	r24, 0x0C	; 12
    187e:	9c e0       	ldi	r25, 0x0C	; 12
    1880:	0e 94 46 0b 	call	0x168c	; 0x168c <i2c_set_data_complete_callback>
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 be 0b 	call	0x177c	; 0x177c <i2c_set_buffer>
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	88 ea       	ldi	r24, 0xA8	; 168
    1896:	9c e0       	ldi	r25, 0x0C	; 12
    1898:	0e 94 4c 0b 	call	0x1698	; 0x1698 <i2c_set_address_nack_callback>
    189c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <i2c_master_write>
    18a0:	00 e1       	ldi	r16, 0x10	; 16
    18a2:	17 e2       	ldi	r17, 0x27	; 39
    18a4:	0e 94 96 0b 	call	0x172c	; 0x172c <i2c_close>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	19 f4       	brne	.+6      	; 0x18b2 <i2c_write1ByteRegister+0x6a>
    18ac:	01 50       	subi	r16, 0x01	; 1
    18ae:	11 09       	sbc	r17, r1
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <i2c_write1ByteRegister+0x5c>
    18b2:	01 2b       	or	r16, r17
    18b4:	21 f4       	brne	.+8      	; 0x18be <i2c_write1ByteRegister+0x76>
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <i2c_write1ByteRegister+0x78>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <i2c_write1ByteRegister+0x78>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	08 95       	ret

000018d0 <i2c_read1ByteRegister>:
	i2c_set_data_complete_callback(NULL, NULL);
	return i2c_restart_read;
}

uint8_t i2c_read1ByteRegister(i2c_address_t address, uint8_t reg)
{
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	00 d0       	rcall	.+0      	; 0x18dc <i2c_read1ByteRegister+0xc>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	18 2f       	mov	r17, r24
    18e2:	6a 83       	std	Y+2, r22	; 0x02
	uint8_t     d2 = 42;
    18e4:	8a e2       	ldi	r24, 0x2A	; 42
    18e6:	89 83       	std	Y+1, r24	; 0x01
	i2c_error_t e;
	int         x;

	for (x = 2; x != 0; x--) {
    18e8:	68 94       	set
    18ea:	ee 24       	eor	r14, r14
    18ec:	e1 f8       	bld	r14, 1
    18ee:	f1 2c       	mov	r15, r1
    18f0:	23 c0       	rjmp	.+70     	; 0x1938 <i2c_read1ByteRegister+0x68>
		while (!i2c_open(address))
    18f2:	81 2f       	mov	r24, r17
    18f4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <i2c_open>
    18f8:	88 23       	and	r24, r24
    18fa:	d9 f3       	breq	.-10     	; 0x18f2 <i2c_read1ByteRegister+0x22>
			; // sit here until we get the bus..
		i2c_set_data_complete_callback(i2c_rd1RegCompleteHandler, &d2);
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	88 e1       	ldi	r24, 0x18	; 24
    1904:	9c e0       	ldi	r25, 0x0C	; 12
    1906:	0e 94 46 0b 	call	0x168c	; 0x168c <i2c_set_data_complete_callback>
		i2c_set_buffer(&reg, 1);
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	ce 01       	movw	r24, r28
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	0e 94 be 0b 	call	0x177c	; 0x177c <i2c_set_buffer>
		i2c_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	88 ea       	ldi	r24, 0xA8	; 168
    191c:	9c e0       	ldi	r25, 0x0C	; 12
    191e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <i2c_set_address_nack_callback>
		i2c_master_write();
    1922:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <i2c_master_write>
		while (I2C_BUSY == (e = i2c_close()))
    1926:	0e 94 96 0b 	call	0x172c	; 0x172c <i2c_close>
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	e1 f3       	breq	.-8      	; 0x1926 <i2c_read1ByteRegister+0x56>
			; // sit here until finished.
		if (e == I2C_NOERR)
    192e:	88 23       	and	r24, r24
    1930:	31 f0       	breq	.+12     	; 0x193e <i2c_read1ByteRegister+0x6e>
{
	uint8_t     d2 = 42;
	i2c_error_t e;
	int         x;

	for (x = 2; x != 0; x--) {
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	e8 1a       	sub	r14, r24
    1936:	f1 08       	sbc	r15, r1
    1938:	e1 14       	cp	r14, r1
    193a:	f1 04       	cpc	r15, r1
    193c:	d1 f6       	brne	.-76     	; 0x18f2 <i2c_read1ByteRegister+0x22>
		if (e == I2C_NOERR)
			break;
	}

	return d2;
}
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	08 95       	ret

00001950 <i2c_cb_restart_write>:
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	08 95       	ret

00001954 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret

00001958 <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret

0000195c <rx487x_default_rx_isr_cb>:
 *
 * \return Nothing
 */
void usb_cdc_disable()
{
	USART2.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    195c:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    1960:	e0 91 4f 37 	lds	r30, 0x374F	; 0x80374f <rx487x_rx_head>
    1964:	ef 5f       	subi	r30, 0xFF	; 255
    1966:	80 91 4e 37 	lds	r24, 0x374E	; 0x80374e <rx487x_rx_tail>
    196a:	e8 17       	cp	r30, r24
    196c:	59 f0       	breq	.+22     	; 0x1984 <rx487x_default_rx_isr_cb+0x28>
    196e:	e0 93 4f 37 	sts	0x374F, r30	; 0x80374f <rx487x_rx_head>
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	e0 5b       	subi	r30, 0xB0	; 176
    1976:	f8 4c       	sbci	r31, 0xC8	; 200
    1978:	90 83       	st	Z, r25
    197a:	80 91 4d 37 	lds	r24, 0x374D	; 0x80374d <rx487x_rx_elements>
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 93 4d 37 	sts	0x374D, r24	; 0x80374d <rx487x_rx_elements>
    1984:	08 95       	ret

00001986 <rx487x_default_udre_isr_cb>:
    1986:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    198a:	88 23       	and	r24, r24
    198c:	81 f0       	breq	.+32     	; 0x19ae <rx487x_default_udre_isr_cb+0x28>
    198e:	e0 91 4b 36 	lds	r30, 0x364B	; 0x80364b <rx487x_tx_tail>
    1992:	ef 5f       	subi	r30, 0xFF	; 255
    1994:	e0 93 4b 36 	sts	0x364B, r30	; 0x80364b <rx487x_tx_tail>
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	e3 5b       	subi	r30, 0xB3	; 179
    199c:	f9 4c       	sbci	r31, 0xC9	; 201
    199e:	80 81       	ld	r24, Z
    19a0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
    19a4:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    19a8:	81 50       	subi	r24, 0x01	; 1
    19aa:	80 93 4a 36 	sts	0x364A, r24	; 0x80364a <rx487x_tx_elements>
    19ae:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    19b2:	81 11       	cpse	r24, r1
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <rx487x_default_udre_isr_cb+0x3a>
    19b6:	e0 e0       	ldi	r30, 0x00	; 0
    19b8:	f8 e0       	ldi	r31, 0x08	; 8
    19ba:	85 81       	ldd	r24, Z+5	; 0x05
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	85 83       	std	Z+5, r24	; 0x05
    19c0:	08 95       	ret

000019c2 <usb_cdc_default_rx_isr_cb>:
    19c2:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
    19c6:	e0 91 49 35 	lds	r30, 0x3549	; 0x803549 <usb_cdc_rx_head>
    19ca:	ef 5f       	subi	r30, 0xFF	; 255
    19cc:	80 91 48 35 	lds	r24, 0x3548	; 0x803548 <usb_cdc_rx_tail>
    19d0:	e8 17       	cp	r30, r24
    19d2:	59 f0       	breq	.+22     	; 0x19ea <usb_cdc_default_rx_isr_cb+0x28>
    19d4:	e0 93 49 35 	sts	0x3549, r30	; 0x803549 <usb_cdc_rx_head>
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	e6 5b       	subi	r30, 0xB6	; 182
    19dc:	fa 4c       	sbci	r31, 0xCA	; 202
    19de:	90 83       	st	Z, r25
    19e0:	80 91 47 35 	lds	r24, 0x3547	; 0x803547 <usb_cdc_rx_elements>
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	80 93 47 35 	sts	0x3547, r24	; 0x803547 <usb_cdc_rx_elements>
    19ea:	08 95       	ret

000019ec <usb_cdc_default_udre_isr_cb>:
    19ec:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    19f0:	88 23       	and	r24, r24
    19f2:	81 f0       	breq	.+32     	; 0x1a14 <usb_cdc_default_udre_isr_cb+0x28>
    19f4:	e0 91 45 34 	lds	r30, 0x3445	; 0x803445 <usb_cdc_tx_tail>
    19f8:	ef 5f       	subi	r30, 0xFF	; 255
    19fa:	e0 93 45 34 	sts	0x3445, r30	; 0x803445 <usb_cdc_tx_tail>
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	e9 5b       	subi	r30, 0xB9	; 185
    1a02:	fb 4c       	sbci	r31, 0xCB	; 203
    1a04:	80 81       	ld	r24, Z
    1a06:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
    1a0a:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <usb_cdc_tx_elements>
    1a14:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <usb_cdc_default_udre_isr_cb+0x3a>
    1a1c:	e0 e4       	ldi	r30, 0x40	; 64
    1a1e:	f8 e0       	ldi	r31, 0x08	; 8
    1a20:	85 81       	ldd	r24, Z+5	; 0x05
    1a22:	8f 7d       	andi	r24, 0xDF	; 223
    1a24:	85 83       	std	Z+5, r24	; 0x05
    1a26:	08 95       	ret

00001a28 <rx487x_set_ISR_cb>:
    1a28:	61 30       	cpi	r22, 0x01	; 1
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <rx487x_set_ISR_cb+0xa>
    1a2c:	62 30       	cpi	r22, 0x02	; 2
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <rx487x_set_ISR_cb+0x14>
    1a30:	08 95       	ret
    1a32:	80 93 8c 30 	sts	0x308C, r24	; 0x80308c <rx487x_rx_isr_cb>
    1a36:	90 93 8d 30 	sts	0x308D, r25	; 0x80308d <rx487x_rx_isr_cb+0x1>
    1a3a:	08 95       	ret
    1a3c:	80 93 8a 30 	sts	0x308A, r24	; 0x80308a <rx487x_udre_isr_cb>
    1a40:	90 93 8b 30 	sts	0x308B, r25	; 0x80308b <rx487x_udre_isr_cb+0x1>
    1a44:	08 95       	ret

00001a46 <__vector_17>:
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	e0 91 8c 30 	lds	r30, 0x308C	; 0x80308c <rx487x_rx_isr_cb>
    1a6c:	f0 91 8d 30 	lds	r31, 0x308D	; 0x80308d <rx487x_rx_isr_cb+0x1>
    1a70:	30 97       	sbiw	r30, 0x00	; 0
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <__vector_17+0x30>
    1a74:	09 95       	icall
    1a76:	ff 91       	pop	r31
    1a78:	ef 91       	pop	r30
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__vector_18>:
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	2f 93       	push	r18
    1aa4:	3f 93       	push	r19
    1aa6:	4f 93       	push	r20
    1aa8:	5f 93       	push	r21
    1aaa:	6f 93       	push	r22
    1aac:	7f 93       	push	r23
    1aae:	8f 93       	push	r24
    1ab0:	9f 93       	push	r25
    1ab2:	af 93       	push	r26
    1ab4:	bf 93       	push	r27
    1ab6:	ef 93       	push	r30
    1ab8:	ff 93       	push	r31
    1aba:	e0 91 8a 30 	lds	r30, 0x308A	; 0x80308a <rx487x_udre_isr_cb>
    1abe:	f0 91 8b 30 	lds	r31, 0x308B	; 0x80308b <rx487x_udre_isr_cb+0x1>
    1ac2:	30 97       	sbiw	r30, 0x00	; 0
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <__vector_18+0x30>
    1ac6:	09 95       	icall
    1ac8:	ff 91       	pop	r31
    1aca:	ef 91       	pop	r30
    1acc:	bf 91       	pop	r27
    1ace:	af 91       	pop	r26
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	7f 91       	pop	r23
    1ad6:	6f 91       	pop	r22
    1ad8:	5f 91       	pop	r21
    1ada:	4f 91       	pop	r20
    1adc:	3f 91       	pop	r19
    1ade:	2f 91       	pop	r18
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	1f 90       	pop	r1
    1ae8:	18 95       	reti

00001aea <rx487x_is_tx_ready>:
    1aea:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	08 95       	ret

00001af2 <rx487x_write>:
    1af2:	90 91 4c 36 	lds	r25, 0x364C	; 0x80364c <rx487x_tx_head>
    1af6:	9f 5f       	subi	r25, 0xFF	; 255
    1af8:	20 91 4a 36 	lds	r18, 0x364A	; 0x80364a <rx487x_tx_elements>
    1afc:	e9 2f       	mov	r30, r25
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	e3 5b       	subi	r30, 0xB3	; 179
    1b02:	f9 4c       	sbci	r31, 0xC9	; 201
    1b04:	80 83       	st	Z, r24
    1b06:	90 93 4c 36 	sts	0x364C, r25	; 0x80364c <rx487x_tx_head>
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	0f 92       	push	r0
    1b10:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    1b14:	8f 5f       	subi	r24, 0xFF	; 255
    1b16:	80 93 4a 36 	sts	0x364A, r24	; 0x80364a <rx487x_tx_elements>
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	e0 e0       	ldi	r30, 0x00	; 0
    1b20:	f8 e0       	ldi	r31, 0x08	; 8
    1b22:	85 81       	ldd	r24, Z+5	; 0x05
    1b24:	80 62       	ori	r24, 0x20	; 32
    1b26:	85 83       	std	Z+5, r24	; 0x05
    1b28:	08 95       	ret

00001b2a <rx487x_init>:
    1b2a:	e0 e0       	ldi	r30, 0x00	; 0
    1b2c:	f8 e0       	ldi	r31, 0x08	; 8
    1b2e:	84 e7       	ldi	r24, 0x74	; 116
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	80 87       	std	Z+8, r24	; 0x08
    1b34:	91 87       	std	Z+9, r25	; 0x09
    1b36:	80 e8       	ldi	r24, 0x80	; 128
    1b38:	85 83       	std	Z+5, r24	; 0x05
    1b3a:	80 ec       	ldi	r24, 0xC0	; 192
    1b3c:	86 83       	std	Z+6, r24	; 0x06
    1b3e:	10 92 4e 37 	sts	0x374E, r1	; 0x80374e <rx487x_rx_tail>
    1b42:	10 92 4f 37 	sts	0x374F, r1	; 0x80374f <rx487x_rx_head>
    1b46:	10 92 4d 37 	sts	0x374D, r1	; 0x80374d <rx487x_rx_elements>
    1b4a:	10 92 4b 36 	sts	0x364B, r1	; 0x80364b <rx487x_tx_tail>
    1b4e:	10 92 4c 36 	sts	0x364C, r1	; 0x80364c <rx487x_tx_head>
    1b52:	10 92 4a 36 	sts	0x364A, r1	; 0x80364a <rx487x_tx_elements>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret

00001b5a <rx487x_get_data>:
    1b5a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    1b5e:	08 95       	ret

00001b60 <usb_cdc_set_ISR_cb>:
    1b60:	61 30       	cpi	r22, 0x01	; 1
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <usb_cdc_set_ISR_cb+0xa>
    1b64:	62 30       	cpi	r22, 0x02	; 2
    1b66:	31 f0       	breq	.+12     	; 0x1b74 <usb_cdc_set_ISR_cb+0x14>
    1b68:	08 95       	ret
    1b6a:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <usb_cdc_rx_isr_cb>
    1b6e:	90 93 7b 30 	sts	0x307B, r25	; 0x80307b <usb_cdc_rx_isr_cb+0x1>
    1b72:	08 95       	ret
    1b74:	80 93 78 30 	sts	0x3078, r24	; 0x803078 <usb_cdc_udre_isr_cb>
    1b78:	90 93 79 30 	sts	0x3079, r25	; 0x803079 <usb_cdc_udre_isr_cb+0x1>
    1b7c:	08 95       	ret

00001b7e <__vector_31>:
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
    1ba0:	e0 91 7a 30 	lds	r30, 0x307A	; 0x80307a <usb_cdc_rx_isr_cb>
    1ba4:	f0 91 7b 30 	lds	r31, 0x307B	; 0x80307b <usb_cdc_rx_isr_cb+0x1>
    1ba8:	30 97       	sbiw	r30, 0x00	; 0
    1baa:	09 f0       	breq	.+2      	; 0x1bae <__vector_31+0x30>
    1bac:	09 95       	icall
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	0f 90       	pop	r0
    1bcc:	1f 90       	pop	r1
    1bce:	18 95       	reti

00001bd0 <__vector_32>:
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	6f 93       	push	r22
    1be4:	7f 93       	push	r23
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	af 93       	push	r26
    1bec:	bf 93       	push	r27
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	e0 91 78 30 	lds	r30, 0x3078	; 0x803078 <usb_cdc_udre_isr_cb>
    1bf6:	f0 91 79 30 	lds	r31, 0x3079	; 0x803079 <usb_cdc_udre_isr_cb+0x1>
    1bfa:	30 97       	sbiw	r30, 0x00	; 0
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <__vector_32+0x30>
    1bfe:	09 95       	icall
    1c00:	ff 91       	pop	r31
    1c02:	ef 91       	pop	r30
    1c04:	bf 91       	pop	r27
    1c06:	af 91       	pop	r26
    1c08:	9f 91       	pop	r25
    1c0a:	8f 91       	pop	r24
    1c0c:	7f 91       	pop	r23
    1c0e:	6f 91       	pop	r22
    1c10:	5f 91       	pop	r21
    1c12:	4f 91       	pop	r20
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <usb_cdc_write>:
    1c22:	90 91 46 34 	lds	r25, 0x3446	; 0x803446 <usb_cdc_tx_head>
    1c26:	9f 5f       	subi	r25, 0xFF	; 255
    1c28:	20 91 44 34 	lds	r18, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    1c2c:	e9 2f       	mov	r30, r25
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	e9 5b       	subi	r30, 0xB9	; 185
    1c32:	fb 4c       	sbci	r31, 0xCB	; 203
    1c34:	80 83       	st	Z, r24
    1c36:	90 93 46 34 	sts	0x3446, r25	; 0x803446 <usb_cdc_tx_head>
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	0f 92       	push	r0
    1c40:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <usb_cdc_tx_elements>
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	e0 e4       	ldi	r30, 0x40	; 64
    1c50:	f8 e0       	ldi	r31, 0x08	; 8
    1c52:	85 81       	ldd	r24, Z+5	; 0x05
    1c54:	80 62       	ori	r24, 0x20	; 32
    1c56:	85 83       	std	Z+5, r24	; 0x05
    1c58:	08 95       	ret

00001c5a <usb_cdc_printCHAR>:
    1c5a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <usb_cdc_write>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	08 95       	ret

00001c64 <usb_cdc_init>:
    1c64:	e0 e4       	ldi	r30, 0x40	; 64
    1c66:	f8 e0       	ldi	r31, 0x08	; 8
    1c68:	84 e7       	ldi	r24, 0x74	; 116
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	80 87       	std	Z+8, r24	; 0x08
    1c6e:	91 87       	std	Z+9, r25	; 0x09
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	85 83       	std	Z+5, r24	; 0x05
    1c74:	80 ec       	ldi	r24, 0xC0	; 192
    1c76:	86 83       	std	Z+6, r24	; 0x06
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	83 87       	std	Z+11, r24	; 0x0b
    1c7c:	10 92 48 35 	sts	0x3548, r1	; 0x803548 <usb_cdc_rx_tail>
    1c80:	10 92 49 35 	sts	0x3549, r1	; 0x803549 <usb_cdc_rx_head>
    1c84:	10 92 47 35 	sts	0x3547, r1	; 0x803547 <usb_cdc_rx_elements>
    1c88:	10 92 45 34 	sts	0x3445, r1	; 0x803445 <usb_cdc_tx_tail>
    1c8c:	10 92 46 34 	sts	0x3446, r1	; 0x803446 <usb_cdc_tx_head>
    1c90:	10 92 44 34 	sts	0x3444, r1	; 0x803444 <usb_cdc_tx_elements>
    1c94:	8c e7       	ldi	r24, 0x7C	; 124
    1c96:	90 e3       	ldi	r25, 0x30	; 48
    1c98:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <__iob+0x2>
    1c9c:	90 93 98 38 	sts	0x3898, r25	; 0x803898 <__iob+0x3>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	08 95       	ret

00001ca4 <usb_cdc_get_data>:
 *
 * \return Data register from usb_cdc module
 */
uint8_t usb_cdc_get_data()
{
	return USART2.RXDATAL;
    1ca4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
}
    1ca8:	08 95       	ret

00001caa <__subsf3>:
    1caa:	50 58       	subi	r21, 0x80	; 128

00001cac <__addsf3>:
    1cac:	bb 27       	eor	r27, r27
    1cae:	aa 27       	eor	r26, r26
    1cb0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__addsf3x>
    1cb4:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__fp_round>
    1cb8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscA>
    1cbc:	38 f0       	brcs	.+14     	; 0x1ccc <__addsf3+0x20>
    1cbe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fp_pscB>
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <__addsf3+0x20>
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <__addsf3+0x28>
    1cc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc8:	19 f4       	brne	.+6      	; 0x1cd0 <__addsf3+0x24>
    1cca:	26 f4       	brtc	.+8      	; 0x1cd4 <__addsf3+0x28>
    1ccc:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__fp_nan>
    1cd0:	0e f4       	brtc	.+2      	; 0x1cd4 <__addsf3+0x28>
    1cd2:	e0 95       	com	r30
    1cd4:	e7 fb       	bst	r30, 7
    1cd6:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_inf>

00001cda <__addsf3x>:
    1cda:	e9 2f       	mov	r30, r25
    1cdc:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__fp_split3>
    1ce0:	58 f3       	brcs	.-42     	; 0x1cb8 <__addsf3+0xc>
    1ce2:	ba 17       	cp	r27, r26
    1ce4:	62 07       	cpc	r22, r18
    1ce6:	73 07       	cpc	r23, r19
    1ce8:	84 07       	cpc	r24, r20
    1cea:	95 07       	cpc	r25, r21
    1cec:	20 f0       	brcs	.+8      	; 0x1cf6 <__addsf3x+0x1c>
    1cee:	79 f4       	brne	.+30     	; 0x1d0e <__addsf3x+0x34>
    1cf0:	a6 f5       	brtc	.+104    	; 0x1d5a <__addsf3x+0x80>
    1cf2:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_zero>
    1cf6:	0e f4       	brtc	.+2      	; 0x1cfa <__addsf3x+0x20>
    1cf8:	e0 95       	com	r30
    1cfa:	0b 2e       	mov	r0, r27
    1cfc:	ba 2f       	mov	r27, r26
    1cfe:	a0 2d       	mov	r26, r0
    1d00:	0b 01       	movw	r0, r22
    1d02:	b9 01       	movw	r22, r18
    1d04:	90 01       	movw	r18, r0
    1d06:	0c 01       	movw	r0, r24
    1d08:	ca 01       	movw	r24, r20
    1d0a:	a0 01       	movw	r20, r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	ff 27       	eor	r31, r31
    1d10:	59 1b       	sub	r21, r25
    1d12:	99 f0       	breq	.+38     	; 0x1d3a <__addsf3x+0x60>
    1d14:	59 3f       	cpi	r21, 0xF9	; 249
    1d16:	50 f4       	brcc	.+20     	; 0x1d2c <__addsf3x+0x52>
    1d18:	50 3e       	cpi	r21, 0xE0	; 224
    1d1a:	68 f1       	brcs	.+90     	; 0x1d76 <__addsf3x+0x9c>
    1d1c:	1a 16       	cp	r1, r26
    1d1e:	f0 40       	sbci	r31, 0x00	; 0
    1d20:	a2 2f       	mov	r26, r18
    1d22:	23 2f       	mov	r18, r19
    1d24:	34 2f       	mov	r19, r20
    1d26:	44 27       	eor	r20, r20
    1d28:	58 5f       	subi	r21, 0xF8	; 248
    1d2a:	f3 cf       	rjmp	.-26     	; 0x1d12 <__addsf3x+0x38>
    1d2c:	46 95       	lsr	r20
    1d2e:	37 95       	ror	r19
    1d30:	27 95       	ror	r18
    1d32:	a7 95       	ror	r26
    1d34:	f0 40       	sbci	r31, 0x00	; 0
    1d36:	53 95       	inc	r21
    1d38:	c9 f7       	brne	.-14     	; 0x1d2c <__addsf3x+0x52>
    1d3a:	7e f4       	brtc	.+30     	; 0x1d5a <__addsf3x+0x80>
    1d3c:	1f 16       	cp	r1, r31
    1d3e:	ba 0b       	sbc	r27, r26
    1d40:	62 0b       	sbc	r22, r18
    1d42:	73 0b       	sbc	r23, r19
    1d44:	84 0b       	sbc	r24, r20
    1d46:	ba f0       	brmi	.+46     	; 0x1d76 <__addsf3x+0x9c>
    1d48:	91 50       	subi	r25, 0x01	; 1
    1d4a:	a1 f0       	breq	.+40     	; 0x1d74 <__addsf3x+0x9a>
    1d4c:	ff 0f       	add	r31, r31
    1d4e:	bb 1f       	adc	r27, r27
    1d50:	66 1f       	adc	r22, r22
    1d52:	77 1f       	adc	r23, r23
    1d54:	88 1f       	adc	r24, r24
    1d56:	c2 f7       	brpl	.-16     	; 0x1d48 <__addsf3x+0x6e>
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <__addsf3x+0x9c>
    1d5a:	ba 0f       	add	r27, r26
    1d5c:	62 1f       	adc	r22, r18
    1d5e:	73 1f       	adc	r23, r19
    1d60:	84 1f       	adc	r24, r20
    1d62:	48 f4       	brcc	.+18     	; 0x1d76 <__addsf3x+0x9c>
    1d64:	87 95       	ror	r24
    1d66:	77 95       	ror	r23
    1d68:	67 95       	ror	r22
    1d6a:	b7 95       	ror	r27
    1d6c:	f7 95       	ror	r31
    1d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <__addsf3x+0x9a>
    1d72:	b0 cf       	rjmp	.-160    	; 0x1cd4 <__addsf3+0x28>
    1d74:	93 95       	inc	r25
    1d76:	88 0f       	add	r24, r24
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <__addsf3x+0xa2>
    1d7a:	99 27       	eor	r25, r25
    1d7c:	ee 0f       	add	r30, r30
    1d7e:	97 95       	ror	r25
    1d80:	87 95       	ror	r24
    1d82:	08 95       	ret

00001d84 <__divsf3>:
    1d84:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__divsf3x>
    1d88:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__fp_round>
    1d8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fp_pscB>
    1d90:	58 f0       	brcs	.+22     	; 0x1da8 <__divsf3+0x24>
    1d92:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscA>
    1d96:	40 f0       	brcs	.+16     	; 0x1da8 <__divsf3+0x24>
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <__divsf3+0x20>
    1d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <__divsf3+0x24>
    1d9e:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_inf>
    1da2:	51 11       	cpse	r21, r1
    1da4:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_szero>
    1da8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__fp_nan>

00001dac <__divsf3x>:
    1dac:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__fp_split3>
    1db0:	68 f3       	brcs	.-38     	; 0x1d8c <__divsf3+0x8>

00001db2 <__divsf3_pse>:
    1db2:	99 23       	and	r25, r25
    1db4:	b1 f3       	breq	.-20     	; 0x1da2 <__divsf3+0x1e>
    1db6:	55 23       	and	r21, r21
    1db8:	91 f3       	breq	.-28     	; 0x1d9e <__divsf3+0x1a>
    1dba:	95 1b       	sub	r25, r21
    1dbc:	55 0b       	sbc	r21, r21
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	aa 27       	eor	r26, r26
    1dc2:	62 17       	cp	r22, r18
    1dc4:	73 07       	cpc	r23, r19
    1dc6:	84 07       	cpc	r24, r20
    1dc8:	38 f0       	brcs	.+14     	; 0x1dd8 <__divsf3_pse+0x26>
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	44 1f       	adc	r20, r20
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	a9 f3       	breq	.-22     	; 0x1dc2 <__divsf3_pse+0x10>
    1dd8:	35 d0       	rcall	.+106    	; 0x1e44 <__divsf3_pse+0x92>
    1dda:	0e 2e       	mov	r0, r30
    1ddc:	3a f0       	brmi	.+14     	; 0x1dec <__divsf3_pse+0x3a>
    1dde:	e0 e8       	ldi	r30, 0x80	; 128
    1de0:	32 d0       	rcall	.+100    	; 0x1e46 <__divsf3_pse+0x94>
    1de2:	91 50       	subi	r25, 0x01	; 1
    1de4:	50 40       	sbci	r21, 0x00	; 0
    1de6:	e6 95       	lsr	r30
    1de8:	00 1c       	adc	r0, r0
    1dea:	ca f7       	brpl	.-14     	; 0x1dde <__divsf3_pse+0x2c>
    1dec:	2b d0       	rcall	.+86     	; 0x1e44 <__divsf3_pse+0x92>
    1dee:	fe 2f       	mov	r31, r30
    1df0:	29 d0       	rcall	.+82     	; 0x1e44 <__divsf3_pse+0x92>
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	26 17       	cp	r18, r22
    1dfc:	37 07       	cpc	r19, r23
    1dfe:	48 07       	cpc	r20, r24
    1e00:	ab 07       	cpc	r26, r27
    1e02:	b0 e8       	ldi	r27, 0x80	; 128
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <__divsf3_pse+0x56>
    1e06:	bb 0b       	sbc	r27, r27
    1e08:	80 2d       	mov	r24, r0
    1e0a:	bf 01       	movw	r22, r30
    1e0c:	ff 27       	eor	r31, r31
    1e0e:	93 58       	subi	r25, 0x83	; 131
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	3a f0       	brmi	.+14     	; 0x1e22 <__divsf3_pse+0x70>
    1e14:	9e 3f       	cpi	r25, 0xFE	; 254
    1e16:	51 05       	cpc	r21, r1
    1e18:	78 f0       	brcs	.+30     	; 0x1e38 <__divsf3_pse+0x86>
    1e1a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_inf>
    1e1e:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_szero>
    1e22:	5f 3f       	cpi	r21, 0xFF	; 255
    1e24:	e4 f3       	brlt	.-8      	; 0x1e1e <__divsf3_pse+0x6c>
    1e26:	98 3e       	cpi	r25, 0xE8	; 232
    1e28:	d4 f3       	brlt	.-12     	; 0x1e1e <__divsf3_pse+0x6c>
    1e2a:	86 95       	lsr	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	f7 95       	ror	r31
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	c9 f7       	brne	.-14     	; 0x1e2a <__divsf3_pse+0x78>
    1e38:	88 0f       	add	r24, r24
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	96 95       	lsr	r25
    1e3e:	87 95       	ror	r24
    1e40:	97 f9       	bld	r25, 7
    1e42:	08 95       	ret
    1e44:	e1 e0       	ldi	r30, 0x01	; 1
    1e46:	66 0f       	add	r22, r22
    1e48:	77 1f       	adc	r23, r23
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	62 17       	cp	r22, r18
    1e50:	73 07       	cpc	r23, r19
    1e52:	84 07       	cpc	r24, r20
    1e54:	ba 07       	cpc	r27, r26
    1e56:	20 f0       	brcs	.+8      	; 0x1e60 <__divsf3_pse+0xae>
    1e58:	62 1b       	sub	r22, r18
    1e5a:	73 0b       	sbc	r23, r19
    1e5c:	84 0b       	sbc	r24, r20
    1e5e:	ba 0b       	sbc	r27, r26
    1e60:	ee 1f       	adc	r30, r30
    1e62:	88 f7       	brcc	.-30     	; 0x1e46 <__divsf3_pse+0x94>
    1e64:	e0 95       	com	r30
    1e66:	08 95       	ret

00001e68 <__floatunsisf>:
    1e68:	e8 94       	clt
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <__floatsisf+0x12>

00001e6c <__floatsisf>:
    1e6c:	97 fb       	bst	r25, 7
    1e6e:	3e f4       	brtc	.+14     	; 0x1e7e <__floatsisf+0x12>
    1e70:	90 95       	com	r25
    1e72:	80 95       	com	r24
    1e74:	70 95       	com	r23
    1e76:	61 95       	neg	r22
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	99 23       	and	r25, r25
    1e80:	a9 f0       	breq	.+42     	; 0x1eac <__floatsisf+0x40>
    1e82:	f9 2f       	mov	r31, r25
    1e84:	96 e9       	ldi	r25, 0x96	; 150
    1e86:	bb 27       	eor	r27, r27
    1e88:	93 95       	inc	r25
    1e8a:	f6 95       	lsr	r31
    1e8c:	87 95       	ror	r24
    1e8e:	77 95       	ror	r23
    1e90:	67 95       	ror	r22
    1e92:	b7 95       	ror	r27
    1e94:	f1 11       	cpse	r31, r1
    1e96:	f8 cf       	rjmp	.-16     	; 0x1e88 <__floatsisf+0x1c>
    1e98:	fa f4       	brpl	.+62     	; 0x1ed8 <__floatsisf+0x6c>
    1e9a:	bb 0f       	add	r27, r27
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <__floatsisf+0x36>
    1e9e:	60 ff       	sbrs	r22, 0
    1ea0:	1b c0       	rjmp	.+54     	; 0x1ed8 <__floatsisf+0x6c>
    1ea2:	6f 5f       	subi	r22, 0xFF	; 255
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	16 c0       	rjmp	.+44     	; 0x1ed8 <__floatsisf+0x6c>
    1eac:	88 23       	and	r24, r24
    1eae:	11 f0       	breq	.+4      	; 0x1eb4 <__floatsisf+0x48>
    1eb0:	96 e9       	ldi	r25, 0x96	; 150
    1eb2:	11 c0       	rjmp	.+34     	; 0x1ed6 <__floatsisf+0x6a>
    1eb4:	77 23       	and	r23, r23
    1eb6:	21 f0       	breq	.+8      	; 0x1ec0 <__floatsisf+0x54>
    1eb8:	9e e8       	ldi	r25, 0x8E	; 142
    1eba:	87 2f       	mov	r24, r23
    1ebc:	76 2f       	mov	r23, r22
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <__floatsisf+0x5e>
    1ec0:	66 23       	and	r22, r22
    1ec2:	71 f0       	breq	.+28     	; 0x1ee0 <__floatsisf+0x74>
    1ec4:	96 e8       	ldi	r25, 0x86	; 134
    1ec6:	86 2f       	mov	r24, r22
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	2a f0       	brmi	.+10     	; 0x1ed8 <__floatsisf+0x6c>
    1ece:	9a 95       	dec	r25
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	da f7       	brpl	.-10     	; 0x1ece <__floatsisf+0x62>
    1ed8:	88 0f       	add	r24, r24
    1eda:	96 95       	lsr	r25
    1edc:	87 95       	ror	r24
    1ede:	97 f9       	bld	r25, 7
    1ee0:	08 95       	ret

00001ee2 <__fp_inf>:
    1ee2:	97 f9       	bld	r25, 7
    1ee4:	9f 67       	ori	r25, 0x7F	; 127
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	08 95       	ret

00001eee <__fp_nan>:
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	80 ec       	ldi	r24, 0xC0	; 192
    1ef2:	08 95       	ret

00001ef4 <__fp_pscA>:
    1ef4:	00 24       	eor	r0, r0
    1ef6:	0a 94       	dec	r0
    1ef8:	16 16       	cp	r1, r22
    1efa:	17 06       	cpc	r1, r23
    1efc:	18 06       	cpc	r1, r24
    1efe:	09 06       	cpc	r0, r25
    1f00:	08 95       	ret

00001f02 <__fp_pscB>:
    1f02:	00 24       	eor	r0, r0
    1f04:	0a 94       	dec	r0
    1f06:	12 16       	cp	r1, r18
    1f08:	13 06       	cpc	r1, r19
    1f0a:	14 06       	cpc	r1, r20
    1f0c:	05 06       	cpc	r0, r21
    1f0e:	08 95       	ret

00001f10 <__fp_round>:
    1f10:	09 2e       	mov	r0, r25
    1f12:	03 94       	inc	r0
    1f14:	00 0c       	add	r0, r0
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <__fp_round+0xc>
    1f18:	88 23       	and	r24, r24
    1f1a:	52 f0       	brmi	.+20     	; 0x1f30 <__fp_round+0x20>
    1f1c:	bb 0f       	add	r27, r27
    1f1e:	40 f4       	brcc	.+16     	; 0x1f30 <__fp_round+0x20>
    1f20:	bf 2b       	or	r27, r31
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <__fp_round+0x18>
    1f24:	60 ff       	sbrs	r22, 0
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <__fp_round+0x20>
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <__fp_split3>:
    1f32:	57 fd       	sbrc	r21, 7
    1f34:	90 58       	subi	r25, 0x80	; 128
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <__fp_splitA+0x10>
    1f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f3e:	71 f0       	breq	.+28     	; 0x1f5c <__fp_splitA+0x1a>
    1f40:	47 95       	ror	r20

00001f42 <__fp_splitA>:
    1f42:	88 0f       	add	r24, r24
    1f44:	97 fb       	bst	r25, 7
    1f46:	99 1f       	adc	r25, r25
    1f48:	61 f0       	breq	.+24     	; 0x1f62 <__fp_splitA+0x20>
    1f4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f4c:	79 f0       	breq	.+30     	; 0x1f6c <__fp_splitA+0x2a>
    1f4e:	87 95       	ror	r24
    1f50:	08 95       	ret
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	14 06       	cpc	r1, r20
    1f58:	55 1f       	adc	r21, r21
    1f5a:	f2 cf       	rjmp	.-28     	; 0x1f40 <__fp_split3+0xe>
    1f5c:	46 95       	lsr	r20
    1f5e:	f1 df       	rcall	.-30     	; 0x1f42 <__fp_splitA>
    1f60:	08 c0       	rjmp	.+16     	; 0x1f72 <__fp_splitA+0x30>
    1f62:	16 16       	cp	r1, r22
    1f64:	17 06       	cpc	r1, r23
    1f66:	18 06       	cpc	r1, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	f1 cf       	rjmp	.-30     	; 0x1f4e <__fp_splitA+0xc>
    1f6c:	86 95       	lsr	r24
    1f6e:	71 05       	cpc	r23, r1
    1f70:	61 05       	cpc	r22, r1
    1f72:	08 94       	sec
    1f74:	08 95       	ret

00001f76 <__fp_zero>:
    1f76:	e8 94       	clt

00001f78 <__fp_szero>:
    1f78:	bb 27       	eor	r27, r27
    1f7a:	66 27       	eor	r22, r22
    1f7c:	77 27       	eor	r23, r23
    1f7e:	cb 01       	movw	r24, r22
    1f80:	97 f9       	bld	r25, 7
    1f82:	08 95       	ret

00001f84 <__mulsf3>:
    1f84:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__mulsf3x>
    1f88:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__fp_round>
    1f8c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fp_pscA>
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <__mulsf3+0x1c>
    1f92:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fp_pscB>
    1f96:	20 f0       	brcs	.+8      	; 0x1fa0 <__mulsf3+0x1c>
    1f98:	95 23       	and	r25, r21
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <__mulsf3+0x1c>
    1f9c:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_inf>
    1fa0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__fp_nan>
    1fa4:	11 24       	eor	r1, r1
    1fa6:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_szero>

00001faa <__mulsf3x>:
    1faa:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__fp_split3>
    1fae:	70 f3       	brcs	.-36     	; 0x1f8c <__mulsf3+0x8>

00001fb0 <__mulsf3_pse>:
    1fb0:	95 9f       	mul	r25, r21
    1fb2:	c1 f3       	breq	.-16     	; 0x1fa4 <__mulsf3+0x20>
    1fb4:	95 0f       	add	r25, r21
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	55 1f       	adc	r21, r21
    1fba:	62 9f       	mul	r22, r18
    1fbc:	f0 01       	movw	r30, r0
    1fbe:	72 9f       	mul	r23, r18
    1fc0:	bb 27       	eor	r27, r27
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	63 9f       	mul	r22, r19
    1fc8:	aa 27       	eor	r26, r26
    1fca:	f0 0d       	add	r31, r0
    1fcc:	b1 1d       	adc	r27, r1
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	64 9f       	mul	r22, r20
    1fd2:	66 27       	eor	r22, r22
    1fd4:	b0 0d       	add	r27, r0
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	66 1f       	adc	r22, r22
    1fda:	82 9f       	mul	r24, r18
    1fdc:	22 27       	eor	r18, r18
    1fde:	b0 0d       	add	r27, r0
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	62 1f       	adc	r22, r18
    1fe4:	73 9f       	mul	r23, r19
    1fe6:	b0 0d       	add	r27, r0
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	62 1f       	adc	r22, r18
    1fec:	83 9f       	mul	r24, r19
    1fee:	a0 0d       	add	r26, r0
    1ff0:	61 1d       	adc	r22, r1
    1ff2:	22 1f       	adc	r18, r18
    1ff4:	74 9f       	mul	r23, r20
    1ff6:	33 27       	eor	r19, r19
    1ff8:	a0 0d       	add	r26, r0
    1ffa:	61 1d       	adc	r22, r1
    1ffc:	23 1f       	adc	r18, r19
    1ffe:	84 9f       	mul	r24, r20
    2000:	60 0d       	add	r22, r0
    2002:	21 1d       	adc	r18, r1
    2004:	82 2f       	mov	r24, r18
    2006:	76 2f       	mov	r23, r22
    2008:	6a 2f       	mov	r22, r26
    200a:	11 24       	eor	r1, r1
    200c:	9f 57       	subi	r25, 0x7F	; 127
    200e:	50 40       	sbci	r21, 0x00	; 0
    2010:	9a f0       	brmi	.+38     	; 0x2038 <__mulsf3_pse+0x88>
    2012:	f1 f0       	breq	.+60     	; 0x2050 <__mulsf3_pse+0xa0>
    2014:	88 23       	and	r24, r24
    2016:	4a f0       	brmi	.+18     	; 0x202a <__mulsf3_pse+0x7a>
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	bb 1f       	adc	r27, r27
    201e:	66 1f       	adc	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	91 50       	subi	r25, 0x01	; 1
    2026:	50 40       	sbci	r21, 0x00	; 0
    2028:	a9 f7       	brne	.-22     	; 0x2014 <__mulsf3_pse+0x64>
    202a:	9e 3f       	cpi	r25, 0xFE	; 254
    202c:	51 05       	cpc	r21, r1
    202e:	80 f0       	brcs	.+32     	; 0x2050 <__mulsf3_pse+0xa0>
    2030:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_inf>
    2034:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_szero>
    2038:	5f 3f       	cpi	r21, 0xFF	; 255
    203a:	e4 f3       	brlt	.-8      	; 0x2034 <__mulsf3_pse+0x84>
    203c:	98 3e       	cpi	r25, 0xE8	; 232
    203e:	d4 f3       	brlt	.-12     	; 0x2034 <__mulsf3_pse+0x84>
    2040:	86 95       	lsr	r24
    2042:	77 95       	ror	r23
    2044:	67 95       	ror	r22
    2046:	b7 95       	ror	r27
    2048:	f7 95       	ror	r31
    204a:	e7 95       	ror	r30
    204c:	9f 5f       	subi	r25, 0xFF	; 255
    204e:	c1 f7       	brne	.-16     	; 0x2040 <__mulsf3_pse+0x90>
    2050:	fe 2b       	or	r31, r30
    2052:	88 0f       	add	r24, r24
    2054:	91 1d       	adc	r25, r1
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	97 f9       	bld	r25, 7
    205c:	08 95       	ret

0000205e <vfprintf>:
    205e:	a0 e1       	ldi	r26, 0x10	; 16
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e3       	ldi	r30, 0x35	; 53
    2064:	f0 e1       	ldi	r31, 0x10	; 16
    2066:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__>
    206a:	7c 01       	movw	r14, r24
    206c:	1b 01       	movw	r2, r22
    206e:	6a 01       	movw	r12, r20
    2070:	fc 01       	movw	r30, r24
    2072:	16 82       	std	Z+6, r1	; 0x06
    2074:	17 82       	std	Z+7, r1	; 0x07
    2076:	83 81       	ldd	r24, Z+3	; 0x03
    2078:	81 ff       	sbrs	r24, 1
    207a:	44 c3       	rjmp	.+1672   	; 0x2704 <vfprintf+0x6a6>
    207c:	9e 01       	movw	r18, r28
    207e:	2f 5f       	subi	r18, 0xFF	; 255
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	39 01       	movw	r6, r18
    2084:	f7 01       	movw	r30, r14
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	f1 01       	movw	r30, r2
    208a:	93 fd       	sbrc	r25, 3
    208c:	85 91       	lpm	r24, Z+
    208e:	93 ff       	sbrs	r25, 3
    2090:	81 91       	ld	r24, Z+
    2092:	1f 01       	movw	r2, r30
    2094:	88 23       	and	r24, r24
    2096:	09 f4       	brne	.+2      	; 0x209a <vfprintf+0x3c>
    2098:	31 c3       	rjmp	.+1634   	; 0x26fc <vfprintf+0x69e>
    209a:	85 32       	cpi	r24, 0x25	; 37
    209c:	39 f4       	brne	.+14     	; 0x20ac <vfprintf+0x4e>
    209e:	93 fd       	sbrc	r25, 3
    20a0:	85 91       	lpm	r24, Z+
    20a2:	93 ff       	sbrs	r25, 3
    20a4:	81 91       	ld	r24, Z+
    20a6:	1f 01       	movw	r2, r30
    20a8:	85 32       	cpi	r24, 0x25	; 37
    20aa:	39 f4       	brne	.+14     	; 0x20ba <vfprintf+0x5c>
    20ac:	b7 01       	movw	r22, r14
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    20b4:	56 01       	movw	r10, r12
    20b6:	65 01       	movw	r12, r10
    20b8:	e5 cf       	rjmp	.-54     	; 0x2084 <vfprintf+0x26>
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	51 2c       	mov	r5, r1
    20be:	91 2c       	mov	r9, r1
    20c0:	ff e1       	ldi	r31, 0x1F	; 31
    20c2:	f9 15       	cp	r31, r9
    20c4:	d8 f0       	brcs	.+54     	; 0x20fc <vfprintf+0x9e>
    20c6:	8b 32       	cpi	r24, 0x2B	; 43
    20c8:	79 f0       	breq	.+30     	; 0x20e8 <vfprintf+0x8a>
    20ca:	38 f4       	brcc	.+14     	; 0x20da <vfprintf+0x7c>
    20cc:	80 32       	cpi	r24, 0x20	; 32
    20ce:	79 f0       	breq	.+30     	; 0x20ee <vfprintf+0x90>
    20d0:	83 32       	cpi	r24, 0x23	; 35
    20d2:	a1 f4       	brne	.+40     	; 0x20fc <vfprintf+0x9e>
    20d4:	f9 2d       	mov	r31, r9
    20d6:	f0 61       	ori	r31, 0x10	; 16
    20d8:	2e c0       	rjmp	.+92     	; 0x2136 <vfprintf+0xd8>
    20da:	8d 32       	cpi	r24, 0x2D	; 45
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <vfprintf+0x98>
    20de:	80 33       	cpi	r24, 0x30	; 48
    20e0:	69 f4       	brne	.+26     	; 0x20fc <vfprintf+0x9e>
    20e2:	29 2d       	mov	r18, r9
    20e4:	21 60       	ori	r18, 0x01	; 1
    20e6:	2d c0       	rjmp	.+90     	; 0x2142 <vfprintf+0xe4>
    20e8:	39 2d       	mov	r19, r9
    20ea:	32 60       	ori	r19, 0x02	; 2
    20ec:	93 2e       	mov	r9, r19
    20ee:	89 2d       	mov	r24, r9
    20f0:	84 60       	ori	r24, 0x04	; 4
    20f2:	98 2e       	mov	r9, r24
    20f4:	2a c0       	rjmp	.+84     	; 0x214a <vfprintf+0xec>
    20f6:	e9 2d       	mov	r30, r9
    20f8:	e8 60       	ori	r30, 0x08	; 8
    20fa:	15 c0       	rjmp	.+42     	; 0x2126 <vfprintf+0xc8>
    20fc:	97 fc       	sbrc	r9, 7
    20fe:	2d c0       	rjmp	.+90     	; 0x215a <vfprintf+0xfc>
    2100:	20 ed       	ldi	r18, 0xD0	; 208
    2102:	28 0f       	add	r18, r24
    2104:	2a 30       	cpi	r18, 0x0A	; 10
    2106:	88 f4       	brcc	.+34     	; 0x212a <vfprintf+0xcc>
    2108:	96 fe       	sbrs	r9, 6
    210a:	06 c0       	rjmp	.+12     	; 0x2118 <vfprintf+0xba>
    210c:	3a e0       	ldi	r19, 0x0A	; 10
    210e:	13 9f       	mul	r17, r19
    2110:	20 0d       	add	r18, r0
    2112:	11 24       	eor	r1, r1
    2114:	12 2f       	mov	r17, r18
    2116:	19 c0       	rjmp	.+50     	; 0x214a <vfprintf+0xec>
    2118:	8a e0       	ldi	r24, 0x0A	; 10
    211a:	58 9e       	mul	r5, r24
    211c:	20 0d       	add	r18, r0
    211e:	11 24       	eor	r1, r1
    2120:	52 2e       	mov	r5, r18
    2122:	e9 2d       	mov	r30, r9
    2124:	e0 62       	ori	r30, 0x20	; 32
    2126:	9e 2e       	mov	r9, r30
    2128:	10 c0       	rjmp	.+32     	; 0x214a <vfprintf+0xec>
    212a:	8e 32       	cpi	r24, 0x2E	; 46
    212c:	31 f4       	brne	.+12     	; 0x213a <vfprintf+0xdc>
    212e:	96 fc       	sbrc	r9, 6
    2130:	e5 c2       	rjmp	.+1482   	; 0x26fc <vfprintf+0x69e>
    2132:	f9 2d       	mov	r31, r9
    2134:	f0 64       	ori	r31, 0x40	; 64
    2136:	9f 2e       	mov	r9, r31
    2138:	08 c0       	rjmp	.+16     	; 0x214a <vfprintf+0xec>
    213a:	8c 36       	cpi	r24, 0x6C	; 108
    213c:	21 f4       	brne	.+8      	; 0x2146 <vfprintf+0xe8>
    213e:	29 2d       	mov	r18, r9
    2140:	20 68       	ori	r18, 0x80	; 128
    2142:	92 2e       	mov	r9, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <vfprintf+0xec>
    2146:	88 36       	cpi	r24, 0x68	; 104
    2148:	41 f4       	brne	.+16     	; 0x215a <vfprintf+0xfc>
    214a:	f1 01       	movw	r30, r2
    214c:	93 fd       	sbrc	r25, 3
    214e:	85 91       	lpm	r24, Z+
    2150:	93 ff       	sbrs	r25, 3
    2152:	81 91       	ld	r24, Z+
    2154:	1f 01       	movw	r2, r30
    2156:	81 11       	cpse	r24, r1
    2158:	b3 cf       	rjmp	.-154    	; 0x20c0 <vfprintf+0x62>
    215a:	9b eb       	ldi	r25, 0xBB	; 187
    215c:	98 0f       	add	r25, r24
    215e:	93 30       	cpi	r25, 0x03	; 3
    2160:	20 f4       	brcc	.+8      	; 0x216a <vfprintf+0x10c>
    2162:	99 2d       	mov	r25, r9
    2164:	90 61       	ori	r25, 0x10	; 16
    2166:	80 5e       	subi	r24, 0xE0	; 224
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <vfprintf+0x11a>
    216a:	9b e9       	ldi	r25, 0x9B	; 155
    216c:	98 0f       	add	r25, r24
    216e:	93 30       	cpi	r25, 0x03	; 3
    2170:	08 f0       	brcs	.+2      	; 0x2174 <vfprintf+0x116>
    2172:	66 c1       	rjmp	.+716    	; 0x2440 <vfprintf+0x3e2>
    2174:	99 2d       	mov	r25, r9
    2176:	9f 7e       	andi	r25, 0xEF	; 239
    2178:	96 ff       	sbrs	r25, 6
    217a:	16 e0       	ldi	r17, 0x06	; 6
    217c:	9f 73       	andi	r25, 0x3F	; 63
    217e:	99 2e       	mov	r9, r25
    2180:	85 36       	cpi	r24, 0x65	; 101
    2182:	19 f4       	brne	.+6      	; 0x218a <vfprintf+0x12c>
    2184:	90 64       	ori	r25, 0x40	; 64
    2186:	99 2e       	mov	r9, r25
    2188:	08 c0       	rjmp	.+16     	; 0x219a <vfprintf+0x13c>
    218a:	86 36       	cpi	r24, 0x66	; 102
    218c:	21 f4       	brne	.+8      	; 0x2196 <vfprintf+0x138>
    218e:	39 2f       	mov	r19, r25
    2190:	30 68       	ori	r19, 0x80	; 128
    2192:	93 2e       	mov	r9, r19
    2194:	02 c0       	rjmp	.+4      	; 0x219a <vfprintf+0x13c>
    2196:	11 11       	cpse	r17, r1
    2198:	11 50       	subi	r17, 0x01	; 1
    219a:	97 fe       	sbrs	r9, 7
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <vfprintf+0x14e>
    219e:	1c 33       	cpi	r17, 0x3C	; 60
    21a0:	50 f4       	brcc	.+20     	; 0x21b6 <vfprintf+0x158>
    21a2:	44 24       	eor	r4, r4
    21a4:	43 94       	inc	r4
    21a6:	41 0e       	add	r4, r17
    21a8:	27 e0       	ldi	r18, 0x07	; 7
    21aa:	0b c0       	rjmp	.+22     	; 0x21c2 <vfprintf+0x164>
    21ac:	18 30       	cpi	r17, 0x08	; 8
    21ae:	38 f0       	brcs	.+14     	; 0x21be <vfprintf+0x160>
    21b0:	27 e0       	ldi	r18, 0x07	; 7
    21b2:	17 e0       	ldi	r17, 0x07	; 7
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <vfprintf+0x162>
    21b6:	27 e0       	ldi	r18, 0x07	; 7
    21b8:	9c e3       	ldi	r25, 0x3C	; 60
    21ba:	49 2e       	mov	r4, r25
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x164>
    21be:	21 2f       	mov	r18, r17
    21c0:	41 2c       	mov	r4, r1
    21c2:	56 01       	movw	r10, r12
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	a8 0e       	add	r10, r24
    21c8:	b1 1c       	adc	r11, r1
    21ca:	f6 01       	movw	r30, r12
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	04 2d       	mov	r16, r4
    21d6:	a3 01       	movw	r20, r6
    21d8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__ftoa_engine>
    21dc:	6c 01       	movw	r12, r24
    21de:	f9 81       	ldd	r31, Y+1	; 0x01
    21e0:	fc 87       	std	Y+12, r31	; 0x0c
    21e2:	f0 ff       	sbrs	r31, 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <vfprintf+0x18c>
    21e6:	f3 ff       	sbrs	r31, 3
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <vfprintf+0x198>
    21ea:	91 fc       	sbrc	r9, 1
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <vfprintf+0x19c>
    21ee:	92 fe       	sbrs	r9, 2
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <vfprintf+0x1a0>
    21f2:	00 e2       	ldi	r16, 0x20	; 32
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <vfprintf+0x1a2>
    21f6:	0d e2       	ldi	r16, 0x2D	; 45
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <vfprintf+0x1a2>
    21fa:	0b e2       	ldi	r16, 0x2B	; 43
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <vfprintf+0x1a2>
    21fe:	00 e0       	ldi	r16, 0x00	; 0
    2200:	8c 85       	ldd	r24, Y+12	; 0x0c
    2202:	8c 70       	andi	r24, 0x0C	; 12
    2204:	19 f0       	breq	.+6      	; 0x220c <vfprintf+0x1ae>
    2206:	01 11       	cpse	r16, r1
    2208:	5a c2       	rjmp	.+1204   	; 0x26be <vfprintf+0x660>
    220a:	9b c2       	rjmp	.+1334   	; 0x2742 <vfprintf+0x6e4>
    220c:	97 fe       	sbrs	r9, 7
    220e:	10 c0       	rjmp	.+32     	; 0x2230 <vfprintf+0x1d2>
    2210:	4c 0c       	add	r4, r12
    2212:	fc 85       	ldd	r31, Y+12	; 0x0c
    2214:	f4 ff       	sbrs	r31, 4
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <vfprintf+0x1c2>
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	81 33       	cpi	r24, 0x31	; 49
    221c:	09 f4       	brne	.+2      	; 0x2220 <vfprintf+0x1c2>
    221e:	4a 94       	dec	r4
    2220:	14 14       	cp	r1, r4
    2222:	74 f5       	brge	.+92     	; 0x2280 <vfprintf+0x222>
    2224:	28 e0       	ldi	r18, 0x08	; 8
    2226:	24 15       	cp	r18, r4
    2228:	78 f5       	brcc	.+94     	; 0x2288 <vfprintf+0x22a>
    222a:	88 e0       	ldi	r24, 0x08	; 8
    222c:	48 2e       	mov	r4, r24
    222e:	2c c0       	rjmp	.+88     	; 0x2288 <vfprintf+0x22a>
    2230:	96 fc       	sbrc	r9, 6
    2232:	2a c0       	rjmp	.+84     	; 0x2288 <vfprintf+0x22a>
    2234:	81 2f       	mov	r24, r17
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	8c 15       	cp	r24, r12
    223a:	9d 05       	cpc	r25, r13
    223c:	9c f0       	brlt	.+38     	; 0x2264 <vfprintf+0x206>
    223e:	3c ef       	ldi	r19, 0xFC	; 252
    2240:	c3 16       	cp	r12, r19
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	d3 06       	cpc	r13, r19
    2246:	74 f0       	brlt	.+28     	; 0x2264 <vfprintf+0x206>
    2248:	89 2d       	mov	r24, r9
    224a:	80 68       	ori	r24, 0x80	; 128
    224c:	98 2e       	mov	r9, r24
    224e:	0a c0       	rjmp	.+20     	; 0x2264 <vfprintf+0x206>
    2250:	e2 e0       	ldi	r30, 0x02	; 2
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ec 0f       	add	r30, r28
    2256:	fd 1f       	adc	r31, r29
    2258:	e1 0f       	add	r30, r17
    225a:	f1 1d       	adc	r31, r1
    225c:	80 81       	ld	r24, Z
    225e:	80 33       	cpi	r24, 0x30	; 48
    2260:	19 f4       	brne	.+6      	; 0x2268 <vfprintf+0x20a>
    2262:	11 50       	subi	r17, 0x01	; 1
    2264:	11 11       	cpse	r17, r1
    2266:	f4 cf       	rjmp	.-24     	; 0x2250 <vfprintf+0x1f2>
    2268:	97 fe       	sbrs	r9, 7
    226a:	0e c0       	rjmp	.+28     	; 0x2288 <vfprintf+0x22a>
    226c:	44 24       	eor	r4, r4
    226e:	43 94       	inc	r4
    2270:	41 0e       	add	r4, r17
    2272:	81 2f       	mov	r24, r17
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	c8 16       	cp	r12, r24
    2278:	d9 06       	cpc	r13, r25
    227a:	2c f4       	brge	.+10     	; 0x2286 <vfprintf+0x228>
    227c:	1c 19       	sub	r17, r12
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <vfprintf+0x22a>
    2280:	44 24       	eor	r4, r4
    2282:	43 94       	inc	r4
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <vfprintf+0x22a>
    2286:	10 e0       	ldi	r17, 0x00	; 0
    2288:	97 fe       	sbrs	r9, 7
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <vfprintf+0x23a>
    228c:	1c 14       	cp	r1, r12
    228e:	1d 04       	cpc	r1, r13
    2290:	34 f4       	brge	.+12     	; 0x229e <vfprintf+0x240>
    2292:	c6 01       	movw	r24, r12
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <vfprintf+0x244>
    2298:	85 e0       	ldi	r24, 0x05	; 5
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <vfprintf+0x244>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	01 11       	cpse	r16, r1
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	11 23       	and	r17, r17
    22a8:	31 f0       	breq	.+12     	; 0x22b6 <vfprintf+0x258>
    22aa:	21 2f       	mov	r18, r17
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	25 2d       	mov	r18, r5
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	82 17       	cp	r24, r18
    22bc:	93 07       	cpc	r25, r19
    22be:	14 f4       	brge	.+4      	; 0x22c4 <vfprintf+0x266>
    22c0:	58 1a       	sub	r5, r24
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <vfprintf+0x268>
    22c4:	51 2c       	mov	r5, r1
    22c6:	89 2d       	mov	r24, r9
    22c8:	89 70       	andi	r24, 0x09	; 9
    22ca:	49 f4       	brne	.+18     	; 0x22de <vfprintf+0x280>
    22cc:	55 20       	and	r5, r5
    22ce:	39 f0       	breq	.+14     	; 0x22de <vfprintf+0x280>
    22d0:	b7 01       	movw	r22, r14
    22d2:	80 e2       	ldi	r24, 0x20	; 32
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    22da:	5a 94       	dec	r5
    22dc:	f7 cf       	rjmp	.-18     	; 0x22cc <vfprintf+0x26e>
    22de:	00 23       	and	r16, r16
    22e0:	29 f0       	breq	.+10     	; 0x22ec <vfprintf+0x28e>
    22e2:	b7 01       	movw	r22, r14
    22e4:	80 2f       	mov	r24, r16
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    22ec:	93 fc       	sbrc	r9, 3
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <vfprintf+0x2a4>
    22f0:	55 20       	and	r5, r5
    22f2:	39 f0       	breq	.+14     	; 0x2302 <vfprintf+0x2a4>
    22f4:	b7 01       	movw	r22, r14
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    22fe:	5a 94       	dec	r5
    2300:	f7 cf       	rjmp	.-18     	; 0x22f0 <vfprintf+0x292>
    2302:	97 fe       	sbrs	r9, 7
    2304:	4c c0       	rjmp	.+152    	; 0x239e <vfprintf+0x340>
    2306:	46 01       	movw	r8, r12
    2308:	d7 fe       	sbrs	r13, 7
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <vfprintf+0x2b2>
    230c:	81 2c       	mov	r8, r1
    230e:	91 2c       	mov	r9, r1
    2310:	c6 01       	movw	r24, r12
    2312:	88 19       	sub	r24, r8
    2314:	99 09       	sbc	r25, r9
    2316:	f3 01       	movw	r30, r6
    2318:	e8 0f       	add	r30, r24
    231a:	f9 1f       	adc	r31, r25
    231c:	ed 87       	std	Y+13, r30	; 0x0d
    231e:	fe 87       	std	Y+14, r31	; 0x0e
    2320:	96 01       	movw	r18, r12
    2322:	24 19       	sub	r18, r4
    2324:	31 09       	sbc	r19, r1
    2326:	2f 87       	std	Y+15, r18	; 0x0f
    2328:	38 8b       	std	Y+16, r19	; 0x10
    232a:	01 2f       	mov	r16, r17
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	11 95       	neg	r17
    2330:	01 95       	neg	r16
    2332:	11 09       	sbc	r17, r1
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	83 16       	cp	r8, r19
    2338:	93 06       	cpc	r9, r19
    233a:	29 f4       	brne	.+10     	; 0x2346 <vfprintf+0x2e8>
    233c:	b7 01       	movw	r22, r14
    233e:	8e e2       	ldi	r24, 0x2E	; 46
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2346:	c8 14       	cp	r12, r8
    2348:	d9 04       	cpc	r13, r9
    234a:	4c f0       	brlt	.+18     	; 0x235e <vfprintf+0x300>
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	98 89       	ldd	r25, Y+16	; 0x10
    2350:	88 15       	cp	r24, r8
    2352:	99 05       	cpc	r25, r9
    2354:	24 f4       	brge	.+8      	; 0x235e <vfprintf+0x300>
    2356:	ed 85       	ldd	r30, Y+13	; 0x0d
    2358:	fe 85       	ldd	r31, Y+14	; 0x0e
    235a:	81 81       	ldd	r24, Z+1	; 0x01
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <vfprintf+0x302>
    235e:	80 e3       	ldi	r24, 0x30	; 48
    2360:	f1 e0       	ldi	r31, 0x01	; 1
    2362:	8f 1a       	sub	r8, r31
    2364:	91 08       	sbc	r9, r1
    2366:	2d 85       	ldd	r18, Y+13	; 0x0d
    2368:	3e 85       	ldd	r19, Y+14	; 0x0e
    236a:	2f 5f       	subi	r18, 0xFF	; 255
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	2d 87       	std	Y+13, r18	; 0x0d
    2370:	3e 87       	std	Y+14, r19	; 0x0e
    2372:	80 16       	cp	r8, r16
    2374:	91 06       	cpc	r9, r17
    2376:	2c f0       	brlt	.+10     	; 0x2382 <vfprintf+0x324>
    2378:	b7 01       	movw	r22, r14
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2380:	d9 cf       	rjmp	.-78     	; 0x2334 <vfprintf+0x2d6>
    2382:	c8 14       	cp	r12, r8
    2384:	d9 04       	cpc	r13, r9
    2386:	41 f4       	brne	.+16     	; 0x2398 <vfprintf+0x33a>
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	96 33       	cpi	r25, 0x36	; 54
    238c:	20 f4       	brcc	.+8      	; 0x2396 <vfprintf+0x338>
    238e:	95 33       	cpi	r25, 0x35	; 53
    2390:	19 f4       	brne	.+6      	; 0x2398 <vfprintf+0x33a>
    2392:	3c 85       	ldd	r19, Y+12	; 0x0c
    2394:	34 ff       	sbrs	r19, 4
    2396:	81 e3       	ldi	r24, 0x31	; 49
    2398:	b7 01       	movw	r22, r14
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	4e c0       	rjmp	.+156    	; 0x243a <vfprintf+0x3dc>
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	81 33       	cpi	r24, 0x31	; 49
    23a2:	19 f0       	breq	.+6      	; 0x23aa <vfprintf+0x34c>
    23a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    23a6:	9f 7e       	andi	r25, 0xEF	; 239
    23a8:	9c 87       	std	Y+12, r25	; 0x0c
    23aa:	b7 01       	movw	r22, r14
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    23b2:	11 11       	cpse	r17, r1
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <vfprintf+0x362>
    23b6:	94 fc       	sbrc	r9, 4
    23b8:	18 c0       	rjmp	.+48     	; 0x23ea <vfprintf+0x38c>
    23ba:	85 e6       	ldi	r24, 0x65	; 101
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	17 c0       	rjmp	.+46     	; 0x23ee <vfprintf+0x390>
    23c0:	b7 01       	movw	r22, r14
    23c2:	8e e2       	ldi	r24, 0x2E	; 46
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    23ca:	1e 5f       	subi	r17, 0xFE	; 254
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	01 e0       	ldi	r16, 0x01	; 1
    23d0:	08 0f       	add	r16, r24
    23d2:	f3 01       	movw	r30, r6
    23d4:	e8 0f       	add	r30, r24
    23d6:	f1 1d       	adc	r31, r1
    23d8:	80 81       	ld	r24, Z
    23da:	b7 01       	movw	r22, r14
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    23e2:	80 2f       	mov	r24, r16
    23e4:	01 13       	cpse	r16, r17
    23e6:	f3 cf       	rjmp	.-26     	; 0x23ce <vfprintf+0x370>
    23e8:	e6 cf       	rjmp	.-52     	; 0x23b6 <vfprintf+0x358>
    23ea:	85 e4       	ldi	r24, 0x45	; 69
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	b7 01       	movw	r22, r14
    23f0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    23f4:	d7 fc       	sbrc	r13, 7
    23f6:	06 c0       	rjmp	.+12     	; 0x2404 <vfprintf+0x3a6>
    23f8:	c1 14       	cp	r12, r1
    23fa:	d1 04       	cpc	r13, r1
    23fc:	41 f4       	brne	.+16     	; 0x240e <vfprintf+0x3b0>
    23fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    2400:	e4 ff       	sbrs	r30, 4
    2402:	05 c0       	rjmp	.+10     	; 0x240e <vfprintf+0x3b0>
    2404:	d1 94       	neg	r13
    2406:	c1 94       	neg	r12
    2408:	d1 08       	sbc	r13, r1
    240a:	8d e2       	ldi	r24, 0x2D	; 45
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <vfprintf+0x3b2>
    240e:	8b e2       	ldi	r24, 0x2B	; 43
    2410:	b7 01       	movw	r22, r14
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2418:	80 e3       	ldi	r24, 0x30	; 48
    241a:	2a e0       	ldi	r18, 0x0A	; 10
    241c:	c2 16       	cp	r12, r18
    241e:	d1 04       	cpc	r13, r1
    2420:	2c f0       	brlt	.+10     	; 0x242c <vfprintf+0x3ce>
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	fa e0       	ldi	r31, 0x0A	; 10
    2426:	cf 1a       	sub	r12, r31
    2428:	d1 08       	sbc	r13, r1
    242a:	f7 cf       	rjmp	.-18     	; 0x241a <vfprintf+0x3bc>
    242c:	b7 01       	movw	r22, r14
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2434:	b7 01       	movw	r22, r14
    2436:	c6 01       	movw	r24, r12
    2438:	c0 96       	adiw	r24, 0x30	; 48
    243a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    243e:	54 c1       	rjmp	.+680    	; 0x26e8 <vfprintf+0x68a>
    2440:	83 36       	cpi	r24, 0x63	; 99
    2442:	31 f0       	breq	.+12     	; 0x2450 <vfprintf+0x3f2>
    2444:	83 37       	cpi	r24, 0x73	; 115
    2446:	79 f0       	breq	.+30     	; 0x2466 <vfprintf+0x408>
    2448:	83 35       	cpi	r24, 0x53	; 83
    244a:	09 f0       	breq	.+2      	; 0x244e <vfprintf+0x3f0>
    244c:	56 c0       	rjmp	.+172    	; 0x24fa <vfprintf+0x49c>
    244e:	20 c0       	rjmp	.+64     	; 0x2490 <vfprintf+0x432>
    2450:	56 01       	movw	r10, r12
    2452:	32 e0       	ldi	r19, 0x02	; 2
    2454:	a3 0e       	add	r10, r19
    2456:	b1 1c       	adc	r11, r1
    2458:	f6 01       	movw	r30, r12
    245a:	80 81       	ld	r24, Z
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	01 e0       	ldi	r16, 0x01	; 1
    2460:	10 e0       	ldi	r17, 0x00	; 0
    2462:	63 01       	movw	r12, r6
    2464:	12 c0       	rjmp	.+36     	; 0x248a <vfprintf+0x42c>
    2466:	56 01       	movw	r10, r12
    2468:	f2 e0       	ldi	r31, 0x02	; 2
    246a:	af 0e       	add	r10, r31
    246c:	b1 1c       	adc	r11, r1
    246e:	f6 01       	movw	r30, r12
    2470:	c0 80       	ld	r12, Z
    2472:	d1 80       	ldd	r13, Z+1	; 0x01
    2474:	96 fe       	sbrs	r9, 6
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x420>
    2478:	61 2f       	mov	r22, r17
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vfprintf+0x424>
    247e:	6f ef       	ldi	r22, 0xFF	; 255
    2480:	7f ef       	ldi	r23, 0xFF	; 255
    2482:	c6 01       	movw	r24, r12
    2484:	0e 94 10 16 	call	0x2c20	; 0x2c20 <strnlen>
    2488:	8c 01       	movw	r16, r24
    248a:	f9 2d       	mov	r31, r9
    248c:	ff 77       	andi	r31, 0x7F	; 127
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <vfprintf+0x45a>
    2490:	56 01       	movw	r10, r12
    2492:	22 e0       	ldi	r18, 0x02	; 2
    2494:	a2 0e       	add	r10, r18
    2496:	b1 1c       	adc	r11, r1
    2498:	f6 01       	movw	r30, r12
    249a:	c0 80       	ld	r12, Z
    249c:	d1 80       	ldd	r13, Z+1	; 0x01
    249e:	96 fe       	sbrs	r9, 6
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <vfprintf+0x44a>
    24a2:	61 2f       	mov	r22, r17
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <vfprintf+0x44e>
    24a8:	6f ef       	ldi	r22, 0xFF	; 255
    24aa:	7f ef       	ldi	r23, 0xFF	; 255
    24ac:	c6 01       	movw	r24, r12
    24ae:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strnlen_P>
    24b2:	8c 01       	movw	r16, r24
    24b4:	f9 2d       	mov	r31, r9
    24b6:	f0 68       	ori	r31, 0x80	; 128
    24b8:	9f 2e       	mov	r9, r31
    24ba:	f3 fd       	sbrc	r31, 3
    24bc:	1a c0       	rjmp	.+52     	; 0x24f2 <vfprintf+0x494>
    24be:	85 2d       	mov	r24, r5
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	08 17       	cp	r16, r24
    24c4:	19 07       	cpc	r17, r25
    24c6:	a8 f4       	brcc	.+42     	; 0x24f2 <vfprintf+0x494>
    24c8:	b7 01       	movw	r22, r14
    24ca:	80 e2       	ldi	r24, 0x20	; 32
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    24d2:	5a 94       	dec	r5
    24d4:	f4 cf       	rjmp	.-24     	; 0x24be <vfprintf+0x460>
    24d6:	f6 01       	movw	r30, r12
    24d8:	97 fc       	sbrc	r9, 7
    24da:	85 91       	lpm	r24, Z+
    24dc:	97 fe       	sbrs	r9, 7
    24de:	81 91       	ld	r24, Z+
    24e0:	6f 01       	movw	r12, r30
    24e2:	b7 01       	movw	r22, r14
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    24ea:	51 10       	cpse	r5, r1
    24ec:	5a 94       	dec	r5
    24ee:	01 50       	subi	r16, 0x01	; 1
    24f0:	11 09       	sbc	r17, r1
    24f2:	01 15       	cp	r16, r1
    24f4:	11 05       	cpc	r17, r1
    24f6:	79 f7       	brne	.-34     	; 0x24d6 <vfprintf+0x478>
    24f8:	f7 c0       	rjmp	.+494    	; 0x26e8 <vfprintf+0x68a>
    24fa:	84 36       	cpi	r24, 0x64	; 100
    24fc:	11 f0       	breq	.+4      	; 0x2502 <vfprintf+0x4a4>
    24fe:	89 36       	cpi	r24, 0x69	; 105
    2500:	61 f5       	brne	.+88     	; 0x255a <vfprintf+0x4fc>
    2502:	56 01       	movw	r10, r12
    2504:	97 fe       	sbrs	r9, 7
    2506:	09 c0       	rjmp	.+18     	; 0x251a <vfprintf+0x4bc>
    2508:	24 e0       	ldi	r18, 0x04	; 4
    250a:	a2 0e       	add	r10, r18
    250c:	b1 1c       	adc	r11, r1
    250e:	f6 01       	movw	r30, r12
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	0a c0       	rjmp	.+20     	; 0x252e <vfprintf+0x4d0>
    251a:	f2 e0       	ldi	r31, 0x02	; 2
    251c:	af 0e       	add	r10, r31
    251e:	b1 1c       	adc	r11, r1
    2520:	f6 01       	movw	r30, r12
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	07 2e       	mov	r0, r23
    2528:	00 0c       	add	r0, r0
    252a:	88 0b       	sbc	r24, r24
    252c:	99 0b       	sbc	r25, r25
    252e:	f9 2d       	mov	r31, r9
    2530:	ff 76       	andi	r31, 0x6F	; 111
    2532:	9f 2e       	mov	r9, r31
    2534:	97 ff       	sbrs	r25, 7
    2536:	09 c0       	rjmp	.+18     	; 0x254a <vfprintf+0x4ec>
    2538:	90 95       	com	r25
    253a:	80 95       	com	r24
    253c:	70 95       	com	r23
    253e:	61 95       	neg	r22
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	8f 4f       	sbci	r24, 0xFF	; 255
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	f0 68       	ori	r31, 0x80	; 128
    2548:	9f 2e       	mov	r9, r31
    254a:	2a e0       	ldi	r18, 0x0A	; 10
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a3 01       	movw	r20, r6
    2550:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__ultoa_invert>
    2554:	c8 2e       	mov	r12, r24
    2556:	c6 18       	sub	r12, r6
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <vfprintf+0x57a>
    255a:	09 2d       	mov	r16, r9
    255c:	85 37       	cpi	r24, 0x75	; 117
    255e:	21 f4       	brne	.+8      	; 0x2568 <vfprintf+0x50a>
    2560:	0f 7e       	andi	r16, 0xEF	; 239
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	1d c0       	rjmp	.+58     	; 0x25a2 <vfprintf+0x544>
    2568:	09 7f       	andi	r16, 0xF9	; 249
    256a:	8f 36       	cpi	r24, 0x6F	; 111
    256c:	91 f0       	breq	.+36     	; 0x2592 <vfprintf+0x534>
    256e:	18 f4       	brcc	.+6      	; 0x2576 <vfprintf+0x518>
    2570:	88 35       	cpi	r24, 0x58	; 88
    2572:	59 f0       	breq	.+22     	; 0x258a <vfprintf+0x52c>
    2574:	c3 c0       	rjmp	.+390    	; 0x26fc <vfprintf+0x69e>
    2576:	80 37       	cpi	r24, 0x70	; 112
    2578:	19 f0       	breq	.+6      	; 0x2580 <vfprintf+0x522>
    257a:	88 37       	cpi	r24, 0x78	; 120
    257c:	11 f0       	breq	.+4      	; 0x2582 <vfprintf+0x524>
    257e:	be c0       	rjmp	.+380    	; 0x26fc <vfprintf+0x69e>
    2580:	00 61       	ori	r16, 0x10	; 16
    2582:	04 ff       	sbrs	r16, 4
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <vfprintf+0x53a>
    2586:	04 60       	ori	r16, 0x04	; 4
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <vfprintf+0x53a>
    258a:	94 fe       	sbrs	r9, 4
    258c:	08 c0       	rjmp	.+16     	; 0x259e <vfprintf+0x540>
    258e:	06 60       	ori	r16, 0x06	; 6
    2590:	06 c0       	rjmp	.+12     	; 0x259e <vfprintf+0x540>
    2592:	28 e0       	ldi	r18, 0x08	; 8
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <vfprintf+0x544>
    2598:	20 e1       	ldi	r18, 0x10	; 16
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x544>
    259e:	20 e1       	ldi	r18, 0x10	; 16
    25a0:	32 e0       	ldi	r19, 0x02	; 2
    25a2:	56 01       	movw	r10, r12
    25a4:	07 ff       	sbrs	r16, 7
    25a6:	09 c0       	rjmp	.+18     	; 0x25ba <vfprintf+0x55c>
    25a8:	84 e0       	ldi	r24, 0x04	; 4
    25aa:	a8 0e       	add	r10, r24
    25ac:	b1 1c       	adc	r11, r1
    25ae:	f6 01       	movw	r30, r12
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <vfprintf+0x56c>
    25ba:	f2 e0       	ldi	r31, 0x02	; 2
    25bc:	af 0e       	add	r10, r31
    25be:	b1 1c       	adc	r11, r1
    25c0:	f6 01       	movw	r30, r12
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a3 01       	movw	r20, r6
    25cc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__ultoa_invert>
    25d0:	c8 2e       	mov	r12, r24
    25d2:	c6 18       	sub	r12, r6
    25d4:	0f 77       	andi	r16, 0x7F	; 127
    25d6:	90 2e       	mov	r9, r16
    25d8:	96 fe       	sbrs	r9, 6
    25da:	0b c0       	rjmp	.+22     	; 0x25f2 <vfprintf+0x594>
    25dc:	09 2d       	mov	r16, r9
    25de:	0e 7f       	andi	r16, 0xFE	; 254
    25e0:	c1 16       	cp	r12, r17
    25e2:	50 f4       	brcc	.+20     	; 0x25f8 <vfprintf+0x59a>
    25e4:	94 fe       	sbrs	r9, 4
    25e6:	0a c0       	rjmp	.+20     	; 0x25fc <vfprintf+0x59e>
    25e8:	92 fc       	sbrc	r9, 2
    25ea:	08 c0       	rjmp	.+16     	; 0x25fc <vfprintf+0x59e>
    25ec:	09 2d       	mov	r16, r9
    25ee:	0e 7e       	andi	r16, 0xEE	; 238
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <vfprintf+0x59e>
    25f2:	dc 2c       	mov	r13, r12
    25f4:	09 2d       	mov	r16, r9
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <vfprintf+0x5a0>
    25f8:	dc 2c       	mov	r13, r12
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <vfprintf+0x5a0>
    25fc:	d1 2e       	mov	r13, r17
    25fe:	04 ff       	sbrs	r16, 4
    2600:	0d c0       	rjmp	.+26     	; 0x261c <vfprintf+0x5be>
    2602:	fe 01       	movw	r30, r28
    2604:	ec 0d       	add	r30, r12
    2606:	f1 1d       	adc	r31, r1
    2608:	80 81       	ld	r24, Z
    260a:	80 33       	cpi	r24, 0x30	; 48
    260c:	11 f4       	brne	.+4      	; 0x2612 <vfprintf+0x5b4>
    260e:	09 7e       	andi	r16, 0xE9	; 233
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <vfprintf+0x5c6>
    2612:	02 ff       	sbrs	r16, 2
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <vfprintf+0x5c4>
    2616:	d3 94       	inc	r13
    2618:	d3 94       	inc	r13
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <vfprintf+0x5c6>
    261c:	80 2f       	mov	r24, r16
    261e:	86 78       	andi	r24, 0x86	; 134
    2620:	09 f0       	breq	.+2      	; 0x2624 <vfprintf+0x5c6>
    2622:	d3 94       	inc	r13
    2624:	03 fd       	sbrc	r16, 3
    2626:	11 c0       	rjmp	.+34     	; 0x264a <vfprintf+0x5ec>
    2628:	00 ff       	sbrs	r16, 0
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <vfprintf+0x5da>
    262c:	1c 2d       	mov	r17, r12
    262e:	d5 14       	cp	r13, r5
    2630:	80 f4       	brcc	.+32     	; 0x2652 <vfprintf+0x5f4>
    2632:	15 0d       	add	r17, r5
    2634:	1d 19       	sub	r17, r13
    2636:	0d c0       	rjmp	.+26     	; 0x2652 <vfprintf+0x5f4>
    2638:	d5 14       	cp	r13, r5
    263a:	58 f4       	brcc	.+22     	; 0x2652 <vfprintf+0x5f4>
    263c:	b7 01       	movw	r22, r14
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2646:	d3 94       	inc	r13
    2648:	f7 cf       	rjmp	.-18     	; 0x2638 <vfprintf+0x5da>
    264a:	d5 14       	cp	r13, r5
    264c:	10 f4       	brcc	.+4      	; 0x2652 <vfprintf+0x5f4>
    264e:	5d 18       	sub	r5, r13
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <vfprintf+0x5f6>
    2652:	51 2c       	mov	r5, r1
    2654:	04 ff       	sbrs	r16, 4
    2656:	10 c0       	rjmp	.+32     	; 0x2678 <vfprintf+0x61a>
    2658:	b7 01       	movw	r22, r14
    265a:	80 e3       	ldi	r24, 0x30	; 48
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2662:	02 ff       	sbrs	r16, 2
    2664:	17 c0       	rjmp	.+46     	; 0x2694 <vfprintf+0x636>
    2666:	01 fd       	sbrc	r16, 1
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <vfprintf+0x612>
    266a:	88 e7       	ldi	r24, 0x78	; 120
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <vfprintf+0x616>
    2670:	88 e5       	ldi	r24, 0x58	; 88
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	b7 01       	movw	r22, r14
    2676:	0c c0       	rjmp	.+24     	; 0x2690 <vfprintf+0x632>
    2678:	80 2f       	mov	r24, r16
    267a:	86 78       	andi	r24, 0x86	; 134
    267c:	59 f0       	breq	.+22     	; 0x2694 <vfprintf+0x636>
    267e:	01 ff       	sbrs	r16, 1
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <vfprintf+0x628>
    2682:	8b e2       	ldi	r24, 0x2B	; 43
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <vfprintf+0x62a>
    2686:	80 e2       	ldi	r24, 0x20	; 32
    2688:	07 fd       	sbrc	r16, 7
    268a:	8d e2       	ldi	r24, 0x2D	; 45
    268c:	b7 01       	movw	r22, r14
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2694:	c1 16       	cp	r12, r17
    2696:	38 f4       	brcc	.+14     	; 0x26a6 <vfprintf+0x648>
    2698:	b7 01       	movw	r22, r14
    269a:	80 e3       	ldi	r24, 0x30	; 48
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    26a2:	11 50       	subi	r17, 0x01	; 1
    26a4:	f7 cf       	rjmp	.-18     	; 0x2694 <vfprintf+0x636>
    26a6:	ca 94       	dec	r12
    26a8:	f3 01       	movw	r30, r6
    26aa:	ec 0d       	add	r30, r12
    26ac:	f1 1d       	adc	r31, r1
    26ae:	80 81       	ld	r24, Z
    26b0:	b7 01       	movw	r22, r14
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    26b8:	c1 10       	cpse	r12, r1
    26ba:	f5 cf       	rjmp	.-22     	; 0x26a6 <vfprintf+0x648>
    26bc:	15 c0       	rjmp	.+42     	; 0x26e8 <vfprintf+0x68a>
    26be:	f4 e0       	ldi	r31, 0x04	; 4
    26c0:	f5 15       	cp	r31, r5
    26c2:	60 f5       	brcc	.+88     	; 0x271c <vfprintf+0x6be>
    26c4:	84 e0       	ldi	r24, 0x04	; 4
    26c6:	58 1a       	sub	r5, r24
    26c8:	93 fe       	sbrs	r9, 3
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <vfprintf+0x6ac>
    26cc:	01 11       	cpse	r16, r1
    26ce:	27 c0       	rjmp	.+78     	; 0x271e <vfprintf+0x6c0>
    26d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26d2:	23 ff       	sbrs	r18, 3
    26d4:	2a c0       	rjmp	.+84     	; 0x272a <vfprintf+0x6cc>
    26d6:	00 e9       	ldi	r16, 0x90	; 144
    26d8:	10 e0       	ldi	r17, 0x00	; 0
    26da:	39 2d       	mov	r19, r9
    26dc:	30 71       	andi	r19, 0x10	; 16
    26de:	93 2e       	mov	r9, r19
    26e0:	f8 01       	movw	r30, r16
    26e2:	84 91       	lpm	r24, Z
    26e4:	81 11       	cpse	r24, r1
    26e6:	24 c0       	rjmp	.+72     	; 0x2730 <vfprintf+0x6d2>
    26e8:	55 20       	and	r5, r5
    26ea:	09 f4       	brne	.+2      	; 0x26ee <vfprintf+0x690>
    26ec:	e4 cc       	rjmp	.-1592   	; 0x20b6 <vfprintf+0x58>
    26ee:	b7 01       	movw	r22, r14
    26f0:	80 e2       	ldi	r24, 0x20	; 32
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    26f8:	5a 94       	dec	r5
    26fa:	f6 cf       	rjmp	.-20     	; 0x26e8 <vfprintf+0x68a>
    26fc:	f7 01       	movw	r30, r14
    26fe:	86 81       	ldd	r24, Z+6	; 0x06
    2700:	97 81       	ldd	r25, Z+7	; 0x07
    2702:	26 c0       	rjmp	.+76     	; 0x2750 <vfprintf+0x6f2>
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	9f ef       	ldi	r25, 0xFF	; 255
    2708:	23 c0       	rjmp	.+70     	; 0x2750 <vfprintf+0x6f2>
    270a:	b7 01       	movw	r22, r14
    270c:	80 e2       	ldi	r24, 0x20	; 32
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2714:	5a 94       	dec	r5
    2716:	51 10       	cpse	r5, r1
    2718:	f8 cf       	rjmp	.-16     	; 0x270a <vfprintf+0x6ac>
    271a:	d8 cf       	rjmp	.-80     	; 0x26cc <vfprintf+0x66e>
    271c:	51 2c       	mov	r5, r1
    271e:	b7 01       	movw	r22, r14
    2720:	80 2f       	mov	r24, r16
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2728:	d3 cf       	rjmp	.-90     	; 0x26d0 <vfprintf+0x672>
    272a:	04 e9       	ldi	r16, 0x94	; 148
    272c:	10 e0       	ldi	r17, 0x00	; 0
    272e:	d5 cf       	rjmp	.-86     	; 0x26da <vfprintf+0x67c>
    2730:	91 10       	cpse	r9, r1
    2732:	80 52       	subi	r24, 0x20	; 32
    2734:	b7 01       	movw	r22, r14
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    273c:	0f 5f       	subi	r16, 0xFF	; 255
    273e:	1f 4f       	sbci	r17, 0xFF	; 255
    2740:	cf cf       	rjmp	.-98     	; 0x26e0 <vfprintf+0x682>
    2742:	23 e0       	ldi	r18, 0x03	; 3
    2744:	25 15       	cp	r18, r5
    2746:	10 f4       	brcc	.+4      	; 0x274c <vfprintf+0x6ee>
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	bd cf       	rjmp	.-134    	; 0x26c6 <vfprintf+0x668>
    274c:	51 2c       	mov	r5, r1
    274e:	c0 cf       	rjmp	.-128    	; 0x26d0 <vfprintf+0x672>
    2750:	60 96       	adiw	r28, 0x10	; 16
    2752:	e2 e1       	ldi	r30, 0x12	; 18
    2754:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__>

00002758 <__mulshisi3>:
    2758:	b7 ff       	sbrs	r27, 7
    275a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__muluhisi3>

0000275e <__mulohisi3>:
    275e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__muluhisi3>
    2762:	82 1b       	sub	r24, r18
    2764:	93 0b       	sbc	r25, r19
    2766:	08 95       	ret

00002768 <__prologue_saves__>:
    2768:	2f 92       	push	r2
    276a:	3f 92       	push	r3
    276c:	4f 92       	push	r4
    276e:	5f 92       	push	r5
    2770:	6f 92       	push	r6
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	ca 1b       	sub	r28, r26
    2792:	db 0b       	sbc	r29, r27
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	09 94       	ijmp

0000279a <__epilogue_restores__>:
    279a:	2a 88       	ldd	r2, Y+18	; 0x12
    279c:	39 88       	ldd	r3, Y+17	; 0x11
    279e:	48 88       	ldd	r4, Y+16	; 0x10
    27a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    27aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ac:	b9 84       	ldd	r11, Y+9	; 0x09
    27ae:	c8 84       	ldd	r12, Y+8	; 0x08
    27b0:	df 80       	ldd	r13, Y+7	; 0x07
    27b2:	ee 80       	ldd	r14, Y+6	; 0x06
    27b4:	fd 80       	ldd	r15, Y+5	; 0x05
    27b6:	0c 81       	ldd	r16, Y+4	; 0x04
    27b8:	1b 81       	ldd	r17, Y+3	; 0x03
    27ba:	aa 81       	ldd	r26, Y+2	; 0x02
    27bc:	b9 81       	ldd	r27, Y+1	; 0x01
    27be:	ce 0f       	add	r28, r30
    27c0:	d1 1d       	adc	r29, r1
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	ed 01       	movw	r28, r26
    27c8:	08 95       	ret

000027ca <__muluhisi3>:
    27ca:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__umulhisi3>
    27ce:	a5 9f       	mul	r26, r21
    27d0:	90 0d       	add	r25, r0
    27d2:	b4 9f       	mul	r27, r20
    27d4:	90 0d       	add	r25, r0
    27d6:	a4 9f       	mul	r26, r20
    27d8:	80 0d       	add	r24, r0
    27da:	91 1d       	adc	r25, r1
    27dc:	11 24       	eor	r1, r1
    27de:	08 95       	ret

000027e0 <__umulhisi3>:
    27e0:	a2 9f       	mul	r26, r18
    27e2:	b0 01       	movw	r22, r0
    27e4:	b3 9f       	mul	r27, r19
    27e6:	c0 01       	movw	r24, r0
    27e8:	a3 9f       	mul	r26, r19
    27ea:	70 0d       	add	r23, r0
    27ec:	81 1d       	adc	r24, r1
    27ee:	11 24       	eor	r1, r1
    27f0:	91 1d       	adc	r25, r1
    27f2:	b2 9f       	mul	r27, r18
    27f4:	70 0d       	add	r23, r0
    27f6:	81 1d       	adc	r24, r1
    27f8:	11 24       	eor	r1, r1
    27fa:	91 1d       	adc	r25, r1
    27fc:	08 95       	ret

000027fe <strtol>:
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e0       	ldi	r30, 0x05	; 5
    2804:	f4 e1       	ldi	r31, 0x14	; 20
    2806:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x2>
    280a:	5c 01       	movw	r10, r24
    280c:	6b 01       	movw	r12, r22
    280e:	7a 01       	movw	r14, r20
    2810:	61 15       	cp	r22, r1
    2812:	71 05       	cpc	r23, r1
    2814:	19 f0       	breq	.+6      	; 0x281c <strtol+0x1e>
    2816:	fb 01       	movw	r30, r22
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	e1 14       	cp	r14, r1
    281e:	f1 04       	cpc	r15, r1
    2820:	29 f0       	breq	.+10     	; 0x282c <strtol+0x2e>
    2822:	c7 01       	movw	r24, r14
    2824:	02 97       	sbiw	r24, 0x02	; 2
    2826:	83 97       	sbiw	r24, 0x23	; 35
    2828:	08 f0       	brcs	.+2      	; 0x282c <strtol+0x2e>
    282a:	e5 c0       	rjmp	.+458    	; 0x29f6 <strtol+0x1f8>
    282c:	e5 01       	movw	r28, r10
    282e:	21 96       	adiw	r28, 0x01	; 1
    2830:	f5 01       	movw	r30, r10
    2832:	10 81       	ld	r17, Z
    2834:	81 2f       	mov	r24, r17
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 ed 15 	call	0x2bda	; 0x2bda <isspace>
    283c:	89 2b       	or	r24, r25
    283e:	11 f0       	breq	.+4      	; 0x2844 <strtol+0x46>
    2840:	5e 01       	movw	r10, r28
    2842:	f4 cf       	rjmp	.-24     	; 0x282c <strtol+0x2e>
    2844:	1d 32       	cpi	r17, 0x2D	; 45
    2846:	29 f4       	brne	.+10     	; 0x2852 <strtol+0x54>
    2848:	21 96       	adiw	r28, 0x01	; 1
    284a:	f5 01       	movw	r30, r10
    284c:	11 81       	ldd	r17, Z+1	; 0x01
    284e:	01 e0       	ldi	r16, 0x01	; 1
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <strtol+0x62>
    2852:	1b 32       	cpi	r17, 0x2B	; 43
    2854:	21 f4       	brne	.+8      	; 0x285e <strtol+0x60>
    2856:	e5 01       	movw	r28, r10
    2858:	22 96       	adiw	r28, 0x02	; 2
    285a:	f5 01       	movw	r30, r10
    285c:	11 81       	ldd	r17, Z+1	; 0x01
    285e:	00 e0       	ldi	r16, 0x00	; 0
    2860:	e1 14       	cp	r14, r1
    2862:	f1 04       	cpc	r15, r1
    2864:	09 f1       	breq	.+66     	; 0x28a8 <strtol+0xaa>
    2866:	f0 e1       	ldi	r31, 0x10	; 16
    2868:	ef 16       	cp	r14, r31
    286a:	f1 04       	cpc	r15, r1
    286c:	29 f4       	brne	.+10     	; 0x2878 <strtol+0x7a>
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <strtol+0xf0>
    2870:	10 e3       	ldi	r17, 0x30	; 48
    2872:	e1 14       	cp	r14, r1
    2874:	f1 04       	cpc	r15, r1
    2876:	21 f1       	breq	.+72     	; 0x28c0 <strtol+0xc2>
    2878:	28 e0       	ldi	r18, 0x08	; 8
    287a:	e2 16       	cp	r14, r18
    287c:	f1 04       	cpc	r15, r1
    287e:	01 f1       	breq	.+64     	; 0x28c0 <strtol+0xc2>
    2880:	54 f4       	brge	.+20     	; 0x2896 <strtol+0x98>
    2882:	e2 e0       	ldi	r30, 0x02	; 2
    2884:	ee 16       	cp	r14, r30
    2886:	f1 04       	cpc	r15, r1
    2888:	21 f5       	brne	.+72     	; 0x28d2 <strtol+0xd4>
    288a:	81 2c       	mov	r8, r1
    288c:	91 2c       	mov	r9, r1
    288e:	a1 2c       	mov	r10, r1
    2890:	b0 e4       	ldi	r27, 0x40	; 64
    2892:	bb 2e       	mov	r11, r27
    2894:	3e c0       	rjmp	.+124    	; 0x2912 <strtol+0x114>
    2896:	fa e0       	ldi	r31, 0x0A	; 10
    2898:	ef 16       	cp	r14, r31
    289a:	f1 04       	cpc	r15, r1
    289c:	39 f0       	breq	.+14     	; 0x28ac <strtol+0xae>
    289e:	20 e1       	ldi	r18, 0x10	; 16
    28a0:	e2 16       	cp	r14, r18
    28a2:	f1 04       	cpc	r15, r1
    28a4:	b1 f4       	brne	.+44     	; 0x28d2 <strtol+0xd4>
    28a6:	30 c0       	rjmp	.+96     	; 0x2908 <strtol+0x10a>
    28a8:	10 33       	cpi	r17, 0x30	; 48
    28aa:	19 f1       	breq	.+70     	; 0x28f2 <strtol+0xf4>
    28ac:	fa e0       	ldi	r31, 0x0A	; 10
    28ae:	ef 2e       	mov	r14, r31
    28b0:	f1 2c       	mov	r15, r1
    28b2:	ac ec       	ldi	r26, 0xCC	; 204
    28b4:	8a 2e       	mov	r8, r26
    28b6:	98 2c       	mov	r9, r8
    28b8:	a8 2c       	mov	r10, r8
    28ba:	ac e0       	ldi	r26, 0x0C	; 12
    28bc:	ba 2e       	mov	r11, r26
    28be:	29 c0       	rjmp	.+82     	; 0x2912 <strtol+0x114>
    28c0:	78 e0       	ldi	r23, 0x08	; 8
    28c2:	e7 2e       	mov	r14, r23
    28c4:	f1 2c       	mov	r15, r1
    28c6:	81 2c       	mov	r8, r1
    28c8:	91 2c       	mov	r9, r1
    28ca:	a1 2c       	mov	r10, r1
    28cc:	e0 e1       	ldi	r30, 0x10	; 16
    28ce:	be 2e       	mov	r11, r30
    28d0:	20 c0       	rjmp	.+64     	; 0x2912 <strtol+0x114>
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e8       	ldi	r25, 0x80	; 128
    28da:	97 01       	movw	r18, r14
    28dc:	0f 2c       	mov	r0, r15
    28de:	00 0c       	add	r0, r0
    28e0:	44 0b       	sbc	r20, r20
    28e2:	55 0b       	sbc	r21, r21
    28e4:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__udivmodsi4>
    28e8:	49 01       	movw	r8, r18
    28ea:	5a 01       	movw	r10, r20
    28ec:	12 c0       	rjmp	.+36     	; 0x2912 <strtol+0x114>
    28ee:	10 33       	cpi	r17, 0x30	; 48
    28f0:	59 f4       	brne	.+22     	; 0x2908 <strtol+0x10a>
    28f2:	88 81       	ld	r24, Y
    28f4:	8f 7d       	andi	r24, 0xDF	; 223
    28f6:	88 35       	cpi	r24, 0x58	; 88
    28f8:	09 f0       	breq	.+2      	; 0x28fc <strtol+0xfe>
    28fa:	ba cf       	rjmp	.-140    	; 0x2870 <strtol+0x72>
    28fc:	19 81       	ldd	r17, Y+1	; 0x01
    28fe:	22 96       	adiw	r28, 0x02	; 2
    2900:	02 60       	ori	r16, 0x02	; 2
    2902:	80 e1       	ldi	r24, 0x10	; 16
    2904:	e8 2e       	mov	r14, r24
    2906:	f1 2c       	mov	r15, r1
    2908:	81 2c       	mov	r8, r1
    290a:	91 2c       	mov	r9, r1
    290c:	a1 2c       	mov	r10, r1
    290e:	68 e0       	ldi	r22, 0x08	; 8
    2910:	b6 2e       	mov	r11, r22
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	cb 01       	movw	r24, r22
    291a:	27 01       	movw	r4, r14
    291c:	0f 2c       	mov	r0, r15
    291e:	00 0c       	add	r0, r0
    2920:	66 08       	sbc	r6, r6
    2922:	77 08       	sbc	r7, r7
    2924:	fe 01       	movw	r30, r28
    2926:	50 ed       	ldi	r21, 0xD0	; 208
    2928:	35 2e       	mov	r3, r21
    292a:	31 0e       	add	r3, r17
    292c:	29 e0       	ldi	r18, 0x09	; 9
    292e:	23 15       	cp	r18, r3
    2930:	70 f4       	brcc	.+28     	; 0x294e <strtol+0x150>
    2932:	2f eb       	ldi	r18, 0xBF	; 191
    2934:	21 0f       	add	r18, r17
    2936:	2a 31       	cpi	r18, 0x1A	; 26
    2938:	18 f4       	brcc	.+6      	; 0x2940 <strtol+0x142>
    293a:	39 ec       	ldi	r19, 0xC9	; 201
    293c:	33 2e       	mov	r3, r19
    293e:	06 c0       	rjmp	.+12     	; 0x294c <strtol+0x14e>
    2940:	2f e9       	ldi	r18, 0x9F	; 159
    2942:	21 0f       	add	r18, r17
    2944:	2a 31       	cpi	r18, 0x1A	; 26
    2946:	18 f5       	brcc	.+70     	; 0x298e <strtol+0x190>
    2948:	29 ea       	ldi	r18, 0xA9	; 169
    294a:	32 2e       	mov	r3, r18
    294c:	31 0e       	add	r3, r17
    294e:	23 2d       	mov	r18, r3
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	2e 15       	cp	r18, r14
    2954:	3f 05       	cpc	r19, r15
    2956:	dc f4       	brge	.+54     	; 0x298e <strtol+0x190>
    2958:	47 fd       	sbrc	r20, 7
    295a:	16 c0       	rjmp	.+44     	; 0x2988 <strtol+0x18a>
    295c:	86 16       	cp	r8, r22
    295e:	97 06       	cpc	r9, r23
    2960:	a8 06       	cpc	r10, r24
    2962:	b9 06       	cpc	r11, r25
    2964:	70 f0       	brcs	.+28     	; 0x2982 <strtol+0x184>
    2966:	a3 01       	movw	r20, r6
    2968:	92 01       	movw	r18, r4
    296a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsi3>
    296e:	63 0d       	add	r22, r3
    2970:	71 1d       	adc	r23, r1
    2972:	81 1d       	adc	r24, r1
    2974:	91 1d       	adc	r25, r1
    2976:	61 30       	cpi	r22, 0x01	; 1
    2978:	71 05       	cpc	r23, r1
    297a:	81 05       	cpc	r24, r1
    297c:	20 e8       	ldi	r18, 0x80	; 128
    297e:	92 07       	cpc	r25, r18
    2980:	10 f0       	brcs	.+4      	; 0x2986 <strtol+0x188>
    2982:	4f ef       	ldi	r20, 0xFF	; 255
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <strtol+0x18a>
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	21 96       	adiw	r28, 0x01	; 1
    298a:	10 81       	ld	r17, Z
    298c:	cb cf       	rjmp	.-106    	; 0x2924 <strtol+0x126>
    298e:	20 2f       	mov	r18, r16
    2990:	21 70       	andi	r18, 0x01	; 1
    2992:	c1 14       	cp	r12, r1
    2994:	d1 04       	cpc	r13, r1
    2996:	71 f0       	breq	.+28     	; 0x29b4 <strtol+0x1b6>
    2998:	44 23       	and	r20, r20
    299a:	29 f0       	breq	.+10     	; 0x29a6 <strtol+0x1a8>
    299c:	21 97       	sbiw	r28, 0x01	; 1
    299e:	f6 01       	movw	r30, r12
    29a0:	c0 83       	st	Z, r28
    29a2:	d1 83       	std	Z+1, r29	; 0x01
    29a4:	07 c0       	rjmp	.+14     	; 0x29b4 <strtol+0x1b6>
    29a6:	01 ff       	sbrs	r16, 1
    29a8:	19 c0       	rjmp	.+50     	; 0x29dc <strtol+0x1de>
    29aa:	22 97       	sbiw	r28, 0x02	; 2
    29ac:	f6 01       	movw	r30, r12
    29ae:	c0 83       	st	Z, r28
    29b0:	d1 83       	std	Z+1, r29	; 0x01
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <strtol+0x1de>
    29b4:	47 ff       	sbrs	r20, 7
    29b6:	12 c0       	rjmp	.+36     	; 0x29dc <strtol+0x1de>
    29b8:	22 23       	and	r18, r18
    29ba:	29 f0       	breq	.+10     	; 0x29c6 <strtol+0x1c8>
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e8       	ldi	r25, 0x80	; 128
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <strtol+0x1d0>
    29c6:	6f ef       	ldi	r22, 0xFF	; 255
    29c8:	7f ef       	ldi	r23, 0xFF	; 255
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	9f e7       	ldi	r25, 0x7F	; 127
    29ce:	22 e2       	ldi	r18, 0x22	; 34
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	20 93 9b 38 	sts	0x389B, r18	; 0x80389b <errno>
    29d6:	30 93 9c 38 	sts	0x389C, r19	; 0x80389c <errno+0x1>
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <strtol+0x1f0>
    29dc:	22 23       	and	r18, r18
    29de:	81 f0       	breq	.+32     	; 0x2a00 <strtol+0x202>
    29e0:	90 95       	com	r25
    29e2:	80 95       	com	r24
    29e4:	70 95       	com	r23
    29e6:	61 95       	neg	r22
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	8f 4f       	sbci	r24, 0xFF	; 255
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	46 2f       	mov	r20, r22
    29f0:	37 2f       	mov	r19, r23
    29f2:	28 2f       	mov	r18, r24
    29f4:	12 c0       	rjmp	.+36     	; 0x2a1a <strtol+0x21c>
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0d c0       	rjmp	.+26     	; 0x2a1a <strtol+0x21c>
    2a00:	97 ff       	sbrs	r25, 7
    2a02:	f5 cf       	rjmp	.-22     	; 0x29ee <strtol+0x1f0>
    2a04:	82 e2       	ldi	r24, 0x22	; 34
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <errno>
    2a0c:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <errno+0x1>
    2a10:	6f ef       	ldi	r22, 0xFF	; 255
    2a12:	7f ef       	ldi	r23, 0xFF	; 255
    2a14:	8f ef       	ldi	r24, 0xFF	; 255
    2a16:	9f e7       	ldi	r25, 0x7F	; 127
    2a18:	ea cf       	rjmp	.-44     	; 0x29ee <strtol+0x1f0>
    2a1a:	64 2f       	mov	r22, r20
    2a1c:	73 2f       	mov	r23, r19
    2a1e:	82 2f       	mov	r24, r18
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	e1 e1       	ldi	r30, 0x11	; 17
    2a26:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__+0x2>

00002a2a <__ftoa_engine>:
    2a2a:	28 30       	cpi	r18, 0x08	; 8
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <__ftoa_engine+0x6>
    2a2e:	27 e0       	ldi	r18, 0x07	; 7
    2a30:	33 27       	eor	r19, r19
    2a32:	da 01       	movw	r26, r20
    2a34:	99 0f       	add	r25, r25
    2a36:	31 1d       	adc	r19, r1
    2a38:	87 fd       	sbrc	r24, 7
    2a3a:	91 60       	ori	r25, 0x01	; 1
    2a3c:	00 96       	adiw	r24, 0x00	; 0
    2a3e:	61 05       	cpc	r22, r1
    2a40:	71 05       	cpc	r23, r1
    2a42:	39 f4       	brne	.+14     	; 0x2a52 <__ftoa_engine+0x28>
    2a44:	32 60       	ori	r19, 0x02	; 2
    2a46:	2e 5f       	subi	r18, 0xFE	; 254
    2a48:	3d 93       	st	X+, r19
    2a4a:	30 e3       	ldi	r19, 0x30	; 48
    2a4c:	2a 95       	dec	r18
    2a4e:	e1 f7       	brne	.-8      	; 0x2a48 <__ftoa_engine+0x1e>
    2a50:	08 95       	ret
    2a52:	9f 3f       	cpi	r25, 0xFF	; 255
    2a54:	30 f0       	brcs	.+12     	; 0x2a62 <__ftoa_engine+0x38>
    2a56:	80 38       	cpi	r24, 0x80	; 128
    2a58:	71 05       	cpc	r23, r1
    2a5a:	61 05       	cpc	r22, r1
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <__ftoa_engine+0x36>
    2a5e:	3c 5f       	subi	r19, 0xFC	; 252
    2a60:	3c 5f       	subi	r19, 0xFC	; 252
    2a62:	3d 93       	st	X+, r19
    2a64:	91 30       	cpi	r25, 0x01	; 1
    2a66:	08 f0       	brcs	.+2      	; 0x2a6a <__ftoa_engine+0x40>
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	91 1d       	adc	r25, r1
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	1f 93       	push	r17
    2a72:	0f 93       	push	r16
    2a74:	ff 92       	push	r15
    2a76:	ef 92       	push	r14
    2a78:	19 2f       	mov	r17, r25
    2a7a:	98 7f       	andi	r25, 0xF8	; 248
    2a7c:	96 95       	lsr	r25
    2a7e:	e9 2f       	mov	r30, r25
    2a80:	96 95       	lsr	r25
    2a82:	96 95       	lsr	r25
    2a84:	e9 0f       	add	r30, r25
    2a86:	ff 27       	eor	r31, r31
    2a88:	ee 50       	subi	r30, 0x0E	; 14
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	99 27       	eor	r25, r25
    2a8e:	33 27       	eor	r19, r19
    2a90:	ee 24       	eor	r14, r14
    2a92:	ff 24       	eor	r15, r15
    2a94:	a7 01       	movw	r20, r14
    2a96:	e7 01       	movw	r28, r14
    2a98:	05 90       	lpm	r0, Z+
    2a9a:	08 94       	sec
    2a9c:	07 94       	ror	r0
    2a9e:	28 f4       	brcc	.+10     	; 0x2aaa <__ftoa_engine+0x80>
    2aa0:	36 0f       	add	r19, r22
    2aa2:	e7 1e       	adc	r14, r23
    2aa4:	f8 1e       	adc	r15, r24
    2aa6:	49 1f       	adc	r20, r25
    2aa8:	51 1d       	adc	r21, r1
    2aaa:	66 0f       	add	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 1f       	adc	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	06 94       	lsr	r0
    2ab4:	a1 f7       	brne	.-24     	; 0x2a9e <__ftoa_engine+0x74>
    2ab6:	05 90       	lpm	r0, Z+
    2ab8:	07 94       	ror	r0
    2aba:	28 f4       	brcc	.+10     	; 0x2ac6 <__ftoa_engine+0x9c>
    2abc:	e7 0e       	add	r14, r23
    2abe:	f8 1e       	adc	r15, r24
    2ac0:	49 1f       	adc	r20, r25
    2ac2:	56 1f       	adc	r21, r22
    2ac4:	c1 1d       	adc	r28, r1
    2ac6:	77 0f       	add	r23, r23
    2ac8:	88 1f       	adc	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	66 1f       	adc	r22, r22
    2ace:	06 94       	lsr	r0
    2ad0:	a1 f7       	brne	.-24     	; 0x2aba <__ftoa_engine+0x90>
    2ad2:	05 90       	lpm	r0, Z+
    2ad4:	07 94       	ror	r0
    2ad6:	28 f4       	brcc	.+10     	; 0x2ae2 <__ftoa_engine+0xb8>
    2ad8:	f8 0e       	add	r15, r24
    2ada:	49 1f       	adc	r20, r25
    2adc:	56 1f       	adc	r21, r22
    2ade:	c7 1f       	adc	r28, r23
    2ae0:	d1 1d       	adc	r29, r1
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	66 1f       	adc	r22, r22
    2ae8:	77 1f       	adc	r23, r23
    2aea:	06 94       	lsr	r0
    2aec:	a1 f7       	brne	.-24     	; 0x2ad6 <__ftoa_engine+0xac>
    2aee:	05 90       	lpm	r0, Z+
    2af0:	07 94       	ror	r0
    2af2:	20 f4       	brcc	.+8      	; 0x2afc <__ftoa_engine+0xd2>
    2af4:	49 0f       	add	r20, r25
    2af6:	56 1f       	adc	r21, r22
    2af8:	c7 1f       	adc	r28, r23
    2afa:	d8 1f       	adc	r29, r24
    2afc:	99 0f       	add	r25, r25
    2afe:	66 1f       	adc	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	88 1f       	adc	r24, r24
    2b04:	06 94       	lsr	r0
    2b06:	a9 f7       	brne	.-22     	; 0x2af2 <__ftoa_engine+0xc8>
    2b08:	84 91       	lpm	r24, Z
    2b0a:	10 95       	com	r17
    2b0c:	17 70       	andi	r17, 0x07	; 7
    2b0e:	41 f0       	breq	.+16     	; 0x2b20 <__ftoa_engine+0xf6>
    2b10:	d6 95       	lsr	r29
    2b12:	c7 95       	ror	r28
    2b14:	57 95       	ror	r21
    2b16:	47 95       	ror	r20
    2b18:	f7 94       	ror	r15
    2b1a:	e7 94       	ror	r14
    2b1c:	1a 95       	dec	r17
    2b1e:	c1 f7       	brne	.-16     	; 0x2b10 <__ftoa_engine+0xe6>
    2b20:	e8 e9       	ldi	r30, 0x98	; 152
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	68 94       	set
    2b26:	15 90       	lpm	r1, Z+
    2b28:	15 91       	lpm	r17, Z+
    2b2a:	35 91       	lpm	r19, Z+
    2b2c:	65 91       	lpm	r22, Z+
    2b2e:	95 91       	lpm	r25, Z+
    2b30:	05 90       	lpm	r0, Z+
    2b32:	7f e2       	ldi	r23, 0x2F	; 47
    2b34:	73 95       	inc	r23
    2b36:	e1 18       	sub	r14, r1
    2b38:	f1 0a       	sbc	r15, r17
    2b3a:	43 0b       	sbc	r20, r19
    2b3c:	56 0b       	sbc	r21, r22
    2b3e:	c9 0b       	sbc	r28, r25
    2b40:	d0 09       	sbc	r29, r0
    2b42:	c0 f7       	brcc	.-16     	; 0x2b34 <__ftoa_engine+0x10a>
    2b44:	e1 0c       	add	r14, r1
    2b46:	f1 1e       	adc	r15, r17
    2b48:	43 1f       	adc	r20, r19
    2b4a:	56 1f       	adc	r21, r22
    2b4c:	c9 1f       	adc	r28, r25
    2b4e:	d0 1d       	adc	r29, r0
    2b50:	7e f4       	brtc	.+30     	; 0x2b70 <__ftoa_engine+0x146>
    2b52:	70 33       	cpi	r23, 0x30	; 48
    2b54:	11 f4       	brne	.+4      	; 0x2b5a <__ftoa_engine+0x130>
    2b56:	8a 95       	dec	r24
    2b58:	e6 cf       	rjmp	.-52     	; 0x2b26 <__ftoa_engine+0xfc>
    2b5a:	e8 94       	clt
    2b5c:	01 50       	subi	r16, 0x01	; 1
    2b5e:	30 f0       	brcs	.+12     	; 0x2b6c <__ftoa_engine+0x142>
    2b60:	08 0f       	add	r16, r24
    2b62:	0a f4       	brpl	.+2      	; 0x2b66 <__ftoa_engine+0x13c>
    2b64:	00 27       	eor	r16, r16
    2b66:	02 17       	cp	r16, r18
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__ftoa_engine+0x142>
    2b6a:	20 2f       	mov	r18, r16
    2b6c:	23 95       	inc	r18
    2b6e:	02 2f       	mov	r16, r18
    2b70:	7a 33       	cpi	r23, 0x3A	; 58
    2b72:	28 f0       	brcs	.+10     	; 0x2b7e <__ftoa_engine+0x154>
    2b74:	79 e3       	ldi	r23, 0x39	; 57
    2b76:	7d 93       	st	X+, r23
    2b78:	2a 95       	dec	r18
    2b7a:	e9 f7       	brne	.-6      	; 0x2b76 <__ftoa_engine+0x14c>
    2b7c:	10 c0       	rjmp	.+32     	; 0x2b9e <__ftoa_engine+0x174>
    2b7e:	7d 93       	st	X+, r23
    2b80:	2a 95       	dec	r18
    2b82:	89 f6       	brne	.-94     	; 0x2b26 <__ftoa_engine+0xfc>
    2b84:	06 94       	lsr	r0
    2b86:	97 95       	ror	r25
    2b88:	67 95       	ror	r22
    2b8a:	37 95       	ror	r19
    2b8c:	17 95       	ror	r17
    2b8e:	17 94       	ror	r1
    2b90:	e1 18       	sub	r14, r1
    2b92:	f1 0a       	sbc	r15, r17
    2b94:	43 0b       	sbc	r20, r19
    2b96:	56 0b       	sbc	r21, r22
    2b98:	c9 0b       	sbc	r28, r25
    2b9a:	d0 09       	sbc	r29, r0
    2b9c:	98 f0       	brcs	.+38     	; 0x2bc4 <__ftoa_engine+0x19a>
    2b9e:	23 95       	inc	r18
    2ba0:	7e 91       	ld	r23, -X
    2ba2:	73 95       	inc	r23
    2ba4:	7a 33       	cpi	r23, 0x3A	; 58
    2ba6:	08 f0       	brcs	.+2      	; 0x2baa <__ftoa_engine+0x180>
    2ba8:	70 e3       	ldi	r23, 0x30	; 48
    2baa:	7c 93       	st	X, r23
    2bac:	20 13       	cpse	r18, r16
    2bae:	b8 f7       	brcc	.-18     	; 0x2b9e <__ftoa_engine+0x174>
    2bb0:	7e 91       	ld	r23, -X
    2bb2:	70 61       	ori	r23, 0x10	; 16
    2bb4:	7d 93       	st	X+, r23
    2bb6:	30 f0       	brcs	.+12     	; 0x2bc4 <__ftoa_engine+0x19a>
    2bb8:	83 95       	inc	r24
    2bba:	71 e3       	ldi	r23, 0x31	; 49
    2bbc:	7d 93       	st	X+, r23
    2bbe:	70 e3       	ldi	r23, 0x30	; 48
    2bc0:	2a 95       	dec	r18
    2bc2:	e1 f7       	brne	.-8      	; 0x2bbc <__ftoa_engine+0x192>
    2bc4:	11 24       	eor	r1, r1
    2bc6:	ef 90       	pop	r14
    2bc8:	ff 90       	pop	r15
    2bca:	0f 91       	pop	r16
    2bcc:	1f 91       	pop	r17
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	99 27       	eor	r25, r25
    2bd4:	87 fd       	sbrc	r24, 7
    2bd6:	90 95       	com	r25
    2bd8:	08 95       	ret

00002bda <isspace>:
    2bda:	91 11       	cpse	r25, r1
    2bdc:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__ctype_isfalse>
    2be0:	80 32       	cpi	r24, 0x20	; 32
    2be2:	19 f0       	breq	.+6      	; 0x2bea <isspace+0x10>
    2be4:	89 50       	subi	r24, 0x09	; 9
    2be6:	85 50       	subi	r24, 0x05	; 5
    2be8:	c8 f7       	brcc	.-14     	; 0x2bdc <isspace+0x2>
    2bea:	08 95       	ret

00002bec <strnlen_P>:
    2bec:	fc 01       	movw	r30, r24
    2bee:	05 90       	lpm	r0, Z+
    2bf0:	61 50       	subi	r22, 0x01	; 1
    2bf2:	70 40       	sbci	r23, 0x00	; 0
    2bf4:	01 10       	cpse	r0, r1
    2bf6:	d8 f7       	brcc	.-10     	; 0x2bee <strnlen_P+0x2>
    2bf8:	80 95       	com	r24
    2bfa:	90 95       	com	r25
    2bfc:	8e 0f       	add	r24, r30
    2bfe:	9f 1f       	adc	r25, r31
    2c00:	08 95       	ret

00002c02 <strncpy>:
    2c02:	fb 01       	movw	r30, r22
    2c04:	dc 01       	movw	r26, r24
    2c06:	41 50       	subi	r20, 0x01	; 1
    2c08:	50 40       	sbci	r21, 0x00	; 0
    2c0a:	48 f0       	brcs	.+18     	; 0x2c1e <strncpy+0x1c>
    2c0c:	01 90       	ld	r0, Z+
    2c0e:	0d 92       	st	X+, r0
    2c10:	00 20       	and	r0, r0
    2c12:	c9 f7       	brne	.-14     	; 0x2c06 <strncpy+0x4>
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <strncpy+0x16>
    2c16:	1d 92       	st	X+, r1
    2c18:	41 50       	subi	r20, 0x01	; 1
    2c1a:	50 40       	sbci	r21, 0x00	; 0
    2c1c:	e0 f7       	brcc	.-8      	; 0x2c16 <strncpy+0x14>
    2c1e:	08 95       	ret

00002c20 <strnlen>:
    2c20:	fc 01       	movw	r30, r24
    2c22:	61 50       	subi	r22, 0x01	; 1
    2c24:	70 40       	sbci	r23, 0x00	; 0
    2c26:	01 90       	ld	r0, Z+
    2c28:	01 10       	cpse	r0, r1
    2c2a:	d8 f7       	brcc	.-10     	; 0x2c22 <strnlen+0x2>
    2c2c:	80 95       	com	r24
    2c2e:	90 95       	com	r25
    2c30:	8e 0f       	add	r24, r30
    2c32:	9f 1f       	adc	r25, r31
    2c34:	08 95       	ret

00002c36 <strstr>:
    2c36:	fb 01       	movw	r30, r22
    2c38:	51 91       	ld	r21, Z+
    2c3a:	55 23       	and	r21, r21
    2c3c:	a9 f0       	breq	.+42     	; 0x2c68 <strstr+0x32>
    2c3e:	bf 01       	movw	r22, r30
    2c40:	dc 01       	movw	r26, r24
    2c42:	4d 91       	ld	r20, X+
    2c44:	45 17       	cp	r20, r21
    2c46:	41 11       	cpse	r20, r1
    2c48:	e1 f7       	brne	.-8      	; 0x2c42 <strstr+0xc>
    2c4a:	59 f4       	brne	.+22     	; 0x2c62 <strstr+0x2c>
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	01 90       	ld	r0, Z+
    2c50:	00 20       	and	r0, r0
    2c52:	49 f0       	breq	.+18     	; 0x2c66 <strstr+0x30>
    2c54:	4d 91       	ld	r20, X+
    2c56:	40 15       	cp	r20, r0
    2c58:	41 11       	cpse	r20, r1
    2c5a:	c9 f3       	breq	.-14     	; 0x2c4e <strstr+0x18>
    2c5c:	fb 01       	movw	r30, r22
    2c5e:	41 11       	cpse	r20, r1
    2c60:	ef cf       	rjmp	.-34     	; 0x2c40 <strstr+0xa>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	08 95       	ret

00002c6a <fputc>:
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	fb 01       	movw	r30, r22
    2c74:	23 81       	ldd	r18, Z+3	; 0x03
    2c76:	21 fd       	sbrc	r18, 1
    2c78:	03 c0       	rjmp	.+6      	; 0x2c80 <fputc+0x16>
    2c7a:	8f ef       	ldi	r24, 0xFF	; 255
    2c7c:	9f ef       	ldi	r25, 0xFF	; 255
    2c7e:	2c c0       	rjmp	.+88     	; 0x2cd8 <fputc+0x6e>
    2c80:	22 ff       	sbrs	r18, 2
    2c82:	16 c0       	rjmp	.+44     	; 0x2cb0 <fputc+0x46>
    2c84:	46 81       	ldd	r20, Z+6	; 0x06
    2c86:	57 81       	ldd	r21, Z+7	; 0x07
    2c88:	24 81       	ldd	r18, Z+4	; 0x04
    2c8a:	35 81       	ldd	r19, Z+5	; 0x05
    2c8c:	42 17       	cp	r20, r18
    2c8e:	53 07       	cpc	r21, r19
    2c90:	44 f4       	brge	.+16     	; 0x2ca2 <fputc+0x38>
    2c92:	a0 81       	ld	r26, Z
    2c94:	b1 81       	ldd	r27, Z+1	; 0x01
    2c96:	9d 01       	movw	r18, r26
    2c98:	2f 5f       	subi	r18, 0xFF	; 255
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	20 83       	st	Z, r18
    2c9e:	31 83       	std	Z+1, r19	; 0x01
    2ca0:	8c 93       	st	X, r24
    2ca2:	26 81       	ldd	r18, Z+6	; 0x06
    2ca4:	37 81       	ldd	r19, Z+7	; 0x07
    2ca6:	2f 5f       	subi	r18, 0xFF	; 255
    2ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    2caa:	26 83       	std	Z+6, r18	; 0x06
    2cac:	37 83       	std	Z+7, r19	; 0x07
    2cae:	14 c0       	rjmp	.+40     	; 0x2cd8 <fputc+0x6e>
    2cb0:	8b 01       	movw	r16, r22
    2cb2:	ec 01       	movw	r28, r24
    2cb4:	fb 01       	movw	r30, r22
    2cb6:	00 84       	ldd	r0, Z+8	; 0x08
    2cb8:	f1 85       	ldd	r31, Z+9	; 0x09
    2cba:	e0 2d       	mov	r30, r0
    2cbc:	09 95       	icall
    2cbe:	89 2b       	or	r24, r25
    2cc0:	e1 f6       	brne	.-72     	; 0x2c7a <fputc+0x10>
    2cc2:	d8 01       	movw	r26, r16
    2cc4:	16 96       	adiw	r26, 0x06	; 6
    2cc6:	8d 91       	ld	r24, X+
    2cc8:	9c 91       	ld	r25, X
    2cca:	17 97       	sbiw	r26, 0x07	; 7
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	16 96       	adiw	r26, 0x06	; 6
    2cd0:	8d 93       	st	X+, r24
    2cd2:	9c 93       	st	X, r25
    2cd4:	17 97       	sbiw	r26, 0x07	; 7
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <printf>:
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e7 e7       	ldi	r30, 0x77	; 119
    2ce8:	f6 e1       	ldi	r31, 0x16	; 22
    2cea:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__+0x20>
    2cee:	ae 01       	movw	r20, r28
    2cf0:	4b 5f       	subi	r20, 0xFB	; 251
    2cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf4:	fa 01       	movw	r30, r20
    2cf6:	61 91       	ld	r22, Z+
    2cf8:	71 91       	ld	r23, Z+
    2cfa:	af 01       	movw	r20, r30
    2cfc:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <__iob+0x2>
    2d00:	90 91 98 38 	lds	r25, 0x3898	; 0x803898 <__iob+0x3>
    2d04:	0e 94 2f 10 	call	0x205e	; 0x205e <vfprintf>
    2d08:	e2 e0       	ldi	r30, 0x02	; 2
    2d0a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x20>

00002d0e <putchar>:
    2d0e:	60 91 97 38 	lds	r22, 0x3897	; 0x803897 <__iob+0x2>
    2d12:	70 91 98 38 	lds	r23, 0x3898	; 0x803898 <__iob+0x3>
    2d16:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <fputc>
    2d1a:	08 95       	ret

00002d1c <puts>:
    2d1c:	0f 93       	push	r16
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	e0 91 97 38 	lds	r30, 0x3897	; 0x803897 <__iob+0x2>
    2d28:	f0 91 98 38 	lds	r31, 0x3898	; 0x803898 <__iob+0x3>
    2d2c:	23 81       	ldd	r18, Z+3	; 0x03
    2d2e:	21 ff       	sbrs	r18, 1
    2d30:	1b c0       	rjmp	.+54     	; 0x2d68 <puts+0x4c>
    2d32:	8c 01       	movw	r16, r24
    2d34:	d0 e0       	ldi	r29, 0x00	; 0
    2d36:	c0 e0       	ldi	r28, 0x00	; 0
    2d38:	f8 01       	movw	r30, r16
    2d3a:	81 91       	ld	r24, Z+
    2d3c:	8f 01       	movw	r16, r30
    2d3e:	60 91 97 38 	lds	r22, 0x3897	; 0x803897 <__iob+0x2>
    2d42:	70 91 98 38 	lds	r23, 0x3898	; 0x803898 <__iob+0x3>
    2d46:	db 01       	movw	r26, r22
    2d48:	18 96       	adiw	r26, 0x08	; 8
    2d4a:	ed 91       	ld	r30, X+
    2d4c:	fc 91       	ld	r31, X
    2d4e:	19 97       	sbiw	r26, 0x09	; 9
    2d50:	88 23       	and	r24, r24
    2d52:	31 f0       	breq	.+12     	; 0x2d60 <puts+0x44>
    2d54:	09 95       	icall
    2d56:	89 2b       	or	r24, r25
    2d58:	79 f3       	breq	.-34     	; 0x2d38 <puts+0x1c>
    2d5a:	df ef       	ldi	r29, 0xFF	; 255
    2d5c:	cf ef       	ldi	r28, 0xFF	; 255
    2d5e:	ec cf       	rjmp	.-40     	; 0x2d38 <puts+0x1c>
    2d60:	8a e0       	ldi	r24, 0x0A	; 10
    2d62:	09 95       	icall
    2d64:	89 2b       	or	r24, r25
    2d66:	19 f0       	breq	.+6      	; 0x2d6e <puts+0x52>
    2d68:	8f ef       	ldi	r24, 0xFF	; 255
    2d6a:	9f ef       	ldi	r25, 0xFF	; 255
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <puts+0x56>
    2d6e:	8d 2f       	mov	r24, r29
    2d70:	9c 2f       	mov	r25, r28
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	08 95       	ret

00002d7c <sprintf>:
    2d7c:	ae e0       	ldi	r26, 0x0E	; 14
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e4 ec       	ldi	r30, 0xC4	; 196
    2d82:	f6 e1       	ldi	r31, 0x16	; 22
    2d84:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__prologue_saves__+0x1c>
    2d88:	0d 89       	ldd	r16, Y+21	; 0x15
    2d8a:	1e 89       	ldd	r17, Y+22	; 0x16
    2d8c:	86 e0       	ldi	r24, 0x06	; 6
    2d8e:	8c 83       	std	Y+4, r24	; 0x04
    2d90:	09 83       	std	Y+1, r16	; 0x01
    2d92:	1a 83       	std	Y+2, r17	; 0x02
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	9f e7       	ldi	r25, 0x7F	; 127
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	ae 01       	movw	r20, r28
    2d9e:	47 5e       	subi	r20, 0xE7	; 231
    2da0:	5f 4f       	sbci	r21, 0xFF	; 255
    2da2:	6f 89       	ldd	r22, Y+23	; 0x17
    2da4:	78 8d       	ldd	r23, Y+24	; 0x18
    2da6:	ce 01       	movw	r24, r28
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	0e 94 2f 10 	call	0x205e	; 0x205e <vfprintf>
    2dae:	ef 81       	ldd	r30, Y+7	; 0x07
    2db0:	f8 85       	ldd	r31, Y+8	; 0x08
    2db2:	e0 0f       	add	r30, r16
    2db4:	f1 1f       	adc	r31, r17
    2db6:	10 82       	st	Z, r1
    2db8:	2e 96       	adiw	r28, 0x0e	; 14
    2dba:	e4 e0       	ldi	r30, 0x04	; 4
    2dbc:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__epilogue_restores__+0x1c>

00002dc0 <sscanf>:
    2dc0:	ae e0       	ldi	r26, 0x0E	; 14
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e6 ee       	ldi	r30, 0xE6	; 230
    2dc6:	f6 e1       	ldi	r31, 0x16	; 22
    2dc8:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__+0x20>
    2dcc:	85 e0       	ldi	r24, 0x05	; 5
    2dce:	8c 83       	std	Y+4, r24	; 0x04
    2dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	ae 01       	movw	r20, r28
    2dda:	49 5e       	subi	r20, 0xE9	; 233
    2ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dde:	6d 89       	ldd	r22, Y+21	; 0x15
    2de0:	7e 89       	ldd	r23, Y+22	; 0x16
    2de2:	ce 01       	movw	r24, r28
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <vfscanf>
    2dea:	2e 96       	adiw	r28, 0x0e	; 14
    2dec:	e2 e0       	ldi	r30, 0x02	; 2
    2dee:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x20>

00002df2 <__ultoa_invert>:
    2df2:	fa 01       	movw	r30, r20
    2df4:	aa 27       	eor	r26, r26
    2df6:	28 30       	cpi	r18, 0x08	; 8
    2df8:	51 f1       	breq	.+84     	; 0x2e4e <__ultoa_invert+0x5c>
    2dfa:	20 31       	cpi	r18, 0x10	; 16
    2dfc:	81 f1       	breq	.+96     	; 0x2e5e <__ultoa_invert+0x6c>
    2dfe:	e8 94       	clt
    2e00:	6f 93       	push	r22
    2e02:	6e 7f       	andi	r22, 0xFE	; 254
    2e04:	6e 5f       	subi	r22, 0xFE	; 254
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	af 4f       	sbci	r26, 0xFF	; 255
    2e0e:	b1 e0       	ldi	r27, 0x01	; 1
    2e10:	3e d0       	rcall	.+124    	; 0x2e8e <__ultoa_invert+0x9c>
    2e12:	b4 e0       	ldi	r27, 0x04	; 4
    2e14:	3c d0       	rcall	.+120    	; 0x2e8e <__ultoa_invert+0x9c>
    2e16:	67 0f       	add	r22, r23
    2e18:	78 1f       	adc	r23, r24
    2e1a:	89 1f       	adc	r24, r25
    2e1c:	9a 1f       	adc	r25, r26
    2e1e:	a1 1d       	adc	r26, r1
    2e20:	68 0f       	add	r22, r24
    2e22:	79 1f       	adc	r23, r25
    2e24:	8a 1f       	adc	r24, r26
    2e26:	91 1d       	adc	r25, r1
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	6a 0f       	add	r22, r26
    2e2c:	71 1d       	adc	r23, r1
    2e2e:	81 1d       	adc	r24, r1
    2e30:	91 1d       	adc	r25, r1
    2e32:	a1 1d       	adc	r26, r1
    2e34:	20 d0       	rcall	.+64     	; 0x2e76 <__ultoa_invert+0x84>
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <__ultoa_invert+0x48>
    2e38:	68 94       	set
    2e3a:	3f 91       	pop	r19
    2e3c:	2a e0       	ldi	r18, 0x0A	; 10
    2e3e:	26 9f       	mul	r18, r22
    2e40:	11 24       	eor	r1, r1
    2e42:	30 19       	sub	r19, r0
    2e44:	30 5d       	subi	r19, 0xD0	; 208
    2e46:	31 93       	st	Z+, r19
    2e48:	de f6       	brtc	.-74     	; 0x2e00 <__ultoa_invert+0xe>
    2e4a:	cf 01       	movw	r24, r30
    2e4c:	08 95       	ret
    2e4e:	46 2f       	mov	r20, r22
    2e50:	47 70       	andi	r20, 0x07	; 7
    2e52:	40 5d       	subi	r20, 0xD0	; 208
    2e54:	41 93       	st	Z+, r20
    2e56:	b3 e0       	ldi	r27, 0x03	; 3
    2e58:	0f d0       	rcall	.+30     	; 0x2e78 <__ultoa_invert+0x86>
    2e5a:	c9 f7       	brne	.-14     	; 0x2e4e <__ultoa_invert+0x5c>
    2e5c:	f6 cf       	rjmp	.-20     	; 0x2e4a <__ultoa_invert+0x58>
    2e5e:	46 2f       	mov	r20, r22
    2e60:	4f 70       	andi	r20, 0x0F	; 15
    2e62:	40 5d       	subi	r20, 0xD0	; 208
    2e64:	4a 33       	cpi	r20, 0x3A	; 58
    2e66:	18 f0       	brcs	.+6      	; 0x2e6e <__ultoa_invert+0x7c>
    2e68:	49 5d       	subi	r20, 0xD9	; 217
    2e6a:	31 fd       	sbrc	r19, 1
    2e6c:	40 52       	subi	r20, 0x20	; 32
    2e6e:	41 93       	st	Z+, r20
    2e70:	02 d0       	rcall	.+4      	; 0x2e76 <__ultoa_invert+0x84>
    2e72:	a9 f7       	brne	.-22     	; 0x2e5e <__ultoa_invert+0x6c>
    2e74:	ea cf       	rjmp	.-44     	; 0x2e4a <__ultoa_invert+0x58>
    2e76:	b4 e0       	ldi	r27, 0x04	; 4
    2e78:	a6 95       	lsr	r26
    2e7a:	97 95       	ror	r25
    2e7c:	87 95       	ror	r24
    2e7e:	77 95       	ror	r23
    2e80:	67 95       	ror	r22
    2e82:	ba 95       	dec	r27
    2e84:	c9 f7       	brne	.-14     	; 0x2e78 <__ultoa_invert+0x86>
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	61 05       	cpc	r22, r1
    2e8a:	71 05       	cpc	r23, r1
    2e8c:	08 95       	ret
    2e8e:	9b 01       	movw	r18, r22
    2e90:	ac 01       	movw	r20, r24
    2e92:	0a 2e       	mov	r0, r26
    2e94:	06 94       	lsr	r0
    2e96:	57 95       	ror	r21
    2e98:	47 95       	ror	r20
    2e9a:	37 95       	ror	r19
    2e9c:	27 95       	ror	r18
    2e9e:	ba 95       	dec	r27
    2ea0:	c9 f7       	brne	.-14     	; 0x2e94 <__ultoa_invert+0xa2>
    2ea2:	62 0f       	add	r22, r18
    2ea4:	73 1f       	adc	r23, r19
    2ea6:	84 1f       	adc	r24, r20
    2ea8:	95 1f       	adc	r25, r21
    2eaa:	a0 1d       	adc	r26, r0
    2eac:	08 95       	ret

00002eae <putval>:
    2eae:	20 fd       	sbrc	r18, 0
    2eb0:	09 c0       	rjmp	.+18     	; 0x2ec4 <putval+0x16>
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	23 fd       	sbrc	r18, 3
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <putval+0x14>
    2eb8:	22 ff       	sbrs	r18, 2
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <putval+0x12>
    2ebc:	73 83       	std	Z+3, r23	; 0x03
    2ebe:	62 83       	std	Z+2, r22	; 0x02
    2ec0:	51 83       	std	Z+1, r21	; 0x01
    2ec2:	40 83       	st	Z, r20
    2ec4:	08 95       	ret

00002ec6 <mulacc>:
    2ec6:	44 fd       	sbrc	r20, 4
    2ec8:	17 c0       	rjmp	.+46     	; 0x2ef8 <mulacc+0x32>
    2eca:	46 fd       	sbrc	r20, 6
    2ecc:	17 c0       	rjmp	.+46     	; 0x2efc <mulacc+0x36>
    2ece:	ab 01       	movw	r20, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	da 01       	movw	r26, r20
    2ed4:	fb 01       	movw	r30, r22
    2ed6:	aa 0f       	add	r26, r26
    2ed8:	bb 1f       	adc	r27, r27
    2eda:	ee 1f       	adc	r30, r30
    2edc:	ff 1f       	adc	r31, r31
    2ede:	10 94       	com	r1
    2ee0:	d1 f7       	brne	.-12     	; 0x2ed6 <mulacc+0x10>
    2ee2:	4a 0f       	add	r20, r26
    2ee4:	5b 1f       	adc	r21, r27
    2ee6:	6e 1f       	adc	r22, r30
    2ee8:	7f 1f       	adc	r23, r31
    2eea:	cb 01       	movw	r24, r22
    2eec:	ba 01       	movw	r22, r20
    2eee:	66 0f       	add	r22, r22
    2ef0:	77 1f       	adc	r23, r23
    2ef2:	88 1f       	adc	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	09 c0       	rjmp	.+18     	; 0x2f0a <mulacc+0x44>
    2ef8:	33 e0       	ldi	r19, 0x03	; 3
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <mulacc+0x38>
    2efc:	34 e0       	ldi	r19, 0x04	; 4
    2efe:	66 0f       	add	r22, r22
    2f00:	77 1f       	adc	r23, r23
    2f02:	88 1f       	adc	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	31 50       	subi	r19, 0x01	; 1
    2f08:	d1 f7       	brne	.-12     	; 0x2efe <mulacc+0x38>
    2f0a:	62 0f       	add	r22, r18
    2f0c:	71 1d       	adc	r23, r1
    2f0e:	81 1d       	adc	r24, r1
    2f10:	91 1d       	adc	r25, r1
    2f12:	08 95       	ret

00002f14 <skip_spaces>:
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	8c 01       	movw	r16, r24
    2f1e:	c8 01       	movw	r24, r16
    2f20:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    2f24:	ec 01       	movw	r28, r24
    2f26:	97 fd       	sbrc	r25, 7
    2f28:	08 c0       	rjmp	.+16     	; 0x2f3a <skip_spaces+0x26>
    2f2a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <isspace>
    2f2e:	89 2b       	or	r24, r25
    2f30:	b1 f7       	brne	.-20     	; 0x2f1e <skip_spaces+0xa>
    2f32:	b8 01       	movw	r22, r16
    2f34:	ce 01       	movw	r24, r28
    2f36:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <ungetc>
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	08 95       	ret

00002f46 <conv_int>:
    2f46:	8f 92       	push	r8
    2f48:	9f 92       	push	r9
    2f4a:	af 92       	push	r10
    2f4c:	bf 92       	push	r11
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	8c 01       	movw	r16, r24
    2f5c:	d6 2f       	mov	r29, r22
    2f5e:	7a 01       	movw	r14, r20
    2f60:	b2 2e       	mov	r11, r18
    2f62:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    2f66:	9c 01       	movw	r18, r24
    2f68:	33 27       	eor	r19, r19
    2f6a:	2b 32       	cpi	r18, 0x2B	; 43
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	31 f0       	breq	.+12     	; 0x2f7c <conv_int+0x36>
    2f70:	2d 32       	cpi	r18, 0x2D	; 45
    2f72:	31 05       	cpc	r19, r1
    2f74:	61 f4       	brne	.+24     	; 0x2f8e <conv_int+0x48>
    2f76:	8b 2d       	mov	r24, r11
    2f78:	80 68       	ori	r24, 0x80	; 128
    2f7a:	b8 2e       	mov	r11, r24
    2f7c:	d1 50       	subi	r29, 0x01	; 1
    2f7e:	11 f4       	brne	.+4      	; 0x2f84 <conv_int+0x3e>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	68 c0       	rjmp	.+208    	; 0x3054 <conv_int+0x10e>
    2f84:	c8 01       	movw	r24, r16
    2f86:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    2f8a:	97 fd       	sbrc	r25, 7
    2f8c:	f9 cf       	rjmp	.-14     	; 0x2f80 <conv_int+0x3a>
    2f8e:	cb 2d       	mov	r28, r11
    2f90:	cd 7f       	andi	r28, 0xFD	; 253
    2f92:	2b 2d       	mov	r18, r11
    2f94:	20 73       	andi	r18, 0x30	; 48
    2f96:	09 f5       	brne	.+66     	; 0x2fda <conv_int+0x94>
    2f98:	80 33       	cpi	r24, 0x30	; 48
    2f9a:	f9 f4       	brne	.+62     	; 0x2fda <conv_int+0x94>
    2f9c:	aa 24       	eor	r10, r10
    2f9e:	aa 94       	dec	r10
    2fa0:	ad 0e       	add	r10, r29
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <conv_int+0x60>
    2fa4:	43 c0       	rjmp	.+134    	; 0x302c <conv_int+0xe6>
    2fa6:	c8 01       	movw	r24, r16
    2fa8:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    2fac:	97 fd       	sbrc	r25, 7
    2fae:	3e c0       	rjmp	.+124    	; 0x302c <conv_int+0xe6>
    2fb0:	9c 01       	movw	r18, r24
    2fb2:	2f 7d       	andi	r18, 0xDF	; 223
    2fb4:	33 27       	eor	r19, r19
    2fb6:	28 35       	cpi	r18, 0x58	; 88
    2fb8:	31 05       	cpc	r19, r1
    2fba:	49 f4       	brne	.+18     	; 0x2fce <conv_int+0x88>
    2fbc:	c2 64       	ori	r28, 0x42	; 66
    2fbe:	d2 50       	subi	r29, 0x02	; 2
    2fc0:	a9 f1       	breq	.+106    	; 0x302c <conv_int+0xe6>
    2fc2:	c8 01       	movw	r24, r16
    2fc4:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    2fc8:	97 ff       	sbrs	r25, 7
    2fca:	07 c0       	rjmp	.+14     	; 0x2fda <conv_int+0x94>
    2fcc:	2f c0       	rjmp	.+94     	; 0x302c <conv_int+0xe6>
    2fce:	b6 fe       	sbrs	r11, 6
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <conv_int+0x90>
    2fd2:	c2 60       	ori	r28, 0x02	; 2
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <conv_int+0x92>
    2fd6:	c2 61       	ori	r28, 0x12	; 18
    2fd8:	da 2d       	mov	r29, r10
    2fda:	81 2c       	mov	r8, r1
    2fdc:	91 2c       	mov	r9, r1
    2fde:	54 01       	movw	r10, r8
    2fe0:	20 ed       	ldi	r18, 0xD0	; 208
    2fe2:	28 0f       	add	r18, r24
    2fe4:	28 30       	cpi	r18, 0x08	; 8
    2fe6:	80 f0       	brcs	.+32     	; 0x3008 <conv_int+0xc2>
    2fe8:	c4 ff       	sbrs	r28, 4
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <conv_int+0xae>
    2fec:	b8 01       	movw	r22, r16
    2fee:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <ungetc>
    2ff2:	19 c0       	rjmp	.+50     	; 0x3026 <conv_int+0xe0>
    2ff4:	2a 30       	cpi	r18, 0x0A	; 10
    2ff6:	40 f0       	brcs	.+16     	; 0x3008 <conv_int+0xc2>
    2ff8:	c6 ff       	sbrs	r28, 6
    2ffa:	f8 cf       	rjmp	.-16     	; 0x2fec <conv_int+0xa6>
    2ffc:	2f 7d       	andi	r18, 0xDF	; 223
    2ffe:	3f ee       	ldi	r19, 0xEF	; 239
    3000:	32 0f       	add	r19, r18
    3002:	36 30       	cpi	r19, 0x06	; 6
    3004:	98 f7       	brcc	.-26     	; 0x2fec <conv_int+0xa6>
    3006:	27 50       	subi	r18, 0x07	; 7
    3008:	4c 2f       	mov	r20, r28
    300a:	c5 01       	movw	r24, r10
    300c:	b4 01       	movw	r22, r8
    300e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <mulacc>
    3012:	4b 01       	movw	r8, r22
    3014:	5c 01       	movw	r10, r24
    3016:	c2 60       	ori	r28, 0x02	; 2
    3018:	d1 50       	subi	r29, 0x01	; 1
    301a:	59 f0       	breq	.+22     	; 0x3032 <conv_int+0xec>
    301c:	c8 01       	movw	r24, r16
    301e:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    3022:	97 ff       	sbrs	r25, 7
    3024:	dd cf       	rjmp	.-70     	; 0x2fe0 <conv_int+0x9a>
    3026:	c1 fd       	sbrc	r28, 1
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <conv_int+0xec>
    302a:	aa cf       	rjmp	.-172    	; 0x2f80 <conv_int+0x3a>
    302c:	81 2c       	mov	r8, r1
    302e:	91 2c       	mov	r9, r1
    3030:	54 01       	movw	r10, r8
    3032:	c7 ff       	sbrs	r28, 7
    3034:	08 c0       	rjmp	.+16     	; 0x3046 <conv_int+0x100>
    3036:	b0 94       	com	r11
    3038:	a0 94       	com	r10
    303a:	90 94       	com	r9
    303c:	80 94       	com	r8
    303e:	81 1c       	adc	r8, r1
    3040:	91 1c       	adc	r9, r1
    3042:	a1 1c       	adc	r10, r1
    3044:	b1 1c       	adc	r11, r1
    3046:	2c 2f       	mov	r18, r28
    3048:	b5 01       	movw	r22, r10
    304a:	a4 01       	movw	r20, r8
    304c:	c7 01       	movw	r24, r14
    304e:	0e 94 57 17 	call	0x2eae	; 0x2eae <putval>
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	ff 90       	pop	r15
    305e:	ef 90       	pop	r14
    3060:	bf 90       	pop	r11
    3062:	af 90       	pop	r10
    3064:	9f 90       	pop	r9
    3066:	8f 90       	pop	r8
    3068:	08 95       	ret

0000306a <conv_brk>:
    306a:	a0 e2       	ldi	r26, 0x20	; 32
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	eb e3       	ldi	r30, 0x3B	; 59
    3070:	f8 e1       	ldi	r31, 0x18	; 24
    3072:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x6>
    3076:	5c 01       	movw	r10, r24
    3078:	96 2e       	mov	r9, r22
    307a:	7a 01       	movw	r14, r20
    307c:	f9 01       	movw	r30, r18
    307e:	8e 01       	movw	r16, r28
    3080:	0f 5f       	subi	r16, 0xFF	; 255
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	68 01       	movw	r12, r16
    3086:	80 e2       	ldi	r24, 0x20	; 32
    3088:	d8 01       	movw	r26, r16
    308a:	1d 92       	st	X+, r1
    308c:	8a 95       	dec	r24
    308e:	e9 f7       	brne	.-6      	; 0x308a <conv_brk+0x20>
    3090:	d5 01       	movw	r26, r10
    3092:	13 96       	adiw	r26, 0x03	; 3
    3094:	8c 90       	ld	r8, X
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	61 2c       	mov	r6, r1
    309c:	71 2c       	mov	r7, r1
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	61 e0       	ldi	r22, 0x01	; 1
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	83 fc       	sbrc	r8, 3
    30a6:	25 91       	lpm	r18, Z+
    30a8:	83 fe       	sbrs	r8, 3
    30aa:	21 91       	ld	r18, Z+
    30ac:	8f 01       	movw	r16, r30
    30ae:	52 2e       	mov	r5, r18
    30b0:	21 11       	cpse	r18, r1
    30b2:	03 c0       	rjmp	.+6      	; 0x30ba <conv_brk+0x50>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	92 c0       	rjmp	.+292    	; 0x31de <conv_brk+0x174>
    30ba:	2e 35       	cpi	r18, 0x5E	; 94
    30bc:	11 f4       	brne	.+4      	; 0x30c2 <conv_brk+0x58>
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	51 f1       	breq	.+84     	; 0x3116 <conv_brk+0xac>
    30c2:	43 2f       	mov	r20, r19
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	48 17       	cp	r20, r24
    30c8:	59 07       	cpc	r21, r25
    30ca:	3c f4       	brge	.+14     	; 0x30da <conv_brk+0x70>
    30cc:	2d 35       	cpi	r18, 0x5D	; 93
    30ce:	59 f1       	breq	.+86     	; 0x3126 <conv_brk+0xbc>
    30d0:	2d 32       	cpi	r18, 0x2D	; 45
    30d2:	19 f4       	brne	.+6      	; 0x30da <conv_brk+0x70>
    30d4:	77 20       	and	r7, r7
    30d6:	09 f1       	breq	.+66     	; 0x311a <conv_brk+0xb0>
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <conv_brk+0x76>
    30da:	77 20       	and	r7, r7
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <conv_brk+0x76>
    30de:	6a c0       	rjmp	.+212    	; 0x31b4 <conv_brk+0x14a>
    30e0:	45 2d       	mov	r20, r5
    30e2:	46 95       	lsr	r20
    30e4:	46 95       	lsr	r20
    30e6:	46 95       	lsr	r20
    30e8:	d6 01       	movw	r26, r12
    30ea:	a4 0f       	add	r26, r20
    30ec:	b1 1d       	adc	r27, r1
    30ee:	45 2d       	mov	r20, r5
    30f0:	47 70       	andi	r20, 0x07	; 7
    30f2:	8b 01       	movw	r16, r22
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <conv_brk+0x90>
    30f6:	00 0f       	add	r16, r16
    30f8:	11 1f       	adc	r17, r17
    30fa:	4a 95       	dec	r20
    30fc:	e2 f7       	brpl	.-8      	; 0x30f6 <conv_brk+0x8c>
    30fe:	a8 01       	movw	r20, r16
    3100:	5c 91       	ld	r21, X
    3102:	45 2b       	or	r20, r21
    3104:	4c 93       	st	X, r20
    3106:	65 14       	cp	r6, r5
    3108:	59 f0       	breq	.+22     	; 0x3120 <conv_brk+0xb6>
    310a:	56 14       	cp	r5, r6
    310c:	10 f4       	brcc	.+4      	; 0x3112 <conv_brk+0xa8>
    310e:	53 94       	inc	r5
    3110:	e7 cf       	rjmp	.-50     	; 0x30e0 <conv_brk+0x76>
    3112:	5a 94       	dec	r5
    3114:	e5 cf       	rjmp	.-54     	; 0x30e0 <conv_brk+0x76>
    3116:	31 e0       	ldi	r19, 0x01	; 1
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <conv_brk+0xb8>
    311a:	77 24       	eor	r7, r7
    311c:	73 94       	inc	r7
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <conv_brk+0xb8>
    3120:	71 2c       	mov	r7, r1
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	bf cf       	rjmp	.-130    	; 0x30a4 <conv_brk+0x3a>
    3126:	77 20       	and	r7, r7
    3128:	19 f0       	breq	.+6      	; 0x3130 <conv_brk+0xc6>
    312a:	8e 81       	ldd	r24, Y+6	; 0x06
    312c:	80 62       	ori	r24, 0x20	; 32
    312e:	8e 83       	std	Y+6, r24	; 0x06
    3130:	31 11       	cpse	r19, r1
    3132:	03 c0       	rjmp	.+6      	; 0x313a <conv_brk+0xd0>
    3134:	88 24       	eor	r8, r8
    3136:	83 94       	inc	r8
    3138:	17 c0       	rjmp	.+46     	; 0x3168 <conv_brk+0xfe>
    313a:	f6 01       	movw	r30, r12
    313c:	9e 01       	movw	r18, r28
    313e:	2f 5d       	subi	r18, 0xDF	; 223
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	80 95       	com	r24
    3146:	81 93       	st	Z+, r24
    3148:	2e 17       	cp	r18, r30
    314a:	3f 07       	cpc	r19, r31
    314c:	d1 f7       	brne	.-12     	; 0x3142 <conv_brk+0xd8>
    314e:	f2 cf       	rjmp	.-28     	; 0x3134 <conv_brk+0xca>
    3150:	e1 14       	cp	r14, r1
    3152:	f1 04       	cpc	r15, r1
    3154:	29 f0       	breq	.+10     	; 0x3160 <conv_brk+0xf6>
    3156:	d7 01       	movw	r26, r14
    3158:	8c 93       	st	X, r24
    315a:	f7 01       	movw	r30, r14
    315c:	31 96       	adiw	r30, 0x01	; 1
    315e:	7f 01       	movw	r14, r30
    3160:	9a 94       	dec	r9
    3162:	81 2c       	mov	r8, r1
    3164:	99 20       	and	r9, r9
    3166:	f9 f0       	breq	.+62     	; 0x31a6 <conv_brk+0x13c>
    3168:	c5 01       	movw	r24, r10
    316a:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    316e:	97 fd       	sbrc	r25, 7
    3170:	18 c0       	rjmp	.+48     	; 0x31a2 <conv_brk+0x138>
    3172:	fc 01       	movw	r30, r24
    3174:	ff 27       	eor	r31, r31
    3176:	23 e0       	ldi	r18, 0x03	; 3
    3178:	f5 95       	asr	r31
    317a:	e7 95       	ror	r30
    317c:	2a 95       	dec	r18
    317e:	e1 f7       	brne	.-8      	; 0x3178 <conv_brk+0x10e>
    3180:	ec 0d       	add	r30, r12
    3182:	fd 1d       	adc	r31, r13
    3184:	20 81       	ld	r18, Z
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	ac 01       	movw	r20, r24
    318a:	47 70       	andi	r20, 0x07	; 7
    318c:	55 27       	eor	r21, r21
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <conv_brk+0x12a>
    3190:	35 95       	asr	r19
    3192:	27 95       	ror	r18
    3194:	4a 95       	dec	r20
    3196:	e2 f7       	brpl	.-8      	; 0x3190 <conv_brk+0x126>
    3198:	20 fd       	sbrc	r18, 0
    319a:	da cf       	rjmp	.-76     	; 0x3150 <conv_brk+0xe6>
    319c:	b5 01       	movw	r22, r10
    319e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <ungetc>
    31a2:	81 10       	cpse	r8, r1
    31a4:	87 cf       	rjmp	.-242    	; 0x30b4 <conv_brk+0x4a>
    31a6:	e1 14       	cp	r14, r1
    31a8:	f1 04       	cpc	r15, r1
    31aa:	11 f0       	breq	.+4      	; 0x31b0 <conv_brk+0x146>
    31ac:	d7 01       	movw	r26, r14
    31ae:	1c 92       	st	X, r1
    31b0:	c8 01       	movw	r24, r16
    31b2:	15 c0       	rjmp	.+42     	; 0x31de <conv_brk+0x174>
    31b4:	42 2f       	mov	r20, r18
    31b6:	46 95       	lsr	r20
    31b8:	46 95       	lsr	r20
    31ba:	46 95       	lsr	r20
    31bc:	d6 01       	movw	r26, r12
    31be:	a4 0f       	add	r26, r20
    31c0:	b1 1d       	adc	r27, r1
    31c2:	42 2f       	mov	r20, r18
    31c4:	47 70       	andi	r20, 0x07	; 7
    31c6:	8b 01       	movw	r16, r22
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <conv_brk+0x164>
    31ca:	00 0f       	add	r16, r16
    31cc:	11 1f       	adc	r17, r17
    31ce:	4a 95       	dec	r20
    31d0:	e2 f7       	brpl	.-8      	; 0x31ca <conv_brk+0x160>
    31d2:	a8 01       	movw	r20, r16
    31d4:	5c 91       	ld	r21, X
    31d6:	45 2b       	or	r20, r21
    31d8:	4c 93       	st	X, r20
    31da:	62 2e       	mov	r6, r18
    31dc:	a2 cf       	rjmp	.-188    	; 0x3122 <conv_brk+0xb8>
    31de:	a0 96       	adiw	r28, 0x20	; 32
    31e0:	ef e0       	ldi	r30, 0x0F	; 15
    31e2:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x6>

000031e6 <vfscanf>:
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e9 ef       	ldi	r30, 0xF9	; 249
    31ec:	f8 e1       	ldi	r31, 0x18	; 24
    31ee:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x6>
    31f2:	6c 01       	movw	r12, r24
    31f4:	eb 01       	movw	r28, r22
    31f6:	5a 01       	movw	r10, r20
    31f8:	fc 01       	movw	r30, r24
    31fa:	16 82       	std	Z+6, r1	; 0x06
    31fc:	17 82       	std	Z+7, r1	; 0x07
    31fe:	51 2c       	mov	r5, r1
    3200:	f6 01       	movw	r30, r12
    3202:	e3 80       	ldd	r14, Z+3	; 0x03
    3204:	fe 01       	movw	r30, r28
    3206:	e3 fc       	sbrc	r14, 3
    3208:	85 91       	lpm	r24, Z+
    320a:	e3 fe       	sbrs	r14, 3
    320c:	81 91       	ld	r24, Z+
    320e:	18 2f       	mov	r17, r24
    3210:	ef 01       	movw	r28, r30
    3212:	88 23       	and	r24, r24
    3214:	09 f4       	brne	.+2      	; 0x3218 <vfscanf+0x32>
    3216:	ee c0       	rjmp	.+476    	; 0x33f4 <vfscanf+0x20e>
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <isspace>
    321e:	89 2b       	or	r24, r25
    3220:	21 f0       	breq	.+8      	; 0x322a <vfscanf+0x44>
    3222:	c6 01       	movw	r24, r12
    3224:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <skip_spaces>
    3228:	eb cf       	rjmp	.-42     	; 0x3200 <vfscanf+0x1a>
    322a:	15 32       	cpi	r17, 0x25	; 37
    322c:	41 f4       	brne	.+16     	; 0x323e <vfscanf+0x58>
    322e:	fe 01       	movw	r30, r28
    3230:	e3 fc       	sbrc	r14, 3
    3232:	15 91       	lpm	r17, Z+
    3234:	e3 fe       	sbrs	r14, 3
    3236:	11 91       	ld	r17, Z+
    3238:	ef 01       	movw	r28, r30
    323a:	15 32       	cpi	r17, 0x25	; 37
    323c:	81 f4       	brne	.+32     	; 0x325e <vfscanf+0x78>
    323e:	c6 01       	movw	r24, r12
    3240:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    3244:	97 fd       	sbrc	r25, 7
    3246:	d4 c0       	rjmp	.+424    	; 0x33f0 <vfscanf+0x20a>
    3248:	41 2f       	mov	r20, r17
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	9c 01       	movw	r18, r24
    324e:	33 27       	eor	r19, r19
    3250:	24 17       	cp	r18, r20
    3252:	35 07       	cpc	r19, r21
    3254:	a9 f2       	breq	.-86     	; 0x3200 <vfscanf+0x1a>
    3256:	b6 01       	movw	r22, r12
    3258:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <ungetc>
    325c:	cb c0       	rjmp	.+406    	; 0x33f4 <vfscanf+0x20e>
    325e:	1a 32       	cpi	r17, 0x2A	; 42
    3260:	39 f4       	brne	.+14     	; 0x3270 <vfscanf+0x8a>
    3262:	e3 fc       	sbrc	r14, 3
    3264:	15 91       	lpm	r17, Z+
    3266:	e3 fe       	sbrs	r14, 3
    3268:	11 91       	ld	r17, Z+
    326a:	ef 01       	movw	r28, r30
    326c:	01 e0       	ldi	r16, 0x01	; 1
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <vfscanf+0x8c>
    3270:	00 e0       	ldi	r16, 0x00	; 0
    3272:	f1 2c       	mov	r15, r1
    3274:	20 ed       	ldi	r18, 0xD0	; 208
    3276:	21 0f       	add	r18, r17
    3278:	2a 30       	cpi	r18, 0x0A	; 10
    327a:	80 f4       	brcc	.+32     	; 0x329c <vfscanf+0xb6>
    327c:	02 60       	ori	r16, 0x02	; 2
    327e:	6f 2d       	mov	r22, r15
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	40 e2       	ldi	r20, 0x20	; 32
    3288:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <mulacc>
    328c:	f6 2e       	mov	r15, r22
    328e:	fe 01       	movw	r30, r28
    3290:	e3 fc       	sbrc	r14, 3
    3292:	15 91       	lpm	r17, Z+
    3294:	e3 fe       	sbrs	r14, 3
    3296:	11 91       	ld	r17, Z+
    3298:	ef 01       	movw	r28, r30
    329a:	ec cf       	rjmp	.-40     	; 0x3274 <vfscanf+0x8e>
    329c:	01 ff       	sbrs	r16, 1
    329e:	03 c0       	rjmp	.+6      	; 0x32a6 <vfscanf+0xc0>
    32a0:	f1 10       	cpse	r15, r1
    32a2:	03 c0       	rjmp	.+6      	; 0x32aa <vfscanf+0xc4>
    32a4:	a7 c0       	rjmp	.+334    	; 0x33f4 <vfscanf+0x20e>
    32a6:	ff 24       	eor	r15, r15
    32a8:	fa 94       	dec	r15
    32aa:	18 36       	cpi	r17, 0x68	; 104
    32ac:	19 f0       	breq	.+6      	; 0x32b4 <vfscanf+0xce>
    32ae:	1c 36       	cpi	r17, 0x6C	; 108
    32b0:	51 f0       	breq	.+20     	; 0x32c6 <vfscanf+0xe0>
    32b2:	10 c0       	rjmp	.+32     	; 0x32d4 <vfscanf+0xee>
    32b4:	fe 01       	movw	r30, r28
    32b6:	e3 fc       	sbrc	r14, 3
    32b8:	15 91       	lpm	r17, Z+
    32ba:	e3 fe       	sbrs	r14, 3
    32bc:	11 91       	ld	r17, Z+
    32be:	ef 01       	movw	r28, r30
    32c0:	18 36       	cpi	r17, 0x68	; 104
    32c2:	41 f4       	brne	.+16     	; 0x32d4 <vfscanf+0xee>
    32c4:	08 60       	ori	r16, 0x08	; 8
    32c6:	04 60       	ori	r16, 0x04	; 4
    32c8:	fe 01       	movw	r30, r28
    32ca:	e3 fc       	sbrc	r14, 3
    32cc:	15 91       	lpm	r17, Z+
    32ce:	e3 fe       	sbrs	r14, 3
    32d0:	11 91       	ld	r17, Z+
    32d2:	ef 01       	movw	r28, r30
    32d4:	11 23       	and	r17, r17
    32d6:	09 f4       	brne	.+2      	; 0x32da <vfscanf+0xf4>
    32d8:	8d c0       	rjmp	.+282    	; 0x33f4 <vfscanf+0x20e>
    32da:	61 2f       	mov	r22, r17
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	82 e9       	ldi	r24, 0x92	; 146
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	0e 94 07 1a 	call	0x340e	; 0x340e <strchr_P>
    32e6:	89 2b       	or	r24, r25
    32e8:	09 f4       	brne	.+2      	; 0x32ec <vfscanf+0x106>
    32ea:	84 c0       	rjmp	.+264    	; 0x33f4 <vfscanf+0x20e>
    32ec:	00 fd       	sbrc	r16, 0
    32ee:	07 c0       	rjmp	.+14     	; 0x32fe <vfscanf+0x118>
    32f0:	f5 01       	movw	r30, r10
    32f2:	80 80       	ld	r8, Z
    32f4:	91 80       	ldd	r9, Z+1	; 0x01
    32f6:	c5 01       	movw	r24, r10
    32f8:	02 96       	adiw	r24, 0x02	; 2
    32fa:	5c 01       	movw	r10, r24
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <vfscanf+0x11c>
    32fe:	81 2c       	mov	r8, r1
    3300:	91 2c       	mov	r9, r1
    3302:	1e 36       	cpi	r17, 0x6E	; 110
    3304:	51 f4       	brne	.+20     	; 0x331a <vfscanf+0x134>
    3306:	f6 01       	movw	r30, r12
    3308:	46 81       	ldd	r20, Z+6	; 0x06
    330a:	57 81       	ldd	r21, Z+7	; 0x07
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	20 2f       	mov	r18, r16
    3312:	c4 01       	movw	r24, r8
    3314:	0e 94 57 17 	call	0x2eae	; 0x2eae <putval>
    3318:	73 cf       	rjmp	.-282    	; 0x3200 <vfscanf+0x1a>
    331a:	13 36       	cpi	r17, 0x63	; 99
    331c:	a9 f4       	brne	.+42     	; 0x3348 <vfscanf+0x162>
    331e:	01 fd       	sbrc	r16, 1
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <vfscanf+0x140>
    3322:	ff 24       	eor	r15, r15
    3324:	f3 94       	inc	r15
    3326:	c6 01       	movw	r24, r12
    3328:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    332c:	97 fd       	sbrc	r25, 7
    332e:	60 c0       	rjmp	.+192    	; 0x33f0 <vfscanf+0x20a>
    3330:	81 14       	cp	r8, r1
    3332:	91 04       	cpc	r9, r1
    3334:	29 f0       	breq	.+10     	; 0x3340 <vfscanf+0x15a>
    3336:	f4 01       	movw	r30, r8
    3338:	80 83       	st	Z, r24
    333a:	c4 01       	movw	r24, r8
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	4c 01       	movw	r8, r24
    3340:	fa 94       	dec	r15
    3342:	f1 10       	cpse	r15, r1
    3344:	f0 cf       	rjmp	.-32     	; 0x3326 <vfscanf+0x140>
    3346:	50 c0       	rjmp	.+160    	; 0x33e8 <vfscanf+0x202>
    3348:	1b 35       	cpi	r17, 0x5B	; 91
    334a:	59 f4       	brne	.+22     	; 0x3362 <vfscanf+0x17c>
    334c:	9e 01       	movw	r18, r28
    334e:	a4 01       	movw	r20, r8
    3350:	6f 2d       	mov	r22, r15
    3352:	c6 01       	movw	r24, r12
    3354:	0e 94 35 18 	call	0x306a	; 0x306a <conv_brk>
    3358:	ec 01       	movw	r28, r24
    335a:	89 2b       	or	r24, r25
    335c:	09 f0       	breq	.+2      	; 0x3360 <vfscanf+0x17a>
    335e:	44 c0       	rjmp	.+136    	; 0x33e8 <vfscanf+0x202>
    3360:	3e c0       	rjmp	.+124    	; 0x33de <vfscanf+0x1f8>
    3362:	c6 01       	movw	r24, r12
    3364:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <skip_spaces>
    3368:	97 fd       	sbrc	r25, 7
    336a:	42 c0       	rjmp	.+132    	; 0x33f0 <vfscanf+0x20a>
    336c:	1f 36       	cpi	r17, 0x6F	; 111
    336e:	61 f1       	breq	.+88     	; 0x33c8 <vfscanf+0x1e2>
    3370:	28 f4       	brcc	.+10     	; 0x337c <vfscanf+0x196>
    3372:	14 36       	cpi	r17, 0x64	; 100
    3374:	39 f1       	breq	.+78     	; 0x33c4 <vfscanf+0x1de>
    3376:	19 36       	cpi	r17, 0x69	; 105
    3378:	51 f1       	breq	.+84     	; 0x33ce <vfscanf+0x1e8>
    337a:	28 c0       	rjmp	.+80     	; 0x33cc <vfscanf+0x1e6>
    337c:	13 37       	cpi	r17, 0x73	; 115
    337e:	71 f0       	breq	.+28     	; 0x339c <vfscanf+0x1b6>
    3380:	15 37       	cpi	r17, 0x75	; 117
    3382:	01 f1       	breq	.+64     	; 0x33c4 <vfscanf+0x1de>
    3384:	23 c0       	rjmp	.+70     	; 0x33cc <vfscanf+0x1e6>
    3386:	81 14       	cp	r8, r1
    3388:	91 04       	cpc	r9, r1
    338a:	29 f0       	breq	.+10     	; 0x3396 <vfscanf+0x1b0>
    338c:	f4 01       	movw	r30, r8
    338e:	60 82       	st	Z, r6
    3390:	c4 01       	movw	r24, r8
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	4c 01       	movw	r8, r24
    3396:	fa 94       	dec	r15
    3398:	ff 20       	and	r15, r15
    339a:	71 f0       	breq	.+28     	; 0x33b8 <vfscanf+0x1d2>
    339c:	c6 01       	movw	r24, r12
    339e:	0e 94 12 1a 	call	0x3424	; 0x3424 <fgetc>
    33a2:	3c 01       	movw	r6, r24
    33a4:	97 fd       	sbrc	r25, 7
    33a6:	08 c0       	rjmp	.+16     	; 0x33b8 <vfscanf+0x1d2>
    33a8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <isspace>
    33ac:	89 2b       	or	r24, r25
    33ae:	59 f3       	breq	.-42     	; 0x3386 <vfscanf+0x1a0>
    33b0:	b6 01       	movw	r22, r12
    33b2:	c3 01       	movw	r24, r6
    33b4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <ungetc>
    33b8:	81 14       	cp	r8, r1
    33ba:	91 04       	cpc	r9, r1
    33bc:	a9 f0       	breq	.+42     	; 0x33e8 <vfscanf+0x202>
    33be:	f4 01       	movw	r30, r8
    33c0:	10 82       	st	Z, r1
    33c2:	12 c0       	rjmp	.+36     	; 0x33e8 <vfscanf+0x202>
    33c4:	00 62       	ori	r16, 0x20	; 32
    33c6:	03 c0       	rjmp	.+6      	; 0x33ce <vfscanf+0x1e8>
    33c8:	00 61       	ori	r16, 0x10	; 16
    33ca:	01 c0       	rjmp	.+2      	; 0x33ce <vfscanf+0x1e8>
    33cc:	00 64       	ori	r16, 0x40	; 64
    33ce:	20 2f       	mov	r18, r16
    33d0:	a4 01       	movw	r20, r8
    33d2:	6f 2d       	mov	r22, r15
    33d4:	c6 01       	movw	r24, r12
    33d6:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <conv_int>
    33da:	81 11       	cpse	r24, r1
    33dc:	05 c0       	rjmp	.+10     	; 0x33e8 <vfscanf+0x202>
    33de:	f6 01       	movw	r30, r12
    33e0:	83 81       	ldd	r24, Z+3	; 0x03
    33e2:	80 73       	andi	r24, 0x30	; 48
    33e4:	29 f4       	brne	.+10     	; 0x33f0 <vfscanf+0x20a>
    33e6:	06 c0       	rjmp	.+12     	; 0x33f4 <vfscanf+0x20e>
    33e8:	00 fd       	sbrc	r16, 0
    33ea:	0a cf       	rjmp	.-492    	; 0x3200 <vfscanf+0x1a>
    33ec:	53 94       	inc	r5
    33ee:	08 cf       	rjmp	.-496    	; 0x3200 <vfscanf+0x1a>
    33f0:	55 20       	and	r5, r5
    33f2:	19 f0       	breq	.+6      	; 0x33fa <vfscanf+0x214>
    33f4:	85 2d       	mov	r24, r5
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <vfscanf+0x218>
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	9f ef       	ldi	r25, 0xFF	; 255
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	ef e0       	ldi	r30, 0x0F	; 15
    3404:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x6>

00003408 <__ctype_isfalse>:
    3408:	99 27       	eor	r25, r25
    340a:	88 27       	eor	r24, r24

0000340c <__ctype_istrue>:
    340c:	08 95       	ret

0000340e <strchr_P>:
    340e:	fc 01       	movw	r30, r24
    3410:	05 90       	lpm	r0, Z+
    3412:	06 16       	cp	r0, r22
    3414:	21 f0       	breq	.+8      	; 0x341e <strchr_P+0x10>
    3416:	00 20       	and	r0, r0
    3418:	d9 f7       	brne	.-10     	; 0x3410 <strchr_P+0x2>
    341a:	c0 01       	movw	r24, r0
    341c:	08 95       	ret
    341e:	31 97       	sbiw	r30, 0x01	; 1
    3420:	cf 01       	movw	r24, r30
    3422:	08 95       	ret

00003424 <fgetc>:
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	ec 01       	movw	r28, r24
    342a:	2b 81       	ldd	r18, Y+3	; 0x03
    342c:	20 ff       	sbrs	r18, 0
    342e:	33 c0       	rjmp	.+102    	; 0x3496 <fgetc+0x72>
    3430:	26 ff       	sbrs	r18, 6
    3432:	0a c0       	rjmp	.+20     	; 0x3448 <fgetc+0x24>
    3434:	2f 7b       	andi	r18, 0xBF	; 191
    3436:	2b 83       	std	Y+3, r18	; 0x03
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	9f 81       	ldd	r25, Y+7	; 0x07
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	8e 83       	std	Y+6, r24	; 0x06
    3440:	9f 83       	std	Y+7, r25	; 0x07
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	29 c0       	rjmp	.+82     	; 0x349a <fgetc+0x76>
    3448:	22 ff       	sbrs	r18, 2
    344a:	0f c0       	rjmp	.+30     	; 0x346a <fgetc+0x46>
    344c:	e8 81       	ld	r30, Y
    344e:	f9 81       	ldd	r31, Y+1	; 0x01
    3450:	80 81       	ld	r24, Z
    3452:	08 2e       	mov	r0, r24
    3454:	00 0c       	add	r0, r0
    3456:	99 0b       	sbc	r25, r25
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	19 f4       	brne	.+6      	; 0x3462 <fgetc+0x3e>
    345c:	20 62       	ori	r18, 0x20	; 32
    345e:	2b 83       	std	Y+3, r18	; 0x03
    3460:	1a c0       	rjmp	.+52     	; 0x3496 <fgetc+0x72>
    3462:	31 96       	adiw	r30, 0x01	; 1
    3464:	e8 83       	st	Y, r30
    3466:	f9 83       	std	Y+1, r31	; 0x01
    3468:	0e c0       	rjmp	.+28     	; 0x3486 <fgetc+0x62>
    346a:	ea 85       	ldd	r30, Y+10	; 0x0a
    346c:	fb 85       	ldd	r31, Y+11	; 0x0b
    346e:	09 95       	icall
    3470:	97 ff       	sbrs	r25, 7
    3472:	09 c0       	rjmp	.+18     	; 0x3486 <fgetc+0x62>
    3474:	2b 81       	ldd	r18, Y+3	; 0x03
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	11 f0       	breq	.+4      	; 0x347e <fgetc+0x5a>
    347a:	80 e2       	ldi	r24, 0x20	; 32
    347c:	01 c0       	rjmp	.+2      	; 0x3480 <fgetc+0x5c>
    347e:	80 e1       	ldi	r24, 0x10	; 16
    3480:	82 2b       	or	r24, r18
    3482:	8b 83       	std	Y+3, r24	; 0x03
    3484:	08 c0       	rjmp	.+16     	; 0x3496 <fgetc+0x72>
    3486:	2e 81       	ldd	r18, Y+6	; 0x06
    3488:	3f 81       	ldd	r19, Y+7	; 0x07
    348a:	2f 5f       	subi	r18, 0xFF	; 255
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	2e 83       	std	Y+6, r18	; 0x06
    3490:	3f 83       	std	Y+7, r19	; 0x07
    3492:	99 27       	eor	r25, r25
    3494:	02 c0       	rjmp	.+4      	; 0x349a <fgetc+0x76>
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	9f ef       	ldi	r25, 0xFF	; 255
    349a:	df 91       	pop	r29
    349c:	cf 91       	pop	r28
    349e:	08 95       	ret

000034a0 <ungetc>:
    34a0:	fb 01       	movw	r30, r22
    34a2:	23 81       	ldd	r18, Z+3	; 0x03
    34a4:	20 ff       	sbrs	r18, 0
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <ungetc+0x2c>
    34a8:	26 fd       	sbrc	r18, 6
    34aa:	10 c0       	rjmp	.+32     	; 0x34cc <ungetc+0x2c>
    34ac:	8f 3f       	cpi	r24, 0xFF	; 255
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	93 07       	cpc	r25, r19
    34b2:	61 f0       	breq	.+24     	; 0x34cc <ungetc+0x2c>
    34b4:	82 83       	std	Z+2, r24	; 0x02
    34b6:	2f 7d       	andi	r18, 0xDF	; 223
    34b8:	20 64       	ori	r18, 0x40	; 64
    34ba:	23 83       	std	Z+3, r18	; 0x03
    34bc:	26 81       	ldd	r18, Z+6	; 0x06
    34be:	37 81       	ldd	r19, Z+7	; 0x07
    34c0:	21 50       	subi	r18, 0x01	; 1
    34c2:	31 09       	sbc	r19, r1
    34c4:	26 83       	std	Z+6, r18	; 0x06
    34c6:	37 83       	std	Z+7, r19	; 0x07
    34c8:	99 27       	eor	r25, r25
    34ca:	08 95       	ret
    34cc:	8f ef       	ldi	r24, 0xFF	; 255
    34ce:	9f ef       	ldi	r25, 0xFF	; 255
    34d0:	08 95       	ret

000034d2 <__mulsi3>:
    34d2:	db 01       	movw	r26, r22
    34d4:	8f 93       	push	r24
    34d6:	9f 93       	push	r25
    34d8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__muluhisi3>
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	a2 9f       	mul	r26, r18
    34e2:	80 0d       	add	r24, r0
    34e4:	91 1d       	adc	r25, r1
    34e6:	a3 9f       	mul	r26, r19
    34e8:	90 0d       	add	r25, r0
    34ea:	b2 9f       	mul	r27, r18
    34ec:	90 0d       	add	r25, r0
    34ee:	11 24       	eor	r1, r1
    34f0:	08 95       	ret

000034f2 <__udivmodsi4>:
    34f2:	a1 e2       	ldi	r26, 0x21	; 33
    34f4:	1a 2e       	mov	r1, r26
    34f6:	aa 1b       	sub	r26, r26
    34f8:	bb 1b       	sub	r27, r27
    34fa:	fd 01       	movw	r30, r26
    34fc:	0d c0       	rjmp	.+26     	; 0x3518 <__udivmodsi4_ep>

000034fe <__udivmodsi4_loop>:
    34fe:	aa 1f       	adc	r26, r26
    3500:	bb 1f       	adc	r27, r27
    3502:	ee 1f       	adc	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	a2 17       	cp	r26, r18
    3508:	b3 07       	cpc	r27, r19
    350a:	e4 07       	cpc	r30, r20
    350c:	f5 07       	cpc	r31, r21
    350e:	20 f0       	brcs	.+8      	; 0x3518 <__udivmodsi4_ep>
    3510:	a2 1b       	sub	r26, r18
    3512:	b3 0b       	sbc	r27, r19
    3514:	e4 0b       	sbc	r30, r20
    3516:	f5 0b       	sbc	r31, r21

00003518 <__udivmodsi4_ep>:
    3518:	66 1f       	adc	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	88 1f       	adc	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	1a 94       	dec	r1
    3522:	69 f7       	brne	.-38     	; 0x34fe <__udivmodsi4_loop>
    3524:	60 95       	com	r22
    3526:	70 95       	com	r23
    3528:	80 95       	com	r24
    352a:	90 95       	com	r25
    352c:	9b 01       	movw	r18, r22
    352e:	ac 01       	movw	r20, r24
    3530:	bd 01       	movw	r22, r26
    3532:	cf 01       	movw	r24, r30
    3534:	08 95       	ret

00003536 <_exit>:
    3536:	f8 94       	cli

00003538 <__stop_program>:
    3538:	ff cf       	rjmp	.-2      	; 0x3538 <__stop_program>
