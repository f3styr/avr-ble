
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00803000  00001cd5  00001d89  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b9e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000137  00005b9e  00001b9e  00001c52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000554  00803090  00803090  00001e19  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000430  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006e52  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000326f  00000000  00000000  0000913a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002162  00000000  00000000  0000c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a24  00000000  00000000  0000e50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000306e  00000000  00000000  0000ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b31  00000000  00000000  00011f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  00013acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_17>
      48:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_31>
      80:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_32>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	10 e3       	ldi	r17, 0x30	; 48
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e3       	ldi	r27, 0x30	; 48
      a2:	e5 ed       	ldi	r30, 0xD5	; 213
      a4:	fc e1       	ldi	r31, 0x1C	; 28
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 39       	cpi	r26, 0x90	; 144
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	25 e3       	ldi	r18, 0x35	; 53
      b4:	a0 e9       	ldi	r26, 0x90	; 144
      b6:	b0 e3       	ldi	r27, 0x30	; 48
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3e       	cpi	r26, 0xE4	; 228
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
      c6:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      ce:	0e 94 48 04 	call	0x890	; 0x890 <system_init>
      d2:	08 95       	ret

000000d4 <rx487x_shutdown>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      d4:	8d b1       	in	r24, 0x0d	; 13
      d6:	87 7f       	andi	r24, 0xF7	; 247
      d8:	8d b9       	out	0x0d, r24	; 13
static ble_error_t rx487x_shutdown(struct ble_server* ctx) 
{
	RN487X_RST_set_level(false);
	
	return BLE_NOERR;
}
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	08 95       	ret

000000de <rn487x_init>:
static struct ble_gap_ops rn487x_gap_ops = {

};

static void rn487x_init(struct ble_server* ctx)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	ec 01       	movw	r28, r24

#ifdef PRINT_DEBUG_MSG
	printf("\r\nInitializing rn487x\r\n");
      e4:	88 ea       	ldi	r24, 0xA8	; 168
      e6:	9b e5       	ldi	r25, 0x5B	; 91
      e8:	0e 94 84 0a 	call	0x1508	; 0x1508 <puts>
#endif

	rx487x_set_ISR_cb(rn487x_cb_isr, RX_CB);
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	83 e9       	ldi	r24, 0x93	; 147
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 bc 06 	call	0xd78	; 0xd78 <rx487x_set_ISR_cb>

	ctx->sys->reboot(ctx);
      f6:	ec 89       	ldd	r30, Y+20	; 0x14
      f8:	fd 89       	ldd	r31, Y+21	; 0x15
      fa:	02 80       	ldd	r0, Z+2	; 0x02
      fc:	f3 81       	ldd	r31, Z+3	; 0x03
      fe:	e0 2d       	mov	r30, r0
     100:	ce 01       	movw	r24, r28
     102:	09 95       	icall
	ctx->sys->factory_reset(ctx);
     104:	ec 89       	ldd	r30, Y+20	; 0x14
     106:	fd 89       	ldd	r31, Y+21	; 0x15
     108:	04 80       	ldd	r0, Z+4	; 0x04
     10a:	f5 81       	ldd	r31, Z+5	; 0x05
     10c:	e0 2d       	mov	r30, r0
     10e:	ce 01       	movw	r24, r28
     110:	09 95       	icall

	//init gap services

	// init gatt services 
	ctx->gatt->init(ctx);
     112:	ee 89       	ldd	r30, Y+22	; 0x16
     114:	ff 89       	ldd	r31, Y+23	; 0x17
     116:	01 90       	ld	r0, Z+
     118:	f0 81       	ld	r31, Z
     11a:	e0 2d       	mov	r30, r0
     11c:	ce 01       	movw	r24, r28
     11e:	09 95       	icall


}
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <rn487x_cb_isr>:
	return BLE_NOERR;

}

static void rn487x_cb_isr()
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
     12a:	c0 91 a6 30 	lds	r28, 0x30A6	; 0x8030a6 <rx_wptr>
     12e:	d0 91 a7 30 	lds	r29, 0x30A7	; 0x8030a7 <rx_wptr+0x1>
     132:	0e 94 55 07 	call	0xeaa	; 0xeaa <rx487x_get_data>
     136:	c8 55       	subi	r28, 0x58	; 88
     138:	df 4c       	sbci	r29, 0xCF	; 207
     13a:	88 83       	st	Y, r24
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
     13c:	80 91 a6 30 	lds	r24, 0x30A6	; 0x8030a6 <rx_wptr>
     140:	90 91 a7 30 	lds	r25, 0x30A7	; 0x8030a7 <rx_wptr+0x1>
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	99 27       	eor	r25, r25
     148:	80 93 a6 30 	sts	0x30A6, r24	; 0x8030a6 <rx_wptr>
     14c:	90 93 a7 30 	sts	0x30A7, r25	; 0x8030a7 <rx_wptr+0x1>
}
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <rn487x_get_err_from_response>:
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
}

static ble_error_t rn487x_get_err_from_response()
{
	if(	strstr(rn487x_rx_buff, RN487X_RESPONSE_ERR) != NULL)
     156:	6f eb       	ldi	r22, 0xBF	; 191
     158:	7b e5       	ldi	r23, 0x5B	; 91
     15a:	88 ea       	ldi	r24, 0xA8	; 168
     15c:	90 e3       	ldi	r25, 0x30	; 48
     15e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <strstr>
     162:	89 2b       	or	r24, r25
     164:	11 f0       	breq	.+4      	; 0x16a <rn487x_get_err_from_response+0x14>
	return BLE_FAIL;
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	08 95       	ret
	else
	return BLE_NOERR;
     16a:	81 e0       	ldi	r24, 0x01	; 1

}
     16c:	08 95       	ret

0000016e <rn487x_clear_rx_buff>:

}

static void rn487x_clear_rx_buff()
{
	rx_wptr = 0;
     16e:	10 92 a6 30 	sts	0x30A6, r1	; 0x8030a6 <rx_wptr>
     172:	10 92 a7 30 	sts	0x30A7, r1	; 0x8030a7 <rx_wptr+0x1>
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	e8 ea       	ldi	r30, 0xA8	; 168
     17c:	f0 e3       	ldi	r31, 0x30	; 48
     17e:	df 01       	movw	r26, r30
     180:	9c 01       	movw	r18, r24
     182:	1d 92       	st	X+, r1
     184:	21 50       	subi	r18, 0x01	; 1
     186:	30 40       	sbci	r19, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <rn487x_clear_rx_buff+0x14>
     18a:	08 95       	ret

0000018c <rx487x_reboot>:
	return BLE_NOERR;
}

static ble_error_t rx487x_reboot(struct ble_server* ctx)
{
	rn487x_clear_rx_buff();
     18c:	0e 94 b7 00 	call	0x16e	; 0x16e <rn487x_clear_rx_buff>
     190:	8d b1       	in	r24, 0x0d	; 13
     192:	87 7f       	andi	r24, 0xF7	; 247
     194:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	8d e8       	ldi	r24, 0x8D	; 141
     198:	90 e2       	ldi	r25, 0x20	; 32
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <rx487x_reboot+0xe>
     19e:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     1a0:	8d b1       	in	r24, 0x0d	; 13
     1a2:	88 60       	ori	r24, 0x08	; 8
     1a4:	8d b9       	out	0x0d, r24	; 13
     1a6:	9f e3       	ldi	r25, 0x3F	; 63
     1a8:	2d e0       	ldi	r18, 0x0D	; 13
     1aa:	83 e0       	ldi	r24, 0x03	; 3
     1ac:	91 50       	subi	r25, 0x01	; 1
     1ae:	20 40       	sbci	r18, 0x00	; 0
     1b0:	80 40       	sbci	r24, 0x00	; 0
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <rx487x_reboot+0x20>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <rx487x_reboot+0x2a>
     1b6:	00 00       	nop
	RN487X_RST_set_level(false);
	_delay_ms(RN487X_RESET_DELAY);
	RN487X_RST_set_level(true);
	_delay_ms(RN487X_STARTUP_TIME);
	
	return rn487x_get_err_from_response();
     1b8:	0e 94 ab 00 	call	0x156	; 0x156 <rn487x_get_err_from_response>
}
     1bc:	08 95       	ret

000001be <rn487x_send_ascii_command>:
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	8c 01       	movw	r16, r24
	uint8_t id = 0;
	
	rn487x_clear_rx_buff();
     1ca:	0e 94 b7 00 	call	0x16e	; 0x16e <rn487x_clear_rx_buff>
	
	// enter cmd mode
	rx487x_write('$');
     1ce:	84 e2       	ldi	r24, 0x24	; 36
     1d0:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('$');
     1d4:	84 e2       	ldi	r24, 0x24	; 36
     1d6:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('$');
     1da:	84 e2       	ldi	r24, 0x24	; 36
     1dc:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
     1e0:	2a e6       	ldi	r18, 0x6A	; 106
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	90 40       	sbci	r25, 0x00	; 0
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <rn487x_send_ascii_command+0x28>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <rn487x_send_ascii_command+0x32>
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     1f0:	f1 2c       	mov	r15, r1
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <rn487x_send_ascii_command+0x46>

	_delay_ms(100);

	while(cmd[id] != NULL)
	{
		if(rx487x_is_tx_ready())
     1f4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <rx487x_is_tx_ready>
     1f8:	88 23       	and	r24, r24
     1fa:	21 f0       	breq	.+8      	; 0x204 <rn487x_send_ascii_command+0x46>
		{
			rx487x_write(cmd[id]);
     1fc:	88 81       	ld	r24, Y
     1fe:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
			id++;
     202:	f3 94       	inc	r15
	rx487x_write('$');
	rx487x_write('$');

	_delay_ms(100);

	while(cmd[id] != NULL)
     204:	e8 01       	movw	r28, r16
     206:	cf 0d       	add	r28, r15
     208:	d1 1d       	adc	r29, r1
     20a:	88 81       	ld	r24, Y
     20c:	81 11       	cpse	r24, r1
     20e:	f2 cf       	rjmp	.-28     	; 0x1f4 <rn487x_send_ascii_command+0x36>
     210:	2f e3       	ldi	r18, 0x3F	; 63
     212:	8d e0       	ldi	r24, 0x0D	; 13
     214:	93 e0       	ldi	r25, 0x03	; 3
     216:	21 50       	subi	r18, 0x01	; 1
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	90 40       	sbci	r25, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <rn487x_send_ascii_command+0x58>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <rn487x_send_ascii_command+0x62>
     220:	00 00       	nop
	}

	_delay_ms(RN487X_DELAY_WAIT_FOR_RESPONSE);

	//exit cmd mode
	rx487x_write('-');
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('-');
     228:	8d e2       	ldi	r24, 0x2D	; 45
     22a:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('-');
     22e:	8d e2       	ldi	r24, 0x2D	; 45
     230:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('\r');
     234:	8d e0       	ldi	r24, 0x0D	; 13
     236:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
	rx487x_write('\n');
     23a:	8a e0       	ldi	r24, 0x0A	; 10
     23c:	0e 94 21 07 	call	0xe42	; 0xe42 <rx487x_write>
     240:	2a e6       	ldi	r18, 0x6A	; 106
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	21 50       	subi	r18, 0x01	; 1
     248:	80 40       	sbci	r24, 0x00	; 0
     24a:	90 40       	sbci	r25, 0x00	; 0
     24c:	e1 f7       	brne	.-8      	; 0x246 <rn487x_send_ascii_command+0x88>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <rn487x_send_ascii_command+0x92>

	_delay_ms(100);
	
	#ifdef PRINT_DEBUG_MSG
	printf("%s", cmd);
     250:	1f 93       	push	r17
     252:	0f 93       	push	r16
     254:	c3 ec       	ldi	r28, 0xC3	; 195
     256:	db e5       	ldi	r29, 0x5B	; 91
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <printf>
	printf("%s", rn487x_rx_buff);
     260:	88 ea       	ldi	r24, 0xA8	; 168
     262:	90 e3       	ldi	r25, 0x30	; 48
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <printf>
	#endif

     270:	8d b7       	in	r24, 0x3d	; 61
     272:	9e b7       	in	r25, 0x3e	; 62
     274:	08 96       	adiw	r24, 0x08	; 8
     276:	8d bf       	out	0x3d, r24	; 61
     278:	9e bf       	out	0x3e, r25	; 62
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	08 95       	ret

00000286 <rn487x_write_value>:


}

static ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     286:	4f 92       	push	r4
     288:	5f 92       	push	r5
     28a:	6f 92       	push	r6
     28c:	7f 92       	push	r7
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	6c 01       	movw	r12, r24
     2ac:	5b 01       	movw	r10, r22
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(cmd, "SHW,%04X,%s\r\n", characteristic->handle, hexcode);
	rn487x_send_ascii_command(cmd);
}
     2ae:	6d b6       	in	r6, 0x3d	; 61
     2b0:	7e b6       	in	r7, 0x3e	; 62
}

static ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{

	uint8_t hexcode[(characteristic->data_len * 2 ) + 1];
     2b2:	fc 01       	movw	r30, r24
     2b4:	87 81       	ldd	r24, Z+7	; 0x07
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	9c 01       	movw	r18, r24
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	2f 5f       	subi	r18, 0xFF	; 255
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	4d b7       	in	r20, 0x3d	; 61
     2c4:	5e b7       	in	r21, 0x3e	; 62
     2c6:	42 1b       	sub	r20, r18
     2c8:	53 0b       	sbc	r21, r19
     2ca:	4d bf       	out	0x3d, r20	; 61
     2cc:	5e bf       	out	0x3e, r21	; 62
     2ce:	ed b7       	in	r30, 0x3d	; 61
     2d0:	fe b7       	in	r31, 0x3e	; 62
     2d2:	31 96       	adiw	r30, 0x01	; 1
     2d4:	2f 01       	movw	r4, r30
	uint8_t cmd[(characteristic->data_len * 2 ) + 10];
     2d6:	05 96       	adiw	r24, 0x05	; 5
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	2d b7       	in	r18, 0x3d	; 61
     2de:	3e b7       	in	r19, 0x3e	; 62
     2e0:	28 1b       	sub	r18, r24
     2e2:	39 0b       	sbc	r19, r25
     2e4:	2d bf       	out	0x3d, r18	; 61
     2e6:	3e bf       	out	0x3e, r19	; 62
     2e8:	4d b7       	in	r20, 0x3d	; 61
     2ea:	5e b7       	in	r21, 0x3e	; 62
     2ec:	4f 5f       	subi	r20, 0xFF	; 255
     2ee:	5f 4f       	sbci	r21, 0xFF	; 255
     2f0:	4a 01       	movw	r8, r20

	char *ptr = &hexcode[0];
     2f2:	0e 2f       	mov	r16, r30
     2f4:	15 2d       	mov	r17, r5

	int i;

	for (i = 0; i < characteristic->data_len; i++) {
     2f6:	e1 2c       	mov	r14, r1
     2f8:	f1 2c       	mov	r15, r1
     2fa:	19 c0       	rjmp	.+50     	; 0x32e <rn487x_write_value+0xa8>
		ptr += sprintf(ptr, "%02X", payload[i]);
     2fc:	f5 01       	movw	r30, r10
     2fe:	ee 0d       	add	r30, r14
     300:	ff 1d       	adc	r31, r15
     302:	80 81       	ld	r24, Z
     304:	1f 92       	push	r1
     306:	8f 93       	push	r24
     308:	86 ec       	ldi	r24, 0xC6	; 198
     30a:	9b e5       	ldi	r25, 0x5B	; 91
     30c:	9f 93       	push	r25
     30e:	8f 93       	push	r24
     310:	1f 93       	push	r17
     312:	0f 93       	push	r16
     314:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
     318:	08 0f       	add	r16, r24
     31a:	19 1f       	adc	r17, r25

	char *ptr = &hexcode[0];

	int i;

	for (i = 0; i < characteristic->data_len; i++) {
     31c:	5f ef       	ldi	r21, 0xFF	; 255
     31e:	e5 1a       	sub	r14, r21
     320:	f5 0a       	sbc	r15, r21
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	f6 01       	movw	r30, r12
     330:	87 81       	ldd	r24, Z+7	; 0x07
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	e8 16       	cp	r14, r24
     336:	f9 06       	cpc	r15, r25
     338:	0c f3       	brlt	.-62     	; 0x2fc <rn487x_write_value+0x76>
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(cmd, "SHW,%04X,%s\r\n", characteristic->handle, hexcode);
     33a:	5f 92       	push	r5
     33c:	4f 92       	push	r4
     33e:	83 81       	ldd	r24, Z+3	; 0x03
     340:	8f 93       	push	r24
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	8f 93       	push	r24
     346:	8b ec       	ldi	r24, 0xCB	; 203
     348:	9b e5       	ldi	r25, 0x5B	; 91
     34a:	9f 93       	push	r25
     34c:	8f 93       	push	r24
     34e:	9f 92       	push	r9
     350:	8f 92       	push	r8
     352:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
	rn487x_send_ascii_command(cmd);
     356:	88 2d       	mov	r24, r8
     358:	99 2d       	mov	r25, r9
     35a:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
}
     35e:	2d b7       	in	r18, 0x3d	; 61
     360:	3e b7       	in	r19, 0x3e	; 62
     362:	28 5f       	subi	r18, 0xF8	; 248
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	2d bf       	out	0x3d, r18	; 61
     368:	3e bf       	out	0x3e, r19	; 62
     36a:	6d be       	out	0x3d, r6	; 61
     36c:	7e be       	out	0x3e, r7	; 62
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	bf 90       	pop	r11
     380:	af 90       	pop	r10
     382:	9f 90       	pop	r9
     384:	8f 90       	pop	r8
     386:	7f 90       	pop	r7
     388:	6f 90       	pop	r6
     38a:	5f 90       	pop	r5
     38c:	4f 90       	pop	r4
     38e:	08 95       	ret

00000390 <rn487x_read_value>:
	rn487x_send_ascii_command(buff);
	return rn487x_get_err_from_response();
}

static ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic)
{
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	8c 01       	movw	r16, r24
	{
		return BLE_FAIL;
	}


}
     3a6:	ed b6       	in	r14, 0x3d	; 61
     3a8:	fe b6       	in	r15, 0x3e	; 62
	return rn487x_get_err_from_response();
}

static ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic)
{
	uint8_t data[(characteristic->data_len * 2 ) + 1];
     3aa:	fc 01       	movw	r30, r24
     3ac:	87 81       	ldd	r24, Z+7	; 0x07
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	2d b7       	in	r18, 0x3d	; 61
     3b8:	3e b7       	in	r19, 0x3e	; 62
     3ba:	28 1b       	sub	r18, r24
     3bc:	39 0b       	sbc	r19, r25
     3be:	2d bf       	out	0x3d, r18	; 61
     3c0:	3e bf       	out	0x3e, r19	; 62
     3c2:	8d b7       	in	r24, 0x3d	; 61
     3c4:	9e b7       	in	r25, 0x3e	; 62
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	6c 01       	movw	r12, r24
	sprintf(data, "SH23R,%04X\r\n", characteristic->handle);
     3ca:	83 81       	ldd	r24, Z+3	; 0x03
     3cc:	8f 93       	push	r24
     3ce:	82 81       	ldd	r24, Z+2	; 0x02
     3d0:	8f 93       	push	r24
     3d2:	89 ed       	ldi	r24, 0xD9	; 217
     3d4:	9b e5       	ldi	r25, 0x5B	; 91
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	df 92       	push	r13
     3dc:	cf 92       	push	r12
     3de:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
	rn487x_send_ascii_command(data);
     3e2:	8c 2d       	mov	r24, r12
     3e4:	9d 2d       	mov	r25, r13
     3e6:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
	
	if(rn487x_get_err_from_response())
     3ea:	0e 94 ab 00 	call	0x156	; 0x156 <rn487x_get_err_from_response>
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	88 23       	and	r24, r24
     3fc:	b9 f0       	breq	.+46     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		strncpy(characteristic->data, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
     3fe:	f8 01       	movw	r30, r16
     400:	47 81       	ldd	r20, Z+7	; 0x07
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	44 0f       	add	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6d ea       	ldi	r22, 0xAD	; 173
     40a:	70 e3       	ldi	r23, 0x30	; 48
     40c:	85 81       	ldd	r24, Z+5	; 0x05
     40e:	96 81       	ldd	r25, Z+6	; 0x06
     410:	0e 94 45 0a 	call	0x148a	; 0x148a <strncpy>
		characteristic->data[characteristic->data_len * 2] = '\0';
     414:	f8 01       	movw	r30, r16
     416:	25 81       	ldd	r18, Z+5	; 0x05
     418:	36 81       	ldd	r19, Z+6	; 0x06
     41a:	87 81       	ldd	r24, Z+7	; 0x07
     41c:	e8 2f       	mov	r30, r24
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e2 0f       	add	r30, r18
     426:	f3 1f       	adc	r31, r19
     428:	10 82       	st	Z, r1
	{
		return BLE_FAIL;
	}


}
     42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		strncpy(characteristic->data, (rn487x_rx_buff + 5), (characteristic->data_len * 2));
		characteristic->data[characteristic->data_len * 2] = '\0';
	}
	else
	{
		return BLE_FAIL;
     42c:	80 e0       	ldi	r24, 0x00	; 0
	}


}
     42e:	ed be       	out	0x3d, r14	; 61
     430:	fe be       	out	0x3e, r15	; 62
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	08 95       	ret

00000444 <rn487x_register_characteristic>:
	rn487x_send_ascii_command(buff);
	return rn487x_get_err_from_response();
}

static ble_error_t rn487x_register_characteristic(struct gatt_characteristic* characteristic)
{
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	e2 97       	sbiw	r28, 0x32	; 50
     452:	cd bf       	out	0x3d, r28	; 61
     454:	de bf       	out	0x3e, r29	; 62
     456:	fc 01       	movw	r30, r24
	uint8_t buff[50];
	sprintf(buff, "PC,%s,%02X,%02X\r\n", characteristic->UUID, characteristic->properties, characteristic->data_len);
     458:	97 81       	ldd	r25, Z+7	; 0x07
     45a:	84 81       	ldd	r24, Z+4	; 0x04
     45c:	1f 92       	push	r1
     45e:	9f 93       	push	r25
     460:	1f 92       	push	r1
     462:	8f 93       	push	r24
     464:	81 81       	ldd	r24, Z+1	; 0x01
     466:	8f 93       	push	r24
     468:	80 81       	ld	r24, Z
     46a:	8f 93       	push	r24
     46c:	86 ee       	ldi	r24, 0xE6	; 230
     46e:	9b e5       	ldi	r25, 0x5B	; 91
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	8e 01       	movw	r16, r28
     476:	0f 5f       	subi	r16, 0xFF	; 255
     478:	1f 4f       	sbci	r17, 0xFF	; 255
     47a:	1f 93       	push	r17
     47c:	0f 93       	push	r16
     47e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
	rn487x_send_ascii_command(buff);
     482:	c8 01       	movw	r24, r16
     484:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     488:	0e 94 ab 00 	call	0x156	; 0x156 <rn487x_get_err_from_response>
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	de bf       	out	0x3e, r29	; 62
}
     490:	e2 96       	adiw	r28, 0x32	; 50
     492:	cd bf       	out	0x3d, r28	; 61
     494:	de bf       	out	0x3e, r29	; 62
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <rn487x_register_service>:
	.factory_reset = rx487x_factory_reset,
	
};

static ble_error_t rn487x_register_service(struct gatt_service* service)
{
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	e2 97       	sbiw	r28, 0x32	; 50
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	de bf       	out	0x3e, r29	; 62
	uint8_t buff[50];
	sprintf(buff, "PS,%s\r\n", service->UUID);
     4b2:	fc 01       	movw	r30, r24
     4b4:	21 81       	ldd	r18, Z+1	; 0x01
     4b6:	2f 93       	push	r18
     4b8:	80 81       	ld	r24, Z
     4ba:	8f 93       	push	r24
     4bc:	88 ef       	ldi	r24, 0xF8	; 248
     4be:	9b e5       	ldi	r25, 0x5B	; 91
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	8e 01       	movw	r16, r28
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	1f 93       	push	r17
     4cc:	0f 93       	push	r16
     4ce:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
	rn487x_send_ascii_command(buff);
     4d2:	c8 01       	movw	r24, r16
     4d4:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     4d8:	0e 94 ab 00 	call	0x156	; 0x156 <rn487x_get_err_from_response>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
}
     4e8:	e2 96       	adiw	r28, 0x32	; 50
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <rn487x_gatt_init>:
	sprintf(cmd, "SHW,%04X,%s\r\n", characteristic->handle, hexcode);
	rn487x_send_ascii_command(cmd);
}

static ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
     4f8:	2f 92       	push	r2
     4fa:	3f 92       	push	r3
     4fc:	4f 92       	push	r4
     4fe:	5f 92       	push	r5
     500:	6f 92       	push	r6
     502:	7f 92       	push	r7
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	e2 97       	sbiw	r28, 0x32	; 50
     522:	cd bf       	out	0x3d, r28	; 61
     524:	de bf       	out	0x3e, r29	; 62
     526:	3c 01       	movw	r6, r24
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->services;
     528:	dc 01       	movw	r26, r24
     52a:	50 96       	adiw	r26, 0x10	; 16
     52c:	2d 90       	ld	r2, X+
     52e:	3c 90       	ld	r3, X
     530:	51 97       	sbiw	r26, 0x11	; 17

	for(short i = 0; i < ctx->services_count; i++)
     532:	41 2c       	mov	r4, r1
     534:	51 2c       	mov	r5, r1
     536:	87 c0       	rjmp	.+270    	; 0x646 <rn487x_gatt_init+0x14e>
	{
		struct gatt_service* service = (*services)[i];
     538:	f2 01       	movw	r30, r4
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	e2 0d       	add	r30, r2
     540:	f3 1d       	adc	r31, r3
     542:	c0 80       	ld	r12, Z
     544:	d1 80       	ldd	r13, Z+1	; 0x01
	
		ctx->gatt->register_service(service);
     546:	d3 01       	movw	r26, r6
     548:	56 96       	adiw	r26, 0x16	; 22
     54a:	ed 91       	ld	r30, X+
     54c:	fc 91       	ld	r31, X
     54e:	57 97       	sbiw	r26, 0x17	; 23
     550:	02 80       	ldd	r0, Z+2	; 0x02
     552:	f3 81       	ldd	r31, Z+3	; 0x03
     554:	e0 2d       	mov	r30, r0
     556:	c6 01       	movw	r24, r12
     558:	09 95       	icall

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;
     55a:	f6 01       	movw	r30, r12
     55c:	86 80       	ldd	r8, Z+6	; 0x06
     55e:	97 80       	ldd	r9, Z+7	; 0x07

		for(short j = 0; j < service->characteristics_count; j++)
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	63 c0       	rjmp	.+198    	; 0x62c <rn487x_gatt_init+0x134>
		{
			struct gatt_characteristic* characteristic = (*characteristics)[j];
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	f4 01       	movw	r30, r8
     56c:	e8 0f       	add	r30, r24
     56e:	f9 1f       	adc	r31, r25
     570:	00 81       	ld	r16, Z
     572:	11 81       	ldd	r17, Z+1	; 0x01

			if(ctx->gatt->register_characteristic(characteristic))
     574:	d3 01       	movw	r26, r6
     576:	56 96       	adiw	r26, 0x16	; 22
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	57 97       	sbiw	r26, 0x17	; 23
     57e:	04 80       	ldd	r0, Z+4	; 0x04
     580:	f5 81       	ldd	r31, Z+5	; 0x05
     582:	e0 2d       	mov	r30, r0
     584:	c8 01       	movw	r24, r16
     586:	09 95       	icall
     588:	88 23       	and	r24, r24
     58a:	09 f4       	brne	.+2      	; 0x58e <rn487x_gatt_init+0x96>
     58c:	70 c0       	rjmp	.+224    	; 0x66e <rn487x_gatt_init+0x176>
			{
				uint8_t buff[50];
				uint8_t* res;

				// list all characteristics in the service
				sprintf(buff, "LS,%s\r\n", service->UUID);
     58e:	f6 01       	movw	r30, r12
     590:	81 81       	ldd	r24, Z+1	; 0x01
     592:	8f 93       	push	r24
     594:	80 81       	ld	r24, Z
     596:	8f 93       	push	r24
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	9c e5       	ldi	r25, 0x5C	; 92
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	9e 01       	movw	r18, r28
     5a2:	2f 5f       	subi	r18, 0xFF	; 255
     5a4:	3f 4f       	sbci	r19, 0xFF	; 255
     5a6:	79 01       	movw	r14, r18
     5a8:	3f 93       	push	r19
     5aa:	2f 93       	push	r18
     5ac:	0e 94 b4 0a 	call	0x1568	; 0x1568 <sprintf>
				rn487x_send_ascii_command(buff);
     5b0:	c7 01       	movw	r24, r14
     5b2:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>

				// find this characteristic from the LS
				// XXXX...X,0000,00
				res = strstr(rn487x_rx_buff, characteristic->UUID);
     5b6:	d8 01       	movw	r26, r16
     5b8:	ed 90       	ld	r14, X+
     5ba:	fc 90       	ld	r15, X
     5bc:	b7 01       	movw	r22, r14
     5be:	88 ea       	ldi	r24, 0xA8	; 168
     5c0:	90 e3       	ldi	r25, 0x30	; 48
     5c2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <strstr>
				res =  res +  strlen(characteristic->UUID) + 1;
     5c6:	f7 01       	movw	r30, r14
     5c8:	01 90       	ld	r0, Z+
     5ca:	00 20       	and	r0, r0
     5cc:	e9 f7       	brne	.-6      	; 0x5c8 <rn487x_gatt_init+0xd0>
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	ee 19       	sub	r30, r14
     5d2:	ff 09       	sbc	r31, r15
     5d4:	31 96       	adiw	r30, 0x01	; 1
			
				//uint8_t* endptr;
				characteristic->handle = strtol(res, NULL, 16);
     5d6:	40 e1       	ldi	r20, 0x10	; 16
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	8e 0f       	add	r24, r30
     5e0:	9f 1f       	adc	r25, r31
     5e2:	0e 94 26 09 	call	0x124c	; 0x124c <strtol>
     5e6:	f6 2e       	mov	r15, r22
     5e8:	e7 2e       	mov	r14, r23
     5ea:	f8 01       	movw	r30, r16
     5ec:	62 83       	std	Z+2, r22	; 0x02
     5ee:	73 83       	std	Z+3, r23	; 0x03

				//allocate data
				characteristic->data = (uint8_t*)malloc((characteristic->data_len * 2 + 1 ) * sizeof(uint8_t));
     5f0:	87 81       	ldd	r24, Z+7	; 0x07
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 05 08 	call	0x100a	; 0x100a <malloc>
     5fe:	d8 01       	movw	r26, r16
     600:	15 96       	adiw	r26, 0x05	; 5
     602:	8d 93       	st	X+, r24
     604:	9c 93       	st	X, r25
     606:	16 97       	sbiw	r26, 0x06	; 6

				#ifdef PRINT_DEBUG_MSG
				printf("Registered characteristic %s, with handle %04X\r\n", characteristic->UUID, characteristic->handle);
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	8c 91       	ld	r24, X
     610:	11 97       	sbiw	r26, 0x01	; 1
     612:	8f 93       	push	r24
     614:	8c 91       	ld	r24, X
     616:	8f 93       	push	r24
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	9c e5       	ldi	r25, 0x5C	; 92
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <printf>
	
		ctx->gatt->register_service(service);

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;

		for(short j = 0; j < service->characteristics_count; j++)
     624:	c5 01       	movw	r24, r10
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	d6 01       	movw	r26, r12
     62e:	14 96       	adiw	r26, 0x04	; 4
     630:	2d 91       	ld	r18, X+
     632:	3c 91       	ld	r19, X
     634:	15 97       	sbiw	r26, 0x05	; 5
     636:	5c 01       	movw	r10, r24
     638:	82 17       	cp	r24, r18
     63a:	93 07       	cpc	r25, r19
     63c:	08 f4       	brcc	.+2      	; 0x640 <rn487x_gatt_init+0x148>
     63e:	93 cf       	rjmp	.-218    	; 0x566 <rn487x_gatt_init+0x6e>
static ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->services;

	for(short i = 0; i < ctx->services_count; i++)
     640:	bf ef       	ldi	r27, 0xFF	; 255
     642:	4b 1a       	sub	r4, r27
     644:	5b 0a       	sbc	r5, r27
     646:	f3 01       	movw	r30, r6
     648:	87 85       	ldd	r24, Z+15	; 0x0f
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	48 16       	cp	r4, r24
     64e:	59 06       	cpc	r5, r25
     650:	0c f4       	brge	.+2      	; 0x654 <rn487x_gatt_init+0x15c>
     652:	72 cf       	rjmp	.-284    	; 0x538 <rn487x_gatt_init+0x40>
				return BLE_FAIL;
			}
		}
	}

	ctx->sys->reboot(ctx);
     654:	04 88       	ldd	r0, Z+20	; 0x14
     656:	f5 89       	ldd	r31, Z+21	; 0x15
     658:	e0 2d       	mov	r30, r0
     65a:	02 80       	ldd	r0, Z+2	; 0x02
     65c:	f3 81       	ldd	r31, Z+3	; 0x03
     65e:	e0 2d       	mov	r30, r0
     660:	c3 01       	movw	r24, r6
     662:	09 95       	icall
	rn487x_send_ascii_command("LS\r\n");
     664:	89 e3       	ldi	r24, 0x39	; 57
     666:	9c e5       	ldi	r25, 0x5C	; 92
     668:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
	return BLE_NOERR;
     66c:	81 e0       	ldi	r24, 0x01	; 1
}
     66e:	e2 96       	adiw	r28, 0x32	; 50
     670:	cd bf       	out	0x3d, r28	; 61
     672:	de bf       	out	0x3e, r29	; 62
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
     68a:	8f 90       	pop	r8
     68c:	7f 90       	pop	r7
     68e:	6f 90       	pop	r6
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	3f 90       	pop	r3
     696:	2f 90       	pop	r2
     698:	08 95       	ret

0000069a <rx487x_factory_reset>:
	return rn487x_get_err_from_response();
}

static ble_error_t rx487x_factory_reset(struct ble_server* ctx)
{	
	rn487x_send_ascii_command("SF,2\r\n");
     69a:	8e e3       	ldi	r24, 0x3E	; 62
     69c:	9c e5       	ldi	r25, 0x5C	; 92
     69e:	0e 94 df 00 	call	0x1be	; 0x1be <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     6a2:	0e 94 ab 00 	call	0x156	; 0x156 <rn487x_get_err_from_response>
}
     6a6:	08 95       	ret

000006a8 <main>:
volatile size_t ble_wptr;
volatile size_t ble_rptr;


int main(void)
{
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	2a 97       	sbiw	r28, 0x0a	; 10
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	de bf       	out	0x3e, r29	; 62
	ENABLE_INTERRUPTS();
     6b6:	78 94       	sei

	atmel_start_init();
     6b8:	0e 94 67 00 	call	0xce	; 0xce <atmel_start_init>

	printf("---------MAIN----------------\r\n");
     6bc:	86 eb       	ldi	r24, 0xB6	; 182
     6be:	9c e5       	ldi	r25, 0x5C	; 92
     6c0:	0e 94 84 0a 	call	0x1508	; 0x1508 <puts>

	temp_read_characteristic.data_len = 10;
     6c4:	8a e0       	ldi	r24, 0x0A	; 10
     6c6:	80 93 33 30 	sts	0x3033, r24	; 0x803033 <temp_read_characteristic+0x7>


	rn487x.init(&rn487x);
     6ca:	04 e3       	ldi	r16, 0x34	; 52
     6cc:	10 e3       	ldi	r17, 0x30	; 48
     6ce:	d8 01       	movw	r26, r16
     6d0:	5c 96       	adiw	r26, 0x1c	; 28
     6d2:	ed 91       	ld	r30, X+
     6d4:	fc 91       	ld	r31, X
     6d6:	5d 97       	sbiw	r26, 0x1d	; 29
     6d8:	c8 01       	movw	r24, r16
     6da:	09 95       	icall
	volatile uint8_t data[] = {0x23, 0x33, 0x44, 0x55, 0xAA, 0xFF, 0xDD, 0xAA, 0x33, 0xAA };
     6dc:	8a e0       	ldi	r24, 0x0A	; 10
     6de:	ee e9       	ldi	r30, 0x9E	; 158
     6e0:	fb e5       	ldi	r31, 0x5B	; 91
     6e2:	de 01       	movw	r26, r28
     6e4:	11 96       	adiw	r26, 0x01	; 1
     6e6:	01 90       	ld	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	8a 95       	dec	r24
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x3e>
     6ee:	ba e2       	ldi	r27, 0x2A	; 42
     6f0:	2c e2       	ldi	r18, 0x2C	; 44
     6f2:	8a e0       	ldi	r24, 0x0A	; 10
     6f4:	b1 50       	subi	r27, 0x01	; 1
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0x4c>
     6fc:	00 00       	nop
	
	_delay_ms(1000);

	rn487x.gatt->write_value(&temp_read_characteristic, data);
     6fe:	d8 01       	movw	r26, r16
     700:	56 96       	adiw	r26, 0x16	; 22
     702:	ed 91       	ld	r30, X+
     704:	fc 91       	ld	r31, X
     706:	57 97       	sbiw	r26, 0x17	; 23
     708:	00 84       	ldd	r0, Z+8	; 0x08
     70a:	f1 85       	ldd	r31, Z+9	; 0x09
     70c:	e0 2d       	mov	r30, r0
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	8c e2       	ldi	r24, 0x2C	; 44
     716:	90 e3       	ldi	r25, 0x30	; 48
     718:	09 95       	icall
     71a:	ba e2       	ldi	r27, 0x2A	; 42
     71c:	2c e2       	ldi	r18, 0x2C	; 44
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	b1 50       	subi	r27, 0x01	; 1
     722:	20 40       	sbci	r18, 0x00	; 0
     724:	80 40       	sbci	r24, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <main+0x78>
     728:	00 00       	nop

	_delay_ms(1000);
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     72a:	d8 01       	movw	r26, r16
     72c:	56 96       	adiw	r26, 0x16	; 22
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
     732:	57 97       	sbiw	r26, 0x17	; 23
     734:	00 84       	ldd	r0, Z+8	; 0x08
     736:	f1 85       	ldd	r31, Z+9	; 0x09
     738:	e0 2d       	mov	r30, r0
     73a:	be 01       	movw	r22, r28
     73c:	6f 5f       	subi	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	8c e2       	ldi	r24, 0x2C	; 44
     742:	90 e3       	ldi	r25, 0x30	; 48
     744:	09 95       	icall

	rn487x.gatt->read_value(&temp_read_characteristic);
     746:	d8 01       	movw	r26, r16
     748:	56 96       	adiw	r26, 0x16	; 22
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	57 97       	sbiw	r26, 0x17	; 23
     750:	06 80       	ldd	r0, Z+6	; 0x06
     752:	f7 81       	ldd	r31, Z+7	; 0x07
     754:	e0 2d       	mov	r30, r0
     756:	8c e2       	ldi	r24, 0x2C	; 44
     758:	90 e3       	ldi	r25, 0x30	; 48
     75a:	09 95       	icall
     75c:	ff cf       	rjmp	.-2      	; 0x75c <main+0xb4>

0000075e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	08 95       	ret

00000762 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	08 95       	ret

00000766 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	08 95       	ret

0000076a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 c0       	rjmp	.+16     	; 0x77e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     76e:	e8 2f       	mov	r30, r24
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e0 5f       	subi	r30, 0xF0	; 240
     774:	fb 4f       	sbci	r31, 0xFB	; 251
     776:	90 81       	ld	r25, Z
     778:	98 60       	ori	r25, 0x08	; 8
     77a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	88 30       	cpi	r24, 0x08	; 8
     780:	b0 f3       	brcs	.-20     	; 0x76e <mcu_init+0x4>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	08 c0       	rjmp	.+16     	; 0x796 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     786:	e8 2f       	mov	r30, r24
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e0 5d       	subi	r30, 0xD0	; 208
     78c:	fb 4f       	sbci	r31, 0xFB	; 251
     78e:	90 81       	ld	r25, Z
     790:	98 60       	ori	r25, 0x08	; 8
     792:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	88 30       	cpi	r24, 0x08	; 8
     798:	b0 f3       	brcs	.-20     	; 0x786 <mcu_init+0x1c>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 c0       	rjmp	.+16     	; 0x7ae <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     79e:	e8 2f       	mov	r30, r24
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	e0 5b       	subi	r30, 0xB0	; 176
     7a4:	fb 4f       	sbci	r31, 0xFB	; 251
     7a6:	90 81       	ld	r25, Z
     7a8:	98 60       	ori	r25, 0x08	; 8
     7aa:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	88 30       	cpi	r24, 0x08	; 8
     7b0:	b0 f3       	brcs	.-20     	; 0x79e <mcu_init+0x34>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7b6:	e8 2f       	mov	r30, r24
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	e0 59       	subi	r30, 0x90	; 144
     7bc:	fb 4f       	sbci	r31, 0xFB	; 251
     7be:	90 81       	ld	r25, Z
     7c0:	98 60       	ori	r25, 0x08	; 8
     7c2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7c4:	8f 5f       	subi	r24, 0xFF	; 255
     7c6:	88 30       	cpi	r24, 0x08	; 8
     7c8:	b0 f3       	brcs	.-20     	; 0x7b6 <mcu_init+0x4c>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7ce:	e8 2f       	mov	r30, r24
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e0 57       	subi	r30, 0x70	; 112
     7d4:	fb 4f       	sbci	r31, 0xFB	; 251
     7d6:	90 81       	ld	r25, Z
     7d8:	98 60       	ori	r25, 0x08	; 8
     7da:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	88 30       	cpi	r24, 0x08	; 8
     7e0:	b0 f3       	brcs	.-20     	; 0x7ce <mcu_init+0x64>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7e6:	e8 2f       	mov	r30, r24
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	e0 55       	subi	r30, 0x50	; 80
     7ec:	fb 4f       	sbci	r31, 0xFB	; 251
     7ee:	90 81       	ld	r25, Z
     7f0:	98 60       	ori	r25, 0x08	; 8
     7f2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	88 30       	cpi	r24, 0x08	; 8
     7f8:	b0 f3       	brcs	.-20     	; 0x7e6 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     7fa:	08 95       	ret

000007fc <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     7fc:	80 b1       	in	r24, 0x00	; 0
     7fe:	8d 7f       	andi	r24, 0xFD	; 253
     800:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     802:	e1 e1       	ldi	r30, 0x11	; 17
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	80 81       	ld	r24, Z
     808:	87 7f       	andi	r24, 0xF7	; 247
     80a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     80c:	81 b1       	in	r24, 0x01	; 1
     80e:	8e 7f       	andi	r24, 0xFE	; 254
     810:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     812:	80 b1       	in	r24, 0x00	; 0
     814:	81 60       	ori	r24, 0x01	; 1
     816:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
     818:	0e 94 3d 07 	call	0xe7a	; 0xe7a <rx487x_init>
     81c:	08 95       	ret

0000081e <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     81e:	84 b3       	in	r24, 0x14	; 20
     820:	8d 7f       	andi	r24, 0xFD	; 253
     822:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     824:	e1 eb       	ldi	r30, 0xB1	; 177
     826:	f4 e0       	ldi	r31, 0x04	; 4
     828:	80 81       	ld	r24, Z
     82a:	87 7f       	andi	r24, 0xF7	; 247
     82c:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     82e:	85 b3       	in	r24, 0x15	; 21
     830:	8e 7f       	andi	r24, 0xFE	; 254
     832:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     834:	84 b3       	in	r24, 0x14	; 20
     836:	81 60       	ori	r24, 0x01	; 1
     838:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
     83a:	0e 94 cb 07 	call	0xf96	; 0xf96 <usb_cdc_init>
     83e:	08 95       	ret

00000840 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
     840:	0e 94 54 06 	call	0xca8	; 0xca8 <system_timer_init>
     844:	08 95       	ret

00000846 <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     846:	81 b1       	in	r24, 0x01	; 1
     848:	87 7f       	andi	r24, 0xF7	; 247
     84a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     84c:	80 b1       	in	r24, 0x00	; 0
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     852:	e3 e1       	ldi	r30, 0x13	; 19
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	80 81       	ld	r24, Z
     858:	87 7f       	andi	r24, 0xF7	; 247
     85a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     85c:	80 81       	ld	r24, Z
     85e:	8f 77       	andi	r24, 0x7F	; 127
     860:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     862:	80 81       	ld	r24, Z
     864:	88 7f       	andi	r24, 0xF8	; 248
     866:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     868:	81 b1       	in	r24, 0x01	; 1
     86a:	8b 7f       	andi	r24, 0xFB	; 251
     86c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     86e:	80 b1       	in	r24, 0x00	; 0
     870:	84 60       	ori	r24, 0x04	; 4
     872:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     874:	e2 e1       	ldi	r30, 0x12	; 18
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	80 81       	ld	r24, Z
     87a:	87 7f       	andi	r24, 0xF7	; 247
     87c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     87e:	80 81       	ld	r24, Z
     880:	8f 77       	andi	r24, 0x7F	; 127
     882:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     884:	80 81       	ld	r24, Z
     886:	88 7f       	andi	r24, 0xF8	; 248
     888:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
     88a:	0e 94 27 06 	call	0xc4e	; 0xc4e <i2c_init>
     88e:	08 95       	ret

00000890 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     890:	0e 94 b5 03 	call	0x76a	; 0x76a <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     894:	8d b1       	in	r24, 0x0d	; 13
     896:	88 60       	ori	r24, 0x08	; 8
     898:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     89a:	8c b1       	in	r24, 0x0c	; 12
     89c:	88 60       	ori	r24, 0x08	; 8
     89e:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     8a0:	85 b3       	in	r24, 0x15	; 21
     8a2:	8f 7e       	andi	r24, 0xEF	; 239
     8a4:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     8a6:	84 b3       	in	r24, 0x14	; 20
     8a8:	80 61       	ori	r24, 0x10	; 16
     8aa:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     8ac:	e4 eb       	ldi	r30, 0xB4	; 180
     8ae:	f4 e0       	ldi	r31, 0x04	; 4
     8b0:	80 81       	ld	r24, Z
     8b2:	87 7f       	andi	r24, 0xF7	; 247
     8b4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     8b6:	80 81       	ld	r24, Z
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     8bc:	80 81       	ld	r24, Z
     8be:	88 7f       	andi	r24, 0xF8	; 248
     8c0:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
     8c2:	0e 94 b1 03 	call	0x762	; 0x762 <CLKCTRL_init>

	rx487x_initialization();
     8c6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <rx487x_initialization>

	usb_cdc_initialization();
     8ca:	0e 94 0f 04 	call	0x81e	; 0x81e <usb_cdc_initialization>

	system_timer_initialization();
     8ce:	0e 94 20 04 	call	0x840	; 0x840 <system_timer_initialization>

	CPUINT_init();
     8d2:	0e 94 b3 03 	call	0x766	; 0x766 <CPUINT_init>

	SLPCTRL_init();
     8d6:	0e 94 52 06 	call	0xca4	; 0xca4 <SLPCTRL_init>

	i2c_initialization();
     8da:	0e 94 23 04 	call	0x846	; 0x846 <i2c_initialization>

	BOD_init();
     8de:	0e 94 af 03 	call	0x75e	; 0x75e <BOD_init>
     8e2:	08 95       	ret

000008e4 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
}
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f8 e0       	ldi	r31, 0x08	; 8
     8e8:	84 81       	ldd	r24, Z+4	; 0x04
     8ea:	88 60       	ori	r24, 0x08	; 8
     8ec:	84 83       	std	Z+4, r24	; 0x04
     8ee:	85 81       	ldd	r24, Z+5	; 0x05
     8f0:	81 60       	ori	r24, 0x01	; 1
     8f2:	85 83       	std	Z+5, r24	; 0x05
     8f4:	e8 ea       	ldi	r30, 0xA8	; 168
     8f6:	f1 e3       	ldi	r31, 0x31	; 49
     8f8:	80 81       	ld	r24, Z
     8fa:	8e 7f       	andi	r24, 0xFE	; 254
     8fc:	80 83       	st	Z, r24
     8fe:	13 86       	std	Z+11, r1	; 0x0b
     900:	8e e0       	ldi	r24, 0x0E	; 14
     902:	08 95       	ret

00000904 <i2c_do_I2C_IDLE>:
     904:	e8 ea       	ldi	r30, 0xA8	; 168
     906:	f1 e3       	ldi	r31, 0x31	; 49
     908:	80 81       	ld	r24, Z
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	80 83       	st	Z, r24
     90e:	13 86       	std	Z+11, r1	; 0x0b
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	08 95       	ret

00000914 <i2c_do_I2C_SEND_STOP>:
     914:	e0 ea       	ldi	r30, 0xA0	; 160
     916:	f8 e0       	ldi	r31, 0x08	; 8
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	83 60       	ori	r24, 0x03	; 3
     91c:	84 83       	std	Z+4, r24	; 0x04
     91e:	0e 94 82 04 	call	0x904	; 0x904 <i2c_do_I2C_IDLE>
     922:	08 95       	ret

00000924 <i2c_do_I2C_SEND_ADR_READ>:
     924:	e8 ea       	ldi	r30, 0xA8	; 168
     926:	f1 e3       	ldi	r31, 0x31	; 49
     928:	80 81       	ld	r24, Z
     92a:	88 60       	ori	r24, 0x08	; 8
     92c:	80 83       	st	Z, r24
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	81 60       	ori	r24, 0x01	; 1
     938:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	08 95       	ret

00000940 <i2c_do_I2C_SEND_RESTART>:
     940:	0e 94 92 04 	call	0x924	; 0x924 <i2c_do_I2C_SEND_ADR_READ>
     944:	08 95       	ret

00000946 <i2c_do_I2C_SEND_RESTART_READ>:
     946:	0e 94 92 04 	call	0x924	; 0x924 <i2c_do_I2C_SEND_ADR_READ>
     94a:	08 95       	ret

0000094c <i2c_do_I2C_SEND_ADR_WRITE>:
     94c:	e8 ea       	ldi	r30, 0xA8	; 168
     94e:	f1 e3       	ldi	r31, 0x31	; 49
     950:	80 81       	ld	r24, Z
     952:	88 60       	ori	r24, 0x08	; 8
     954:	80 83       	st	Z, r24
     956:	81 81       	ldd	r24, Z+1	; 0x01
     958:	88 0f       	add	r24, r24
     95a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	08 95       	ret

00000962 <i2c_do_I2C_SEND_RESTART_WRITE>:
     962:	0e 94 a6 04 	call	0x94c	; 0x94c <i2c_do_I2C_SEND_ADR_WRITE>
     966:	08 95       	ret

00000968 <i2c_do_I2C_DO_ADDRESS_NACK>:
     968:	a8 ea       	ldi	r26, 0xA8	; 168
     96a:	b1 e3       	ldi	r27, 0x31	; 49
     96c:	8c 91       	ld	r24, X
     96e:	87 7f       	andi	r24, 0xF7	; 247
     970:	8c 93       	st	X, r24
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	1b 96       	adiw	r26, 0x0b	; 11
     976:	8c 93       	st	X, r24
     978:	1b 97       	sbiw	r26, 0x0b	; 11
     97a:	50 96       	adiw	r26, 0x10	; 16
     97c:	ed 91       	ld	r30, X+
     97e:	fc 91       	ld	r31, X
     980:	51 97       	sbiw	r26, 0x11	; 17
     982:	5c 96       	adiw	r26, 0x1c	; 28
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	5d 97       	sbiw	r26, 0x1d	; 29
     98a:	09 95       	icall
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	19 f0       	breq	.+6      	; 0x996 <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
     990:	83 30       	cpi	r24, 0x03	; 3
     992:	21 f0       	breq	.+8      	; 0x99c <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
     996:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_do_I2C_SEND_RESTART_READ>
     99a:	08 95       	ret
     99c:	0e 94 b1 04 	call	0x962	; 0x962 <i2c_do_I2C_SEND_RESTART_WRITE>
     9a0:	08 95       	ret
     9a2:	0e 94 8a 04 	call	0x914	; 0x914 <i2c_do_I2C_SEND_STOP>
     9a6:	08 95       	ret

000009a8 <i2c_do_I2C_RX_DO_ACK>:
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f8 e0       	ldi	r31, 0x08	; 8
     9ac:	84 81       	ldd	r24, Z+4	; 0x04
     9ae:	8b 7f       	andi	r24, 0xFB	; 251
     9b0:	84 83       	std	Z+4, r24	; 0x04
     9b2:	84 e0       	ldi	r24, 0x04	; 4
     9b4:	08 95       	ret

000009b6 <i2c_do_I2C_TX_DO_ACK>:
     9b6:	e0 ea       	ldi	r30, 0xA0	; 160
     9b8:	f8 e0       	ldi	r31, 0x08	; 8
     9ba:	84 81       	ldd	r24, Z+4	; 0x04
     9bc:	8b 7f       	andi	r24, 0xFB	; 251
     9be:	84 83       	std	Z+4, r24	; 0x04
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	08 95       	ret

000009c4 <i2c_do_I2C_DO_NACK_STOP>:
     9c4:	e0 ea       	ldi	r30, 0xA0	; 160
     9c6:	f8 e0       	ldi	r31, 0x08	; 8
     9c8:	84 81       	ldd	r24, Z+4	; 0x04
     9ca:	84 60       	ori	r24, 0x04	; 4
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	84 81       	ldd	r24, Z+4	; 0x04
     9d0:	83 60       	ori	r24, 0x03	; 3
     9d2:	84 83       	std	Z+4, r24	; 0x04
     9d4:	0e 94 82 04 	call	0x904	; 0x904 <i2c_do_I2C_IDLE>
     9d8:	08 95       	ret

000009da <i2c_do_I2C_DO_NACK_RESTART>:
     9da:	e0 ea       	ldi	r30, 0xA0	; 160
     9dc:	f8 e0       	ldi	r31, 0x08	; 8
     9de:	84 81       	ldd	r24, Z+4	; 0x04
     9e0:	84 60       	ori	r24, 0x04	; 4
     9e2:	84 83       	std	Z+4, r24	; 0x04
     9e4:	88 e0       	ldi	r24, 0x08	; 8
     9e6:	08 95       	ret

000009e8 <i2c_do_I2C_TX>:
     9e8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     9ec:	84 ff       	sbrs	r24, 4
     9ee:	19 c0       	rjmp	.+50     	; 0xa22 <i2c_do_I2C_TX+0x3a>
     9f0:	a8 ea       	ldi	r26, 0xA8	; 168
     9f2:	b1 e3       	ldi	r27, 0x31	; 49
     9f4:	52 96       	adiw	r26, 0x12	; 18
     9f6:	ed 91       	ld	r30, X+
     9f8:	fc 91       	ld	r31, X
     9fa:	53 97       	sbiw	r26, 0x13	; 19
     9fc:	5e 96       	adiw	r26, 0x1e	; 30
     9fe:	8d 91       	ld	r24, X+
     a00:	9c 91       	ld	r25, X
     a02:	5f 97       	sbiw	r26, 0x1f	; 31
     a04:	09 95       	icall
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	19 f0       	breq	.+6      	; 0xa10 <i2c_do_I2C_TX+0x28>
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	21 f0       	breq	.+8      	; 0xa16 <i2c_do_I2C_TX+0x2e>
     a0e:	06 c0       	rjmp	.+12     	; 0xa1c <i2c_do_I2C_TX+0x34>
     a10:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_do_I2C_SEND_RESTART_READ>
     a14:	08 95       	ret
     a16:	0e 94 b1 04 	call	0x962	; 0x962 <i2c_do_I2C_SEND_RESTART_WRITE>
     a1a:	08 95       	ret
     a1c:	0e 94 8a 04 	call	0x914	; 0x914 <i2c_do_I2C_SEND_STOP>
     a20:	08 95       	ret
     a22:	e8 ea       	ldi	r30, 0xA8	; 168
     a24:	f1 e3       	ldi	r31, 0x31	; 49
     a26:	80 81       	ld	r24, Z
     a28:	87 7f       	andi	r24, 0xF7	; 247
     a2a:	80 83       	st	Z, r24
     a2c:	a2 81       	ldd	r26, Z+2	; 0x02
     a2e:	b3 81       	ldd	r27, Z+3	; 0x03
     a30:	cd 01       	movw	r24, r26
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	82 83       	std	Z+2, r24	; 0x02
     a36:	93 83       	std	Z+3, r25	; 0x03
     a38:	8c 91       	ld	r24, X
     a3a:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	95 81       	ldd	r25, Z+5	; 0x05
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	84 83       	std	Z+4, r24	; 0x04
     a46:	95 83       	std	Z+5, r25	; 0x05
     a48:	89 2b       	or	r24, r25
     a4a:	11 f0       	breq	.+4      	; 0xa50 <i2c_do_I2C_TX+0x68>
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	08 95       	ret
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	08 95       	ret

00000a54 <i2c_do_I2C_RX>:
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	e8 ea       	ldi	r30, 0xA8	; 168
     a5a:	f1 e3       	ldi	r31, 0x31	; 49
     a5c:	80 81       	ld	r24, Z
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 83       	st	Z, r24
     a62:	84 81       	ldd	r24, Z+4	; 0x04
     a64:	95 81       	ldd	r25, Z+5	; 0x05
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	31 f4       	brne	.+12     	; 0xa76 <i2c_do_I2C_RX+0x22>
     a6a:	e0 ea       	ldi	r30, 0xA0	; 160
     a6c:	f8 e0       	ldi	r31, 0x08	; 8
     a6e:	84 81       	ldd	r24, Z+4	; 0x04
     a70:	84 60       	ori	r24, 0x04	; 4
     a72:	84 83       	std	Z+4, r24	; 0x04
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <i2c_do_I2C_RX+0x2c>
     a76:	e0 ea       	ldi	r30, 0xA0	; 160
     a78:	f8 e0       	ldi	r31, 0x08	; 8
     a7a:	84 81       	ldd	r24, Z+4	; 0x04
     a7c:	8b 7f       	andi	r24, 0xFB	; 251
     a7e:	84 83       	std	Z+4, r24	; 0x04
     a80:	e8 ea       	ldi	r30, 0xA8	; 168
     a82:	f1 e3       	ldi	r31, 0x31	; 49
     a84:	84 81       	ldd	r24, Z+4	; 0x04
     a86:	95 81       	ldd	r25, Z+5	; 0x05
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	84 83       	std	Z+4, r24	; 0x04
     a8c:	95 83       	std	Z+5, r25	; 0x05
     a8e:	89 2b       	or	r24, r25
     a90:	a9 f0       	breq	.+42     	; 0xabc <i2c_do_I2C_RX+0x68>
     a92:	df 01       	movw	r26, r30
     a94:	c2 81       	ldd	r28, Z+2	; 0x02
     a96:	d3 81       	ldd	r29, Z+3	; 0x03
     a98:	e0 ea       	ldi	r30, 0xA0	; 160
     a9a:	f8 e0       	ldi	r31, 0x08	; 8
     a9c:	80 85       	ldd	r24, Z+8	; 0x08
     a9e:	88 83       	st	Y, r24
     aa0:	12 96       	adiw	r26, 0x02	; 2
     aa2:	8d 91       	ld	r24, X+
     aa4:	9c 91       	ld	r25, X
     aa6:	13 97       	sbiw	r26, 0x03	; 3
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	12 96       	adiw	r26, 0x02	; 2
     aac:	8d 93       	st	X+, r24
     aae:	9c 93       	st	X, r25
     ab0:	13 97       	sbiw	r26, 0x03	; 3
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	82 60       	ori	r24, 0x02	; 2
     ab6:	84 83       	std	Z+4, r24	; 0x04
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	26 c0       	rjmp	.+76     	; 0xb08 <i2c_do_I2C_RX+0xb4>
     abc:	a8 ea       	ldi	r26, 0xA8	; 168
     abe:	b1 e3       	ldi	r27, 0x31	; 49
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	13 97       	sbiw	r26, 0x03	; 3
     ac8:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     acc:	80 83       	st	Z, r24
     ace:	12 96       	adiw	r26, 0x02	; 2
     ad0:	8d 91       	ld	r24, X+
     ad2:	9c 91       	ld	r25, X
     ad4:	13 97       	sbiw	r26, 0x03	; 3
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	12 96       	adiw	r26, 0x02	; 2
     ada:	8d 93       	st	X+, r24
     adc:	9c 93       	st	X, r25
     ade:	13 97       	sbiw	r26, 0x03	; 3
     ae0:	8c 91       	ld	r24, X
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	8c 93       	st	X, r24
     ae6:	1c 96       	adiw	r26, 0x0c	; 12
     ae8:	ed 91       	ld	r30, X+
     aea:	fc 91       	ld	r31, X
     aec:	1d 97       	sbiw	r26, 0x0d	; 13
     aee:	58 96       	adiw	r26, 0x18	; 24
     af0:	8d 91       	ld	r24, X+
     af2:	9c 91       	ld	r25, X
     af4:	59 97       	sbiw	r26, 0x19	; 25
     af6:	09 95       	icall
     af8:	82 50       	subi	r24, 0x02	; 2
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	18 f4       	brcc	.+6      	; 0xb04 <i2c_do_I2C_RX+0xb0>
     afe:	0e 94 ed 04 	call	0x9da	; 0x9da <i2c_do_I2C_DO_NACK_RESTART>
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <i2c_do_I2C_RX+0xb4>
     b04:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <i2c_do_I2C_DO_NACK_STOP>
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <i2c_do_I2C_TX_EMPTY>:
     b0e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     b12:	84 ff       	sbrs	r24, 4
     b14:	19 c0       	rjmp	.+50     	; 0xb48 <i2c_do_I2C_TX_EMPTY+0x3a>
     b16:	a8 ea       	ldi	r26, 0xA8	; 168
     b18:	b1 e3       	ldi	r27, 0x31	; 49
     b1a:	52 96       	adiw	r26, 0x12	; 18
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	53 97       	sbiw	r26, 0x13	; 19
     b22:	5e 96       	adiw	r26, 0x1e	; 30
     b24:	8d 91       	ld	r24, X+
     b26:	9c 91       	ld	r25, X
     b28:	5f 97       	sbiw	r26, 0x1f	; 31
     b2a:	09 95       	icall
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	19 f0       	breq	.+6      	; 0xb36 <i2c_do_I2C_TX_EMPTY+0x28>
     b30:	83 30       	cpi	r24, 0x03	; 3
     b32:	21 f0       	breq	.+8      	; 0xb3c <i2c_do_I2C_TX_EMPTY+0x2e>
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <i2c_do_I2C_TX_EMPTY+0x34>
     b36:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_do_I2C_SEND_RESTART_READ>
     b3a:	08 95       	ret
     b3c:	0e 94 b1 04 	call	0x962	; 0x962 <i2c_do_I2C_SEND_RESTART_WRITE>
     b40:	08 95       	ret
     b42:	0e 94 8a 04 	call	0x914	; 0x914 <i2c_do_I2C_SEND_STOP>
     b46:	08 95       	ret
     b48:	a8 ea       	ldi	r26, 0xA8	; 168
     b4a:	b1 e3       	ldi	r27, 0x31	; 49
     b4c:	8c 91       	ld	r24, X
     b4e:	84 60       	ori	r24, 0x04	; 4
     b50:	8c 93       	st	X, r24
     b52:	1c 96       	adiw	r26, 0x0c	; 12
     b54:	ed 91       	ld	r30, X+
     b56:	fc 91       	ld	r31, X
     b58:	1d 97       	sbiw	r26, 0x0d	; 13
     b5a:	58 96       	adiw	r26, 0x18	; 24
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	59 97       	sbiw	r26, 0x19	; 25
     b62:	09 95       	icall
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	39 f0       	breq	.+14     	; 0xb76 <i2c_do_I2C_TX_EMPTY+0x68>
     b68:	84 30       	cpi	r24, 0x04	; 4
     b6a:	41 f0       	breq	.+16     	; 0xb7c <i2c_do_I2C_TX_EMPTY+0x6e>
     b6c:	82 30       	cpi	r24, 0x02	; 2
     b6e:	49 f4       	brne	.+18     	; 0xb82 <i2c_do_I2C_TX_EMPTY+0x74>
     b70:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_do_I2C_SEND_RESTART_READ>
     b74:	08 95       	ret
     b76:	0e 94 b1 04 	call	0x962	; 0x962 <i2c_do_I2C_SEND_RESTART_WRITE>
     b7a:	08 95       	ret
     b7c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <i2c_do_I2C_TX>
     b80:	08 95       	ret
     b82:	0e 94 8a 04 	call	0x914	; 0x914 <i2c_do_I2C_SEND_STOP>
     b86:	08 95       	ret

00000b88 <i2c_do_I2C_BUS_COLLISION>:
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f8 e0       	ldi	r31, 0x08	; 8
     b8c:	85 81       	ldd	r24, Z+5	; 0x05
     b8e:	88 60       	ori	r24, 0x08	; 8
     b90:	85 83       	std	Z+5, r24	; 0x05
     b92:	a8 ea       	ldi	r26, 0xA8	; 168
     b94:	b1 e3       	ldi	r27, 0x31	; 49
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	1b 96       	adiw	r26, 0x0b	; 11
     b9a:	8c 93       	st	X, r24
     b9c:	1b 97       	sbiw	r26, 0x0b	; 11
     b9e:	1e 96       	adiw	r26, 0x0e	; 14
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	1f 97       	sbiw	r26, 0x0f	; 15
     ba6:	5a 96       	adiw	r26, 0x1a	; 26
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	5b 97       	sbiw	r26, 0x1b	; 27
     bae:	09 95       	icall
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	19 f0       	breq	.+6      	; 0xbba <i2c_do_I2C_BUS_COLLISION+0x32>
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <i2c_do_I2C_BUS_COLLISION+0x38>
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <i2c_do_I2C_BUS_COLLISION+0x3e>
     bba:	0e 94 a3 04 	call	0x946	; 0x946 <i2c_do_I2C_SEND_RESTART_READ>
     bbe:	08 95       	ret
     bc0:	0e 94 b1 04 	call	0x962	; 0x962 <i2c_do_I2C_SEND_RESTART_WRITE>
     bc4:	08 95       	ret
     bc6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <i2c_do_I2C_RESET>
     bca:	08 95       	ret

00000bcc <i2c_do_I2C_BUS_ERROR>:
     bcc:	e0 ea       	ldi	r30, 0xA0	; 160
     bce:	f8 e0       	ldi	r31, 0x08	; 8
     bd0:	84 81       	ldd	r24, Z+4	; 0x04
     bd2:	88 60       	ori	r24, 0x08	; 8
     bd4:	84 83       	std	Z+4, r24	; 0x04
     bd6:	85 81       	ldd	r24, Z+5	; 0x05
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	85 83       	std	Z+5, r24	; 0x05
     bdc:	e8 ea       	ldi	r30, 0xA8	; 168
     bde:	f1 e3       	ldi	r31, 0x31	; 49
     be0:	80 81       	ld	r24, Z
     be2:	8e 7f       	andi	r24, 0xFE	; 254
     be4:	80 83       	st	Z, r24
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	83 87       	std	Z+11, r24	; 0x0b
     bea:	8e e0       	ldi	r24, 0x0E	; 14
     bec:	08 95       	ret

00000bee <i2c_master_isr>:
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	e0 ea       	ldi	r30, 0xA0	; 160
     bf4:	f8 e0       	ldi	r31, 0x08	; 8
     bf6:	85 81       	ldd	r24, Z+5	; 0x05
     bf8:	80 6c       	ori	r24, 0xC0	; 192
     bfa:	85 83       	std	Z+5, r24	; 0x05
     bfc:	80 91 a8 31 	lds	r24, 0x31A8	; 0x8031a8 <i2c_status>
     c00:	83 ff       	sbrs	r24, 3
     c02:	07 c0       	rjmp	.+14     	; 0xc12 <i2c_master_isr+0x24>
     c04:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     c08:	84 ff       	sbrs	r24, 4
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <i2c_master_isr+0x24>
     c0c:	8f e0       	ldi	r24, 0x0F	; 15
     c0e:	80 93 b2 31 	sts	0x31B2, r24	; 0x8031b2 <i2c_status+0xa>
     c12:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     c16:	83 ff       	sbrs	r24, 3
     c18:	03 c0       	rjmp	.+6      	; 0xc20 <i2c_master_isr+0x32>
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	80 93 b2 31 	sts	0x31B2, r24	; 0x8031b2 <i2c_status+0xa>
     c20:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     c24:	82 ff       	sbrs	r24, 2
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <i2c_master_isr+0x40>
     c28:	81 e1       	ldi	r24, 0x11	; 17
     c2a:	80 93 b2 31 	sts	0x31B2, r24	; 0x8031b2 <i2c_status+0xa>
     c2e:	c8 ea       	ldi	r28, 0xA8	; 168
     c30:	d1 e3       	ldi	r29, 0x31	; 49
     c32:	ea 85       	ldd	r30, Y+10	; 0x0a
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ea 5a       	subi	r30, 0xAA	; 170
     c3c:	ff 4c       	sbci	r31, 0xCF	; 207
     c3e:	01 90       	ld	r0, Z+
     c40:	f0 81       	ld	r31, Z
     c42:	e0 2d       	mov	r30, r0
     c44:	09 95       	icall
     c46:	8a 87       	std	Y+10, r24	; 0x0a
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <i2c_init>:
     c4e:	e0 ea       	ldi	r30, 0xA0	; 160
     c50:	f8 e0       	ldi	r31, 0x08	; 8
     c52:	8b e0       	ldi	r24, 0x0B	; 11
     c54:	86 83       	std	Z+6, r24	; 0x06
     c56:	81 ec       	ldi	r24, 0xC1	; 193
     c58:	83 83       	std	Z+3, r24	; 0x03
     c5a:	08 95       	ret

00000c5c <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
	i2c_master_isr();
     c7e:	0e 94 f7 05 	call	0xbee	; 0xbee <i2c_master_isr>
}
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	08 95       	ret

00000ca8 <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	08 95       	ret

00000cac <rx487x_default_rx_isr_cb>:
	usb_cdc_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return usb_cdc_rxbuf[tmptail];
}
     cac:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
     cb0:	e0 91 d7 34 	lds	r30, 0x34D7	; 0x8034d7 <rx487x_rx_head>
     cb4:	ef 5f       	subi	r30, 0xFF	; 255
     cb6:	80 91 d6 34 	lds	r24, 0x34D6	; 0x8034d6 <rx487x_rx_tail>
     cba:	e8 17       	cp	r30, r24
     cbc:	59 f0       	breq	.+22     	; 0xcd4 <rx487x_default_rx_isr_cb+0x28>
     cbe:	e0 93 d7 34 	sts	0x34D7, r30	; 0x8034d7 <rx487x_rx_head>
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	e8 52       	subi	r30, 0x28	; 40
     cc6:	fb 4c       	sbci	r31, 0xCB	; 203
     cc8:	90 83       	st	Z, r25
     cca:	80 91 d5 34 	lds	r24, 0x34D5	; 0x8034d5 <rx487x_rx_elements>
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	80 93 d5 34 	sts	0x34D5, r24	; 0x8034d5 <rx487x_rx_elements>
     cd4:	08 95       	ret

00000cd6 <rx487x_default_udre_isr_cb>:
     cd6:	80 91 d2 33 	lds	r24, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     cda:	88 23       	and	r24, r24
     cdc:	81 f0       	breq	.+32     	; 0xcfe <rx487x_default_udre_isr_cb+0x28>
     cde:	e0 91 d3 33 	lds	r30, 0x33D3	; 0x8033d3 <rx487x_tx_tail>
     ce2:	ef 5f       	subi	r30, 0xFF	; 255
     ce4:	e0 93 d3 33 	sts	0x33D3, r30	; 0x8033d3 <rx487x_tx_tail>
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	eb 52       	subi	r30, 0x2B	; 43
     cec:	fc 4c       	sbci	r31, 0xCC	; 204
     cee:	80 81       	ld	r24, Z
     cf0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
     cf4:	80 91 d2 33 	lds	r24, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     cf8:	81 50       	subi	r24, 0x01	; 1
     cfa:	80 93 d2 33 	sts	0x33D2, r24	; 0x8033d2 <rx487x_tx_elements>
     cfe:	80 91 d2 33 	lds	r24, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     d02:	81 11       	cpse	r24, r1
     d04:	05 c0       	rjmp	.+10     	; 0xd10 <rx487x_default_udre_isr_cb+0x3a>
     d06:	e0 e0       	ldi	r30, 0x00	; 0
     d08:	f8 e0       	ldi	r31, 0x08	; 8
     d0a:	85 81       	ldd	r24, Z+5	; 0x05
     d0c:	8f 7d       	andi	r24, 0xDF	; 223
     d0e:	85 83       	std	Z+5, r24	; 0x05
     d10:	08 95       	ret

00000d12 <usb_cdc_default_rx_isr_cb>:
     d12:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
     d16:	e0 91 d1 32 	lds	r30, 0x32D1	; 0x8032d1 <usb_cdc_rx_head>
     d1a:	ef 5f       	subi	r30, 0xFF	; 255
     d1c:	80 91 d0 32 	lds	r24, 0x32D0	; 0x8032d0 <usb_cdc_rx_tail>
     d20:	e8 17       	cp	r30, r24
     d22:	59 f0       	breq	.+22     	; 0xd3a <usb_cdc_default_rx_isr_cb+0x28>
     d24:	e0 93 d1 32 	sts	0x32D1, r30	; 0x8032d1 <usb_cdc_rx_head>
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	ee 52       	subi	r30, 0x2E	; 46
     d2c:	fd 4c       	sbci	r31, 0xCD	; 205
     d2e:	90 83       	st	Z, r25
     d30:	80 91 cf 32 	lds	r24, 0x32CF	; 0x8032cf <usb_cdc_rx_elements>
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	80 93 cf 32 	sts	0x32CF, r24	; 0x8032cf <usb_cdc_rx_elements>
     d3a:	08 95       	ret

00000d3c <usb_cdc_default_udre_isr_cb>:
     d3c:	80 91 cc 31 	lds	r24, 0x31CC	; 0x8031cc <usb_cdc_tx_elements>
     d40:	88 23       	and	r24, r24
     d42:	81 f0       	breq	.+32     	; 0xd64 <usb_cdc_default_udre_isr_cb+0x28>
     d44:	e0 91 cd 31 	lds	r30, 0x31CD	; 0x8031cd <usb_cdc_tx_tail>
     d48:	ef 5f       	subi	r30, 0xFF	; 255
     d4a:	e0 93 cd 31 	sts	0x31CD, r30	; 0x8031cd <usb_cdc_tx_tail>
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	e1 53       	subi	r30, 0x31	; 49
     d52:	fe 4c       	sbci	r31, 0xCE	; 206
     d54:	80 81       	ld	r24, Z
     d56:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
     d5a:	80 91 cc 31 	lds	r24, 0x31CC	; 0x8031cc <usb_cdc_tx_elements>
     d5e:	81 50       	subi	r24, 0x01	; 1
     d60:	80 93 cc 31 	sts	0x31CC, r24	; 0x8031cc <usb_cdc_tx_elements>
     d64:	80 91 cc 31 	lds	r24, 0x31CC	; 0x8031cc <usb_cdc_tx_elements>
     d68:	81 11       	cpse	r24, r1
     d6a:	05 c0       	rjmp	.+10     	; 0xd76 <usb_cdc_default_udre_isr_cb+0x3a>
     d6c:	e0 e4       	ldi	r30, 0x40	; 64
     d6e:	f8 e0       	ldi	r31, 0x08	; 8
     d70:	85 81       	ldd	r24, Z+5	; 0x05
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	85 83       	std	Z+5, r24	; 0x05
     d76:	08 95       	ret

00000d78 <rx487x_set_ISR_cb>:
     d78:	61 30       	cpi	r22, 0x01	; 1
     d7a:	19 f0       	breq	.+6      	; 0xd82 <rx487x_set_ISR_cb+0xa>
     d7c:	62 30       	cpi	r22, 0x02	; 2
     d7e:	31 f0       	breq	.+12     	; 0xd8c <rx487x_set_ISR_cb+0x14>
     d80:	08 95       	ret
     d82:	80 93 8e 30 	sts	0x308E, r24	; 0x80308e <rx487x_rx_isr_cb>
     d86:	90 93 8f 30 	sts	0x308F, r25	; 0x80308f <rx487x_rx_isr_cb+0x1>
     d8a:	08 95       	ret
     d8c:	80 93 8c 30 	sts	0x308C, r24	; 0x80308c <rx487x_udre_isr_cb>
     d90:	90 93 8d 30 	sts	0x308D, r25	; 0x80308d <rx487x_udre_isr_cb+0x1>
     d94:	08 95       	ret

00000d96 <__vector_17>:
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
     db8:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <rx487x_rx_isr_cb>
     dbc:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <rx487x_rx_isr_cb+0x1>
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <__vector_17+0x30>
     dc4:	09 95       	icall
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_18>:
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	e0 91 8c 30 	lds	r30, 0x308C	; 0x80308c <rx487x_udre_isr_cb>
     e0e:	f0 91 8d 30 	lds	r31, 0x308D	; 0x80308d <rx487x_udre_isr_cb+0x1>
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	09 f0       	breq	.+2      	; 0xe18 <__vector_18+0x30>
     e16:	09 95       	icall
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <rx487x_is_tx_ready>:
     e3a:	80 91 d2 33 	lds	r24, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	08 95       	ret

00000e42 <rx487x_write>:
     e42:	90 91 d4 33 	lds	r25, 0x33D4	; 0x8033d4 <rx487x_tx_head>
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	20 91 d2 33 	lds	r18, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     e4c:	e9 2f       	mov	r30, r25
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	eb 52       	subi	r30, 0x2B	; 43
     e52:	fc 4c       	sbci	r31, 0xCC	; 204
     e54:	80 83       	st	Z, r24
     e56:	90 93 d4 33 	sts	0x33D4, r25	; 0x8033d4 <rx487x_tx_head>
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	0f 92       	push	r0
     e60:	80 91 d2 33 	lds	r24, 0x33D2	; 0x8033d2 <rx487x_tx_elements>
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	80 93 d2 33 	sts	0x33D2, r24	; 0x8033d2 <rx487x_tx_elements>
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	e0 e0       	ldi	r30, 0x00	; 0
     e70:	f8 e0       	ldi	r31, 0x08	; 8
     e72:	85 81       	ldd	r24, Z+5	; 0x05
     e74:	80 62       	ori	r24, 0x20	; 32
     e76:	85 83       	std	Z+5, r24	; 0x05
     e78:	08 95       	ret

00000e7a <rx487x_init>:
     e7a:	e0 e0       	ldi	r30, 0x00	; 0
     e7c:	f8 e0       	ldi	r31, 0x08	; 8
     e7e:	84 e7       	ldi	r24, 0x74	; 116
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	80 87       	std	Z+8, r24	; 0x08
     e84:	91 87       	std	Z+9, r25	; 0x09
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	85 83       	std	Z+5, r24	; 0x05
     e8a:	80 ec       	ldi	r24, 0xC0	; 192
     e8c:	86 83       	std	Z+6, r24	; 0x06
     e8e:	10 92 d6 34 	sts	0x34D6, r1	; 0x8034d6 <rx487x_rx_tail>
     e92:	10 92 d7 34 	sts	0x34D7, r1	; 0x8034d7 <rx487x_rx_head>
     e96:	10 92 d5 34 	sts	0x34D5, r1	; 0x8034d5 <rx487x_rx_elements>
     e9a:	10 92 d3 33 	sts	0x33D3, r1	; 0x8033d3 <rx487x_tx_tail>
     e9e:	10 92 d4 33 	sts	0x33D4, r1	; 0x8033d4 <rx487x_tx_head>
     ea2:	10 92 d2 33 	sts	0x33D2, r1	; 0x8033d2 <rx487x_tx_elements>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	08 95       	ret

00000eaa <rx487x_get_data>:
     eaa:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
     eae:	08 95       	ret

00000eb0 <__vector_31>:
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
     ed2:	e0 91 7c 30 	lds	r30, 0x307C	; 0x80307c <usb_cdc_rx_isr_cb>
     ed6:	f0 91 7d 30 	lds	r31, 0x307D	; 0x80307d <usb_cdc_rx_isr_cb+0x1>
     eda:	30 97       	sbiw	r30, 0x00	; 0
     edc:	09 f0       	breq	.+2      	; 0xee0 <__vector_31+0x30>
     ede:	09 95       	icall
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_32>:
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
     f24:	e0 91 7a 30 	lds	r30, 0x307A	; 0x80307a <usb_cdc_udre_isr_cb>
     f28:	f0 91 7b 30 	lds	r31, 0x307B	; 0x80307b <usb_cdc_udre_isr_cb+0x1>
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__vector_32+0x30>
     f30:	09 95       	icall
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <usb_cdc_write>:
void usb_cdc_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (usb_cdc_tx_head + 1) & usb_cdc_TX_BUFFER_MASK;
     f54:	90 91 ce 31 	lds	r25, 0x31CE	; 0x8031ce <usb_cdc_tx_head>
     f58:	9f 5f       	subi	r25, 0xFF	; 255
	/* Wait for free space in buffer */
	while (usb_cdc_tx_elements == usb_cdc_TX_BUFFER_SIZE)
     f5a:	20 91 cc 31 	lds	r18, 0x31CC	; 0x8031cc <usb_cdc_tx_elements>
		;
	/* Store data in buffer */
	usb_cdc_txbuf[tmphead] = data;
     f5e:	e9 2f       	mov	r30, r25
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	e1 53       	subi	r30, 0x31	; 49
     f64:	fe 4c       	sbci	r31, 0xCE	; 206
     f66:	80 83       	st	Z, r24
	/* Store new index */
	usb_cdc_tx_head = tmphead;
     f68:	90 93 ce 31 	sts	0x31CE, r25	; 0x8031ce <usb_cdc_tx_head>
	ENTER_CRITICAL(W);
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	0f 92       	push	r0
	usb_cdc_tx_elements++;
     f72:	80 91 cc 31 	lds	r24, 0x31CC	; 0x8031cc <usb_cdc_tx_elements>
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	80 93 cc 31 	sts	0x31CC, r24	; 0x8031cc <usb_cdc_tx_elements>
	EXIT_CRITICAL(W);
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART2.CTRLA |= (1 << USART_DREIE_bp);
     f80:	e0 e4       	ldi	r30, 0x40	; 64
     f82:	f8 e0       	ldi	r31, 0x08	; 8
     f84:	85 81       	ldd	r24, Z+5	; 0x05
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	85 83       	std	Z+5, r24	; 0x05
     f8a:	08 95       	ret

00000f8c <usb_cdc_printCHAR>:

#if defined(__GNUC__)

int usb_cdc_printCHAR(char character, FILE *stream)
{
	usb_cdc_write(character);
     f8c:	0e 94 aa 07 	call	0xf54	; 0xf54 <usb_cdc_write>
	return 0;
}
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret

00000f96 <usb_cdc_init>:
 * \retval 1 the USART init was not successful
 */
int8_t usb_cdc_init()
{

	USART2.BAUD = (uint16_t)USART2_BAUD_RATE(115200); /* set baud rate register */
     f96:	e0 e4       	ldi	r30, 0x40	; 64
     f98:	f8 e0       	ldi	r31, 0x08	; 8
     f9a:	84 e7       	ldi	r24, 0x74	; 116
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	80 87       	std	Z+8, r24	; 0x08
     fa0:	91 87       	std	Z+9, r25	; 0x09

	USART2.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     fa2:	80 e8       	ldi	r24, 0x80	; 128
     fa4:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART2.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     fa6:	80 ec       	ldi	r24, 0xC0	; 192
     fa8:	86 83       	std	Z+6, r24	; 0x06
	// USART2.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
	//		 | USART_CHSIZE_8BIT_gc /* Character size: 8 bit */
	//		 | USART_PMODE_DISABLED_gc /* No Parity */
	//		 | USART_SBMODE_1BIT_gc; /* 1 stop bit */

	USART2.DBGCTRL = 1 << USART_DBGRUN_bp; /* Debug Run: enabled */
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	usb_cdc_rx_tail     = x;
     fae:	10 92 d0 32 	sts	0x32D0, r1	; 0x8032d0 <usb_cdc_rx_tail>
	usb_cdc_rx_head     = x;
     fb2:	10 92 d1 32 	sts	0x32D1, r1	; 0x8032d1 <usb_cdc_rx_head>
	usb_cdc_rx_elements = x;
     fb6:	10 92 cf 32 	sts	0x32CF, r1	; 0x8032cf <usb_cdc_rx_elements>
	usb_cdc_tx_tail     = x;
     fba:	10 92 cd 31 	sts	0x31CD, r1	; 0x8031cd <usb_cdc_tx_tail>
	usb_cdc_tx_head     = x;
     fbe:	10 92 ce 31 	sts	0x31CE, r1	; 0x8031ce <usb_cdc_tx_head>
	usb_cdc_tx_elements = x;
     fc2:	10 92 cc 31 	sts	0x31CC, r1	; 0x8031cc <usb_cdc_tx_elements>

#if defined(__GNUC__)
	stdout = &usb_cdc_stream;
     fc6:	8e e7       	ldi	r24, 0x7E	; 126
     fc8:	90 e3       	ldi	r25, 0x30	; 48
     fca:	80 93 de 35 	sts	0x35DE, r24	; 0x8035de <__iob+0x2>
     fce:	90 93 df 35 	sts	0x35DF, r25	; 0x8035df <__iob+0x3>
#endif

	return 0;
}
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	08 95       	ret

00000fd6 <__muluhisi3>:
     fd6:	0e 94 f6 07 	call	0xfec	; 0xfec <__umulhisi3>
     fda:	a5 9f       	mul	r26, r21
     fdc:	90 0d       	add	r25, r0
     fde:	b4 9f       	mul	r27, r20
     fe0:	90 0d       	add	r25, r0
     fe2:	a4 9f       	mul	r26, r20
     fe4:	80 0d       	add	r24, r0
     fe6:	91 1d       	adc	r25, r1
     fe8:	11 24       	eor	r1, r1
     fea:	08 95       	ret

00000fec <__umulhisi3>:
     fec:	a2 9f       	mul	r26, r18
     fee:	b0 01       	movw	r22, r0
     ff0:	b3 9f       	mul	r27, r19
     ff2:	c0 01       	movw	r24, r0
     ff4:	a3 9f       	mul	r26, r19
     ff6:	70 0d       	add	r23, r0
     ff8:	81 1d       	adc	r24, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	b2 9f       	mul	r27, r18
    1000:	70 0d       	add	r23, r0
    1002:	81 1d       	adc	r24, r1
    1004:	11 24       	eor	r1, r1
    1006:	91 1d       	adc	r25, r1
    1008:	08 95       	ret

0000100a <malloc>:
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	91 05       	cpc	r25, r1
    1016:	10 f4       	brcc	.+4      	; 0x101c <malloc+0x12>
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	e0 91 da 35 	lds	r30, 0x35DA	; 0x8035da <__flp>
    1020:	f0 91 db 35 	lds	r31, 0x35DB	; 0x8035db <__flp+0x1>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	19 f1       	breq	.+70     	; 0x1076 <malloc+0x6c>
    1030:	40 81       	ld	r20, Z
    1032:	51 81       	ldd	r21, Z+1	; 0x01
    1034:	02 81       	ldd	r16, Z+2	; 0x02
    1036:	13 81       	ldd	r17, Z+3	; 0x03
    1038:	48 17       	cp	r20, r24
    103a:	59 07       	cpc	r21, r25
    103c:	c8 f0       	brcs	.+50     	; 0x1070 <malloc+0x66>
    103e:	84 17       	cp	r24, r20
    1040:	95 07       	cpc	r25, r21
    1042:	69 f4       	brne	.+26     	; 0x105e <malloc+0x54>
    1044:	10 97       	sbiw	r26, 0x00	; 0
    1046:	31 f0       	breq	.+12     	; 0x1054 <malloc+0x4a>
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	0c 93       	st	X, r16
    104c:	12 97       	sbiw	r26, 0x02	; 2
    104e:	13 96       	adiw	r26, 0x03	; 3
    1050:	1c 93       	st	X, r17
    1052:	27 c0       	rjmp	.+78     	; 0x10a2 <malloc+0x98>
    1054:	00 93 da 35 	sts	0x35DA, r16	; 0x8035da <__flp>
    1058:	10 93 db 35 	sts	0x35DB, r17	; 0x8035db <__flp+0x1>
    105c:	22 c0       	rjmp	.+68     	; 0x10a2 <malloc+0x98>
    105e:	21 15       	cp	r18, r1
    1060:	31 05       	cpc	r19, r1
    1062:	19 f0       	breq	.+6      	; 0x106a <malloc+0x60>
    1064:	42 17       	cp	r20, r18
    1066:	53 07       	cpc	r21, r19
    1068:	18 f4       	brcc	.+6      	; 0x1070 <malloc+0x66>
    106a:	9a 01       	movw	r18, r20
    106c:	bd 01       	movw	r22, r26
    106e:	ef 01       	movw	r28, r30
    1070:	df 01       	movw	r26, r30
    1072:	f8 01       	movw	r30, r16
    1074:	db cf       	rjmp	.-74     	; 0x102c <malloc+0x22>
    1076:	21 15       	cp	r18, r1
    1078:	31 05       	cpc	r19, r1
    107a:	f9 f0       	breq	.+62     	; 0x10ba <malloc+0xb0>
    107c:	28 1b       	sub	r18, r24
    107e:	39 0b       	sbc	r19, r25
    1080:	24 30       	cpi	r18, 0x04	; 4
    1082:	31 05       	cpc	r19, r1
    1084:	80 f4       	brcc	.+32     	; 0x10a6 <malloc+0x9c>
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	61 15       	cp	r22, r1
    108c:	71 05       	cpc	r23, r1
    108e:	21 f0       	breq	.+8      	; 0x1098 <malloc+0x8e>
    1090:	fb 01       	movw	r30, r22
    1092:	82 83       	std	Z+2, r24	; 0x02
    1094:	93 83       	std	Z+3, r25	; 0x03
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <malloc+0x96>
    1098:	80 93 da 35 	sts	0x35DA, r24	; 0x8035da <__flp>
    109c:	90 93 db 35 	sts	0x35DB, r25	; 0x8035db <__flp+0x1>
    10a0:	fe 01       	movw	r30, r28
    10a2:	32 96       	adiw	r30, 0x02	; 2
    10a4:	44 c0       	rjmp	.+136    	; 0x112e <malloc+0x124>
    10a6:	fe 01       	movw	r30, r28
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	81 93       	st	Z+, r24
    10ae:	91 93       	st	Z+, r25
    10b0:	22 50       	subi	r18, 0x02	; 2
    10b2:	31 09       	sbc	r19, r1
    10b4:	28 83       	st	Y, r18
    10b6:	39 83       	std	Y+1, r19	; 0x01
    10b8:	3a c0       	rjmp	.+116    	; 0x112e <malloc+0x124>
    10ba:	20 91 d8 35 	lds	r18, 0x35D8	; 0x8035d8 <__brkval>
    10be:	30 91 d9 35 	lds	r19, 0x35D9	; 0x8035d9 <__brkval+0x1>
    10c2:	23 2b       	or	r18, r19
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <malloc+0xcc>
    10c6:	20 91 02 30 	lds	r18, 0x3002	; 0x803002 <__malloc_heap_start>
    10ca:	30 91 03 30 	lds	r19, 0x3003	; 0x803003 <__malloc_heap_start+0x1>
    10ce:	20 93 d8 35 	sts	0x35D8, r18	; 0x8035d8 <__brkval>
    10d2:	30 93 d9 35 	sts	0x35D9, r19	; 0x8035d9 <__brkval+0x1>
    10d6:	20 91 00 30 	lds	r18, 0x3000	; 0x803000 <__DATA_REGION_ORIGIN__>
    10da:	30 91 01 30 	lds	r19, 0x3001	; 0x803001 <__DATA_REGION_ORIGIN__+0x1>
    10de:	21 15       	cp	r18, r1
    10e0:	31 05       	cpc	r19, r1
    10e2:	41 f4       	brne	.+16     	; 0x10f4 <malloc+0xea>
    10e4:	2d b7       	in	r18, 0x3d	; 61
    10e6:	3e b7       	in	r19, 0x3e	; 62
    10e8:	40 91 04 30 	lds	r20, 0x3004	; 0x803004 <__malloc_margin>
    10ec:	50 91 05 30 	lds	r21, 0x3005	; 0x803005 <__malloc_margin+0x1>
    10f0:	24 1b       	sub	r18, r20
    10f2:	35 0b       	sbc	r19, r21
    10f4:	e0 91 d8 35 	lds	r30, 0x35D8	; 0x8035d8 <__brkval>
    10f8:	f0 91 d9 35 	lds	r31, 0x35D9	; 0x8035d9 <__brkval+0x1>
    10fc:	e2 17       	cp	r30, r18
    10fe:	f3 07       	cpc	r31, r19
    1100:	a0 f4       	brcc	.+40     	; 0x112a <malloc+0x120>
    1102:	2e 1b       	sub	r18, r30
    1104:	3f 0b       	sbc	r19, r31
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	78 f0       	brcs	.+30     	; 0x112a <malloc+0x120>
    110c:	ac 01       	movw	r20, r24
    110e:	4e 5f       	subi	r20, 0xFE	; 254
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	24 17       	cp	r18, r20
    1114:	35 07       	cpc	r19, r21
    1116:	48 f0       	brcs	.+18     	; 0x112a <malloc+0x120>
    1118:	4e 0f       	add	r20, r30
    111a:	5f 1f       	adc	r21, r31
    111c:	40 93 d8 35 	sts	0x35D8, r20	; 0x8035d8 <__brkval>
    1120:	50 93 d9 35 	sts	0x35D9, r21	; 0x8035d9 <__brkval+0x1>
    1124:	81 93       	st	Z+, r24
    1126:	91 93       	st	Z+, r25
    1128:	02 c0       	rjmp	.+4      	; 0x112e <malloc+0x124>
    112a:	e0 e0       	ldi	r30, 0x00	; 0
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	cf 01       	movw	r24, r30
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <free>:
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	09 f4       	brne	.+2      	; 0x1144 <free+0xa>
    1142:	81 c0       	rjmp	.+258    	; 0x1246 <free+0x10c>
    1144:	fc 01       	movw	r30, r24
    1146:	32 97       	sbiw	r30, 0x02	; 2
    1148:	12 82       	std	Z+2, r1	; 0x02
    114a:	13 82       	std	Z+3, r1	; 0x03
    114c:	a0 91 da 35 	lds	r26, 0x35DA	; 0x8035da <__flp>
    1150:	b0 91 db 35 	lds	r27, 0x35DB	; 0x8035db <__flp+0x1>
    1154:	10 97       	sbiw	r26, 0x00	; 0
    1156:	81 f4       	brne	.+32     	; 0x1178 <free+0x3e>
    1158:	20 81       	ld	r18, Z
    115a:	31 81       	ldd	r19, Z+1	; 0x01
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	20 91 d8 35 	lds	r18, 0x35D8	; 0x8035d8 <__brkval>
    1164:	30 91 d9 35 	lds	r19, 0x35D9	; 0x8035d9 <__brkval+0x1>
    1168:	28 17       	cp	r18, r24
    116a:	39 07       	cpc	r19, r25
    116c:	51 f5       	brne	.+84     	; 0x11c2 <free+0x88>
    116e:	e0 93 d8 35 	sts	0x35D8, r30	; 0x8035d8 <__brkval>
    1172:	f0 93 d9 35 	sts	0x35D9, r31	; 0x8035d9 <__brkval+0x1>
    1176:	67 c0       	rjmp	.+206    	; 0x1246 <free+0x10c>
    1178:	ed 01       	movw	r28, r26
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	ce 17       	cp	r28, r30
    1180:	df 07       	cpc	r29, r31
    1182:	40 f4       	brcc	.+16     	; 0x1194 <free+0x5a>
    1184:	4a 81       	ldd	r20, Y+2	; 0x02
    1186:	5b 81       	ldd	r21, Y+3	; 0x03
    1188:	9e 01       	movw	r18, r28
    118a:	41 15       	cp	r20, r1
    118c:	51 05       	cpc	r21, r1
    118e:	f1 f0       	breq	.+60     	; 0x11cc <free+0x92>
    1190:	ea 01       	movw	r28, r20
    1192:	f5 cf       	rjmp	.-22     	; 0x117e <free+0x44>
    1194:	c2 83       	std	Z+2, r28	; 0x02
    1196:	d3 83       	std	Z+3, r29	; 0x03
    1198:	40 81       	ld	r20, Z
    119a:	51 81       	ldd	r21, Z+1	; 0x01
    119c:	84 0f       	add	r24, r20
    119e:	95 1f       	adc	r25, r21
    11a0:	c8 17       	cp	r28, r24
    11a2:	d9 07       	cpc	r29, r25
    11a4:	59 f4       	brne	.+22     	; 0x11bc <free+0x82>
    11a6:	88 81       	ld	r24, Y
    11a8:	99 81       	ldd	r25, Y+1	; 0x01
    11aa:	84 0f       	add	r24, r20
    11ac:	95 1f       	adc	r25, r21
    11ae:	02 96       	adiw	r24, 0x02	; 2
    11b0:	80 83       	st	Z, r24
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	82 83       	std	Z+2, r24	; 0x02
    11ba:	93 83       	std	Z+3, r25	; 0x03
    11bc:	21 15       	cp	r18, r1
    11be:	31 05       	cpc	r19, r1
    11c0:	29 f4       	brne	.+10     	; 0x11cc <free+0x92>
    11c2:	e0 93 da 35 	sts	0x35DA, r30	; 0x8035da <__flp>
    11c6:	f0 93 db 35 	sts	0x35DB, r31	; 0x8035db <__flp+0x1>
    11ca:	3d c0       	rjmp	.+122    	; 0x1246 <free+0x10c>
    11cc:	e9 01       	movw	r28, r18
    11ce:	ea 83       	std	Y+2, r30	; 0x02
    11d0:	fb 83       	std	Y+3, r31	; 0x03
    11d2:	49 91       	ld	r20, Y+
    11d4:	59 91       	ld	r21, Y+
    11d6:	c4 0f       	add	r28, r20
    11d8:	d5 1f       	adc	r29, r21
    11da:	ec 17       	cp	r30, r28
    11dc:	fd 07       	cpc	r31, r29
    11de:	61 f4       	brne	.+24     	; 0x11f8 <free+0xbe>
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	84 0f       	add	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	02 96       	adiw	r24, 0x02	; 2
    11ea:	e9 01       	movw	r28, r18
    11ec:	88 83       	st	Y, r24
    11ee:	99 83       	std	Y+1, r25	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
    11f6:	9b 83       	std	Y+3, r25	; 0x03
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	13 97       	sbiw	r26, 0x03	; 3
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	19 f0       	breq	.+6      	; 0x120e <free+0xd4>
    1208:	fd 01       	movw	r30, r26
    120a:	dc 01       	movw	r26, r24
    120c:	f7 cf       	rjmp	.-18     	; 0x11fc <free+0xc2>
    120e:	8d 91       	ld	r24, X+
    1210:	9c 91       	ld	r25, X
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	9d 01       	movw	r18, r26
    1216:	2e 5f       	subi	r18, 0xFE	; 254
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	20 91 d8 35 	lds	r18, 0x35D8	; 0x8035d8 <__brkval>
    1222:	30 91 d9 35 	lds	r19, 0x35D9	; 0x8035d9 <__brkval+0x1>
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	69 f4       	brne	.+26     	; 0x1246 <free+0x10c>
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	29 f4       	brne	.+10     	; 0x123a <free+0x100>
    1230:	10 92 da 35 	sts	0x35DA, r1	; 0x8035da <__flp>
    1234:	10 92 db 35 	sts	0x35DB, r1	; 0x8035db <__flp+0x1>
    1238:	02 c0       	rjmp	.+4      	; 0x123e <free+0x104>
    123a:	12 82       	std	Z+2, r1	; 0x02
    123c:	13 82       	std	Z+3, r1	; 0x03
    123e:	a0 93 d8 35 	sts	0x35D8, r26	; 0x8035d8 <__brkval>
    1242:	b0 93 d9 35 	sts	0x35D9, r27	; 0x8035d9 <__brkval+0x1>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <strtol>:
    124c:	a0 e0       	ldi	r26, 0x00	; 0
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ec e2       	ldi	r30, 0x2C	; 44
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__prologue_saves__+0x2>
    1258:	5c 01       	movw	r10, r24
    125a:	6b 01       	movw	r12, r22
    125c:	7a 01       	movw	r14, r20
    125e:	61 15       	cp	r22, r1
    1260:	71 05       	cpc	r23, r1
    1262:	19 f0       	breq	.+6      	; 0x126a <strtol+0x1e>
    1264:	fb 01       	movw	r30, r22
    1266:	80 83       	st	Z, r24
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	e1 14       	cp	r14, r1
    126c:	f1 04       	cpc	r15, r1
    126e:	29 f0       	breq	.+10     	; 0x127a <strtol+0x2e>
    1270:	c7 01       	movw	r24, r14
    1272:	02 97       	sbiw	r24, 0x02	; 2
    1274:	83 97       	sbiw	r24, 0x23	; 35
    1276:	08 f0       	brcs	.+2      	; 0x127a <strtol+0x2e>
    1278:	e5 c0       	rjmp	.+458    	; 0x1444 <strtol+0x1f8>
    127a:	e5 01       	movw	r28, r10
    127c:	21 96       	adiw	r28, 0x01	; 1
    127e:	f5 01       	movw	r30, r10
    1280:	10 81       	ld	r17, Z
    1282:	81 2f       	mov	r24, r17
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 3c 0a 	call	0x1478	; 0x1478 <isspace>
    128a:	89 2b       	or	r24, r25
    128c:	11 f0       	breq	.+4      	; 0x1292 <strtol+0x46>
    128e:	5e 01       	movw	r10, r28
    1290:	f4 cf       	rjmp	.-24     	; 0x127a <strtol+0x2e>
    1292:	1d 32       	cpi	r17, 0x2D	; 45
    1294:	29 f4       	brne	.+10     	; 0x12a0 <strtol+0x54>
    1296:	21 96       	adiw	r28, 0x01	; 1
    1298:	f5 01       	movw	r30, r10
    129a:	11 81       	ldd	r17, Z+1	; 0x01
    129c:	01 e0       	ldi	r16, 0x01	; 1
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <strtol+0x62>
    12a0:	1b 32       	cpi	r17, 0x2B	; 43
    12a2:	21 f4       	brne	.+8      	; 0x12ac <strtol+0x60>
    12a4:	e5 01       	movw	r28, r10
    12a6:	22 96       	adiw	r28, 0x02	; 2
    12a8:	f5 01       	movw	r30, r10
    12aa:	11 81       	ldd	r17, Z+1	; 0x01
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    12ae:	e1 14       	cp	r14, r1
    12b0:	f1 04       	cpc	r15, r1
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <strtol+0xaa>
    12b4:	f0 e1       	ldi	r31, 0x10	; 16
    12b6:	ef 16       	cp	r14, r31
    12b8:	f1 04       	cpc	r15, r1
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <strtol+0x7a>
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <strtol+0xf0>
    12be:	10 e3       	ldi	r17, 0x30	; 48
    12c0:	e1 14       	cp	r14, r1
    12c2:	f1 04       	cpc	r15, r1
    12c4:	21 f1       	breq	.+72     	; 0x130e <strtol+0xc2>
    12c6:	28 e0       	ldi	r18, 0x08	; 8
    12c8:	e2 16       	cp	r14, r18
    12ca:	f1 04       	cpc	r15, r1
    12cc:	01 f1       	breq	.+64     	; 0x130e <strtol+0xc2>
    12ce:	54 f4       	brge	.+20     	; 0x12e4 <strtol+0x98>
    12d0:	e2 e0       	ldi	r30, 0x02	; 2
    12d2:	ee 16       	cp	r14, r30
    12d4:	f1 04       	cpc	r15, r1
    12d6:	21 f5       	brne	.+72     	; 0x1320 <strtol+0xd4>
    12d8:	81 2c       	mov	r8, r1
    12da:	91 2c       	mov	r9, r1
    12dc:	a1 2c       	mov	r10, r1
    12de:	b0 e4       	ldi	r27, 0x40	; 64
    12e0:	bb 2e       	mov	r11, r27
    12e2:	3e c0       	rjmp	.+124    	; 0x1360 <strtol+0x114>
    12e4:	fa e0       	ldi	r31, 0x0A	; 10
    12e6:	ef 16       	cp	r14, r31
    12e8:	f1 04       	cpc	r15, r1
    12ea:	39 f0       	breq	.+14     	; 0x12fa <strtol+0xae>
    12ec:	20 e1       	ldi	r18, 0x10	; 16
    12ee:	e2 16       	cp	r14, r18
    12f0:	f1 04       	cpc	r15, r1
    12f2:	b1 f4       	brne	.+44     	; 0x1320 <strtol+0xd4>
    12f4:	30 c0       	rjmp	.+96     	; 0x1356 <strtol+0x10a>
    12f6:	10 33       	cpi	r17, 0x30	; 48
    12f8:	19 f1       	breq	.+70     	; 0x1340 <strtol+0xf4>
    12fa:	fa e0       	ldi	r31, 0x0A	; 10
    12fc:	ef 2e       	mov	r14, r31
    12fe:	f1 2c       	mov	r15, r1
    1300:	ac ec       	ldi	r26, 0xCC	; 204
    1302:	8a 2e       	mov	r8, r26
    1304:	98 2c       	mov	r9, r8
    1306:	a8 2c       	mov	r10, r8
    1308:	ac e0       	ldi	r26, 0x0C	; 12
    130a:	ba 2e       	mov	r11, r26
    130c:	29 c0       	rjmp	.+82     	; 0x1360 <strtol+0x114>
    130e:	78 e0       	ldi	r23, 0x08	; 8
    1310:	e7 2e       	mov	r14, r23
    1312:	f1 2c       	mov	r15, r1
    1314:	81 2c       	mov	r8, r1
    1316:	91 2c       	mov	r9, r1
    1318:	a1 2c       	mov	r10, r1
    131a:	e0 e1       	ldi	r30, 0x10	; 16
    131c:	be 2e       	mov	r11, r30
    131e:	20 c0       	rjmp	.+64     	; 0x1360 <strtol+0x114>
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e8       	ldi	r25, 0x80	; 128
    1328:	97 01       	movw	r18, r14
    132a:	0f 2c       	mov	r0, r15
    132c:	00 0c       	add	r0, r0
    132e:	44 0b       	sbc	r20, r20
    1330:	55 0b       	sbc	r21, r21
    1332:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
    1336:	49 01       	movw	r8, r18
    1338:	5a 01       	movw	r10, r20
    133a:	12 c0       	rjmp	.+36     	; 0x1360 <strtol+0x114>
    133c:	10 33       	cpi	r17, 0x30	; 48
    133e:	59 f4       	brne	.+22     	; 0x1356 <strtol+0x10a>
    1340:	88 81       	ld	r24, Y
    1342:	8f 7d       	andi	r24, 0xDF	; 223
    1344:	88 35       	cpi	r24, 0x58	; 88
    1346:	09 f0       	breq	.+2      	; 0x134a <strtol+0xfe>
    1348:	ba cf       	rjmp	.-140    	; 0x12be <strtol+0x72>
    134a:	19 81       	ldd	r17, Y+1	; 0x01
    134c:	22 96       	adiw	r28, 0x02	; 2
    134e:	02 60       	ori	r16, 0x02	; 2
    1350:	80 e1       	ldi	r24, 0x10	; 16
    1352:	e8 2e       	mov	r14, r24
    1354:	f1 2c       	mov	r15, r1
    1356:	81 2c       	mov	r8, r1
    1358:	91 2c       	mov	r9, r1
    135a:	a1 2c       	mov	r10, r1
    135c:	68 e0       	ldi	r22, 0x08	; 8
    135e:	b6 2e       	mov	r11, r22
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	cb 01       	movw	r24, r22
    1368:	27 01       	movw	r4, r14
    136a:	0f 2c       	mov	r0, r15
    136c:	00 0c       	add	r0, r0
    136e:	66 08       	sbc	r6, r6
    1370:	77 08       	sbc	r7, r7
    1372:	fe 01       	movw	r30, r28
    1374:	50 ed       	ldi	r21, 0xD0	; 208
    1376:	35 2e       	mov	r3, r21
    1378:	31 0e       	add	r3, r17
    137a:	29 e0       	ldi	r18, 0x09	; 9
    137c:	23 15       	cp	r18, r3
    137e:	70 f4       	brcc	.+28     	; 0x139c <strtol+0x150>
    1380:	2f eb       	ldi	r18, 0xBF	; 191
    1382:	21 0f       	add	r18, r17
    1384:	2a 31       	cpi	r18, 0x1A	; 26
    1386:	18 f4       	brcc	.+6      	; 0x138e <strtol+0x142>
    1388:	39 ec       	ldi	r19, 0xC9	; 201
    138a:	33 2e       	mov	r3, r19
    138c:	06 c0       	rjmp	.+12     	; 0x139a <strtol+0x14e>
    138e:	2f e9       	ldi	r18, 0x9F	; 159
    1390:	21 0f       	add	r18, r17
    1392:	2a 31       	cpi	r18, 0x1A	; 26
    1394:	18 f5       	brcc	.+70     	; 0x13dc <strtol+0x190>
    1396:	29 ea       	ldi	r18, 0xA9	; 169
    1398:	32 2e       	mov	r3, r18
    139a:	31 0e       	add	r3, r17
    139c:	23 2d       	mov	r18, r3
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	2e 15       	cp	r18, r14
    13a2:	3f 05       	cpc	r19, r15
    13a4:	dc f4       	brge	.+54     	; 0x13dc <strtol+0x190>
    13a6:	47 fd       	sbrc	r20, 7
    13a8:	16 c0       	rjmp	.+44     	; 0x13d6 <strtol+0x18a>
    13aa:	86 16       	cp	r8, r22
    13ac:	97 06       	cpc	r9, r23
    13ae:	a8 06       	cpc	r10, r24
    13b0:	b9 06       	cpc	r11, r25
    13b2:	70 f0       	brcs	.+28     	; 0x13d0 <strtol+0x184>
    13b4:	a3 01       	movw	r20, r6
    13b6:	92 01       	movw	r18, r4
    13b8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__mulsi3>
    13bc:	63 0d       	add	r22, r3
    13be:	71 1d       	adc	r23, r1
    13c0:	81 1d       	adc	r24, r1
    13c2:	91 1d       	adc	r25, r1
    13c4:	61 30       	cpi	r22, 0x01	; 1
    13c6:	71 05       	cpc	r23, r1
    13c8:	81 05       	cpc	r24, r1
    13ca:	20 e8       	ldi	r18, 0x80	; 128
    13cc:	92 07       	cpc	r25, r18
    13ce:	10 f0       	brcs	.+4      	; 0x13d4 <strtol+0x188>
    13d0:	4f ef       	ldi	r20, 0xFF	; 255
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <strtol+0x18a>
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	21 96       	adiw	r28, 0x01	; 1
    13d8:	10 81       	ld	r17, Z
    13da:	cb cf       	rjmp	.-106    	; 0x1372 <strtol+0x126>
    13dc:	20 2f       	mov	r18, r16
    13de:	21 70       	andi	r18, 0x01	; 1
    13e0:	c1 14       	cp	r12, r1
    13e2:	d1 04       	cpc	r13, r1
    13e4:	71 f0       	breq	.+28     	; 0x1402 <strtol+0x1b6>
    13e6:	44 23       	and	r20, r20
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <strtol+0x1a8>
    13ea:	21 97       	sbiw	r28, 0x01	; 1
    13ec:	f6 01       	movw	r30, r12
    13ee:	c0 83       	st	Z, r28
    13f0:	d1 83       	std	Z+1, r29	; 0x01
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <strtol+0x1b6>
    13f4:	01 ff       	sbrs	r16, 1
    13f6:	19 c0       	rjmp	.+50     	; 0x142a <strtol+0x1de>
    13f8:	22 97       	sbiw	r28, 0x02	; 2
    13fa:	f6 01       	movw	r30, r12
    13fc:	c0 83       	st	Z, r28
    13fe:	d1 83       	std	Z+1, r29	; 0x01
    1400:	14 c0       	rjmp	.+40     	; 0x142a <strtol+0x1de>
    1402:	47 ff       	sbrs	r20, 7
    1404:	12 c0       	rjmp	.+36     	; 0x142a <strtol+0x1de>
    1406:	22 23       	and	r18, r18
    1408:	29 f0       	breq	.+10     	; 0x1414 <strtol+0x1c8>
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e8       	ldi	r25, 0x80	; 128
    1412:	04 c0       	rjmp	.+8      	; 0x141c <strtol+0x1d0>
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	7f ef       	ldi	r23, 0xFF	; 255
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f e7       	ldi	r25, 0x7F	; 127
    141c:	22 e2       	ldi	r18, 0x22	; 34
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	20 93 e2 35 	sts	0x35E2, r18	; 0x8035e2 <errno>
    1424:	30 93 e3 35 	sts	0x35E3, r19	; 0x8035e3 <errno+0x1>
    1428:	09 c0       	rjmp	.+18     	; 0x143c <strtol+0x1f0>
    142a:	22 23       	and	r18, r18
    142c:	81 f0       	breq	.+32     	; 0x144e <strtol+0x202>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	46 2f       	mov	r20, r22
    143e:	37 2f       	mov	r19, r23
    1440:	28 2f       	mov	r18, r24
    1442:	12 c0       	rjmp	.+36     	; 0x1468 <strtol+0x21c>
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <strtol+0x21c>
    144e:	97 ff       	sbrs	r25, 7
    1450:	f5 cf       	rjmp	.-22     	; 0x143c <strtol+0x1f0>
    1452:	82 e2       	ldi	r24, 0x22	; 34
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	80 93 e2 35 	sts	0x35E2, r24	; 0x8035e2 <errno>
    145a:	90 93 e3 35 	sts	0x35E3, r25	; 0x8035e3 <errno+0x1>
    145e:	6f ef       	ldi	r22, 0xFF	; 255
    1460:	7f ef       	ldi	r23, 0xFF	; 255
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f e7       	ldi	r25, 0x7F	; 127
    1466:	ea cf       	rjmp	.-44     	; 0x143c <strtol+0x1f0>
    1468:	64 2f       	mov	r22, r20
    146a:	73 2f       	mov	r23, r19
    146c:	82 2f       	mov	r24, r18
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	e1 e1       	ldi	r30, 0x11	; 17
    1474:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__epilogue_restores__+0x2>

00001478 <isspace>:
    1478:	91 11       	cpse	r25, r1
    147a:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__ctype_isfalse>
    147e:	80 32       	cpi	r24, 0x20	; 32
    1480:	19 f0       	breq	.+6      	; 0x1488 <isspace+0x10>
    1482:	89 50       	subi	r24, 0x09	; 9
    1484:	85 50       	subi	r24, 0x05	; 5
    1486:	c8 f7       	brcc	.-14     	; 0x147a <isspace+0x2>
    1488:	08 95       	ret

0000148a <strncpy>:
    148a:	fb 01       	movw	r30, r22
    148c:	dc 01       	movw	r26, r24
    148e:	41 50       	subi	r20, 0x01	; 1
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	48 f0       	brcs	.+18     	; 0x14a6 <strncpy+0x1c>
    1494:	01 90       	ld	r0, Z+
    1496:	0d 92       	st	X+, r0
    1498:	00 20       	and	r0, r0
    149a:	c9 f7       	brne	.-14     	; 0x148e <strncpy+0x4>
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <strncpy+0x16>
    149e:	1d 92       	st	X+, r1
    14a0:	41 50       	subi	r20, 0x01	; 1
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	e0 f7       	brcc	.-8      	; 0x149e <strncpy+0x14>
    14a6:	08 95       	ret

000014a8 <strstr>:
    14a8:	fb 01       	movw	r30, r22
    14aa:	51 91       	ld	r21, Z+
    14ac:	55 23       	and	r21, r21
    14ae:	a9 f0       	breq	.+42     	; 0x14da <strstr+0x32>
    14b0:	bf 01       	movw	r22, r30
    14b2:	dc 01       	movw	r26, r24
    14b4:	4d 91       	ld	r20, X+
    14b6:	45 17       	cp	r20, r21
    14b8:	41 11       	cpse	r20, r1
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <strstr+0xc>
    14bc:	59 f4       	brne	.+22     	; 0x14d4 <strstr+0x2c>
    14be:	cd 01       	movw	r24, r26
    14c0:	01 90       	ld	r0, Z+
    14c2:	00 20       	and	r0, r0
    14c4:	49 f0       	breq	.+18     	; 0x14d8 <strstr+0x30>
    14c6:	4d 91       	ld	r20, X+
    14c8:	40 15       	cp	r20, r0
    14ca:	41 11       	cpse	r20, r1
    14cc:	c9 f3       	breq	.-14     	; 0x14c0 <strstr+0x18>
    14ce:	fb 01       	movw	r30, r22
    14d0:	41 11       	cpse	r20, r1
    14d2:	ef cf       	rjmp	.-34     	; 0x14b2 <strstr+0xa>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	08 95       	ret

000014dc <printf>:
    14dc:	a0 e0       	ldi	r26, 0x00	; 0
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e7       	ldi	r30, 0x74	; 116
    14e2:	fa e0       	ldi	r31, 0x0A	; 10
    14e4:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__prologue_saves__+0x20>
    14e8:	ae 01       	movw	r20, r28
    14ea:	4b 5f       	subi	r20, 0xFB	; 251
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	fa 01       	movw	r30, r20
    14f0:	61 91       	ld	r22, Z+
    14f2:	71 91       	ld	r23, Z+
    14f4:	af 01       	movw	r20, r30
    14f6:	80 91 de 35 	lds	r24, 0x35DE	; 0x8035de <__iob+0x2>
    14fa:	90 91 df 35 	lds	r25, 0x35DF	; 0x8035df <__iob+0x3>
    14fe:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <vfprintf>
    1502:	e2 e0       	ldi	r30, 0x02	; 2
    1504:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__epilogue_restores__+0x20>

00001508 <puts>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	e0 91 de 35 	lds	r30, 0x35DE	; 0x8035de <__iob+0x2>
    1514:	f0 91 df 35 	lds	r31, 0x35DF	; 0x8035df <__iob+0x3>
    1518:	23 81       	ldd	r18, Z+3	; 0x03
    151a:	21 ff       	sbrs	r18, 1
    151c:	1b c0       	rjmp	.+54     	; 0x1554 <puts+0x4c>
    151e:	8c 01       	movw	r16, r24
    1520:	d0 e0       	ldi	r29, 0x00	; 0
    1522:	c0 e0       	ldi	r28, 0x00	; 0
    1524:	f8 01       	movw	r30, r16
    1526:	81 91       	ld	r24, Z+
    1528:	8f 01       	movw	r16, r30
    152a:	60 91 de 35 	lds	r22, 0x35DE	; 0x8035de <__iob+0x2>
    152e:	70 91 df 35 	lds	r23, 0x35DF	; 0x8035df <__iob+0x3>
    1532:	db 01       	movw	r26, r22
    1534:	18 96       	adiw	r26, 0x08	; 8
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	19 97       	sbiw	r26, 0x09	; 9
    153c:	88 23       	and	r24, r24
    153e:	31 f0       	breq	.+12     	; 0x154c <puts+0x44>
    1540:	09 95       	icall
    1542:	89 2b       	or	r24, r25
    1544:	79 f3       	breq	.-34     	; 0x1524 <puts+0x1c>
    1546:	df ef       	ldi	r29, 0xFF	; 255
    1548:	cf ef       	ldi	r28, 0xFF	; 255
    154a:	ec cf       	rjmp	.-40     	; 0x1524 <puts+0x1c>
    154c:	8a e0       	ldi	r24, 0x0A	; 10
    154e:	09 95       	icall
    1550:	89 2b       	or	r24, r25
    1552:	19 f0       	breq	.+6      	; 0x155a <puts+0x52>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	02 c0       	rjmp	.+4      	; 0x155e <puts+0x56>
    155a:	8d 2f       	mov	r24, r29
    155c:	9c 2f       	mov	r25, r28
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <sprintf>:
    1568:	ae e0       	ldi	r26, 0x0E	; 14
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea eb       	ldi	r30, 0xBA	; 186
    156e:	fa e0       	ldi	r31, 0x0A	; 10
    1570:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__prologue_saves__+0x1c>
    1574:	0d 89       	ldd	r16, Y+21	; 0x15
    1576:	1e 89       	ldd	r17, Y+22	; 0x16
    1578:	86 e0       	ldi	r24, 0x06	; 6
    157a:	8c 83       	std	Y+4, r24	; 0x04
    157c:	09 83       	std	Y+1, r16	; 0x01
    157e:	1a 83       	std	Y+2, r17	; 0x02
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	9f e7       	ldi	r25, 0x7F	; 127
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	ae 01       	movw	r20, r28
    158a:	47 5e       	subi	r20, 0xE7	; 231
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	6f 89       	ldd	r22, Y+23	; 0x17
    1590:	78 8d       	ldd	r23, Y+24	; 0x18
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <vfprintf>
    159a:	ef 81       	ldd	r30, Y+7	; 0x07
    159c:	f8 85       	ldd	r31, Y+8	; 0x08
    159e:	e0 0f       	add	r30, r16
    15a0:	f1 1f       	adc	r31, r17
    15a2:	10 82       	st	Z, r1
    15a4:	2e 96       	adiw	r28, 0x0e	; 14
    15a6:	e4 e0       	ldi	r30, 0x04	; 4
    15a8:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__epilogue_restores__+0x1c>

000015ac <vfprintf>:
    15ac:	ab e0       	ldi	r26, 0x0B	; 11
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ec ed       	ldi	r30, 0xDC	; 220
    15b2:	fa e0       	ldi	r31, 0x0A	; 10
    15b4:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__prologue_saves__>
    15b8:	6c 01       	movw	r12, r24
    15ba:	7b 01       	movw	r14, r22
    15bc:	8a 01       	movw	r16, r20
    15be:	fc 01       	movw	r30, r24
    15c0:	16 82       	std	Z+6, r1	; 0x06
    15c2:	17 82       	std	Z+7, r1	; 0x07
    15c4:	83 81       	ldd	r24, Z+3	; 0x03
    15c6:	81 ff       	sbrs	r24, 1
    15c8:	cc c1       	rjmp	.+920    	; 0x1962 <vfprintf+0x3b6>
    15ca:	ce 01       	movw	r24, r28
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	3c 01       	movw	r6, r24
    15d0:	f6 01       	movw	r30, r12
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	f7 01       	movw	r30, r14
    15d6:	93 fd       	sbrc	r25, 3
    15d8:	85 91       	lpm	r24, Z+
    15da:	93 ff       	sbrs	r25, 3
    15dc:	81 91       	ld	r24, Z+
    15de:	7f 01       	movw	r14, r30
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <vfprintf+0x3a>
    15e4:	ba c1       	rjmp	.+884    	; 0x195a <vfprintf+0x3ae>
    15e6:	85 32       	cpi	r24, 0x25	; 37
    15e8:	39 f4       	brne	.+14     	; 0x15f8 <vfprintf+0x4c>
    15ea:	93 fd       	sbrc	r25, 3
    15ec:	85 91       	lpm	r24, Z+
    15ee:	93 ff       	sbrs	r25, 3
    15f0:	81 91       	ld	r24, Z+
    15f2:	7f 01       	movw	r14, r30
    15f4:	85 32       	cpi	r24, 0x25	; 37
    15f6:	29 f4       	brne	.+10     	; 0x1602 <vfprintf+0x56>
    15f8:	b6 01       	movw	r22, r12
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    1600:	e7 cf       	rjmp	.-50     	; 0x15d0 <vfprintf+0x24>
    1602:	91 2c       	mov	r9, r1
    1604:	21 2c       	mov	r2, r1
    1606:	31 2c       	mov	r3, r1
    1608:	ff e1       	ldi	r31, 0x1F	; 31
    160a:	f3 15       	cp	r31, r3
    160c:	d8 f0       	brcs	.+54     	; 0x1644 <vfprintf+0x98>
    160e:	8b 32       	cpi	r24, 0x2B	; 43
    1610:	79 f0       	breq	.+30     	; 0x1630 <vfprintf+0x84>
    1612:	38 f4       	brcc	.+14     	; 0x1622 <vfprintf+0x76>
    1614:	80 32       	cpi	r24, 0x20	; 32
    1616:	79 f0       	breq	.+30     	; 0x1636 <vfprintf+0x8a>
    1618:	83 32       	cpi	r24, 0x23	; 35
    161a:	a1 f4       	brne	.+40     	; 0x1644 <vfprintf+0x98>
    161c:	23 2d       	mov	r18, r3
    161e:	20 61       	ori	r18, 0x10	; 16
    1620:	1d c0       	rjmp	.+58     	; 0x165c <vfprintf+0xb0>
    1622:	8d 32       	cpi	r24, 0x2D	; 45
    1624:	61 f0       	breq	.+24     	; 0x163e <vfprintf+0x92>
    1626:	80 33       	cpi	r24, 0x30	; 48
    1628:	69 f4       	brne	.+26     	; 0x1644 <vfprintf+0x98>
    162a:	23 2d       	mov	r18, r3
    162c:	21 60       	ori	r18, 0x01	; 1
    162e:	16 c0       	rjmp	.+44     	; 0x165c <vfprintf+0xb0>
    1630:	83 2d       	mov	r24, r3
    1632:	82 60       	ori	r24, 0x02	; 2
    1634:	38 2e       	mov	r3, r24
    1636:	e3 2d       	mov	r30, r3
    1638:	e4 60       	ori	r30, 0x04	; 4
    163a:	3e 2e       	mov	r3, r30
    163c:	2a c0       	rjmp	.+84     	; 0x1692 <vfprintf+0xe6>
    163e:	f3 2d       	mov	r31, r3
    1640:	f8 60       	ori	r31, 0x08	; 8
    1642:	1d c0       	rjmp	.+58     	; 0x167e <vfprintf+0xd2>
    1644:	37 fc       	sbrc	r3, 7
    1646:	2d c0       	rjmp	.+90     	; 0x16a2 <vfprintf+0xf6>
    1648:	20 ed       	ldi	r18, 0xD0	; 208
    164a:	28 0f       	add	r18, r24
    164c:	2a 30       	cpi	r18, 0x0A	; 10
    164e:	40 f0       	brcs	.+16     	; 0x1660 <vfprintf+0xb4>
    1650:	8e 32       	cpi	r24, 0x2E	; 46
    1652:	b9 f4       	brne	.+46     	; 0x1682 <vfprintf+0xd6>
    1654:	36 fc       	sbrc	r3, 6
    1656:	81 c1       	rjmp	.+770    	; 0x195a <vfprintf+0x3ae>
    1658:	23 2d       	mov	r18, r3
    165a:	20 64       	ori	r18, 0x40	; 64
    165c:	32 2e       	mov	r3, r18
    165e:	19 c0       	rjmp	.+50     	; 0x1692 <vfprintf+0xe6>
    1660:	36 fe       	sbrs	r3, 6
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <vfprintf+0xc4>
    1664:	8a e0       	ldi	r24, 0x0A	; 10
    1666:	98 9e       	mul	r9, r24
    1668:	20 0d       	add	r18, r0
    166a:	11 24       	eor	r1, r1
    166c:	92 2e       	mov	r9, r18
    166e:	11 c0       	rjmp	.+34     	; 0x1692 <vfprintf+0xe6>
    1670:	ea e0       	ldi	r30, 0x0A	; 10
    1672:	2e 9e       	mul	r2, r30
    1674:	20 0d       	add	r18, r0
    1676:	11 24       	eor	r1, r1
    1678:	22 2e       	mov	r2, r18
    167a:	f3 2d       	mov	r31, r3
    167c:	f0 62       	ori	r31, 0x20	; 32
    167e:	3f 2e       	mov	r3, r31
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0xe6>
    1682:	8c 36       	cpi	r24, 0x6C	; 108
    1684:	21 f4       	brne	.+8      	; 0x168e <vfprintf+0xe2>
    1686:	83 2d       	mov	r24, r3
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	38 2e       	mov	r3, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <vfprintf+0xe6>
    168e:	88 36       	cpi	r24, 0x68	; 104
    1690:	41 f4       	brne	.+16     	; 0x16a2 <vfprintf+0xf6>
    1692:	f7 01       	movw	r30, r14
    1694:	93 fd       	sbrc	r25, 3
    1696:	85 91       	lpm	r24, Z+
    1698:	93 ff       	sbrs	r25, 3
    169a:	81 91       	ld	r24, Z+
    169c:	7f 01       	movw	r14, r30
    169e:	81 11       	cpse	r24, r1
    16a0:	b3 cf       	rjmp	.-154    	; 0x1608 <vfprintf+0x5c>
    16a2:	98 2f       	mov	r25, r24
    16a4:	9f 7d       	andi	r25, 0xDF	; 223
    16a6:	95 54       	subi	r25, 0x45	; 69
    16a8:	93 30       	cpi	r25, 0x03	; 3
    16aa:	28 f4       	brcc	.+10     	; 0x16b6 <vfprintf+0x10a>
    16ac:	0c 5f       	subi	r16, 0xFC	; 252
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	9f e3       	ldi	r25, 0x3F	; 63
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <vfprintf+0x124>
    16b6:	83 36       	cpi	r24, 0x63	; 99
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <vfprintf+0x11a>
    16ba:	83 37       	cpi	r24, 0x73	; 115
    16bc:	71 f0       	breq	.+28     	; 0x16da <vfprintf+0x12e>
    16be:	83 35       	cpi	r24, 0x53	; 83
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <vfprintf+0x118>
    16c2:	59 c0       	rjmp	.+178    	; 0x1776 <vfprintf+0x1ca>
    16c4:	21 c0       	rjmp	.+66     	; 0x1708 <vfprintf+0x15c>
    16c6:	f8 01       	movw	r30, r16
    16c8:	80 81       	ld	r24, Z
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	0e 5f       	subi	r16, 0xFE	; 254
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	88 24       	eor	r8, r8
    16d2:	83 94       	inc	r8
    16d4:	91 2c       	mov	r9, r1
    16d6:	53 01       	movw	r10, r6
    16d8:	13 c0       	rjmp	.+38     	; 0x1700 <vfprintf+0x154>
    16da:	28 01       	movw	r4, r16
    16dc:	f2 e0       	ldi	r31, 0x02	; 2
    16de:	4f 0e       	add	r4, r31
    16e0:	51 1c       	adc	r5, r1
    16e2:	f8 01       	movw	r30, r16
    16e4:	a0 80       	ld	r10, Z
    16e6:	b1 80       	ldd	r11, Z+1	; 0x01
    16e8:	36 fe       	sbrs	r3, 6
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <vfprintf+0x146>
    16ec:	69 2d       	mov	r22, r9
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <vfprintf+0x14a>
    16f2:	6f ef       	ldi	r22, 0xFF	; 255
    16f4:	7f ef       	ldi	r23, 0xFF	; 255
    16f6:	c5 01       	movw	r24, r10
    16f8:	0e 94 c5 0c 	call	0x198a	; 0x198a <strnlen>
    16fc:	4c 01       	movw	r8, r24
    16fe:	82 01       	movw	r16, r4
    1700:	f3 2d       	mov	r31, r3
    1702:	ff 77       	andi	r31, 0x7F	; 127
    1704:	3f 2e       	mov	r3, r31
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <vfprintf+0x188>
    1708:	28 01       	movw	r4, r16
    170a:	22 e0       	ldi	r18, 0x02	; 2
    170c:	42 0e       	add	r4, r18
    170e:	51 1c       	adc	r5, r1
    1710:	f8 01       	movw	r30, r16
    1712:	a0 80       	ld	r10, Z
    1714:	b1 80       	ldd	r11, Z+1	; 0x01
    1716:	36 fe       	sbrs	r3, 6
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <vfprintf+0x174>
    171a:	69 2d       	mov	r22, r9
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0x178>
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	c5 01       	movw	r24, r10
    1726:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strnlen_P>
    172a:	4c 01       	movw	r8, r24
    172c:	f3 2d       	mov	r31, r3
    172e:	f0 68       	ori	r31, 0x80	; 128
    1730:	3f 2e       	mov	r3, r31
    1732:	82 01       	movw	r16, r4
    1734:	33 fc       	sbrc	r3, 3
    1736:	1b c0       	rjmp	.+54     	; 0x176e <vfprintf+0x1c2>
    1738:	82 2d       	mov	r24, r2
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 16       	cp	r8, r24
    173e:	99 06       	cpc	r9, r25
    1740:	b0 f4       	brcc	.+44     	; 0x176e <vfprintf+0x1c2>
    1742:	b6 01       	movw	r22, r12
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    174c:	2a 94       	dec	r2
    174e:	f4 cf       	rjmp	.-24     	; 0x1738 <vfprintf+0x18c>
    1750:	f5 01       	movw	r30, r10
    1752:	37 fc       	sbrc	r3, 7
    1754:	85 91       	lpm	r24, Z+
    1756:	37 fe       	sbrs	r3, 7
    1758:	81 91       	ld	r24, Z+
    175a:	5f 01       	movw	r10, r30
    175c:	b6 01       	movw	r22, r12
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    1764:	21 10       	cpse	r2, r1
    1766:	2a 94       	dec	r2
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	82 1a       	sub	r8, r18
    176c:	91 08       	sbc	r9, r1
    176e:	81 14       	cp	r8, r1
    1770:	91 04       	cpc	r9, r1
    1772:	71 f7       	brne	.-36     	; 0x1750 <vfprintf+0x1a4>
    1774:	e8 c0       	rjmp	.+464    	; 0x1946 <vfprintf+0x39a>
    1776:	84 36       	cpi	r24, 0x64	; 100
    1778:	11 f0       	breq	.+4      	; 0x177e <vfprintf+0x1d2>
    177a:	89 36       	cpi	r24, 0x69	; 105
    177c:	41 f5       	brne	.+80     	; 0x17ce <vfprintf+0x222>
    177e:	f8 01       	movw	r30, r16
    1780:	37 fe       	sbrs	r3, 7
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <vfprintf+0x1e6>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	0c 5f       	subi	r16, 0xFC	; 252
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <vfprintf+0x1f6>
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	07 2e       	mov	r0, r23
    1798:	00 0c       	add	r0, r0
    179a:	88 0b       	sbc	r24, r24
    179c:	99 0b       	sbc	r25, r25
    179e:	0e 5f       	subi	r16, 0xFE	; 254
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	f3 2d       	mov	r31, r3
    17a4:	ff 76       	andi	r31, 0x6F	; 111
    17a6:	3f 2e       	mov	r3, r31
    17a8:	97 ff       	sbrs	r25, 7
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x212>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	f0 68       	ori	r31, 0x80	; 128
    17bc:	3f 2e       	mov	r3, r31
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	a3 01       	movw	r20, r6
    17c4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__ultoa_invert>
    17c8:	88 2e       	mov	r8, r24
    17ca:	86 18       	sub	r8, r6
    17cc:	45 c0       	rjmp	.+138    	; 0x1858 <vfprintf+0x2ac>
    17ce:	85 37       	cpi	r24, 0x75	; 117
    17d0:	31 f4       	brne	.+12     	; 0x17de <vfprintf+0x232>
    17d2:	23 2d       	mov	r18, r3
    17d4:	2f 7e       	andi	r18, 0xEF	; 239
    17d6:	b2 2e       	mov	r11, r18
    17d8:	2a e0       	ldi	r18, 0x0A	; 10
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	25 c0       	rjmp	.+74     	; 0x1828 <vfprintf+0x27c>
    17de:	93 2d       	mov	r25, r3
    17e0:	99 7f       	andi	r25, 0xF9	; 249
    17e2:	b9 2e       	mov	r11, r25
    17e4:	8f 36       	cpi	r24, 0x6F	; 111
    17e6:	c1 f0       	breq	.+48     	; 0x1818 <vfprintf+0x26c>
    17e8:	18 f4       	brcc	.+6      	; 0x17f0 <vfprintf+0x244>
    17ea:	88 35       	cpi	r24, 0x58	; 88
    17ec:	79 f0       	breq	.+30     	; 0x180c <vfprintf+0x260>
    17ee:	b5 c0       	rjmp	.+362    	; 0x195a <vfprintf+0x3ae>
    17f0:	80 37       	cpi	r24, 0x70	; 112
    17f2:	19 f0       	breq	.+6      	; 0x17fa <vfprintf+0x24e>
    17f4:	88 37       	cpi	r24, 0x78	; 120
    17f6:	21 f0       	breq	.+8      	; 0x1800 <vfprintf+0x254>
    17f8:	b0 c0       	rjmp	.+352    	; 0x195a <vfprintf+0x3ae>
    17fa:	e9 2f       	mov	r30, r25
    17fc:	e0 61       	ori	r30, 0x10	; 16
    17fe:	be 2e       	mov	r11, r30
    1800:	b4 fe       	sbrs	r11, 4
    1802:	0d c0       	rjmp	.+26     	; 0x181e <vfprintf+0x272>
    1804:	fb 2d       	mov	r31, r11
    1806:	f4 60       	ori	r31, 0x04	; 4
    1808:	bf 2e       	mov	r11, r31
    180a:	09 c0       	rjmp	.+18     	; 0x181e <vfprintf+0x272>
    180c:	34 fe       	sbrs	r3, 4
    180e:	0a c0       	rjmp	.+20     	; 0x1824 <vfprintf+0x278>
    1810:	29 2f       	mov	r18, r25
    1812:	26 60       	ori	r18, 0x06	; 6
    1814:	b2 2e       	mov	r11, r18
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x278>
    1818:	28 e0       	ldi	r18, 0x08	; 8
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <vfprintf+0x27c>
    181e:	20 e1       	ldi	r18, 0x10	; 16
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x27c>
    1824:	20 e1       	ldi	r18, 0x10	; 16
    1826:	32 e0       	ldi	r19, 0x02	; 2
    1828:	f8 01       	movw	r30, r16
    182a:	b7 fe       	sbrs	r11, 7
    182c:	07 c0       	rjmp	.+14     	; 0x183c <vfprintf+0x290>
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	0c 5f       	subi	r16, 0xFC	; 252
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <vfprintf+0x29c>
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 5f       	subi	r16, 0xFE	; 254
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	a3 01       	movw	r20, r6
    184a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__ultoa_invert>
    184e:	88 2e       	mov	r8, r24
    1850:	86 18       	sub	r8, r6
    1852:	fb 2d       	mov	r31, r11
    1854:	ff 77       	andi	r31, 0x7F	; 127
    1856:	3f 2e       	mov	r3, r31
    1858:	36 fe       	sbrs	r3, 6
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <vfprintf+0x2ca>
    185c:	23 2d       	mov	r18, r3
    185e:	2e 7f       	andi	r18, 0xFE	; 254
    1860:	a2 2e       	mov	r10, r18
    1862:	89 14       	cp	r8, r9
    1864:	58 f4       	brcc	.+22     	; 0x187c <vfprintf+0x2d0>
    1866:	34 fe       	sbrs	r3, 4
    1868:	0b c0       	rjmp	.+22     	; 0x1880 <vfprintf+0x2d4>
    186a:	32 fc       	sbrc	r3, 2
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <vfprintf+0x2d4>
    186e:	83 2d       	mov	r24, r3
    1870:	8e 7e       	andi	r24, 0xEE	; 238
    1872:	a8 2e       	mov	r10, r24
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x2d4>
    1876:	b8 2c       	mov	r11, r8
    1878:	a3 2c       	mov	r10, r3
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x2d6>
    187c:	b8 2c       	mov	r11, r8
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <vfprintf+0x2d6>
    1880:	b9 2c       	mov	r11, r9
    1882:	a4 fe       	sbrs	r10, 4
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <vfprintf+0x2f8>
    1886:	fe 01       	movw	r30, r28
    1888:	e8 0d       	add	r30, r8
    188a:	f1 1d       	adc	r31, r1
    188c:	80 81       	ld	r24, Z
    188e:	80 33       	cpi	r24, 0x30	; 48
    1890:	21 f4       	brne	.+8      	; 0x189a <vfprintf+0x2ee>
    1892:	9a 2d       	mov	r25, r10
    1894:	99 7e       	andi	r25, 0xE9	; 233
    1896:	a9 2e       	mov	r10, r25
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <vfprintf+0x300>
    189a:	a2 fe       	sbrs	r10, 2
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x2fe>
    189e:	b3 94       	inc	r11
    18a0:	b3 94       	inc	r11
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <vfprintf+0x300>
    18a4:	8a 2d       	mov	r24, r10
    18a6:	86 78       	andi	r24, 0x86	; 134
    18a8:	09 f0       	breq	.+2      	; 0x18ac <vfprintf+0x300>
    18aa:	b3 94       	inc	r11
    18ac:	a3 fc       	sbrc	r10, 3
    18ae:	11 c0       	rjmp	.+34     	; 0x18d2 <vfprintf+0x326>
    18b0:	a0 fe       	sbrs	r10, 0
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x314>
    18b4:	b2 14       	cp	r11, r2
    18b6:	88 f4       	brcc	.+34     	; 0x18da <vfprintf+0x32e>
    18b8:	28 0c       	add	r2, r8
    18ba:	92 2c       	mov	r9, r2
    18bc:	9b 18       	sub	r9, r11
    18be:	0e c0       	rjmp	.+28     	; 0x18dc <vfprintf+0x330>
    18c0:	b2 14       	cp	r11, r2
    18c2:	60 f4       	brcc	.+24     	; 0x18dc <vfprintf+0x330>
    18c4:	b6 01       	movw	r22, r12
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    18ce:	b3 94       	inc	r11
    18d0:	f7 cf       	rjmp	.-18     	; 0x18c0 <vfprintf+0x314>
    18d2:	b2 14       	cp	r11, r2
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x330>
    18d6:	2b 18       	sub	r2, r11
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x332>
    18da:	98 2c       	mov	r9, r8
    18dc:	21 2c       	mov	r2, r1
    18de:	a4 fe       	sbrs	r10, 4
    18e0:	10 c0       	rjmp	.+32     	; 0x1902 <vfprintf+0x356>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    18ec:	a2 fe       	sbrs	r10, 2
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <vfprintf+0x372>
    18f0:	a1 fc       	sbrc	r10, 1
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x34e>
    18f4:	88 e7       	ldi	r24, 0x78	; 120
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x352>
    18fa:	88 e5       	ldi	r24, 0x58	; 88
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b6 01       	movw	r22, r12
    1900:	0c c0       	rjmp	.+24     	; 0x191a <vfprintf+0x36e>
    1902:	8a 2d       	mov	r24, r10
    1904:	86 78       	andi	r24, 0x86	; 134
    1906:	59 f0       	breq	.+22     	; 0x191e <vfprintf+0x372>
    1908:	a1 fe       	sbrs	r10, 1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x364>
    190c:	8b e2       	ldi	r24, 0x2B	; 43
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <vfprintf+0x366>
    1910:	80 e2       	ldi	r24, 0x20	; 32
    1912:	a7 fc       	sbrc	r10, 7
    1914:	8d e2       	ldi	r24, 0x2D	; 45
    1916:	b6 01       	movw	r22, r12
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    191e:	89 14       	cp	r8, r9
    1920:	38 f4       	brcc	.+14     	; 0x1930 <vfprintf+0x384>
    1922:	b6 01       	movw	r22, r12
    1924:	80 e3       	ldi	r24, 0x30	; 48
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    192c:	9a 94       	dec	r9
    192e:	f7 cf       	rjmp	.-18     	; 0x191e <vfprintf+0x372>
    1930:	8a 94       	dec	r8
    1932:	f3 01       	movw	r30, r6
    1934:	e8 0d       	add	r30, r8
    1936:	f1 1d       	adc	r31, r1
    1938:	80 81       	ld	r24, Z
    193a:	b6 01       	movw	r22, r12
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    1942:	81 10       	cpse	r8, r1
    1944:	f5 cf       	rjmp	.-22     	; 0x1930 <vfprintf+0x384>
    1946:	22 20       	and	r2, r2
    1948:	09 f4       	brne	.+2      	; 0x194c <vfprintf+0x3a0>
    194a:	42 ce       	rjmp	.-892    	; 0x15d0 <vfprintf+0x24>
    194c:	b6 01       	movw	r22, r12
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <fputc>
    1956:	2a 94       	dec	r2
    1958:	f6 cf       	rjmp	.-20     	; 0x1946 <vfprintf+0x39a>
    195a:	f6 01       	movw	r30, r12
    195c:	86 81       	ldd	r24, Z+6	; 0x06
    195e:	97 81       	ldd	r25, Z+7	; 0x07
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x3ba>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	2b 96       	adiw	r28, 0x0b	; 11
    1968:	e2 e1       	ldi	r30, 0x12	; 18
    196a:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__epilogue_restores__>

0000196e <__ctype_isfalse>:
    196e:	99 27       	eor	r25, r25
    1970:	88 27       	eor	r24, r24

00001972 <__ctype_istrue>:
    1972:	08 95       	ret

00001974 <strnlen_P>:
    1974:	fc 01       	movw	r30, r24
    1976:	05 90       	lpm	r0, Z+
    1978:	61 50       	subi	r22, 0x01	; 1
    197a:	70 40       	sbci	r23, 0x00	; 0
    197c:	01 10       	cpse	r0, r1
    197e:	d8 f7       	brcc	.-10     	; 0x1976 <strnlen_P+0x2>
    1980:	80 95       	com	r24
    1982:	90 95       	com	r25
    1984:	8e 0f       	add	r24, r30
    1986:	9f 1f       	adc	r25, r31
    1988:	08 95       	ret

0000198a <strnlen>:
    198a:	fc 01       	movw	r30, r24
    198c:	61 50       	subi	r22, 0x01	; 1
    198e:	70 40       	sbci	r23, 0x00	; 0
    1990:	01 90       	ld	r0, Z+
    1992:	01 10       	cpse	r0, r1
    1994:	d8 f7       	brcc	.-10     	; 0x198c <strnlen+0x2>
    1996:	80 95       	com	r24
    1998:	90 95       	com	r25
    199a:	8e 0f       	add	r24, r30
    199c:	9f 1f       	adc	r25, r31
    199e:	08 95       	ret

000019a0 <fputc>:
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	fb 01       	movw	r30, r22
    19aa:	23 81       	ldd	r18, Z+3	; 0x03
    19ac:	21 fd       	sbrc	r18, 1
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <fputc+0x16>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	2c c0       	rjmp	.+88     	; 0x1a0e <fputc+0x6e>
    19b6:	22 ff       	sbrs	r18, 2
    19b8:	16 c0       	rjmp	.+44     	; 0x19e6 <fputc+0x46>
    19ba:	46 81       	ldd	r20, Z+6	; 0x06
    19bc:	57 81       	ldd	r21, Z+7	; 0x07
    19be:	24 81       	ldd	r18, Z+4	; 0x04
    19c0:	35 81       	ldd	r19, Z+5	; 0x05
    19c2:	42 17       	cp	r20, r18
    19c4:	53 07       	cpc	r21, r19
    19c6:	44 f4       	brge	.+16     	; 0x19d8 <fputc+0x38>
    19c8:	a0 81       	ld	r26, Z
    19ca:	b1 81       	ldd	r27, Z+1	; 0x01
    19cc:	9d 01       	movw	r18, r26
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	20 83       	st	Z, r18
    19d4:	31 83       	std	Z+1, r19	; 0x01
    19d6:	8c 93       	st	X, r24
    19d8:	26 81       	ldd	r18, Z+6	; 0x06
    19da:	37 81       	ldd	r19, Z+7	; 0x07
    19dc:	2f 5f       	subi	r18, 0xFF	; 255
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	26 83       	std	Z+6, r18	; 0x06
    19e2:	37 83       	std	Z+7, r19	; 0x07
    19e4:	14 c0       	rjmp	.+40     	; 0x1a0e <fputc+0x6e>
    19e6:	8b 01       	movw	r16, r22
    19e8:	ec 01       	movw	r28, r24
    19ea:	fb 01       	movw	r30, r22
    19ec:	00 84       	ldd	r0, Z+8	; 0x08
    19ee:	f1 85       	ldd	r31, Z+9	; 0x09
    19f0:	e0 2d       	mov	r30, r0
    19f2:	09 95       	icall
    19f4:	89 2b       	or	r24, r25
    19f6:	e1 f6       	brne	.-72     	; 0x19b0 <fputc+0x10>
    19f8:	d8 01       	movw	r26, r16
    19fa:	16 96       	adiw	r26, 0x06	; 6
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	17 97       	sbiw	r26, 0x07	; 7
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	16 96       	adiw	r26, 0x06	; 6
    1a06:	8d 93       	st	X+, r24
    1a08:	9c 93       	st	X, r25
    1a0a:	17 97       	sbiw	r26, 0x07	; 7
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <__ultoa_invert>:
    1a18:	fa 01       	movw	r30, r20
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	28 30       	cpi	r18, 0x08	; 8
    1a1e:	51 f1       	breq	.+84     	; 0x1a74 <__ultoa_invert+0x5c>
    1a20:	20 31       	cpi	r18, 0x10	; 16
    1a22:	81 f1       	breq	.+96     	; 0x1a84 <__ultoa_invert+0x6c>
    1a24:	e8 94       	clt
    1a26:	6f 93       	push	r22
    1a28:	6e 7f       	andi	r22, 0xFE	; 254
    1a2a:	6e 5f       	subi	r22, 0xFE	; 254
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	af 4f       	sbci	r26, 0xFF	; 255
    1a34:	b1 e0       	ldi	r27, 0x01	; 1
    1a36:	3e d0       	rcall	.+124    	; 0x1ab4 <__ultoa_invert+0x9c>
    1a38:	b4 e0       	ldi	r27, 0x04	; 4
    1a3a:	3c d0       	rcall	.+120    	; 0x1ab4 <__ultoa_invert+0x9c>
    1a3c:	67 0f       	add	r22, r23
    1a3e:	78 1f       	adc	r23, r24
    1a40:	89 1f       	adc	r24, r25
    1a42:	9a 1f       	adc	r25, r26
    1a44:	a1 1d       	adc	r26, r1
    1a46:	68 0f       	add	r22, r24
    1a48:	79 1f       	adc	r23, r25
    1a4a:	8a 1f       	adc	r24, r26
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	6a 0f       	add	r22, r26
    1a52:	71 1d       	adc	r23, r1
    1a54:	81 1d       	adc	r24, r1
    1a56:	91 1d       	adc	r25, r1
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	20 d0       	rcall	.+64     	; 0x1a9c <__ultoa_invert+0x84>
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <__ultoa_invert+0x48>
    1a5e:	68 94       	set
    1a60:	3f 91       	pop	r19
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	26 9f       	mul	r18, r22
    1a66:	11 24       	eor	r1, r1
    1a68:	30 19       	sub	r19, r0
    1a6a:	30 5d       	subi	r19, 0xD0	; 208
    1a6c:	31 93       	st	Z+, r19
    1a6e:	de f6       	brtc	.-74     	; 0x1a26 <__ultoa_invert+0xe>
    1a70:	cf 01       	movw	r24, r30
    1a72:	08 95       	ret
    1a74:	46 2f       	mov	r20, r22
    1a76:	47 70       	andi	r20, 0x07	; 7
    1a78:	40 5d       	subi	r20, 0xD0	; 208
    1a7a:	41 93       	st	Z+, r20
    1a7c:	b3 e0       	ldi	r27, 0x03	; 3
    1a7e:	0f d0       	rcall	.+30     	; 0x1a9e <__ultoa_invert+0x86>
    1a80:	c9 f7       	brne	.-14     	; 0x1a74 <__ultoa_invert+0x5c>
    1a82:	f6 cf       	rjmp	.-20     	; 0x1a70 <__ultoa_invert+0x58>
    1a84:	46 2f       	mov	r20, r22
    1a86:	4f 70       	andi	r20, 0x0F	; 15
    1a88:	40 5d       	subi	r20, 0xD0	; 208
    1a8a:	4a 33       	cpi	r20, 0x3A	; 58
    1a8c:	18 f0       	brcs	.+6      	; 0x1a94 <__ultoa_invert+0x7c>
    1a8e:	49 5d       	subi	r20, 0xD9	; 217
    1a90:	31 fd       	sbrc	r19, 1
    1a92:	40 52       	subi	r20, 0x20	; 32
    1a94:	41 93       	st	Z+, r20
    1a96:	02 d0       	rcall	.+4      	; 0x1a9c <__ultoa_invert+0x84>
    1a98:	a9 f7       	brne	.-22     	; 0x1a84 <__ultoa_invert+0x6c>
    1a9a:	ea cf       	rjmp	.-44     	; 0x1a70 <__ultoa_invert+0x58>
    1a9c:	b4 e0       	ldi	r27, 0x04	; 4
    1a9e:	a6 95       	lsr	r26
    1aa0:	97 95       	ror	r25
    1aa2:	87 95       	ror	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	ba 95       	dec	r27
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__ultoa_invert+0x86>
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	61 05       	cpc	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	08 95       	ret
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	0a 2e       	mov	r0, r26
    1aba:	06 94       	lsr	r0
    1abc:	57 95       	ror	r21
    1abe:	47 95       	ror	r20
    1ac0:	37 95       	ror	r19
    1ac2:	27 95       	ror	r18
    1ac4:	ba 95       	dec	r27
    1ac6:	c9 f7       	brne	.-14     	; 0x1aba <__ultoa_invert+0xa2>
    1ac8:	62 0f       	add	r22, r18
    1aca:	73 1f       	adc	r23, r19
    1acc:	84 1f       	adc	r24, r20
    1ace:	95 1f       	adc	r25, r21
    1ad0:	a0 1d       	adc	r26, r0
    1ad2:	08 95       	ret

00001ad4 <__mulsi3>:
    1ad4:	db 01       	movw	r26, r22
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__muluhisi3>
    1ade:	bf 91       	pop	r27
    1ae0:	af 91       	pop	r26
    1ae2:	a2 9f       	mul	r26, r18
    1ae4:	80 0d       	add	r24, r0
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	a3 9f       	mul	r26, r19
    1aea:	90 0d       	add	r25, r0
    1aec:	b2 9f       	mul	r27, r18
    1aee:	90 0d       	add	r25, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	08 95       	ret

00001af4 <__udivmodsi4>:
    1af4:	a1 e2       	ldi	r26, 0x21	; 33
    1af6:	1a 2e       	mov	r1, r26
    1af8:	aa 1b       	sub	r26, r26
    1afa:	bb 1b       	sub	r27, r27
    1afc:	fd 01       	movw	r30, r26
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <__udivmodsi4_ep>

00001b00 <__udivmodsi4_loop>:
    1b00:	aa 1f       	adc	r26, r26
    1b02:	bb 1f       	adc	r27, r27
    1b04:	ee 1f       	adc	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	a2 17       	cp	r26, r18
    1b0a:	b3 07       	cpc	r27, r19
    1b0c:	e4 07       	cpc	r30, r20
    1b0e:	f5 07       	cpc	r31, r21
    1b10:	20 f0       	brcs	.+8      	; 0x1b1a <__udivmodsi4_ep>
    1b12:	a2 1b       	sub	r26, r18
    1b14:	b3 0b       	sbc	r27, r19
    1b16:	e4 0b       	sbc	r30, r20
    1b18:	f5 0b       	sbc	r31, r21

00001b1a <__udivmodsi4_ep>:
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	1a 94       	dec	r1
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <__udivmodsi4_loop>
    1b26:	60 95       	com	r22
    1b28:	70 95       	com	r23
    1b2a:	80 95       	com	r24
    1b2c:	90 95       	com	r25
    1b2e:	9b 01       	movw	r18, r22
    1b30:	ac 01       	movw	r20, r24
    1b32:	bd 01       	movw	r22, r26
    1b34:	cf 01       	movw	r24, r30
    1b36:	08 95       	ret

00001b38 <__prologue_saves__>:
    1b38:	2f 92       	push	r2
    1b3a:	3f 92       	push	r3
    1b3c:	4f 92       	push	r4
    1b3e:	5f 92       	push	r5
    1b40:	6f 92       	push	r6
    1b42:	7f 92       	push	r7
    1b44:	8f 92       	push	r8
    1b46:	9f 92       	push	r9
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	ca 1b       	sub	r28, r26
    1b62:	db 0b       	sbc	r29, r27
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	09 94       	ijmp

00001b6a <__epilogue_restores__>:
    1b6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b6c:	39 88       	ldd	r3, Y+17	; 0x11
    1b6e:	48 88       	ldd	r4, Y+16	; 0x10
    1b70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b80:	df 80       	ldd	r13, Y+7	; 0x07
    1b82:	ee 80       	ldd	r14, Y+6	; 0x06
    1b84:	fd 80       	ldd	r15, Y+5	; 0x05
    1b86:	0c 81       	ldd	r16, Y+4	; 0x04
    1b88:	1b 81       	ldd	r17, Y+3	; 0x03
    1b8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b8e:	ce 0f       	add	r28, r30
    1b90:	d1 1d       	adc	r29, r1
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	ed 01       	movw	r28, r26
    1b98:	08 95       	ret

00001b9a <_exit>:
    1b9a:	f8 94       	cli

00001b9c <__stop_program>:
    1b9c:	ff cf       	rjmp	.-2      	; 0x1b9c <__stop_program>
