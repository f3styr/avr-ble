
ble_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00803000  0000261c  000026d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002420  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  00006420  00002420  000024d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000007ca  0080308e  0080308e  0000275e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004d0  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007218  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003165  00000000  00000000  00009ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023a4  00000000  00000000  0000d049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d14  00000000  00000000  0000f3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003165  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026f6  00000000  00000000  00013269  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000438  00000000  00000000  0001595f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_15>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_17>
      48:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_18>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      7c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_31>
      80:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__vector_32>
      84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000090 <__trampolines_end>:
      90:	63 64       	ori	r22, 0x43	; 67
      92:	69 6e       	ori	r22, 0xE9	; 233
      94:	6f 70       	andi	r22, 0x0F	; 15
      96:	73 75       	andi	r23, 0x53	; 83
      98:	78 58       	subi	r23, 0x88	; 136
      9a:	5b 00       	.word	0x005b	; ????

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	cd bf       	out	0x3d, r28	; 61
      a4:	df e3       	ldi	r29, 0x3F	; 63
      a6:	de bf       	out	0x3e, r29	; 62

000000a8 <__do_copy_data>:
      a8:	10 e3       	ldi	r17, 0x30	; 48
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b0 e3       	ldi	r27, 0x30	; 48
      ae:	ec e1       	ldi	r30, 0x1C	; 28
      b0:	f6 e2       	ldi	r31, 0x26	; 38
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ae 38       	cpi	r26, 0x8E	; 142
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	28 e3       	ldi	r18, 0x38	; 56
      c0:	ae e8       	ldi	r26, 0x8E	; 142
      c2:	b0 e3       	ldi	r27, 0x30	; 48
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a8 35       	cpi	r26, 0x58	; 88
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 57 05 	call	0xaae	; 0xaae <main>
      d2:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      da:	0e 94 69 06 	call	0xcd2	; 0xcd2 <system_init>
      de:	08 95       	ret

000000e0 <rx487x_shutdown>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      e0:	8d b1       	in	r24, 0x0d	; 13
      e2:	87 7f       	andi	r24, 0xF7	; 247
      e4:	8d b9       	out	0x0d, r24	; 13
static ble_error_t rx487x_shutdown(struct ble_server* ctx) 
{
	RN487X_RST_set_level(false);
	
	return BLE_NOERR;
}
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	08 95       	ret

000000ea <rn487x_clear_rx_buff>:
}


static void rn487x_clear_rx_buff()
{
	rx_wptr = 0;
      ea:	10 92 1e 33 	sts	0x331E, r1	; 0x80331e <rx_wptr>
      ee:	10 92 1f 33 	sts	0x331F, r1	; 0x80331f <rx_wptr+0x1>
	memset(rn487x_rx_buff, 0, RN487X_RX_BUFF_SIZE);
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	e0 e2       	ldi	r30, 0x20	; 32
      f8:	f3 e3       	ldi	r31, 0x33	; 51
      fa:	df 01       	movw	r26, r30
      fc:	9c 01       	movw	r18, r24
      fe:	1d 92       	st	X+, r1
     100:	21 50       	subi	r18, 0x01	; 1
     102:	30 40       	sbci	r19, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <rn487x_clear_rx_buff+0x14>
     106:	08 95       	ret

00000108 <rn487x_get_err_from_response>:
}

static ble_error_t rn487x_get_err_from_response()
{
	if(	strstr(rn487x_rx_buff, RN487X_RESPONSE_ERR) != NULL)
     108:	6a e2       	ldi	r22, 0x2A	; 42
     10a:	74 e6       	ldi	r23, 0x64	; 100
     10c:	80 e2       	ldi	r24, 0x20	; 32
     10e:	93 e3       	ldi	r25, 0x33	; 51
     110:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
     114:	89 2b       	or	r24, r25
     116:	11 f0       	breq	.+4      	; 0x11c <rn487x_get_err_from_response+0x14>
	return BLE_FAIL;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	08 95       	ret
	else
	return BLE_NOERR;
     11c:	81 e0       	ldi	r24, 0x01	; 1

}
     11e:	08 95       	ret

00000120 <rx487x_reboot>:
	return BLE_NOERR;
}

static ble_error_t rx487x_reboot(struct ble_server* ctx)
{
	rn487x_clear_rx_buff();
     120:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
     124:	8d b1       	in	r24, 0x0d	; 13
     126:	87 7f       	andi	r24, 0xF7	; 247
     128:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	8d e8       	ldi	r24, 0x8D	; 141
     12c:	90 e2       	ldi	r25, 0x20	; 32
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <rx487x_reboot+0xe>
     132:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     134:	8d b1       	in	r24, 0x0d	; 13
     136:	88 60       	ori	r24, 0x08	; 8
     138:	8d b9       	out	0x0d, r24	; 13
     13a:	9f e3       	ldi	r25, 0x3F	; 63
     13c:	2d e0       	ldi	r18, 0x0D	; 13
     13e:	83 e0       	ldi	r24, 0x03	; 3
     140:	91 50       	subi	r25, 0x01	; 1
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	80 40       	sbci	r24, 0x00	; 0
     146:	e1 f7       	brne	.-8      	; 0x140 <rx487x_reboot+0x20>
     148:	00 c0       	rjmp	.+0      	; 0x14a <rx487x_reboot+0x2a>
     14a:	00 00       	nop
	RN487X_RST_set_level(false);
	_delay_ms(RN487X_RESET_DELAY);
	RN487X_RST_set_level(true);
	_delay_ms(RN487X_STARTUP_TIME);
	
	return rn487x_get_err_from_response();
     14c:	0e 94 84 00 	call	0x108	; 0x108 <rn487x_get_err_from_response>
}
     150:	08 95       	ret

00000152 <rn487x_usb_cdc_isr>:
	#endif

}

void rn487x_usb_cdc_isr()
{
     152:	cf 93       	push	r28
     154:	df 93       	push	r29

	if(usb_rx_wptr < (RN487X_USB_CDC_BUFF_SIZE - 2))
     156:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     15a:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     15e:	8e 37       	cpi	r24, 0x7E	; 126
     160:	91 05       	cpc	r25, r1
     162:	e8 f4       	brcc	.+58     	; 0x19e <rn487x_usb_cdc_isr+0x4c>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = usb_cdc_get_data();
     164:	c0 91 9c 32 	lds	r28, 0x329C	; 0x80329c <usb_rx_wptr>
     168:	d0 91 9d 32 	lds	r29, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     16c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <usb_cdc_get_data>
     170:	c2 56       	subi	r28, 0x62	; 98
     172:	dd 4c       	sbci	r29, 0xCD	; 205
     174:	88 83       	st	Y, r24
		printf("%c", rn487x_usb_rx_buff[usb_rx_wptr]);
     176:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     17a:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     17e:	e2 56       	subi	r30, 0x62	; 98
     180:	fd 4c       	sbci	r31, 0xCD	; 205
     182:	80 81       	ld	r24, Z
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 96 0b 	call	0x172c	; 0x172c <putchar>
		usb_rx_wptr = (usb_rx_wptr + 1);
     18a:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     18e:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	80 93 9c 32 	sts	0x329C, r24	; 0x80329c <usb_rx_wptr>
     198:	90 93 9d 32 	sts	0x329D, r25	; 0x80329d <usb_rx_wptr+0x1>
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <rn487x_usb_cdc_isr+0x50>
	}
	else
	{
		usb_cdc_get_data();
     19e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <usb_cdc_get_data>
	}


	
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <rn487x_cb_isr>:
	return BLE_NOERR;

}

static void rn487x_cb_isr()
{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
	rn487x_rx_buff[rx_wptr] = rx487x_get_data();
     1ac:	c0 91 1e 33 	lds	r28, 0x331E	; 0x80331e <rx_wptr>
     1b0:	d0 91 1f 33 	lds	r29, 0x331F	; 0x80331f <rx_wptr+0x1>
     1b4:	0e 94 76 09 	call	0x12ec	; 0x12ec <rx487x_get_data>
     1b8:	c0 5e       	subi	r28, 0xE0	; 224
     1ba:	dc 4c       	sbci	r29, 0xCC	; 204
     1bc:	88 83       	st	Y, r24
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
     1be:	80 91 1e 33 	lds	r24, 0x331E	; 0x80331e <rx_wptr>
     1c2:	90 91 1f 33 	lds	r25, 0x331F	; 0x80331f <rx_wptr+0x1>
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	99 27       	eor	r25, r25
     1ca:	80 93 1e 33 	sts	0x331E, r24	; 0x80331e <rx_wptr>
     1ce:	90 93 1f 33 	sts	0x331F, r25	; 0x80331f <rx_wptr+0x1>
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <rn487x_send_ascii_command>:

void rn487x_send_ascii_command(const uint8_t* cmd)
{
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
	uint8_t id = 0;
	
	rn487x_clear_rx_buff();
     1e4:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
	
	// enter cmd mode
	rx487x_write('$');
     1e8:	84 e2       	ldi	r24, 0x24	; 36
     1ea:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('$');
     1ee:	84 e2       	ldi	r24, 0x24	; 36
     1f0:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('$');
     1f4:	84 e2       	ldi	r24, 0x24	; 36
     1f6:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
     1fa:	2a e6       	ldi	r18, 0x6A	; 106
     1fc:	84 e0       	ldi	r24, 0x04	; 4
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	21 50       	subi	r18, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <rn487x_send_ascii_command+0x28>
     208:	00 c0       	rjmp	.+0      	; 0x20a <rn487x_send_ascii_command+0x32>
	rx_wptr = (rx_wptr + 1) & RN487X_RX_BUFF_MASK;
}

void rn487x_send_ascii_command(const uint8_t* cmd)
{
	uint8_t id = 0;
     20a:	f1 2c       	mov	r15, r1
     20c:	08 c0       	rjmp	.+16     	; 0x21e <rn487x_send_ascii_command+0x46>

	_delay_ms(100);

	while(cmd[id] != NULL)
	{
		if(rx487x_is_tx_ready())
     20e:	0e 94 3e 09 	call	0x127c	; 0x127c <rx487x_is_tx_ready>
     212:	88 23       	and	r24, r24
     214:	21 f0       	breq	.+8      	; 0x21e <rn487x_send_ascii_command+0x46>
		{
			rx487x_write(cmd[id]);
     216:	88 81       	ld	r24, Y
     218:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
			id++;
     21c:	f3 94       	inc	r15
	rx487x_write('$');
	rx487x_write('$');

	_delay_ms(100);

	while(cmd[id] != NULL)
     21e:	e8 01       	movw	r28, r16
     220:	cf 0d       	add	r28, r15
     222:	d1 1d       	adc	r29, r1
     224:	88 81       	ld	r24, Y
     226:	81 11       	cpse	r24, r1
     228:	f2 cf       	rjmp	.-28     	; 0x20e <rn487x_send_ascii_command+0x36>
     22a:	2f e3       	ldi	r18, 0x3F	; 63
     22c:	8d e0       	ldi	r24, 0x0D	; 13
     22e:	93 e0       	ldi	r25, 0x03	; 3
     230:	21 50       	subi	r18, 0x01	; 1
     232:	80 40       	sbci	r24, 0x00	; 0
     234:	90 40       	sbci	r25, 0x00	; 0
     236:	e1 f7       	brne	.-8      	; 0x230 <rn487x_send_ascii_command+0x58>
     238:	00 c0       	rjmp	.+0      	; 0x23a <rn487x_send_ascii_command+0x62>
     23a:	00 00       	nop
	}

	_delay_ms(RN487X_DELAY_WAIT_FOR_RESPONSE);

	//exit cmd mode
	rx487x_write('-');
     23c:	8d e2       	ldi	r24, 0x2D	; 45
     23e:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('-');
     242:	8d e2       	ldi	r24, 0x2D	; 45
     244:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('-');
     248:	8d e2       	ldi	r24, 0x2D	; 45
     24a:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('\r');
     24e:	8d e0       	ldi	r24, 0x0D	; 13
     250:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
	rx487x_write('\n');
     254:	8a e0       	ldi	r24, 0x0A	; 10
     256:	0e 94 42 09 	call	0x1284	; 0x1284 <rx487x_write>
     25a:	2a e6       	ldi	r18, 0x6A	; 106
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	21 50       	subi	r18, 0x01	; 1
     262:	80 40       	sbci	r24, 0x00	; 0
     264:	90 40       	sbci	r25, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <rn487x_send_ascii_command+0x88>
     268:	00 c0       	rjmp	.+0      	; 0x26a <rn487x_send_ascii_command+0x92>

	_delay_ms(100);
	
	#ifdef PRINT_DEBUG_MSG
	printf("%s", cmd);
     26a:	1f 93       	push	r17
     26c:	0f 93       	push	r16
     26e:	ce e2       	ldi	r28, 0x2E	; 46
     270:	d4 e6       	ldi	r29, 0x64	; 100
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
	printf("%s", rn487x_rx_buff);
     27a:	80 e2       	ldi	r24, 0x20	; 32
     27c:	93 e3       	ldi	r25, 0x33	; 51
     27e:	9f 93       	push	r25
     280:	8f 93       	push	r24
     282:	df 93       	push	r29
     284:	cf 93       	push	r28
     286:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
	#endif

}
     28a:	8d b7       	in	r24, 0x3d	; 61
     28c:	9e b7       	in	r25, 0x3e	; 62
     28e:	08 96       	adiw	r24, 0x08	; 8
     290:	8d bf       	out	0x3d, r24	; 61
     292:	9e bf       	out	0x3e, r25	; 62
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ff 90       	pop	r15
     29e:	08 95       	ret

000002a0 <rx487x_factory_reset>:
	return rn487x_get_err_from_response();
}

static ble_error_t rx487x_factory_reset(struct ble_server* ctx)
{	
	rn487x_send_ascii_command("SF,2\r\n");
     2a0:	81 e3       	ldi	r24, 0x31	; 49
     2a2:	94 e6       	ldi	r25, 0x64	; 100
     2a4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     2a8:	0e 94 84 00 	call	0x108	; 0x108 <rn487x_get_err_from_response>
}
     2ac:	08 95       	ret

000002ae <rn487x_start_advertising>:

/* GAP OPS */

ble_error_t rn487x_start_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("A\r\n");
     2ae:	88 e3       	ldi	r24, 0x38	; 56
     2b0:	94 e6       	ldi	r25, 0x64	; 100
     2b2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     2b6:	08 95       	ret

000002b8 <rn487x_stop_advertising>:

ble_error_t rn487x_stop_advertising(struct ble_server* ctx)
{
	rn487x_send_ascii_command("Y\r\n");
     2b8:	8c e3       	ldi	r24, 0x3C	; 60
     2ba:	94 e6       	ldi	r25, 0x64	; 100
     2bc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     2c0:	08 95       	ret

000002c2 <rn487x_kill_connection>:

ble_error_t rn487x_kill_connection(struct ble_server* ctx)
{
	rn487x_send_ascii_command("K,1\r\n");
     2c2:	80 e4       	ldi	r24, 0x40	; 64
     2c4:	94 e6       	ldi	r25, 0x64	; 100
     2c6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     2ca:	08 95       	ret

000002cc <rn487x_clear_bonding_info>:

ble_error_t rn487x_clear_bonding_info(struct ble_server* ctx)
{
	rn487x_send_ascii_command("U,Z\r\n");
     2cc:	86 e4       	ldi	r24, 0x46	; 70
     2ce:	94 e6       	ldi	r25, 0x64	; 100
     2d0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     2d4:	08 95       	ret

000002d6 <rn487x_register_service>:
	return BLE_NOERR;
}

ble_error_t rn487x_register_service(struct gatt_service* service)
{
	sprintf(rn487x_cmd_buff_a, "PS,%s\r\n", service->UUID);
     2d6:	fc 01       	movw	r30, r24
     2d8:	21 81       	ldd	r18, Z+1	; 0x01
     2da:	2f 93       	push	r18
     2dc:	80 81       	ld	r24, Z
     2de:	8f 93       	push	r24
     2e0:	8c e4       	ldi	r24, 0x4C	; 76
     2e2:	94 e6       	ldi	r25, 0x64	; 100
     2e4:	9f 93       	push	r25
     2e6:	8f 93       	push	r24
     2e8:	8c e9       	ldi	r24, 0x9C	; 156
     2ea:	91 e3       	ldi	r25, 0x31	; 49
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     2f4:	8c e9       	ldi	r24, 0x9C	; 156
     2f6:	91 e3       	ldi	r25, 0x31	; 49
     2f8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     2fc:	0e 94 84 00 	call	0x108	; 0x108 <rn487x_get_err_from_response>
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
}
     30c:	08 95       	ret

0000030e <rn487x_register_characteristic>:

ble_error_t rn487x_register_characteristic(struct gatt_characteristic* characteristic)
{
     30e:	fc 01       	movw	r30, r24
	sprintf(rn487x_cmd_buff_a, "PC,%s,%02X,%02X\r\n", characteristic->UUID, characteristic->properties, characteristic->data_len);
     310:	95 81       	ldd	r25, Z+5	; 0x05
     312:	84 81       	ldd	r24, Z+4	; 0x04
     314:	1f 92       	push	r1
     316:	9f 93       	push	r25
     318:	1f 92       	push	r1
     31a:	8f 93       	push	r24
     31c:	81 81       	ldd	r24, Z+1	; 0x01
     31e:	8f 93       	push	r24
     320:	80 81       	ld	r24, Z
     322:	8f 93       	push	r24
     324:	84 e5       	ldi	r24, 0x54	; 84
     326:	94 e6       	ldi	r25, 0x64	; 100
     328:	9f 93       	push	r25
     32a:	8f 93       	push	r24
     32c:	8c e9       	ldi	r24, 0x9C	; 156
     32e:	91 e3       	ldi	r25, 0x31	; 49
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     338:	8c e9       	ldi	r24, 0x9C	; 156
     33a:	91 e3       	ldi	r25, 0x31	; 49
     33c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return rn487x_get_err_from_response();
     340:	0e 94 84 00 	call	0x108	; 0x108 <rn487x_get_err_from_response>
     344:	2d b7       	in	r18, 0x3d	; 61
     346:	3e b7       	in	r19, 0x3e	; 62
     348:	26 5f       	subi	r18, 0xF6	; 246
     34a:	3f 4f       	sbci	r19, 0xFF	; 255
     34c:	2d bf       	out	0x3d, r18	; 61
     34e:	3e bf       	out	0x3e, r19	; 62
}
     350:	08 95       	ret

00000352 <rn487x_gatt_init>:
};

/* Helper GATT Functions */

ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
     352:	2f 92       	push	r2
     354:	3f 92       	push	r3
     356:	4f 92       	push	r4
     358:	5f 92       	push	r5
     35a:	6f 92       	push	r6
     35c:	7f 92       	push	r7
     35e:	8f 92       	push	r8
     360:	9f 92       	push	r9
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	e2 97       	sbiw	r28, 0x32	; 50
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	2c 01       	movw	r4, r24
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;
     382:	dc 01       	movw	r26, r24
     384:	ed 91       	ld	r30, X+
     386:	fc 91       	ld	r31, X
     388:	22 88       	ldd	r2, Z+18	; 0x12
     38a:	33 88       	ldd	r3, Z+19	; 0x13

	for(short i = 0; i < ctx->config->services_count; i++)
     38c:	61 2c       	mov	r6, r1
     38e:	71 2c       	mov	r7, r1
     390:	6a c0       	rjmp	.+212    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		struct gatt_service* service = (*services)[i];
     392:	f3 01       	movw	r30, r6
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e2 0d       	add	r30, r2
     39a:	f3 1d       	adc	r31, r3
     39c:	c0 80       	ld	r12, Z
     39e:	d1 80       	ldd	r13, Z+1	; 0x01
		
		rn487x_register_service(service);
     3a0:	c6 01       	movw	r24, r12
     3a2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <rn487x_register_service>

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;
     3a6:	f6 01       	movw	r30, r12
     3a8:	86 80       	ldd	r8, Z+6	; 0x06
     3aa:	97 80       	ldd	r9, Z+7	; 0x07

		for(short j = 0; j < service->characteristics_count; j++)
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	4d c0       	rjmp	.+154    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		{
			struct gatt_characteristic* characteristic = (*characteristics)[j];
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	f4 01       	movw	r30, r8
     3b8:	e8 0f       	add	r30, r24
     3ba:	f9 1f       	adc	r31, r25
     3bc:	00 81       	ld	r16, Z
     3be:	11 81       	ldd	r17, Z+1	; 0x01

			if(rn487x_register_characteristic(characteristic))
     3c0:	c8 01       	movw	r24, r16
     3c2:	0e 94 87 01 	call	0x30e	; 0x30e <rn487x_register_characteristic>
     3c6:	88 23       	and	r24, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <rn487x_gatt_init+0x7a>
     3ca:	65 c0       	rjmp	.+202    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			{
				uint8_t buff[50];
				uint8_t* res;

				// list all characteristics in the service
				sprintf(buff, "LS,%s\r\n", service->UUID);
     3cc:	d6 01       	movw	r26, r12
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	8c 91       	ld	r24, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	8f 93       	push	r24
     3d6:	8c 91       	ld	r24, X
     3d8:	8f 93       	push	r24
     3da:	86 e6       	ldi	r24, 0x66	; 102
     3dc:	94 e6       	ldi	r25, 0x64	; 100
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	fe 01       	movw	r30, r28
     3e4:	31 96       	adiw	r30, 0x01	; 1
     3e6:	7f 01       	movw	r14, r30
     3e8:	ff 93       	push	r31
     3ea:	ef 93       	push	r30
     3ec:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
				rn487x_send_ascii_command(buff);
     3f0:	c7 01       	movw	r24, r14
     3f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

				// find this characteristic from the LS
				// XXXX...X,0000,00
				res = strstr(rn487x_rx_buff, characteristic->UUID);
     3f6:	d8 01       	movw	r26, r16
     3f8:	ed 90       	ld	r14, X+
     3fa:	fc 90       	ld	r15, X
     3fc:	b7 01       	movw	r22, r14
     3fe:	80 e2       	ldi	r24, 0x20	; 32
     400:	93 e3       	ldi	r25, 0x33	; 51
     402:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
				res =  res +  strlen(characteristic->UUID) + 1;
     406:	f7 01       	movw	r30, r14
     408:	01 90       	ld	r0, Z+
     40a:	00 20       	and	r0, r0
     40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	ee 19       	sub	r30, r14
     412:	ff 09       	sbc	r31, r15
     414:	31 96       	adiw	r30, 0x01	; 1
				
				//uint8_t* endptr;
				characteristic->handle = strtol(res, NULL, 16);
     416:	40 e1       	ldi	r20, 0x10	; 16
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8e 0f       	add	r24, r30
     420:	9f 1f       	adc	r25, r31
     422:	0e 94 38 0a 	call	0x1470	; 0x1470 <strtol>
     426:	f8 01       	movw	r30, r16
     428:	62 83       	std	Z+2, r22	; 0x02
     42a:	73 83       	std	Z+3, r23	; 0x03

				#ifdef PRINT_DEBUG_MSG
				printf("Registered characteristic %s, with handle %04X\r\n", characteristic->UUID, characteristic->handle);
     42c:	7f 93       	push	r23
     42e:	6f 93       	push	r22
     430:	81 81       	ldd	r24, Z+1	; 0x01
     432:	8f 93       	push	r24
     434:	80 81       	ld	r24, Z
     436:	8f 93       	push	r24
     438:	8e e6       	ldi	r24, 0x6E	; 110
     43a:	94 e6       	ldi	r25, 0x64	; 100
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
		
		rn487x_register_service(service);

		struct gatt_characteristic *(*characteristics)[] = service->characteristics;

		for(short j = 0; j < service->characteristics_count; j++)
     444:	c5 01       	movw	r24, r10
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	d6 01       	movw	r26, r12
     44e:	14 96       	adiw	r26, 0x04	; 4
     450:	2d 91       	ld	r18, X+
     452:	3c 91       	ld	r19, X
     454:	15 97       	sbiw	r26, 0x05	; 5
     456:	5c 01       	movw	r10, r24
     458:	82 17       	cp	r24, r18
     45a:	93 07       	cpc	r25, r19
     45c:	08 f4       	brcc	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	a9 cf       	rjmp	.-174    	; 0x3b2 <rn487x_gatt_init+0x60>
ble_error_t rn487x_gatt_init(struct ble_server* ctx)
{
	// register services and characteristics
	struct gatt_service	*(*services)[]	= ctx->config->services;

	for(short i = 0; i < ctx->config->services_count; i++)
     460:	bf ef       	ldi	r27, 0xFF	; 255
     462:	6b 1a       	sub	r6, r27
     464:	7b 0a       	sbc	r7, r27
     466:	d2 01       	movw	r26, r4
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	81 89       	ldd	r24, Z+17	; 0x11
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	68 16       	cp	r6, r24
     474:	79 06       	cpc	r7, r25
     476:	0c f4       	brge	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	8c cf       	rjmp	.-232    	; 0x392 <rn487x_gatt_init+0x40>
				return BLE_FAIL;
			}
		}
	}

	ctx->sys->reboot(ctx);
     47a:	12 96       	adiw	r26, 0x02	; 2
     47c:	ed 91       	ld	r30, X+
     47e:	fc 91       	ld	r31, X
     480:	13 97       	sbiw	r26, 0x03	; 3
     482:	02 80       	ldd	r0, Z+2	; 0x02
     484:	f3 81       	ldd	r31, Z+3	; 0x03
     486:	e0 2d       	mov	r30, r0
     488:	c2 01       	movw	r24, r4
     48a:	09 95       	icall
	rn487x_send_ascii_command("LS\r\n");
     48c:	8f e9       	ldi	r24, 0x9F	; 159
     48e:	94 e6       	ldi	r25, 0x64	; 100
     490:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	return BLE_NOERR;
     494:	81 e0       	ldi	r24, 0x01	; 1
}
     496:	e2 96       	adiw	r28, 0x32	; 50
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	bf 90       	pop	r11
     4ae:	af 90       	pop	r10
     4b0:	9f 90       	pop	r9
     4b2:	8f 90       	pop	r8
     4b4:	7f 90       	pop	r7
     4b6:	6f 90       	pop	r6
     4b8:	5f 90       	pop	r5
     4ba:	4f 90       	pop	r4
     4bc:	3f 90       	pop	r3
     4be:	2f 90       	pop	r2
     4c0:	08 95       	ret

000004c2 <rn487x_set_address>:
}

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	7b 01       	movw	r14, r22
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     4d0:	c0 e0       	ldi	r28, 0x00	; 0
     4d2:	d0 e0       	ldi	r29, 0x00	; 0

/* Helper GAP Functions */

ble_error_t rn487x_set_address(struct ble_server* ctx, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     4d4:	0c e9       	ldi	r16, 0x9C	; 156
     4d6:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     4d8:	17 c0       	rjmp	.+46     	; 0x508 <rn487x_set_address+0x46>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     4da:	f7 01       	movw	r30, r14
     4dc:	ec 0f       	add	r30, r28
     4de:	fd 1f       	adc	r31, r29
     4e0:	80 81       	ld	r24, Z
     4e2:	1f 92       	push	r1
     4e4:	8f 93       	push	r24
     4e6:	84 ea       	ldi	r24, 0xA4	; 164
     4e8:	94 e6       	ldi	r25, 0x64	; 100
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	1f 93       	push	r17
     4f0:	0f 93       	push	r16
     4f2:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
     4f6:	08 0f       	add	r16, r24
     4f8:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < MAC_ADDRESS_BYTE_LEN; i++)
     4fa:	21 96       	adiw	r28, 0x01	; 1
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	c6 30       	cpi	r28, 0x06	; 6
     50a:	d1 05       	cpc	r29, r1
     50c:	34 f3       	brlt	.-52     	; 0x4da <rn487x_set_address+0x18>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "&,%s\r\n", rn487x_cmd_buff_b);
     50e:	8c e9       	ldi	r24, 0x9C	; 156
     510:	90 e3       	ldi	r25, 0x30	; 48
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	89 ea       	ldi	r24, 0xA9	; 169
     518:	94 e6       	ldi	r25, 0x64	; 100
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	8c e9       	ldi	r24, 0x9C	; 156
     520:	91 e3       	ldi	r25, 0x31	; 49
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     52a:	8c e9       	ldi	r24, 0x9C	; 156
     52c:	91 e3       	ldi	r25, 0x31	; 49
     52e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <rn487x_set_device_name>:

ble_error_t rn487x_set_device_name(struct ble_server* ctx, const uint8_t* name)
{
	sprintf(rn487x_cmd_buff_a, "S-,%s\r\n", name);
     54c:	7f 93       	push	r23
     54e:	6f 93       	push	r22
     550:	80 eb       	ldi	r24, 0xB0	; 176
     552:	94 e6       	ldi	r25, 0x64	; 100
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	8c e9       	ldi	r24, 0x9C	; 156
     55a:	91 e3       	ldi	r25, 0x31	; 49
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     564:	8c e9       	ldi	r24, 0x9C	; 156
     566:	91 e3       	ldi	r25, 0x31	; 49
     568:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	08 95       	ret

0000057a <rn487x_set_appearance>:

ble_error_t rn487x_set_appearance(struct ble_server* ctx, const ble_gap_appearance_t appearance)
{
	sprintf(rn487x_cmd_buff_a, "SDA,%04X\r\n", appearance);
     57a:	7f 93       	push	r23
     57c:	6f 93       	push	r22
     57e:	88 eb       	ldi	r24, 0xB8	; 184
     580:	94 e6       	ldi	r25, 0x64	; 100
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	8c e9       	ldi	r24, 0x9C	; 156
     588:	91 e3       	ldi	r25, 0x31	; 49
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     592:	8c e9       	ldi	r24, 0x9C	; 156
     594:	91 e3       	ldi	r25, 0x31	; 49
     596:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	08 95       	ret

000005a8 <rn487x_set_connection_params>:
ble_error_t rn487x_set_connection_params(struct ble_server* ctx,
											const uint16_t min_interval,
											const uint16_t max_interval,
											const uint16_t latency,
											const uint16_t timeout)
{
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
	// ST,<hex16>,<hex16>,<hex16>,<hex16>
	sprintf(rn487x_cmd_buff_a, "ST,%04X,%04X,%04X,%04X\r\n",
     5ac:	1f 93       	push	r17
     5ae:	0f 93       	push	r16
     5b0:	3f 93       	push	r19
     5b2:	2f 93       	push	r18
     5b4:	5f 93       	push	r21
     5b6:	4f 93       	push	r20
     5b8:	7f 93       	push	r23
     5ba:	6f 93       	push	r22
     5bc:	83 ec       	ldi	r24, 0xC3	; 195
     5be:	94 e6       	ldi	r25, 0x64	; 100
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	8c e9       	ldi	r24, 0x9C	; 156
     5c6:	91 e3       	ldi	r25, 0x31	; 49
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	min_interval, max_interval, latency, timeout);

	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     5d0:	8c e9       	ldi	r24, 0x9C	; 156
     5d2:	91 e3       	ldi	r25, 0x31	; 49
     5d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

}
     5d8:	8d b7       	in	r24, 0x3d	; 61
     5da:	9e b7       	in	r25, 0x3e	; 62
     5dc:	0c 96       	adiw	r24, 0x0c	; 12
     5de:	8d bf       	out	0x3d, r24	; 61
     5e0:	9e bf       	out	0x3e, r25	; 62
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <rn487x_set_security>:

ble_error_t rn487x_set_security(struct ble_server* ctx,
										const ble_io_capabilities_t io_capabilities,
										const uint8_t* passkey)
{
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	14 2f       	mov	r17, r20
     5f2:	05 2f       	mov	r16, r21
	sprintf(rn487x_cmd_buff_a, "SA,%d\r\n", io_capabilities);
     5f4:	1f 92       	push	r1
     5f6:	6f 93       	push	r22
     5f8:	8c ed       	ldi	r24, 0xDC	; 220
     5fa:	94 e6       	ldi	r25, 0x64	; 100
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	cc e9       	ldi	r28, 0x9C	; 156
     602:	d1 e3       	ldi	r29, 0x31	; 49
     604:	df 93       	push	r29
     606:	cf 93       	push	r28
     608:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

	sprintf(rn487x_cmd_buff_a, "SP,%s\r\n", passkey);
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	84 ee       	ldi	r24, 0xE4	; 228
     618:	94 e6       	ldi	r25, 0x64	; 100
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     626:	ce 01       	movw	r24, r28
     628:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     62c:	8d b7       	in	r24, 0x3d	; 61
     62e:	9e b7       	in	r25, 0x3e	; 62
     630:	0c 96       	adiw	r24, 0x0c	; 12
     632:	8d bf       	out	0x3d, r24	; 61
     634:	9e bf       	out	0x3e, r25	; 62
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <rn487x_gap_init>:

ble_error_t rn487x_gap_init(struct ble_server* ctx)
{
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
	if(ctx->config->address != NULL)
     64a:	e8 81       	ld	r30, Y
     64c:	f9 81       	ldd	r31, Y+1	; 0x01
     64e:	60 81       	ld	r22, Z
     650:	71 81       	ldd	r23, Z+1	; 0x01
     652:	61 15       	cp	r22, r1
     654:	71 05       	cpc	r23, r1
     656:	11 f0       	breq	.+4      	; 0x65c <rn487x_gap_init+0x1c>
	rn487x_set_address(ctx, ctx->config->address);
     658:	0e 94 61 02 	call	0x4c2	; 0x4c2 <rn487x_set_address>

	if(ctx->config->device_name != NULL)
     65c:	e8 81       	ld	r30, Y
     65e:	f9 81       	ldd	r31, Y+1	; 0x01
     660:	62 81       	ldd	r22, Z+2	; 0x02
     662:	73 81       	ldd	r23, Z+3	; 0x03
     664:	61 15       	cp	r22, r1
     666:	71 05       	cpc	r23, r1
     668:	19 f0       	breq	.+6      	; 0x670 <rn487x_gap_init+0x30>
	rn487x_set_device_name(ctx, ctx->config->device_name);
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 a6 02 	call	0x54c	; 0x54c <rn487x_set_device_name>

	rn487x_set_security(ctx, ctx->config->io_capabilities, ctx->config->passkey);
     670:	e8 81       	ld	r30, Y
     672:	f9 81       	ldd	r31, Y+1	; 0x01
     674:	45 81       	ldd	r20, Z+5	; 0x05
     676:	56 81       	ldd	r21, Z+6	; 0x06
     678:	64 81       	ldd	r22, Z+4	; 0x04
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <rn487x_set_security>
	rn487x_set_appearance(ctx, ctx->config->advertisement_appearance);
     680:	e8 81       	ld	r30, Y
     682:	f9 81       	ldd	r31, Y+1	; 0x01
     684:	67 81       	ldd	r22, Z+7	; 0x07
     686:	70 85       	ldd	r23, Z+8	; 0x08
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 bd 02 	call	0x57a	; 0x57a <rn487x_set_appearance>
	rn487x_set_connection_params(ctx, ctx->config->connection_min_interval, ctx->config->connection_max_interval, ctx->config->connection_latency, ctx->config->connection_timeout);
     68e:	e8 81       	ld	r30, Y
     690:	f9 81       	ldd	r31, Y+1	; 0x01
     692:	07 85       	ldd	r16, Z+15	; 0x0f
     694:	10 89       	ldd	r17, Z+16	; 0x10
     696:	25 85       	ldd	r18, Z+13	; 0x0d
     698:	36 85       	ldd	r19, Z+14	; 0x0e
     69a:	43 85       	ldd	r20, Z+11	; 0x0b
     69c:	54 85       	ldd	r21, Z+12	; 0x0c
     69e:	61 85       	ldd	r22, Z+9	; 0x09
     6a0:	72 85       	ldd	r23, Z+10	; 0x0a
     6a2:	ce 01       	movw	r24, r28
     6a4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <rn487x_set_connection_params>
	
	ctx->sys->reboot(ctx);
     6a8:	ea 81       	ldd	r30, Y+2	; 0x02
     6aa:	fb 81       	ldd	r31, Y+3	; 0x03
     6ac:	02 80       	ldd	r0, Z+2	; 0x02
     6ae:	f3 81       	ldd	r31, Z+3	; 0x03
     6b0:	e0 2d       	mov	r30, r0
     6b2:	ce 01       	movw	r24, r28
     6b4:	09 95       	icall
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <rn487x_init>:
	rn487x_parse_responses(ctx);
	//rn487x_clear_rx_buff();
}

static void rn487x_init(struct ble_server* ctx)
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24

	#ifdef PRINT_DEBUG_MSG
	printf("\r\nInitializing rn487x\r\n");
     6c6:	8c ee       	ldi	r24, 0xEC	; 236
     6c8:	94 e6       	ldi	r25, 0x64	; 100
     6ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <puts>
	#endif

	rx487x_set_ISR_cb(rn487x_cb_isr, RX_CB);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	84 ed       	ldi	r24, 0xD4	; 212
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <rx487x_set_ISR_cb>
	usb_cdc_set_ISR_cb(rn487x_usb_cdc_isr, RX_CB);
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	89 ea       	ldi	r24, 0xA9	; 169
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 79 09 	call	0x12f2	; 0x12f2 <usb_cdc_set_ISR_cb>

	ctx->sys->reboot(ctx);
     6e2:	ea 81       	ldd	r30, Y+2	; 0x02
     6e4:	fb 81       	ldd	r31, Y+3	; 0x03
     6e6:	02 80       	ldd	r0, Z+2	; 0x02
     6e8:	f3 81       	ldd	r31, Z+3	; 0x03
     6ea:	e0 2d       	mov	r30, r0
     6ec:	ce 01       	movw	r24, r28
     6ee:	09 95       	icall
	ctx->sys->factory_reset(ctx);
     6f0:	ea 81       	ldd	r30, Y+2	; 0x02
     6f2:	fb 81       	ldd	r31, Y+3	; 0x03
     6f4:	04 80       	ldd	r0, Z+4	; 0x04
     6f6:	f5 81       	ldd	r31, Z+5	; 0x05
     6f8:	e0 2d       	mov	r30, r0
     6fa:	ce 01       	movw	r24, r28
     6fc:	09 95       	icall

	rn487x_gap_init(ctx);
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 20 03 	call	0x640	; 0x640 <rn487x_gap_init>
	rn487x_gatt_init(ctx);
     704:	ce 01       	movw	r24, r28
     706:	0e 94 a9 01 	call	0x352	; 0x352 <rn487x_gatt_init>

	rn487x_clear_rx_buff();
     70a:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
     70e:	2a e6       	ldi	r18, 0x6A	; 106
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	21 50       	subi	r18, 0x01	; 1
     716:	80 40       	sbci	r24, 0x00	; 0
     718:	90 40       	sbci	r25, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <rn487x_init+0x54>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <rn487x_init+0x5e>
	_delay_ms(100);
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <rn487x_read_handle>:
}

/* Helper ASCII Functions */

ble_error_t rn487x_read_handle(uint8_t handle, uint8_t data_len, uint8_t destination[])
{
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	e6 2e       	mov	r14, r22
     736:	6a 01       	movw	r12, r20
	sprintf(rn487x_cmd_buff_a, "SHR,%04X\r\n", handle);
     738:	1f 92       	push	r1
     73a:	8f 93       	push	r24
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	95 e6       	ldi	r25, 0x65	; 101
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	8c e9       	ldi	r24, 0x9C	; 156
     746:	91 e3       	ldi	r25, 0x31	; 49
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     750:	8c e9       	ldi	r24, 0x9C	; 156
     752:	91 e3       	ldi	r25, 0x31	; 49
     754:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
	
	if(rn487x_get_err_from_response())
     758:	0e 94 84 00 	call	0x108	; 0x108 <rn487x_get_err_from_response>
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	88 23       	and	r24, r24
     76a:	49 f1       	breq	.+82     	; 0x7be <rn487x_read_handle+0x9a>
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
     76c:	f1 2c       	mov	r15, r1
     76e:	a7 01       	movw	r20, r14
     770:	44 0f       	add	r20, r20
     772:	55 1f       	adc	r21, r21
     774:	65 e2       	ldi	r22, 0x25	; 37
     776:	73 e3       	ldi	r23, 0x33	; 51
     778:	8c e9       	ldi	r24, 0x9C	; 156
     77a:	91 e3       	ldi	r25, 0x31	; 49
     77c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <strncpy>
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < data_len; i++)
     780:	c0 e0       	ldi	r28, 0x00	; 0
     782:	d0 e0       	ldi	r29, 0x00	; 0
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
	
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;
     784:	0c e9       	ldi	r16, 0x9C	; 156
     786:	11 e3       	ldi	r17, 0x31	; 49

		for (short i = 0; i < data_len; i++)
     788:	16 c0       	rjmp	.+44     	; 0x7b6 <rn487x_read_handle+0x92>
		{
			sscanf(pos, "%2hhX", &destination[i]);
     78a:	c6 01       	movw	r24, r12
     78c:	8c 0f       	add	r24, r28
     78e:	9d 1f       	adc	r25, r29
     790:	9f 93       	push	r25
     792:	8f 93       	push	r24
     794:	8e e0       	ldi	r24, 0x0E	; 14
     796:	95 e6       	ldi	r25, 0x65	; 101
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	1f 93       	push	r17
     79e:	0f 93       	push	r16
     7a0:	0e 94 ef 0b 	call	0x17de	; 0x17de <sscanf>
			pos = pos + 2;
     7a4:	0e 5f       	subi	r16, 0xFE	; 254
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
	if(rn487x_get_err_from_response())
	{
		strncpy(rn487x_cmd_buff_a, (rn487x_rx_buff + 5), (data_len * 2));
		uint8_t *pos = 	rn487x_cmd_buff_a;

		for (short i = 0; i < data_len; i++)
     7a8:	21 96       	adiw	r28, 0x01	; 1
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	ce 15       	cp	r28, r14
     7b8:	df 05       	cpc	r29, r15
     7ba:	3c f3       	brlt	.-50     	; 0x78a <rn487x_read_handle+0x66>
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <rn487x_read_handle+0x9e>
		}

	}
	else
	{
		return BLE_FAIL;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <rn487x_read_handle+0x9e>
	}

}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <rn487x_read_value>:
};

/* GATT OPS */

ble_error_t rn487x_read_value(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     7d4:	ab 01       	movw	r20, r22
	return rn487x_read_handle(characteristic->handle, characteristic->data_len, destination);
     7d6:	fc 01       	movw	r30, r24
     7d8:	65 81       	ldd	r22, Z+5	; 0x05
     7da:	82 81       	ldd	r24, Z+2	; 0x02
     7dc:	0e 94 92 03 	call	0x724	; 0x724 <rn487x_read_handle>
}
     7e0:	08 95       	ret

000007e2 <rn487x_read_notification>:
{
	return rn487x_write_handle(characteristic->handle, characteristic->data_len, payload);
}

ble_error_t rn487x_read_notification(struct gatt_characteristic* characteristic, uint8_t destination[])
{
     7e2:	fc 01       	movw	r30, r24
     7e4:	ab 01       	movw	r20, r22
	return rn487x_read_handle(characteristic->handle+1, characteristic->data_len, destination);
     7e6:	82 81       	ldd	r24, Z+2	; 0x02
     7e8:	65 81       	ldd	r22, Z+5	; 0x05
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	0e 94 92 03 	call	0x724	; 0x724 <rn487x_read_handle>
}
     7f0:	08 95       	ret

000007f2 <rn487x_write_handle>:
	}

}

ble_error_t rn487x_write_handle(uint8_t handle, uint8_t data_len, const uint8_t payload[])
{
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	c8 2e       	mov	r12, r24
     804:	d6 2e       	mov	r13, r22
     806:	7a 01       	movw	r14, r20
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < data_len; i++)
     808:	c0 e0       	ldi	r28, 0x00	; 0
     80a:	d0 e0       	ldi	r29, 0x00	; 0

}

ble_error_t rn487x_write_handle(uint8_t handle, uint8_t data_len, const uint8_t payload[])
{
	char *ptr = &rn487x_cmd_buff_b[0];
     80c:	0c e9       	ldi	r16, 0x9C	; 156
     80e:	10 e3       	ldi	r17, 0x30	; 48

	int i;

	for (i = 0; i < data_len; i++)
     810:	17 c0       	rjmp	.+46     	; 0x840 <rn487x_write_handle+0x4e>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
     812:	f7 01       	movw	r30, r14
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	80 81       	ld	r24, Z
     81a:	1f 92       	push	r1
     81c:	8f 93       	push	r24
     81e:	84 ea       	ldi	r24, 0xA4	; 164
     820:	94 e6       	ldi	r25, 0x64	; 100
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	1f 93       	push	r17
     828:	0f 93       	push	r16
     82a:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
     82e:	08 0f       	add	r16, r24
     830:	19 1f       	adc	r17, r25
{
	char *ptr = &rn487x_cmd_buff_b[0];

	int i;

	for (i = 0; i < data_len; i++)
     832:	21 96       	adiw	r28, 0x01	; 1
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	8d 2d       	mov	r24, r13
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	c8 17       	cp	r28, r24
     846:	d9 07       	cpc	r29, r25
     848:	24 f3       	brlt	.-56     	; 0x812 <rn487x_write_handle+0x20>
	{
		ptr += sprintf(ptr, "%02X", payload[i]);
	}

	sprintf(rn487x_cmd_buff_a, "SHW,%04X,%s\r\n", handle, rn487x_cmd_buff_b);
     84a:	8c e9       	ldi	r24, 0x9C	; 156
     84c:	90 e3       	ldi	r25, 0x30	; 48
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	1f 92       	push	r1
     854:	cf 92       	push	r12
     856:	84 e1       	ldi	r24, 0x14	; 20
     858:	95 e6       	ldi	r25, 0x65	; 101
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	8c e9       	ldi	r24, 0x9C	; 156
     860:	91 e3       	ldi	r25, 0x31	; 49
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	0e 94 cd 0b 	call	0x179a	; 0x179a <sprintf>
	rn487x_send_ascii_command(rn487x_cmd_buff_a);
     86a:	8c e9       	ldi	r24, 0x9C	; 156
     86c:	91 e3       	ldi	r25, 0x31	; 49
     86e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>
}
     872:	8d b7       	in	r24, 0x3d	; 61
     874:	9e b7       	in	r25, 0x3e	; 62
     876:	08 96       	adiw	r24, 0x08	; 8
     878:	8d bf       	out	0x3d, r24	; 61
     87a:	9e bf       	out	0x3e, r25	; 62
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <rn487x_write_value>:
{
	return rn487x_read_handle(characteristic->handle, characteristic->data_len, destination);
}

ble_error_t rn487x_write_value(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     88e:	ab 01       	movw	r20, r22
	return rn487x_write_handle(characteristic->handle, characteristic->data_len, payload);
     890:	fc 01       	movw	r30, r24
     892:	65 81       	ldd	r22, Z+5	; 0x05
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <rn487x_write_handle>
}
     89a:	08 95       	ret

0000089c <rn487x_send_notification>:
{
	return rn487x_read_handle(characteristic->handle+1, characteristic->data_len, destination);
}

ble_error_t rn487x_send_notification(struct gatt_characteristic* characteristic, const uint8_t payload[])
{
     89c:	fc 01       	movw	r30, r24
     89e:	ab 01       	movw	r20, r22
	return rn487x_write_handle(characteristic->handle+1, characteristic->data_len, payload);
     8a0:	82 81       	ldd	r24, Z+2	; 0x02
     8a2:	65 81       	ldd	r22, Z+5	; 0x05
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <rn487x_write_handle>
}
     8aa:	08 95       	ret

000008ac <rn487x_get_response>:
}

uint8_t* rn487x_get_response(void)
{
	return rn487x_rx_buff;
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	93 e3       	ldi	r25, 0x33	; 51
     8b0:	08 95       	ret

000008b2 <rn487x_parse_responses>:
	
};


static void rn487x_parse_responses(struct ble_server* ctx)
{
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	ec 01       	movw	r28, r24

	if(ctx->events->cb_on_new_connection && 
     8c0:	08 85       	ldd	r16, Y+8	; 0x08
     8c2:	19 85       	ldd	r17, Y+9	; 0x09
     8c4:	f8 01       	movw	r30, r16
     8c6:	e0 80       	ld	r14, Z
     8c8:	f1 80       	ldd	r15, Z+1	; 0x01
     8ca:	e1 14       	cp	r14, r1
     8cc:	f1 04       	cpc	r15, r1
     8ce:	59 f0       	breq	.+22     	; 0x8e6 <rn487x_parse_responses+0x34>
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
     8d0:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     8d4:	62 e2       	ldi	r22, 0x22	; 34
     8d6:	75 e6       	ldi	r23, 0x65	; 101
     8d8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>


static void rn487x_parse_responses(struct ble_server* ctx)
{

	if(ctx->events->cb_on_new_connection && 
     8dc:	89 2b       	or	r24, r25
     8de:	19 f0       	breq	.+6      	; 0x8e6 <rn487x_parse_responses+0x34>
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
	{
		ctx->events->cb_on_new_connection();
     8e0:	f7 01       	movw	r30, r14
     8e2:	09 95       	icall
     8e4:	54 c0       	rjmp	.+168    	; 0x98e <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_connection_secured&& 
     8e6:	f8 01       	movw	r30, r16
     8e8:	e4 80       	ldd	r14, Z+4	; 0x04
     8ea:	f5 80       	ldd	r15, Z+5	; 0x05
     8ec:	e1 14       	cp	r14, r1
     8ee:	f1 04       	cpc	r15, r1
     8f0:	59 f0       	breq	.+22     	; 0x908 <rn487x_parse_responses+0x56>
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
     8f2:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     8f6:	6c e2       	ldi	r22, 0x2C	; 44
     8f8:	75 e6       	ldi	r23, 0x65	; 101
     8fa:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
	if(ctx->events->cb_on_new_connection && 
		strstr(rn487x_get_response(), RN487X_RESPONSE_NEW_CONNECTION) != NULL)
	{
		ctx->events->cb_on_new_connection();
	}
	else if(ctx->events->cb_on_connection_secured&& 
     8fe:	89 2b       	or	r24, r25
     900:	19 f0       	breq	.+6      	; 0x908 <rn487x_parse_responses+0x56>
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
	{
		ctx->events->cb_on_connection_secured();
     902:	f7 01       	movw	r30, r14
     904:	09 95       	icall
     906:	43 c0       	rjmp	.+134    	; 0x98e <rn487x_parse_responses+0xdc>
	}	
	else if(ctx->events->cb_on_disconnect &&
     908:	f8 01       	movw	r30, r16
     90a:	e2 80       	ldd	r14, Z+2	; 0x02
     90c:	f3 80       	ldd	r15, Z+3	; 0x03
     90e:	e1 14       	cp	r14, r1
     910:	f1 04       	cpc	r15, r1
     912:	59 f0       	breq	.+22     	; 0x92a <rn487x_parse_responses+0x78>
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
     914:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     918:	66 e3       	ldi	r22, 0x36	; 54
     91a:	75 e6       	ldi	r23, 0x65	; 101
     91c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
	else if(ctx->events->cb_on_connection_secured&& 
			strstr(rn487x_get_response(), RN487X_RESPONSE_CONNECTION_SECURED) != NULL)
	{
		ctx->events->cb_on_connection_secured();
	}	
	else if(ctx->events->cb_on_disconnect &&
     920:	89 2b       	or	r24, r25
     922:	19 f0       	breq	.+6      	; 0x92a <rn487x_parse_responses+0x78>
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
	{
		ctx->events->cb_on_disconnect();
     924:	f7 01       	movw	r30, r14
     926:	09 95       	icall
     928:	32 c0       	rjmp	.+100    	; 0x98e <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_recieve_notification && 
     92a:	f8 01       	movw	r30, r16
     92c:	e2 84       	ldd	r14, Z+10	; 0x0a
     92e:	f3 84       	ldd	r15, Z+11	; 0x0b
     930:	e1 14       	cp	r14, r1
     932:	f1 04       	cpc	r15, r1
     934:	59 f0       	breq	.+22     	; 0x94c <rn487x_parse_responses+0x9a>
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
     936:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     93a:	63 e4       	ldi	r22, 0x43	; 67
     93c:	75 e6       	ldi	r23, 0x65	; 101
     93e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
	else if(ctx->events->cb_on_disconnect &&
			strstr(rn487x_get_response(), RN487x_RESPONSE_DISCONNECT) != NULL)
	{
		ctx->events->cb_on_disconnect();
	}
	else if(ctx->events->cb_on_recieve_notification && 
     942:	89 2b       	or	r24, r25
     944:	19 f0       	breq	.+6      	; 0x94c <rn487x_parse_responses+0x9a>
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
	{
		ctx->events->cb_on_recieve_notification();
     946:	f7 01       	movw	r30, r14
     948:	09 95       	icall
     94a:	21 c0       	rjmp	.+66     	; 0x98e <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_recieve_write_request &&
     94c:	f8 01       	movw	r30, r16
     94e:	e4 84       	ldd	r14, Z+12	; 0x0c
     950:	f5 84       	ldd	r15, Z+13	; 0x0d
     952:	e1 14       	cp	r14, r1
     954:	f1 04       	cpc	r15, r1
     956:	59 f0       	breq	.+22     	; 0x96e <rn487x_parse_responses+0xbc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
     958:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     95c:	68 e4       	ldi	r22, 0x48	; 72
     95e:	75 e6       	ldi	r23, 0x65	; 101
     960:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
	else if(ctx->events->cb_on_recieve_notification && 
				strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_NOTIFICATION) != NULL)
	{
		ctx->events->cb_on_recieve_notification();
	}
	else if(ctx->events->cb_on_recieve_write_request &&
     964:	89 2b       	or	r24, r25
     966:	19 f0       	breq	.+6      	; 0x96e <rn487x_parse_responses+0xbc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
	{
		ctx->events->cb_on_recieve_write_request();
     968:	f7 01       	movw	r30, r14
     96a:	09 95       	icall
     96c:	10 c0       	rjmp	.+32     	; 0x98e <rn487x_parse_responses+0xdc>
	}
	else if(ctx->events->cb_on_bond && 
     96e:	f8 01       	movw	r30, r16
     970:	06 81       	ldd	r16, Z+6	; 0x06
     972:	17 81       	ldd	r17, Z+7	; 0x07
     974:	01 15       	cp	r16, r1
     976:	11 05       	cpc	r17, r1
     978:	51 f0       	breq	.+20     	; 0x98e <rn487x_parse_responses+0xdc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_BONDED) != NULL)
     97a:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     97e:	6d e4       	ldi	r22, 0x4D	; 77
     980:	75 e6       	ldi	r23, 0x65	; 101
     982:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strstr>
	else if(ctx->events->cb_on_recieve_write_request &&
		strstr(rn487x_get_response(), RN487x_RESPONSE_RECIEVE_WRITE_REQUEST) != NULL)
	{
		ctx->events->cb_on_recieve_write_request();
	}
	else if(ctx->events->cb_on_bond && 
     986:	89 2b       	or	r24, r25
     988:	11 f0       	breq	.+4      	; 0x98e <rn487x_parse_responses+0xdc>
		strstr(rn487x_get_response(), RN487x_RESPONSE_BONDED) != NULL)
	{
		ctx->events->cb_on_bond();
     98a:	f8 01       	movw	r30, r16
     98c:	09 95       	icall
	}
	// for custom events
	if(ctx->events->cb_on_uart_response && rx_wptr > 0)
     98e:	e8 85       	ldd	r30, Y+8	; 0x08
     990:	f9 85       	ldd	r31, Y+9	; 0x09
     992:	00 84       	ldd	r0, Z+8	; 0x08
     994:	f1 85       	ldd	r31, Z+9	; 0x09
     996:	e0 2d       	mov	r30, r0
     998:	30 97       	sbiw	r30, 0x00	; 0
     99a:	39 f0       	breq	.+14     	; 0x9aa <rn487x_parse_responses+0xf8>
     99c:	80 91 1e 33 	lds	r24, 0x331E	; 0x80331e <rx_wptr>
     9a0:	90 91 1f 33 	lds	r25, 0x331F	; 0x80331f <rx_wptr+0x1>
     9a4:	89 2b       	or	r24, r25
     9a6:	09 f0       	breq	.+2      	; 0x9aa <rn487x_parse_responses+0xf8>
	{
		ctx->events->cb_on_uart_response();
     9a8:	09 95       	icall
	}


	rn487x_clear_rx_buff();
     9aa:	0e 94 75 00 	call	0xea	; 0xea <rn487x_clear_rx_buff>
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <rn487x_main_loop>:

static void rn487x_main_loop(struct ble_server* ctx)
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
	// enter pressed
	if(usb_rx_wptr > 0 && rn487x_usb_rx_buff[usb_rx_wptr-1] == 13) 
     9c2:	80 91 9c 32 	lds	r24, 0x329C	; 0x80329c <usb_rx_wptr>
     9c6:	90 91 9d 32 	lds	r25, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     9ca:	89 2b       	or	r24, r25
     9cc:	39 f1       	breq	.+78     	; 0xa1c <rn487x_main_loop+0x60>
     9ce:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     9d2:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     9d6:	e3 56       	subi	r30, 0x63	; 99
     9d8:	fd 4c       	sbci	r31, 0xCD	; 205
     9da:	80 81       	ld	r24, Z
     9dc:	8d 30       	cpi	r24, 0x0D	; 13
     9de:	f1 f4       	brne	.+60     	; 0xa1c <rn487x_main_loop+0x60>
	{
		rn487x_usb_rx_buff[usb_rx_wptr] = '\n';
     9e0:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     9e4:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     9e8:	e2 56       	subi	r30, 0x62	; 98
     9ea:	fd 4c       	sbci	r31, 0xCD	; 205
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	80 83       	st	Z, r24
		rn487x_usb_rx_buff[usb_rx_wptr+1] = '\0';
     9f0:	e0 91 9c 32 	lds	r30, 0x329C	; 0x80329c <usb_rx_wptr>
     9f4:	f0 91 9d 32 	lds	r31, 0x329D	; 0x80329d <usb_rx_wptr+0x1>
     9f8:	e1 56       	subi	r30, 0x61	; 97
     9fa:	fd 4c       	sbci	r31, 0xCD	; 205
     9fc:	10 82       	st	Z, r1

		// send cmd
		rn487x_send_ascii_command(rn487x_usb_rx_buff);
     9fe:	8e e9       	ldi	r24, 0x9E	; 158
     a00:	92 e3       	ldi	r25, 0x32	; 50
     a02:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <rn487x_send_ascii_command>

		// reset buffer
		memset(rn487x_usb_rx_buff, NULL, RN487X_USB_CDC_BUFF_SIZE);
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	ee e9       	ldi	r30, 0x9E	; 158
     a0a:	f2 e3       	ldi	r31, 0x32	; 50
     a0c:	df 01       	movw	r26, r30
     a0e:	1d 92       	st	X+, r1
     a10:	8a 95       	dec	r24
     a12:	e9 f7       	brne	.-6      	; 0xa0e <rn487x_main_loop+0x52>
		usb_rx_wptr = 0;
     a14:	10 92 9c 32 	sts	0x329C, r1	; 0x80329c <usb_rx_wptr>
     a18:	10 92 9d 32 	sts	0x329D, r1	; 0x80329d <usb_rx_wptr+0x1>
     a1c:	ba e6       	ldi	r27, 0x6A	; 106
     a1e:	24 e0       	ldi	r18, 0x04	; 4
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	b1 50       	subi	r27, 0x01	; 1
     a24:	20 40       	sbci	r18, 0x00	; 0
     a26:	80 40       	sbci	r24, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <rn487x_main_loop+0x66>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <rn487x_main_loop+0x70>
	// on connection
	// on disconnect
	// on characteristic write
	//	

	printf("%s", rn487x_get_response());
     a2c:	0e 94 56 04 	call	0x8ac	; 0x8ac <rn487x_get_response>
     a30:	9f 93       	push	r25
     a32:	8f 93       	push	r24
     a34:	8e e2       	ldi	r24, 0x2E	; 46
     a36:	94 e6       	ldi	r25, 0x64	; 100
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
	rn487x_parse_responses(ctx);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 59 04 	call	0x8b2	; 0x8b2 <rn487x_parse_responses>
	//rn487x_clear_rx_buff();
}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <on_connect>:
void on_connect(void);
void on_connection_secured(void);

void on_connect(void)
{
	printf("On Connect\n\r");
     a54:	87 ec       	ldi	r24, 0xC7	; 199
     a56:	95 e6       	ldi	r25, 0x65	; 101
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
}
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	08 95       	ret

00000a66 <on_disconnect>:

void on_disconnect()
{
	printf("On discnnect\n\r");
     a66:	84 ed       	ldi	r24, 0xD4	; 212
     a68:	95 e6       	ldi	r25, 0x65	; 101
     a6a:	9f 93       	push	r25
     a6c:	8f 93       	push	r24
     a6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
}
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	08 95       	ret

00000a78 <on_connection_secured>:

void on_connection_secured(void)
{
	printf("Connection secured\n\r");
     a78:	83 ee       	ldi	r24, 0xE3	; 227
     a7a:	95 e6       	ldi	r25, 0x65	; 101
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
}
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	08 95       	ret

00000a8a <on_recieve_notification>:


void on_recieve_notification(void)
{

	printf("recieved notification");
     a8a:	88 ef       	ldi	r24, 0xF8	; 248
     a8c:	95 e6       	ldi	r25, 0x65	; 101
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
}
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	08 95       	ret

00000a9c <on_uart_response>:

void on_uart_response(void)
{
	printf("uart response");
     a9c:	8e e0       	ldi	r24, 0x0E	; 14
     a9e:	96 e6       	ldi	r25, 0x66	; 102
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	0e 94 80 0b 	call	0x1700	; 0x1700 <printf>
}
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	08 95       	ret

00000aae <main>:

int main(void)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	2a 97       	sbiw	r28, 0x0a	; 10
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	de bf       	out	0x3e, r29	; 62
	ENABLE_INTERRUPTS();
     abc:	78 94       	sei
	
	
	atmel_start_init();
     abe:	0e 94 6d 00 	call	0xda	; 0xda <atmel_start_init>

	
	rn487x.events->cb_on_new_connection = on_connect;
     ac2:	00 e3       	ldi	r16, 0x30	; 48
     ac4:	10 e3       	ldi	r17, 0x30	; 48
     ac6:	d8 01       	movw	r26, r16
     ac8:	18 96       	adiw	r26, 0x08	; 8
     aca:	ed 91       	ld	r30, X+
     acc:	fc 91       	ld	r31, X
     ace:	19 97       	sbiw	r26, 0x09	; 9
     ad0:	8a e2       	ldi	r24, 0x2A	; 42
     ad2:	95 e0       	ldi	r25, 0x05	; 5
     ad4:	80 83       	st	Z, r24
     ad6:	91 83       	std	Z+1, r25	; 0x01
	rn487x.events->cb_on_connection_secured = on_connection_secured;
     ad8:	18 96       	adiw	r26, 0x08	; 8
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	19 97       	sbiw	r26, 0x09	; 9
     ae0:	8c e3       	ldi	r24, 0x3C	; 60
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	84 83       	std	Z+4, r24	; 0x04
     ae6:	95 83       	std	Z+5, r25	; 0x05
	rn487x.events->cb_on_disconnect = on_disconnect;
     ae8:	18 96       	adiw	r26, 0x08	; 8
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	19 97       	sbiw	r26, 0x09	; 9
     af0:	83 e3       	ldi	r24, 0x33	; 51
     af2:	95 e0       	ldi	r25, 0x05	; 5
     af4:	82 83       	std	Z+2, r24	; 0x02
     af6:	93 83       	std	Z+3, r25	; 0x03
	rn487x.events->cb_on_uart_response = on_uart_response;
     af8:	18 96       	adiw	r26, 0x08	; 8
     afa:	ed 91       	ld	r30, X+
     afc:	fc 91       	ld	r31, X
     afe:	19 97       	sbiw	r26, 0x09	; 9
     b00:	8e e4       	ldi	r24, 0x4E	; 78
     b02:	95 e0       	ldi	r25, 0x05	; 5
     b04:	80 87       	std	Z+8, r24	; 0x08
     b06:	91 87       	std	Z+9, r25	; 0x09
	rn487x.events->cb_on_recieve_notification = on_recieve_notification;
     b08:	18 96       	adiw	r26, 0x08	; 8
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	19 97       	sbiw	r26, 0x09	; 9
     b10:	85 e4       	ldi	r24, 0x45	; 69
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	82 87       	std	Z+10, r24	; 0x0a
     b16:	93 87       	std	Z+11, r25	; 0x0b

	temp_read_characteristic.data_len = 10;
     b18:	8a e0       	ldi	r24, 0x0A	; 10
     b1a:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <temp_read_characteristic+0x5>
	rn487x.init(&rn487x);
     b1e:	1a 96       	adiw	r26, 0x0a	; 10
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	1b 97       	sbiw	r26, 0x0b	; 11
     b26:	c8 01       	movw	r24, r16
     b28:	09 95       	icall


	volatile uint8_t data[] = {0x23, 0x33, 0x44, 0x55, 0xAA, 0xFF, 0xDD, 0xAA, 0x33, 0xAA };	
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	e0 e2       	ldi	r30, 0x20	; 32
     b2e:	f4 e6       	ldi	r31, 0x64	; 100
     b30:	de 01       	movw	r26, r28
     b32:	11 96       	adiw	r26, 0x01	; 1
     b34:	01 90       	ld	r0, Z+
     b36:	0d 92       	st	X+, r0
     b38:	8a 95       	dec	r24
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <main+0x86>
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     b3c:	d8 01       	movw	r26, r16
     b3e:	14 96       	adiw	r26, 0x04	; 4
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	15 97       	sbiw	r26, 0x05	; 5
     b46:	06 80       	ldd	r0, Z+6	; 0x06
     b48:	f7 81       	ldd	r31, Z+7	; 0x07
     b4a:	e0 2d       	mov	r30, r0
     b4c:	be 01       	movw	r22, r28
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	8a e2       	ldi	r24, 0x2A	; 42
     b54:	90 e3       	ldi	r25, 0x30	; 48
     b56:	09 95       	icall
	rn487x.gatt->write_value(&temp_read_characteristic, data);
     b58:	d8 01       	movw	r26, r16
     b5a:	14 96       	adiw	r26, 0x04	; 4
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	15 97       	sbiw	r26, 0x05	; 5
     b62:	06 80       	ldd	r0, Z+6	; 0x06
     b64:	f7 81       	ldd	r31, Z+7	; 0x07
     b66:	e0 2d       	mov	r30, r0
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	8a e2       	ldi	r24, 0x2A	; 42
     b70:	90 e3       	ldi	r25, 0x30	; 48
     b72:	09 95       	icall
	rn487x.gatt->read_value(&temp_read_characteristic, data);
     b74:	d8 01       	movw	r26, r16
     b76:	14 96       	adiw	r26, 0x04	; 4
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	15 97       	sbiw	r26, 0x05	; 5
     b7e:	04 80       	ldd	r0, Z+4	; 0x04
     b80:	f5 81       	ldd	r31, Z+5	; 0x05
     b82:	e0 2d       	mov	r30, r0
     b84:	be 01       	movw	r22, r28
     b86:	6f 5f       	subi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	90 e3       	ldi	r25, 0x30	; 48
     b8e:	09 95       	icall
	

	while(1) {
		
		rn487x.main_loop(&rn487x);
     b90:	e0 91 3e 30 	lds	r30, 0x303E	; 0x80303e <rn487x+0xe>
     b94:	f0 91 3f 30 	lds	r31, 0x303F	; 0x80303f <rn487x+0xf>
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	90 e3       	ldi	r25, 0x30	; 48
     b9c:	09 95       	icall
     b9e:	f8 cf       	rjmp	.-16     	; 0xb90 <main+0xe2>

00000ba0 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret

00000bac <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 c0       	rjmp	.+16     	; 0xbc0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     bb0:	e8 2f       	mov	r30, r24
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e0 5f       	subi	r30, 0xF0	; 240
     bb6:	fb 4f       	sbci	r31, 0xFB	; 251
     bb8:	90 81       	ld	r25, Z
     bba:	98 60       	ori	r25, 0x08	; 8
     bbc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	88 30       	cpi	r24, 0x08	; 8
     bc2:	b0 f3       	brcs	.-20     	; 0xbb0 <mcu_init+0x4>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     bc8:	e8 2f       	mov	r30, r24
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	e0 5d       	subi	r30, 0xD0	; 208
     bce:	fb 4f       	sbci	r31, 0xFB	; 251
     bd0:	90 81       	ld	r25, Z
     bd2:	98 60       	ori	r25, 0x08	; 8
     bd4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	b0 f3       	brcs	.-20     	; 0xbc8 <mcu_init+0x1c>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     be0:	e8 2f       	mov	r30, r24
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e0 5b       	subi	r30, 0xB0	; 176
     be6:	fb 4f       	sbci	r31, 0xFB	; 251
     be8:	90 81       	ld	r25, Z
     bea:	98 60       	ori	r25, 0x08	; 8
     bec:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	b0 f3       	brcs	.-20     	; 0xbe0 <mcu_init+0x34>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     bf8:	e8 2f       	mov	r30, r24
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e0 59       	subi	r30, 0x90	; 144
     bfe:	fb 4f       	sbci	r31, 0xFB	; 251
     c00:	90 81       	ld	r25, Z
     c02:	98 60       	ori	r25, 0x08	; 8
     c04:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	88 30       	cpi	r24, 0x08	; 8
     c0a:	b0 f3       	brcs	.-20     	; 0xbf8 <mcu_init+0x4c>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c10:	e8 2f       	mov	r30, r24
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e0 57       	subi	r30, 0x70	; 112
     c16:	fb 4f       	sbci	r31, 0xFB	; 251
     c18:	90 81       	ld	r25, Z
     c1a:	98 60       	ori	r25, 0x08	; 8
     c1c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	88 30       	cpi	r24, 0x08	; 8
     c22:	b0 f3       	brcs	.-20     	; 0xc10 <mcu_init+0x64>
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	08 c0       	rjmp	.+16     	; 0xc38 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     c28:	e8 2f       	mov	r30, r24
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	e0 55       	subi	r30, 0x50	; 80
     c2e:	fb 4f       	sbci	r31, 0xFB	; 251
     c30:	90 81       	ld	r25, Z
     c32:	98 60       	ori	r25, 0x08	; 8
     c34:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	b0 f3       	brcs	.-20     	; 0xc28 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     c3c:	08 95       	ret

00000c3e <rx487x_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c3e:	80 b1       	in	r24, 0x00	; 0
     c40:	8d 7f       	andi	r24, 0xFD	; 253
     c42:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c44:	e1 e1       	ldi	r30, 0x11	; 17
     c46:	f4 e0       	ldi	r31, 0x04	; 4
     c48:	80 81       	ld	r24, Z
     c4a:	87 7f       	andi	r24, 0xF7	; 247
     c4c:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     c4e:	81 b1       	in	r24, 0x01	; 1
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     c54:	80 b1       	in	r24, 0x00	; 0
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);

	rx487x_init();
     c5a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <rx487x_init>
     c5e:	08 95       	ret

00000c60 <usb_cdc_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
     c60:	84 b3       	in	r24, 0x14	; 20
     c62:	8d 7f       	andi	r24, 0xFD	; 253
     c64:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c66:	e1 eb       	ldi	r30, 0xB1	; 177
     c68:	f4 e0       	ldi	r31, 0x04	; 4
     c6a:	80 81       	ld	r24, Z
     c6c:	87 7f       	andi	r24, 0xF7	; 247
     c6e:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     c70:	85 b3       	in	r24, 0x15	; 21
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     c76:	84 b3       	in	r24, 0x14	; 20
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	usb_cdc_init();
     c7c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <usb_cdc_init>
     c80:	08 95       	ret

00000c82 <system_timer_initialization>:
}

void system_timer_initialization(void)
{

	system_timer_init();
     c82:	0e 94 75 08 	call	0x10ea	; 0x10ea <system_timer_init>
     c86:	08 95       	ret

00000c88 <i2c_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     c88:	81 b1       	in	r24, 0x01	; 1
     c8a:	87 7f       	andi	r24, 0xF7	; 247
     c8c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     c8e:	80 b1       	in	r24, 0x00	; 0
     c90:	88 60       	ori	r24, 0x08	; 8
     c92:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c94:	e3 e1       	ldi	r30, 0x13	; 19
     c96:	f4 e0       	ldi	r31, 0x04	; 4
     c98:	80 81       	ld	r24, Z
     c9a:	87 7f       	andi	r24, 0xF7	; 247
     c9c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 77       	andi	r24, 0x7F	; 127
     ca2:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     ca4:	80 81       	ld	r24, Z
     ca6:	88 7f       	andi	r24, 0xF8	; 248
     ca8:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     caa:	81 b1       	in	r24, 0x01	; 1
     cac:	8b 7f       	andi	r24, 0xFB	; 251
     cae:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cb0:	80 b1       	in	r24, 0x00	; 0
     cb2:	84 60       	ori	r24, 0x04	; 4
     cb4:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     cb6:	e2 e1       	ldi	r30, 0x12	; 18
     cb8:	f4 e0       	ldi	r31, 0x04	; 4
     cba:	80 81       	ld	r24, Z
     cbc:	87 7f       	andi	r24, 0xF7	; 247
     cbe:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     cc6:	80 81       	ld	r24, Z
     cc8:	88 7f       	andi	r24, 0xF8	; 248
     cca:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	i2c_init();
     ccc:	0e 94 48 08 	call	0x1090	; 0x1090 <i2c_init>
     cd0:	08 95       	ret

00000cd2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     cd2:	0e 94 d6 05 	call	0xbac	; 0xbac <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
     cd6:	8d b1       	in	r24, 0x0d	; 13
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     cdc:	8c b1       	in	r24, 0x0c	; 12
     cde:	88 60       	ori	r24, 0x08	; 8
     ce0:	8c b9       	out	0x0c, r24	; 12
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
     ce2:	85 b3       	in	r24, 0x15	; 21
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
     ce8:	84 b3       	in	r24, 0x14	; 20
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     cee:	e4 eb       	ldi	r30, 0xB4	; 180
     cf0:	f4 e0       	ldi	r31, 0x04	; 4
     cf2:	80 81       	ld	r24, Z
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 77       	andi	r24, 0x7F	; 127
     cfc:	80 83       	st	Z, r24
 */
static inline void PORTF_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     cfe:	80 81       	ld	r24, Z
     d00:	88 7f       	andi	r24, 0xF8	; 248
     d02:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	CLKCTRL_init();
     d04:	0e 94 d2 05 	call	0xba4	; 0xba4 <CLKCTRL_init>

	rx487x_initialization();
     d08:	0e 94 1f 06 	call	0xc3e	; 0xc3e <rx487x_initialization>

	usb_cdc_initialization();
     d0c:	0e 94 30 06 	call	0xc60	; 0xc60 <usb_cdc_initialization>

	system_timer_initialization();
     d10:	0e 94 41 06 	call	0xc82	; 0xc82 <system_timer_initialization>

	CPUINT_init();
     d14:	0e 94 d4 05 	call	0xba8	; 0xba8 <CPUINT_init>

	SLPCTRL_init();
     d18:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SLPCTRL_init>

	i2c_initialization();
     d1c:	0e 94 44 06 	call	0xc88	; 0xc88 <i2c_initialization>

	BOD_init();
     d20:	0e 94 d0 05 	call	0xba0	; 0xba0 <BOD_init>
     d24:	08 95       	ret

00000d26 <i2c_do_I2C_RESET>:
 * \brief Identical to i2c_master_operation(false);
 */
i2c_error_t i2c_master_write(void)
{
	return i2c_master_operation(false);
}
     d26:	e0 ea       	ldi	r30, 0xA0	; 160
     d28:	f8 e0       	ldi	r31, 0x08	; 8
     d2a:	84 81       	ldd	r24, Z+4	; 0x04
     d2c:	88 60       	ori	r24, 0x08	; 8
     d2e:	84 83       	std	Z+4, r24	; 0x04
     d30:	85 81       	ldd	r24, Z+5	; 0x05
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	85 83       	std	Z+5, r24	; 0x05
     d36:	e0 e2       	ldi	r30, 0x20	; 32
     d38:	f4 e3       	ldi	r31, 0x34	; 52
     d3a:	80 81       	ld	r24, Z
     d3c:	8e 7f       	andi	r24, 0xFE	; 254
     d3e:	80 83       	st	Z, r24
     d40:	13 86       	std	Z+11, r1	; 0x0b
     d42:	8e e0       	ldi	r24, 0x0E	; 14
     d44:	08 95       	ret

00000d46 <i2c_do_I2C_IDLE>:
     d46:	e0 e2       	ldi	r30, 0x20	; 32
     d48:	f4 e3       	ldi	r31, 0x34	; 52
     d4a:	80 81       	ld	r24, Z
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	80 83       	st	Z, r24
     d50:	13 86       	std	Z+11, r1	; 0x0b
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	08 95       	ret

00000d56 <i2c_do_I2C_SEND_STOP>:
     d56:	e0 ea       	ldi	r30, 0xA0	; 160
     d58:	f8 e0       	ldi	r31, 0x08	; 8
     d5a:	84 81       	ldd	r24, Z+4	; 0x04
     d5c:	83 60       	ori	r24, 0x03	; 3
     d5e:	84 83       	std	Z+4, r24	; 0x04
     d60:	0e 94 a3 06 	call	0xd46	; 0xd46 <i2c_do_I2C_IDLE>
     d64:	08 95       	ret

00000d66 <i2c_do_I2C_SEND_ADR_READ>:
     d66:	e0 e2       	ldi	r30, 0x20	; 32
     d68:	f4 e3       	ldi	r31, 0x34	; 52
     d6a:	80 81       	ld	r24, Z
     d6c:	88 60       	ori	r24, 0x08	; 8
     d6e:	80 83       	st	Z, r24
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	81 60       	ori	r24, 0x01	; 1
     d7a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	08 95       	ret

00000d82 <i2c_do_I2C_SEND_RESTART>:
     d82:	0e 94 b3 06 	call	0xd66	; 0xd66 <i2c_do_I2C_SEND_ADR_READ>
     d86:	08 95       	ret

00000d88 <i2c_do_I2C_SEND_RESTART_READ>:
     d88:	0e 94 b3 06 	call	0xd66	; 0xd66 <i2c_do_I2C_SEND_ADR_READ>
     d8c:	08 95       	ret

00000d8e <i2c_do_I2C_SEND_ADR_WRITE>:
     d8e:	e0 e2       	ldi	r30, 0x20	; 32
     d90:	f4 e3       	ldi	r31, 0x34	; 52
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	80 83       	st	Z, r24
     d98:	81 81       	ldd	r24, Z+1	; 0x01
     d9a:	88 0f       	add	r24, r24
     d9c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f88a7>
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	08 95       	ret

00000da4 <i2c_do_I2C_SEND_RESTART_WRITE>:
     da4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <i2c_do_I2C_SEND_ADR_WRITE>
     da8:	08 95       	ret

00000daa <i2c_do_I2C_DO_ADDRESS_NACK>:
     daa:	a0 e2       	ldi	r26, 0x20	; 32
     dac:	b4 e3       	ldi	r27, 0x34	; 52
     dae:	8c 91       	ld	r24, X
     db0:	87 7f       	andi	r24, 0xF7	; 247
     db2:	8c 93       	st	X, r24
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	1b 96       	adiw	r26, 0x0b	; 11
     db8:	8c 93       	st	X, r24
     dba:	1b 97       	sbiw	r26, 0x0b	; 11
     dbc:	50 96       	adiw	r26, 0x10	; 16
     dbe:	ed 91       	ld	r30, X+
     dc0:	fc 91       	ld	r31, X
     dc2:	51 97       	sbiw	r26, 0x11	; 17
     dc4:	5c 96       	adiw	r26, 0x1c	; 28
     dc6:	8d 91       	ld	r24, X+
     dc8:	9c 91       	ld	r25, X
     dca:	5d 97       	sbiw	r26, 0x1d	; 29
     dcc:	09 95       	icall
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <i2c_do_I2C_DO_ADDRESS_NACK+0x2e>
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	21 f0       	breq	.+8      	; 0xdde <i2c_do_I2C_DO_ADDRESS_NACK+0x34>
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <i2c_do_I2C_DO_ADDRESS_NACK+0x3a>
     dd8:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_do_I2C_SEND_RESTART_READ>
     ddc:	08 95       	ret
     dde:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_do_I2C_SEND_RESTART_WRITE>
     de2:	08 95       	ret
     de4:	0e 94 ab 06 	call	0xd56	; 0xd56 <i2c_do_I2C_SEND_STOP>
     de8:	08 95       	ret

00000dea <i2c_do_I2C_RX_DO_ACK>:
     dea:	e0 ea       	ldi	r30, 0xA0	; 160
     dec:	f8 e0       	ldi	r31, 0x08	; 8
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	8b 7f       	andi	r24, 0xFB	; 251
     df2:	84 83       	std	Z+4, r24	; 0x04
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	08 95       	ret

00000df8 <i2c_do_I2C_TX_DO_ACK>:
     df8:	e0 ea       	ldi	r30, 0xA0	; 160
     dfa:	f8 e0       	ldi	r31, 0x08	; 8
     dfc:	84 81       	ldd	r24, Z+4	; 0x04
     dfe:	8b 7f       	andi	r24, 0xFB	; 251
     e00:	84 83       	std	Z+4, r24	; 0x04
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	08 95       	ret

00000e06 <i2c_do_I2C_DO_NACK_STOP>:
     e06:	e0 ea       	ldi	r30, 0xA0	; 160
     e08:	f8 e0       	ldi	r31, 0x08	; 8
     e0a:	84 81       	ldd	r24, Z+4	; 0x04
     e0c:	84 60       	ori	r24, 0x04	; 4
     e0e:	84 83       	std	Z+4, r24	; 0x04
     e10:	84 81       	ldd	r24, Z+4	; 0x04
     e12:	83 60       	ori	r24, 0x03	; 3
     e14:	84 83       	std	Z+4, r24	; 0x04
     e16:	0e 94 a3 06 	call	0xd46	; 0xd46 <i2c_do_I2C_IDLE>
     e1a:	08 95       	ret

00000e1c <i2c_do_I2C_DO_NACK_RESTART>:
     e1c:	e0 ea       	ldi	r30, 0xA0	; 160
     e1e:	f8 e0       	ldi	r31, 0x08	; 8
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	84 83       	std	Z+4, r24	; 0x04
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	08 95       	ret

00000e2a <i2c_do_I2C_TX>:
     e2a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     e2e:	84 ff       	sbrs	r24, 4
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <i2c_do_I2C_TX+0x3a>
     e32:	a0 e2       	ldi	r26, 0x20	; 32
     e34:	b4 e3       	ldi	r27, 0x34	; 52
     e36:	52 96       	adiw	r26, 0x12	; 18
     e38:	ed 91       	ld	r30, X+
     e3a:	fc 91       	ld	r31, X
     e3c:	53 97       	sbiw	r26, 0x13	; 19
     e3e:	5e 96       	adiw	r26, 0x1e	; 30
     e40:	8d 91       	ld	r24, X+
     e42:	9c 91       	ld	r25, X
     e44:	5f 97       	sbiw	r26, 0x1f	; 31
     e46:	09 95       	icall
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	19 f0       	breq	.+6      	; 0xe52 <i2c_do_I2C_TX+0x28>
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	21 f0       	breq	.+8      	; 0xe58 <i2c_do_I2C_TX+0x2e>
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <i2c_do_I2C_TX+0x34>
     e52:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_do_I2C_SEND_RESTART_READ>
     e56:	08 95       	ret
     e58:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_do_I2C_SEND_RESTART_WRITE>
     e5c:	08 95       	ret
     e5e:	0e 94 ab 06 	call	0xd56	; 0xd56 <i2c_do_I2C_SEND_STOP>
     e62:	08 95       	ret
     e64:	e0 e2       	ldi	r30, 0x20	; 32
     e66:	f4 e3       	ldi	r31, 0x34	; 52
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	80 83       	st	Z, r24
     e6e:	a2 81       	ldd	r26, Z+2	; 0x02
     e70:	b3 81       	ldd	r27, Z+3	; 0x03
     e72:	cd 01       	movw	r24, r26
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	82 83       	std	Z+2, r24	; 0x02
     e78:	93 83       	std	Z+3, r25	; 0x03
     e7a:	8c 91       	ld	r24, X
     e7c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     e80:	84 81       	ldd	r24, Z+4	; 0x04
     e82:	95 81       	ldd	r25, Z+5	; 0x05
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	84 83       	std	Z+4, r24	; 0x04
     e88:	95 83       	std	Z+5, r25	; 0x05
     e8a:	89 2b       	or	r24, r25
     e8c:	11 f0       	breq	.+4      	; 0xe92 <i2c_do_I2C_TX+0x68>
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	08 95       	ret
     e92:	85 e0       	ldi	r24, 0x05	; 5
     e94:	08 95       	ret

00000e96 <i2c_do_I2C_RX>:
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	e0 e2       	ldi	r30, 0x20	; 32
     e9c:	f4 e3       	ldi	r31, 0x34	; 52
     e9e:	80 81       	ld	r24, Z
     ea0:	87 7f       	andi	r24, 0xF7	; 247
     ea2:	80 83       	st	Z, r24
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	95 81       	ldd	r25, Z+5	; 0x05
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <i2c_do_I2C_RX+0x22>
     eac:	e0 ea       	ldi	r30, 0xA0	; 160
     eae:	f8 e0       	ldi	r31, 0x08	; 8
     eb0:	84 81       	ldd	r24, Z+4	; 0x04
     eb2:	84 60       	ori	r24, 0x04	; 4
     eb4:	84 83       	std	Z+4, r24	; 0x04
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <i2c_do_I2C_RX+0x2c>
     eb8:	e0 ea       	ldi	r30, 0xA0	; 160
     eba:	f8 e0       	ldi	r31, 0x08	; 8
     ebc:	84 81       	ldd	r24, Z+4	; 0x04
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	84 83       	std	Z+4, r24	; 0x04
     ec2:	e0 e2       	ldi	r30, 0x20	; 32
     ec4:	f4 e3       	ldi	r31, 0x34	; 52
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	95 81       	ldd	r25, Z+5	; 0x05
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	84 83       	std	Z+4, r24	; 0x04
     ece:	95 83       	std	Z+5, r25	; 0x05
     ed0:	89 2b       	or	r24, r25
     ed2:	a9 f0       	breq	.+42     	; 0xefe <i2c_do_I2C_RX+0x68>
     ed4:	df 01       	movw	r26, r30
     ed6:	c2 81       	ldd	r28, Z+2	; 0x02
     ed8:	d3 81       	ldd	r29, Z+3	; 0x03
     eda:	e0 ea       	ldi	r30, 0xA0	; 160
     edc:	f8 e0       	ldi	r31, 0x08	; 8
     ede:	80 85       	ldd	r24, Z+8	; 0x08
     ee0:	88 83       	st	Y, r24
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	13 97       	sbiw	r26, 0x03	; 3
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	8d 93       	st	X+, r24
     ef0:	9c 93       	st	X, r25
     ef2:	13 97       	sbiw	r26, 0x03	; 3
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	84 83       	std	Z+4, r24	; 0x04
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	26 c0       	rjmp	.+76     	; 0xf4a <i2c_do_I2C_RX+0xb4>
     efe:	a0 e2       	ldi	r26, 0x20	; 32
     f00:	b4 e3       	ldi	r27, 0x34	; 52
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	ed 91       	ld	r30, X+
     f06:	fc 91       	ld	r31, X
     f08:	13 97       	sbiw	r26, 0x03	; 3
     f0a:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f88a8>
     f0e:	80 83       	st	Z, r24
     f10:	12 96       	adiw	r26, 0x02	; 2
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	13 97       	sbiw	r26, 0x03	; 3
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8d 93       	st	X+, r24
     f1e:	9c 93       	st	X, r25
     f20:	13 97       	sbiw	r26, 0x03	; 3
     f22:	8c 91       	ld	r24, X
     f24:	84 60       	ori	r24, 0x04	; 4
     f26:	8c 93       	st	X, r24
     f28:	1c 96       	adiw	r26, 0x0c	; 12
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	1d 97       	sbiw	r26, 0x0d	; 13
     f30:	58 96       	adiw	r26, 0x18	; 24
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	59 97       	sbiw	r26, 0x19	; 25
     f38:	09 95       	icall
     f3a:	82 50       	subi	r24, 0x02	; 2
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <i2c_do_I2C_RX+0xb0>
     f40:	0e 94 0e 07 	call	0xe1c	; 0xe1c <i2c_do_I2C_DO_NACK_RESTART>
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <i2c_do_I2C_RX+0xb4>
     f46:	0e 94 03 07 	call	0xe06	; 0xe06 <i2c_do_I2C_DO_NACK_STOP>
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <i2c_do_I2C_TX_EMPTY>:
     f50:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
     f54:	84 ff       	sbrs	r24, 4
     f56:	19 c0       	rjmp	.+50     	; 0xf8a <i2c_do_I2C_TX_EMPTY+0x3a>
     f58:	a0 e2       	ldi	r26, 0x20	; 32
     f5a:	b4 e3       	ldi	r27, 0x34	; 52
     f5c:	52 96       	adiw	r26, 0x12	; 18
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	53 97       	sbiw	r26, 0x13	; 19
     f64:	5e 96       	adiw	r26, 0x1e	; 30
     f66:	8d 91       	ld	r24, X+
     f68:	9c 91       	ld	r25, X
     f6a:	5f 97       	sbiw	r26, 0x1f	; 31
     f6c:	09 95       	icall
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	19 f0       	breq	.+6      	; 0xf78 <i2c_do_I2C_TX_EMPTY+0x28>
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	21 f0       	breq	.+8      	; 0xf7e <i2c_do_I2C_TX_EMPTY+0x2e>
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <i2c_do_I2C_TX_EMPTY+0x34>
     f78:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_do_I2C_SEND_RESTART_READ>
     f7c:	08 95       	ret
     f7e:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_do_I2C_SEND_RESTART_WRITE>
     f82:	08 95       	ret
     f84:	0e 94 ab 06 	call	0xd56	; 0xd56 <i2c_do_I2C_SEND_STOP>
     f88:	08 95       	ret
     f8a:	a0 e2       	ldi	r26, 0x20	; 32
     f8c:	b4 e3       	ldi	r27, 0x34	; 52
     f8e:	8c 91       	ld	r24, X
     f90:	84 60       	ori	r24, 0x04	; 4
     f92:	8c 93       	st	X, r24
     f94:	1c 96       	adiw	r26, 0x0c	; 12
     f96:	ed 91       	ld	r30, X+
     f98:	fc 91       	ld	r31, X
     f9a:	1d 97       	sbiw	r26, 0x0d	; 13
     f9c:	58 96       	adiw	r26, 0x18	; 24
     f9e:	8d 91       	ld	r24, X+
     fa0:	9c 91       	ld	r25, X
     fa2:	59 97       	sbiw	r26, 0x19	; 25
     fa4:	09 95       	icall
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	39 f0       	breq	.+14     	; 0xfb8 <i2c_do_I2C_TX_EMPTY+0x68>
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	41 f0       	breq	.+16     	; 0xfbe <i2c_do_I2C_TX_EMPTY+0x6e>
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <i2c_do_I2C_TX_EMPTY+0x74>
     fb2:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_do_I2C_SEND_RESTART_READ>
     fb6:	08 95       	ret
     fb8:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_do_I2C_SEND_RESTART_WRITE>
     fbc:	08 95       	ret
     fbe:	0e 94 15 07 	call	0xe2a	; 0xe2a <i2c_do_I2C_TX>
     fc2:	08 95       	ret
     fc4:	0e 94 ab 06 	call	0xd56	; 0xd56 <i2c_do_I2C_SEND_STOP>
     fc8:	08 95       	ret

00000fca <i2c_do_I2C_BUS_COLLISION>:
     fca:	e0 ea       	ldi	r30, 0xA0	; 160
     fcc:	f8 e0       	ldi	r31, 0x08	; 8
     fce:	85 81       	ldd	r24, Z+5	; 0x05
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	85 83       	std	Z+5, r24	; 0x05
     fd4:	a0 e2       	ldi	r26, 0x20	; 32
     fd6:	b4 e3       	ldi	r27, 0x34	; 52
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	1b 96       	adiw	r26, 0x0b	; 11
     fdc:	8c 93       	st	X, r24
     fde:	1b 97       	sbiw	r26, 0x0b	; 11
     fe0:	1e 96       	adiw	r26, 0x0e	; 14
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	1f 97       	sbiw	r26, 0x0f	; 15
     fe8:	5a 96       	adiw	r26, 0x1a	; 26
     fea:	8d 91       	ld	r24, X+
     fec:	9c 91       	ld	r25, X
     fee:	5b 97       	sbiw	r26, 0x1b	; 27
     ff0:	09 95       	icall
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	19 f0       	breq	.+6      	; 0xffc <i2c_do_I2C_BUS_COLLISION+0x32>
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	21 f0       	breq	.+8      	; 0x1002 <__DATA_REGION_LENGTH__+0x2>
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
     ffc:	0e 94 c4 06 	call	0xd88	; 0xd88 <i2c_do_I2C_SEND_RESTART_READ>
    1000:	08 95       	ret
    1002:	0e 94 d2 06 	call	0xda4	; 0xda4 <i2c_do_I2C_SEND_RESTART_WRITE>
    1006:	08 95       	ret
    1008:	0e 94 93 06 	call	0xd26	; 0xd26 <i2c_do_I2C_RESET>
    100c:	08 95       	ret

0000100e <i2c_do_I2C_BUS_ERROR>:
    100e:	e0 ea       	ldi	r30, 0xA0	; 160
    1010:	f8 e0       	ldi	r31, 0x08	; 8
    1012:	84 81       	ldd	r24, Z+4	; 0x04
    1014:	88 60       	ori	r24, 0x08	; 8
    1016:	84 83       	std	Z+4, r24	; 0x04
    1018:	85 81       	ldd	r24, Z+5	; 0x05
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	85 83       	std	Z+5, r24	; 0x05
    101e:	e0 e2       	ldi	r30, 0x20	; 32
    1020:	f4 e3       	ldi	r31, 0x34	; 52
    1022:	80 81       	ld	r24, Z
    1024:	8e 7f       	andi	r24, 0xFE	; 254
    1026:	80 83       	st	Z, r24
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	83 87       	std	Z+11, r24	; 0x0b
    102c:	8e e0       	ldi	r24, 0x0E	; 14
    102e:	08 95       	ret

00001030 <i2c_master_isr>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	e0 ea       	ldi	r30, 0xA0	; 160
    1036:	f8 e0       	ldi	r31, 0x08	; 8
    1038:	85 81       	ldd	r24, Z+5	; 0x05
    103a:	80 6c       	ori	r24, 0xC0	; 192
    103c:	85 83       	std	Z+5, r24	; 0x05
    103e:	80 91 20 34 	lds	r24, 0x3420	; 0x803420 <i2c_status>
    1042:	83 ff       	sbrs	r24, 3
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <i2c_master_isr+0x24>
    1046:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    104a:	84 ff       	sbrs	r24, 4
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <i2c_master_isr+0x24>
    104e:	8f e0       	ldi	r24, 0x0F	; 15
    1050:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    1054:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    1058:	83 ff       	sbrs	r24, 3
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <i2c_master_isr+0x32>
    105c:	80 e1       	ldi	r24, 0x10	; 16
    105e:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    1062:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f88a5>
    1066:	82 ff       	sbrs	r24, 2
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <i2c_master_isr+0x40>
    106a:	81 e1       	ldi	r24, 0x11	; 17
    106c:	80 93 2a 34 	sts	0x342A, r24	; 0x80342a <i2c_status+0xa>
    1070:	c0 e2       	ldi	r28, 0x20	; 32
    1072:	d4 e3       	ldi	r29, 0x34	; 52
    1074:	ea 85       	ldd	r30, Y+10	; 0x0a
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ec 5a       	subi	r30, 0xAC	; 172
    107e:	ff 4c       	sbci	r31, 0xCF	; 207
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
    1086:	09 95       	icall
    1088:	8a 87       	std	Y+10, r24	; 0x0a
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <i2c_init>:
    1090:	e0 ea       	ldi	r30, 0xA0	; 160
    1092:	f8 e0       	ldi	r31, 0x08	; 8
    1094:	8b e0       	ldi	r24, 0x0B	; 11
    1096:	86 83       	std	Z+6, r24	; 0x06
    1098:	81 ec       	ldi	r24, 0xC1	; 193
    109a:	83 83       	std	Z+3, r24	; 0x03
    109c:	08 95       	ret

0000109e <__vector_15>:
    i2c_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    i2c_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
	i2c_master_isr();
    10c0:	0e 94 18 08 	call	0x1030	; 0x1030 <i2c_master_isr>
}
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret

000010ea <system_timer_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <rx487x_default_rx_isr_cb>:
 *
 * \return Nothing
 */
void usb_cdc_disable()
{
	USART2.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
    10ee:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    10f2:	e0 91 4f 37 	lds	r30, 0x374F	; 0x80374f <rx487x_rx_head>
    10f6:	ef 5f       	subi	r30, 0xFF	; 255
    10f8:	80 91 4e 37 	lds	r24, 0x374E	; 0x80374e <rx487x_rx_tail>
    10fc:	e8 17       	cp	r30, r24
    10fe:	59 f0       	breq	.+22     	; 0x1116 <rx487x_default_rx_isr_cb+0x28>
    1100:	e0 93 4f 37 	sts	0x374F, r30	; 0x80374f <rx487x_rx_head>
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	e0 5b       	subi	r30, 0xB0	; 176
    1108:	f8 4c       	sbci	r31, 0xC8	; 200
    110a:	90 83       	st	Z, r25
    110c:	80 91 4d 37 	lds	r24, 0x374D	; 0x80374d <rx487x_rx_elements>
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	80 93 4d 37 	sts	0x374D, r24	; 0x80374d <rx487x_rx_elements>
    1116:	08 95       	ret

00001118 <rx487x_default_udre_isr_cb>:
    1118:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    111c:	88 23       	and	r24, r24
    111e:	81 f0       	breq	.+32     	; 0x1140 <rx487x_default_udre_isr_cb+0x28>
    1120:	e0 91 4b 36 	lds	r30, 0x364B	; 0x80364b <rx487x_tx_tail>
    1124:	ef 5f       	subi	r30, 0xFF	; 255
    1126:	e0 93 4b 36 	sts	0x364B, r30	; 0x80364b <rx487x_tx_tail>
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	e3 5b       	subi	r30, 0xB3	; 179
    112e:	f9 4c       	sbci	r31, 0xC9	; 201
    1130:	80 81       	ld	r24, Z
    1132:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f8802>
    1136:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	80 93 4a 36 	sts	0x364A, r24	; 0x80364a <rx487x_tx_elements>
    1140:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    1144:	81 11       	cpse	r24, r1
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <rx487x_default_udre_isr_cb+0x3a>
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f8 e0       	ldi	r31, 0x08	; 8
    114c:	85 81       	ldd	r24, Z+5	; 0x05
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	85 83       	std	Z+5, r24	; 0x05
    1152:	08 95       	ret

00001154 <usb_cdc_default_rx_isr_cb>:
    1154:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
    1158:	e0 91 49 35 	lds	r30, 0x3549	; 0x803549 <usb_cdc_rx_head>
    115c:	ef 5f       	subi	r30, 0xFF	; 255
    115e:	80 91 48 35 	lds	r24, 0x3548	; 0x803548 <usb_cdc_rx_tail>
    1162:	e8 17       	cp	r30, r24
    1164:	59 f0       	breq	.+22     	; 0x117c <usb_cdc_default_rx_isr_cb+0x28>
    1166:	e0 93 49 35 	sts	0x3549, r30	; 0x803549 <usb_cdc_rx_head>
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	e6 5b       	subi	r30, 0xB6	; 182
    116e:	fa 4c       	sbci	r31, 0xCA	; 202
    1170:	90 83       	st	Z, r25
    1172:	80 91 47 35 	lds	r24, 0x3547	; 0x803547 <usb_cdc_rx_elements>
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	80 93 47 35 	sts	0x3547, r24	; 0x803547 <usb_cdc_rx_elements>
    117c:	08 95       	ret

0000117e <usb_cdc_default_udre_isr_cb>:
    117e:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    1182:	88 23       	and	r24, r24
    1184:	81 f0       	breq	.+32     	; 0x11a6 <usb_cdc_default_udre_isr_cb+0x28>
    1186:	e0 91 45 34 	lds	r30, 0x3445	; 0x803445 <usb_cdc_tx_tail>
    118a:	ef 5f       	subi	r30, 0xFF	; 255
    118c:	e0 93 45 34 	sts	0x3445, r30	; 0x803445 <usb_cdc_tx_tail>
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	e9 5b       	subi	r30, 0xB9	; 185
    1194:	fb 4c       	sbci	r31, 0xCB	; 203
    1196:	80 81       	ld	r24, Z
    1198:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f8842>
    119c:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <usb_cdc_tx_elements>
    11a6:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    11aa:	81 11       	cpse	r24, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <usb_cdc_default_udre_isr_cb+0x3a>
    11ae:	e0 e4       	ldi	r30, 0x40	; 64
    11b0:	f8 e0       	ldi	r31, 0x08	; 8
    11b2:	85 81       	ldd	r24, Z+5	; 0x05
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
    11b6:	85 83       	std	Z+5, r24	; 0x05
    11b8:	08 95       	ret

000011ba <rx487x_set_ISR_cb>:
    11ba:	61 30       	cpi	r22, 0x01	; 1
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <rx487x_set_ISR_cb+0xa>
    11be:	62 30       	cpi	r22, 0x02	; 2
    11c0:	31 f0       	breq	.+12     	; 0x11ce <rx487x_set_ISR_cb+0x14>
    11c2:	08 95       	ret
    11c4:	80 93 8c 30 	sts	0x308C, r24	; 0x80308c <rx487x_rx_isr_cb>
    11c8:	90 93 8d 30 	sts	0x308D, r25	; 0x80308d <rx487x_rx_isr_cb+0x1>
    11cc:	08 95       	ret
    11ce:	80 93 8a 30 	sts	0x308A, r24	; 0x80308a <rx487x_udre_isr_cb>
    11d2:	90 93 8b 30 	sts	0x308B, r25	; 0x80308b <rx487x_udre_isr_cb+0x1>
    11d6:	08 95       	ret

000011d8 <__vector_17>:
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
    11fa:	e0 91 8c 30 	lds	r30, 0x308C	; 0x80308c <rx487x_rx_isr_cb>
    11fe:	f0 91 8d 30 	lds	r31, 0x308D	; 0x80308d <rx487x_rx_isr_cb+0x1>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	09 f0       	breq	.+2      	; 0x1208 <__vector_17+0x30>
    1206:	09 95       	icall
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_18>:
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	e0 91 8a 30 	lds	r30, 0x308A	; 0x80308a <rx487x_udre_isr_cb>
    1250:	f0 91 8b 30 	lds	r31, 0x308B	; 0x80308b <rx487x_udre_isr_cb+0x1>
    1254:	30 97       	sbiw	r30, 0x00	; 0
    1256:	09 f0       	breq	.+2      	; 0x125a <__vector_18+0x30>
    1258:	09 95       	icall
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <rx487x_is_tx_ready>:
    127c:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	08 95       	ret

00001284 <rx487x_write>:
    1284:	90 91 4c 36 	lds	r25, 0x364C	; 0x80364c <rx487x_tx_head>
    1288:	9f 5f       	subi	r25, 0xFF	; 255
    128a:	20 91 4a 36 	lds	r18, 0x364A	; 0x80364a <rx487x_tx_elements>
    128e:	e9 2f       	mov	r30, r25
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	e3 5b       	subi	r30, 0xB3	; 179
    1294:	f9 4c       	sbci	r31, 0xC9	; 201
    1296:	80 83       	st	Z, r24
    1298:	90 93 4c 36 	sts	0x364C, r25	; 0x80364c <rx487x_tx_head>
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	80 91 4a 36 	lds	r24, 0x364A	; 0x80364a <rx487x_tx_elements>
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	80 93 4a 36 	sts	0x364A, r24	; 0x80364a <rx487x_tx_elements>
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	e0 e0       	ldi	r30, 0x00	; 0
    12b2:	f8 e0       	ldi	r31, 0x08	; 8
    12b4:	85 81       	ldd	r24, Z+5	; 0x05
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	85 83       	std	Z+5, r24	; 0x05
    12ba:	08 95       	ret

000012bc <rx487x_init>:
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	f8 e0       	ldi	r31, 0x08	; 8
    12c0:	84 e7       	ldi	r24, 0x74	; 116
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	80 87       	std	Z+8, r24	; 0x08
    12c6:	91 87       	std	Z+9, r25	; 0x09
    12c8:	80 e8       	ldi	r24, 0x80	; 128
    12ca:	85 83       	std	Z+5, r24	; 0x05
    12cc:	80 ec       	ldi	r24, 0xC0	; 192
    12ce:	86 83       	std	Z+6, r24	; 0x06
    12d0:	10 92 4e 37 	sts	0x374E, r1	; 0x80374e <rx487x_rx_tail>
    12d4:	10 92 4f 37 	sts	0x374F, r1	; 0x80374f <rx487x_rx_head>
    12d8:	10 92 4d 37 	sts	0x374D, r1	; 0x80374d <rx487x_rx_elements>
    12dc:	10 92 4b 36 	sts	0x364B, r1	; 0x80364b <rx487x_tx_tail>
    12e0:	10 92 4c 36 	sts	0x364C, r1	; 0x80364c <rx487x_tx_head>
    12e4:	10 92 4a 36 	sts	0x364A, r1	; 0x80364a <rx487x_tx_elements>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret

000012ec <rx487x_get_data>:
    12ec:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f8800>
    12f0:	08 95       	ret

000012f2 <usb_cdc_set_ISR_cb>:
    12f2:	61 30       	cpi	r22, 0x01	; 1
    12f4:	19 f0       	breq	.+6      	; 0x12fc <usb_cdc_set_ISR_cb+0xa>
    12f6:	62 30       	cpi	r22, 0x02	; 2
    12f8:	31 f0       	breq	.+12     	; 0x1306 <usb_cdc_set_ISR_cb+0x14>
    12fa:	08 95       	ret
    12fc:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <usb_cdc_rx_isr_cb>
    1300:	90 93 7b 30 	sts	0x307B, r25	; 0x80307b <usb_cdc_rx_isr_cb+0x1>
    1304:	08 95       	ret
    1306:	80 93 78 30 	sts	0x3078, r24	; 0x803078 <usb_cdc_udre_isr_cb>
    130a:	90 93 79 30 	sts	0x3079, r25	; 0x803079 <usb_cdc_udre_isr_cb+0x1>
    130e:	08 95       	ret

00001310 <__vector_31>:
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	e0 91 7a 30 	lds	r30, 0x307A	; 0x80307a <usb_cdc_rx_isr_cb>
    1336:	f0 91 7b 30 	lds	r31, 0x307B	; 0x80307b <usb_cdc_rx_isr_cb+0x1>
    133a:	30 97       	sbiw	r30, 0x00	; 0
    133c:	09 f0       	breq	.+2      	; 0x1340 <__vector_31+0x30>
    133e:	09 95       	icall
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <__vector_32>:
    1362:	1f 92       	push	r1
    1364:	0f 92       	push	r0
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	0f 92       	push	r0
    136a:	11 24       	eor	r1, r1
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
    1384:	e0 91 78 30 	lds	r30, 0x3078	; 0x803078 <usb_cdc_udre_isr_cb>
    1388:	f0 91 79 30 	lds	r31, 0x3079	; 0x803079 <usb_cdc_udre_isr_cb+0x1>
    138c:	30 97       	sbiw	r30, 0x00	; 0
    138e:	09 f0       	breq	.+2      	; 0x1392 <__vector_32+0x30>
    1390:	09 95       	icall
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	0f 90       	pop	r0
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	0f 90       	pop	r0
    13b0:	1f 90       	pop	r1
    13b2:	18 95       	reti

000013b4 <usb_cdc_write>:
    13b4:	90 91 46 34 	lds	r25, 0x3446	; 0x803446 <usb_cdc_tx_head>
    13b8:	9f 5f       	subi	r25, 0xFF	; 255
    13ba:	20 91 44 34 	lds	r18, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    13be:	e9 2f       	mov	r30, r25
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	e9 5b       	subi	r30, 0xB9	; 185
    13c4:	fb 4c       	sbci	r31, 0xCB	; 203
    13c6:	80 83       	st	Z, r24
    13c8:	90 93 46 34 	sts	0x3446, r25	; 0x803446 <usb_cdc_tx_head>
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	0f 92       	push	r0
    13d2:	80 91 44 34 	lds	r24, 0x3444	; 0x803444 <usb_cdc_tx_elements>
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 44 34 	sts	0x3444, r24	; 0x803444 <usb_cdc_tx_elements>
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	e0 e4       	ldi	r30, 0x40	; 64
    13e2:	f8 e0       	ldi	r31, 0x08	; 8
    13e4:	85 81       	ldd	r24, Z+5	; 0x05
    13e6:	80 62       	ori	r24, 0x20	; 32
    13e8:	85 83       	std	Z+5, r24	; 0x05
    13ea:	08 95       	ret

000013ec <usb_cdc_printCHAR>:
    13ec:	0e 94 da 09 	call	0x13b4	; 0x13b4 <usb_cdc_write>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	08 95       	ret

000013f6 <usb_cdc_init>:
    13f6:	e0 e4       	ldi	r30, 0x40	; 64
    13f8:	f8 e0       	ldi	r31, 0x08	; 8
    13fa:	84 e7       	ldi	r24, 0x74	; 116
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	80 87       	std	Z+8, r24	; 0x08
    1400:	91 87       	std	Z+9, r25	; 0x09
    1402:	80 e8       	ldi	r24, 0x80	; 128
    1404:	85 83       	std	Z+5, r24	; 0x05
    1406:	80 ec       	ldi	r24, 0xC0	; 192
    1408:	86 83       	std	Z+6, r24	; 0x06
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	83 87       	std	Z+11, r24	; 0x0b
    140e:	10 92 48 35 	sts	0x3548, r1	; 0x803548 <usb_cdc_rx_tail>
    1412:	10 92 49 35 	sts	0x3549, r1	; 0x803549 <usb_cdc_rx_head>
    1416:	10 92 47 35 	sts	0x3547, r1	; 0x803547 <usb_cdc_rx_elements>
    141a:	10 92 45 34 	sts	0x3445, r1	; 0x803445 <usb_cdc_tx_tail>
    141e:	10 92 46 34 	sts	0x3446, r1	; 0x803446 <usb_cdc_tx_head>
    1422:	10 92 44 34 	sts	0x3444, r1	; 0x803444 <usb_cdc_tx_elements>
    1426:	8c e7       	ldi	r24, 0x7C	; 124
    1428:	90 e3       	ldi	r25, 0x30	; 48
    142a:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <__iob+0x2>
    142e:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <__iob+0x3>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	08 95       	ret

00001436 <usb_cdc_get_data>:
 *
 * \return Data register from usb_cdc module
 */
uint8_t usb_cdc_get_data()
{
	return USART2.RXDATAL;
    1436:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x7f8840>
}
    143a:	08 95       	ret

0000143c <__muluhisi3>:
    143c:	0e 94 29 0a 	call	0x1452	; 0x1452 <__umulhisi3>
    1440:	a5 9f       	mul	r26, r21
    1442:	90 0d       	add	r25, r0
    1444:	b4 9f       	mul	r27, r20
    1446:	90 0d       	add	r25, r0
    1448:	a4 9f       	mul	r26, r20
    144a:	80 0d       	add	r24, r0
    144c:	91 1d       	adc	r25, r1
    144e:	11 24       	eor	r1, r1
    1450:	08 95       	ret

00001452 <__umulhisi3>:
    1452:	a2 9f       	mul	r26, r18
    1454:	b0 01       	movw	r22, r0
    1456:	b3 9f       	mul	r27, r19
    1458:	c0 01       	movw	r24, r0
    145a:	a3 9f       	mul	r26, r19
    145c:	70 0d       	add	r23, r0
    145e:	81 1d       	adc	r24, r1
    1460:	11 24       	eor	r1, r1
    1462:	91 1d       	adc	r25, r1
    1464:	b2 9f       	mul	r27, r18
    1466:	70 0d       	add	r23, r0
    1468:	81 1d       	adc	r24, r1
    146a:	11 24       	eor	r1, r1
    146c:	91 1d       	adc	r25, r1
    146e:	08 95       	ret

00001470 <strtol>:
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e3       	ldi	r30, 0x3E	; 62
    1476:	fa e0       	ldi	r31, 0x0A	; 10
    1478:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__prologue_saves__+0x2>
    147c:	5c 01       	movw	r10, r24
    147e:	6b 01       	movw	r12, r22
    1480:	7a 01       	movw	r14, r20
    1482:	61 15       	cp	r22, r1
    1484:	71 05       	cpc	r23, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <strtol+0x1e>
    1488:	fb 01       	movw	r30, r22
    148a:	80 83       	st	Z, r24
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	e1 14       	cp	r14, r1
    1490:	f1 04       	cpc	r15, r1
    1492:	29 f0       	breq	.+10     	; 0x149e <strtol+0x2e>
    1494:	c7 01       	movw	r24, r14
    1496:	02 97       	sbiw	r24, 0x02	; 2
    1498:	83 97       	sbiw	r24, 0x23	; 35
    149a:	08 f0       	brcs	.+2      	; 0x149e <strtol+0x2e>
    149c:	e5 c0       	rjmp	.+458    	; 0x1668 <strtol+0x1f8>
    149e:	e5 01       	movw	r28, r10
    14a0:	21 96       	adiw	r28, 0x01	; 1
    14a2:	f5 01       	movw	r30, r10
    14a4:	10 81       	ld	r17, Z
    14a6:	81 2f       	mov	r24, r17
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    14ae:	89 2b       	or	r24, r25
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <strtol+0x46>
    14b2:	5e 01       	movw	r10, r28
    14b4:	f4 cf       	rjmp	.-24     	; 0x149e <strtol+0x2e>
    14b6:	1d 32       	cpi	r17, 0x2D	; 45
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <strtol+0x54>
    14ba:	21 96       	adiw	r28, 0x01	; 1
    14bc:	f5 01       	movw	r30, r10
    14be:	11 81       	ldd	r17, Z+1	; 0x01
    14c0:	01 e0       	ldi	r16, 0x01	; 1
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <strtol+0x62>
    14c4:	1b 32       	cpi	r17, 0x2B	; 43
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <strtol+0x60>
    14c8:	e5 01       	movw	r28, r10
    14ca:	22 96       	adiw	r28, 0x02	; 2
    14cc:	f5 01       	movw	r30, r10
    14ce:	11 81       	ldd	r17, Z+1	; 0x01
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	e1 14       	cp	r14, r1
    14d4:	f1 04       	cpc	r15, r1
    14d6:	09 f1       	breq	.+66     	; 0x151a <strtol+0xaa>
    14d8:	f0 e1       	ldi	r31, 0x10	; 16
    14da:	ef 16       	cp	r14, r31
    14dc:	f1 04       	cpc	r15, r1
    14de:	29 f4       	brne	.+10     	; 0x14ea <strtol+0x7a>
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <strtol+0xf0>
    14e2:	10 e3       	ldi	r17, 0x30	; 48
    14e4:	e1 14       	cp	r14, r1
    14e6:	f1 04       	cpc	r15, r1
    14e8:	21 f1       	breq	.+72     	; 0x1532 <strtol+0xc2>
    14ea:	28 e0       	ldi	r18, 0x08	; 8
    14ec:	e2 16       	cp	r14, r18
    14ee:	f1 04       	cpc	r15, r1
    14f0:	01 f1       	breq	.+64     	; 0x1532 <strtol+0xc2>
    14f2:	54 f4       	brge	.+20     	; 0x1508 <strtol+0x98>
    14f4:	e2 e0       	ldi	r30, 0x02	; 2
    14f6:	ee 16       	cp	r14, r30
    14f8:	f1 04       	cpc	r15, r1
    14fa:	21 f5       	brne	.+72     	; 0x1544 <strtol+0xd4>
    14fc:	81 2c       	mov	r8, r1
    14fe:	91 2c       	mov	r9, r1
    1500:	a1 2c       	mov	r10, r1
    1502:	b0 e4       	ldi	r27, 0x40	; 64
    1504:	bb 2e       	mov	r11, r27
    1506:	3e c0       	rjmp	.+124    	; 0x1584 <strtol+0x114>
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	ef 16       	cp	r14, r31
    150c:	f1 04       	cpc	r15, r1
    150e:	39 f0       	breq	.+14     	; 0x151e <strtol+0xae>
    1510:	20 e1       	ldi	r18, 0x10	; 16
    1512:	e2 16       	cp	r14, r18
    1514:	f1 04       	cpc	r15, r1
    1516:	b1 f4       	brne	.+44     	; 0x1544 <strtol+0xd4>
    1518:	30 c0       	rjmp	.+96     	; 0x157a <strtol+0x10a>
    151a:	10 33       	cpi	r17, 0x30	; 48
    151c:	19 f1       	breq	.+70     	; 0x1564 <strtol+0xf4>
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	ef 2e       	mov	r14, r31
    1522:	f1 2c       	mov	r15, r1
    1524:	ac ec       	ldi	r26, 0xCC	; 204
    1526:	8a 2e       	mov	r8, r26
    1528:	98 2c       	mov	r9, r8
    152a:	a8 2c       	mov	r10, r8
    152c:	ac e0       	ldi	r26, 0x0C	; 12
    152e:	ba 2e       	mov	r11, r26
    1530:	29 c0       	rjmp	.+82     	; 0x1584 <strtol+0x114>
    1532:	78 e0       	ldi	r23, 0x08	; 8
    1534:	e7 2e       	mov	r14, r23
    1536:	f1 2c       	mov	r15, r1
    1538:	81 2c       	mov	r8, r1
    153a:	91 2c       	mov	r9, r1
    153c:	a1 2c       	mov	r10, r1
    153e:	e0 e1       	ldi	r30, 0x10	; 16
    1540:	be 2e       	mov	r11, r30
    1542:	20 c0       	rjmp	.+64     	; 0x1584 <strtol+0x114>
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e8       	ldi	r25, 0x80	; 128
    154c:	97 01       	movw	r18, r14
    154e:	0f 2c       	mov	r0, r15
    1550:	00 0c       	add	r0, r0
    1552:	44 0b       	sbc	r20, r20
    1554:	55 0b       	sbc	r21, r21
    1556:	0e 94 bb 11 	call	0x2376	; 0x2376 <__udivmodsi4>
    155a:	49 01       	movw	r8, r18
    155c:	5a 01       	movw	r10, r20
    155e:	12 c0       	rjmp	.+36     	; 0x1584 <strtol+0x114>
    1560:	10 33       	cpi	r17, 0x30	; 48
    1562:	59 f4       	brne	.+22     	; 0x157a <strtol+0x10a>
    1564:	88 81       	ld	r24, Y
    1566:	8f 7d       	andi	r24, 0xDF	; 223
    1568:	88 35       	cpi	r24, 0x58	; 88
    156a:	09 f0       	breq	.+2      	; 0x156e <strtol+0xfe>
    156c:	ba cf       	rjmp	.-140    	; 0x14e2 <strtol+0x72>
    156e:	19 81       	ldd	r17, Y+1	; 0x01
    1570:	22 96       	adiw	r28, 0x02	; 2
    1572:	02 60       	ori	r16, 0x02	; 2
    1574:	80 e1       	ldi	r24, 0x10	; 16
    1576:	e8 2e       	mov	r14, r24
    1578:	f1 2c       	mov	r15, r1
    157a:	81 2c       	mov	r8, r1
    157c:	91 2c       	mov	r9, r1
    157e:	a1 2c       	mov	r10, r1
    1580:	68 e0       	ldi	r22, 0x08	; 8
    1582:	b6 2e       	mov	r11, r22
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	cb 01       	movw	r24, r22
    158c:	27 01       	movw	r4, r14
    158e:	0f 2c       	mov	r0, r15
    1590:	00 0c       	add	r0, r0
    1592:	66 08       	sbc	r6, r6
    1594:	77 08       	sbc	r7, r7
    1596:	fe 01       	movw	r30, r28
    1598:	50 ed       	ldi	r21, 0xD0	; 208
    159a:	35 2e       	mov	r3, r21
    159c:	31 0e       	add	r3, r17
    159e:	29 e0       	ldi	r18, 0x09	; 9
    15a0:	23 15       	cp	r18, r3
    15a2:	70 f4       	brcc	.+28     	; 0x15c0 <strtol+0x150>
    15a4:	2f eb       	ldi	r18, 0xBF	; 191
    15a6:	21 0f       	add	r18, r17
    15a8:	2a 31       	cpi	r18, 0x1A	; 26
    15aa:	18 f4       	brcc	.+6      	; 0x15b2 <strtol+0x142>
    15ac:	39 ec       	ldi	r19, 0xC9	; 201
    15ae:	33 2e       	mov	r3, r19
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <strtol+0x14e>
    15b2:	2f e9       	ldi	r18, 0x9F	; 159
    15b4:	21 0f       	add	r18, r17
    15b6:	2a 31       	cpi	r18, 0x1A	; 26
    15b8:	18 f5       	brcc	.+70     	; 0x1600 <strtol+0x190>
    15ba:	29 ea       	ldi	r18, 0xA9	; 169
    15bc:	32 2e       	mov	r3, r18
    15be:	31 0e       	add	r3, r17
    15c0:	23 2d       	mov	r18, r3
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	2e 15       	cp	r18, r14
    15c6:	3f 05       	cpc	r19, r15
    15c8:	dc f4       	brge	.+54     	; 0x1600 <strtol+0x190>
    15ca:	47 fd       	sbrc	r20, 7
    15cc:	16 c0       	rjmp	.+44     	; 0x15fa <strtol+0x18a>
    15ce:	86 16       	cp	r8, r22
    15d0:	97 06       	cpc	r9, r23
    15d2:	a8 06       	cpc	r10, r24
    15d4:	b9 06       	cpc	r11, r25
    15d6:	70 f0       	brcs	.+28     	; 0x15f4 <strtol+0x184>
    15d8:	a3 01       	movw	r20, r6
    15da:	92 01       	movw	r18, r4
    15dc:	0e 94 ab 11 	call	0x2356	; 0x2356 <__mulsi3>
    15e0:	63 0d       	add	r22, r3
    15e2:	71 1d       	adc	r23, r1
    15e4:	81 1d       	adc	r24, r1
    15e6:	91 1d       	adc	r25, r1
    15e8:	61 30       	cpi	r22, 0x01	; 1
    15ea:	71 05       	cpc	r23, r1
    15ec:	81 05       	cpc	r24, r1
    15ee:	20 e8       	ldi	r18, 0x80	; 128
    15f0:	92 07       	cpc	r25, r18
    15f2:	10 f0       	brcs	.+4      	; 0x15f8 <strtol+0x188>
    15f4:	4f ef       	ldi	r20, 0xFF	; 255
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <strtol+0x18a>
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	21 96       	adiw	r28, 0x01	; 1
    15fc:	10 81       	ld	r17, Z
    15fe:	cb cf       	rjmp	.-106    	; 0x1596 <strtol+0x126>
    1600:	20 2f       	mov	r18, r16
    1602:	21 70       	andi	r18, 0x01	; 1
    1604:	c1 14       	cp	r12, r1
    1606:	d1 04       	cpc	r13, r1
    1608:	71 f0       	breq	.+28     	; 0x1626 <strtol+0x1b6>
    160a:	44 23       	and	r20, r20
    160c:	29 f0       	breq	.+10     	; 0x1618 <strtol+0x1a8>
    160e:	21 97       	sbiw	r28, 0x01	; 1
    1610:	f6 01       	movw	r30, r12
    1612:	c0 83       	st	Z, r28
    1614:	d1 83       	std	Z+1, r29	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <strtol+0x1b6>
    1618:	01 ff       	sbrs	r16, 1
    161a:	19 c0       	rjmp	.+50     	; 0x164e <strtol+0x1de>
    161c:	22 97       	sbiw	r28, 0x02	; 2
    161e:	f6 01       	movw	r30, r12
    1620:	c0 83       	st	Z, r28
    1622:	d1 83       	std	Z+1, r29	; 0x01
    1624:	14 c0       	rjmp	.+40     	; 0x164e <strtol+0x1de>
    1626:	47 ff       	sbrs	r20, 7
    1628:	12 c0       	rjmp	.+36     	; 0x164e <strtol+0x1de>
    162a:	22 23       	and	r18, r18
    162c:	29 f0       	breq	.+10     	; 0x1638 <strtol+0x1c8>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e8       	ldi	r25, 0x80	; 128
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <strtol+0x1d0>
    1638:	6f ef       	ldi	r22, 0xFF	; 255
    163a:	7f ef       	ldi	r23, 0xFF	; 255
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	9f e7       	ldi	r25, 0x7F	; 127
    1640:	22 e2       	ldi	r18, 0x22	; 34
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	20 93 56 38 	sts	0x3856, r18	; 0x803856 <errno>
    1648:	30 93 57 38 	sts	0x3857, r19	; 0x803857 <errno+0x1>
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <strtol+0x1f0>
    164e:	22 23       	and	r18, r18
    1650:	81 f0       	breq	.+32     	; 0x1672 <strtol+0x202>
    1652:	90 95       	com	r25
    1654:	80 95       	com	r24
    1656:	70 95       	com	r23
    1658:	61 95       	neg	r22
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	46 2f       	mov	r20, r22
    1662:	37 2f       	mov	r19, r23
    1664:	28 2f       	mov	r18, r24
    1666:	12 c0       	rjmp	.+36     	; 0x168c <strtol+0x21c>
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0d c0       	rjmp	.+26     	; 0x168c <strtol+0x21c>
    1672:	97 ff       	sbrs	r25, 7
    1674:	f5 cf       	rjmp	.-22     	; 0x1660 <strtol+0x1f0>
    1676:	82 e2       	ldi	r24, 0x22	; 34
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <errno>
    167e:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <errno+0x1>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	9f e7       	ldi	r25, 0x7F	; 127
    168a:	ea cf       	rjmp	.-44     	; 0x1660 <strtol+0x1f0>
    168c:	64 2f       	mov	r22, r20
    168e:	73 2f       	mov	r23, r19
    1690:	82 2f       	mov	r24, r18
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	e1 e1       	ldi	r30, 0x11	; 17
    1698:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__epilogue_restores__+0x2>

0000169c <isspace>:
    169c:	91 11       	cpse	r25, r1
    169e:	0c 94 96 10 	jmp	0x212c	; 0x212c <__ctype_isfalse>
    16a2:	80 32       	cpi	r24, 0x20	; 32
    16a4:	19 f0       	breq	.+6      	; 0x16ac <isspace+0x10>
    16a6:	89 50       	subi	r24, 0x09	; 9
    16a8:	85 50       	subi	r24, 0x05	; 5
    16aa:	c8 f7       	brcc	.-14     	; 0x169e <isspace+0x2>
    16ac:	08 95       	ret

000016ae <strncpy>:
    16ae:	fb 01       	movw	r30, r22
    16b0:	dc 01       	movw	r26, r24
    16b2:	41 50       	subi	r20, 0x01	; 1
    16b4:	50 40       	sbci	r21, 0x00	; 0
    16b6:	48 f0       	brcs	.+18     	; 0x16ca <strncpy+0x1c>
    16b8:	01 90       	ld	r0, Z+
    16ba:	0d 92       	st	X+, r0
    16bc:	00 20       	and	r0, r0
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <strncpy+0x4>
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <strncpy+0x16>
    16c2:	1d 92       	st	X+, r1
    16c4:	41 50       	subi	r20, 0x01	; 1
    16c6:	50 40       	sbci	r21, 0x00	; 0
    16c8:	e0 f7       	brcc	.-8      	; 0x16c2 <strncpy+0x14>
    16ca:	08 95       	ret

000016cc <strstr>:
    16cc:	fb 01       	movw	r30, r22
    16ce:	51 91       	ld	r21, Z+
    16d0:	55 23       	and	r21, r21
    16d2:	a9 f0       	breq	.+42     	; 0x16fe <strstr+0x32>
    16d4:	bf 01       	movw	r22, r30
    16d6:	dc 01       	movw	r26, r24
    16d8:	4d 91       	ld	r20, X+
    16da:	45 17       	cp	r20, r21
    16dc:	41 11       	cpse	r20, r1
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <strstr+0xc>
    16e0:	59 f4       	brne	.+22     	; 0x16f8 <strstr+0x2c>
    16e2:	cd 01       	movw	r24, r26
    16e4:	01 90       	ld	r0, Z+
    16e6:	00 20       	and	r0, r0
    16e8:	49 f0       	breq	.+18     	; 0x16fc <strstr+0x30>
    16ea:	4d 91       	ld	r20, X+
    16ec:	40 15       	cp	r20, r0
    16ee:	41 11       	cpse	r20, r1
    16f0:	c9 f3       	breq	.-14     	; 0x16e4 <strstr+0x18>
    16f2:	fb 01       	movw	r30, r22
    16f4:	41 11       	cpse	r20, r1
    16f6:	ef cf       	rjmp	.-34     	; 0x16d6 <strstr+0xa>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	08 95       	ret

00001700 <printf>:
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e6 e8       	ldi	r30, 0x86	; 134
    1706:	fb e0       	ldi	r31, 0x0B	; 11
    1708:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0x20>
    170c:	ae 01       	movw	r20, r28
    170e:	4b 5f       	subi	r20, 0xFB	; 251
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	fa 01       	movw	r30, r20
    1714:	61 91       	ld	r22, Z+
    1716:	71 91       	ld	r23, Z+
    1718:	af 01       	movw	r20, r30
    171a:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <__iob+0x2>
    171e:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <__iob+0x3>
    1722:	0e 94 08 0c 	call	0x1810	; 0x1810 <vfprintf>
    1726:	e2 e0       	ldi	r30, 0x02	; 2
    1728:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__+0x20>

0000172c <putchar>:
    172c:	60 91 52 38 	lds	r22, 0x3852	; 0x803852 <__iob+0x2>
    1730:	70 91 53 38 	lds	r23, 0x3853	; 0x803853 <__iob+0x3>
    1734:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1738:	08 95       	ret

0000173a <puts>:
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	e0 91 52 38 	lds	r30, 0x3852	; 0x803852 <__iob+0x2>
    1746:	f0 91 53 38 	lds	r31, 0x3853	; 0x803853 <__iob+0x3>
    174a:	23 81       	ldd	r18, Z+3	; 0x03
    174c:	21 ff       	sbrs	r18, 1
    174e:	1b c0       	rjmp	.+54     	; 0x1786 <puts+0x4c>
    1750:	8c 01       	movw	r16, r24
    1752:	d0 e0       	ldi	r29, 0x00	; 0
    1754:	c0 e0       	ldi	r28, 0x00	; 0
    1756:	f8 01       	movw	r30, r16
    1758:	81 91       	ld	r24, Z+
    175a:	8f 01       	movw	r16, r30
    175c:	60 91 52 38 	lds	r22, 0x3852	; 0x803852 <__iob+0x2>
    1760:	70 91 53 38 	lds	r23, 0x3853	; 0x803853 <__iob+0x3>
    1764:	db 01       	movw	r26, r22
    1766:	18 96       	adiw	r26, 0x08	; 8
    1768:	ed 91       	ld	r30, X+
    176a:	fc 91       	ld	r31, X
    176c:	19 97       	sbiw	r26, 0x09	; 9
    176e:	88 23       	and	r24, r24
    1770:	31 f0       	breq	.+12     	; 0x177e <puts+0x44>
    1772:	09 95       	icall
    1774:	89 2b       	or	r24, r25
    1776:	79 f3       	breq	.-34     	; 0x1756 <puts+0x1c>
    1778:	df ef       	ldi	r29, 0xFF	; 255
    177a:	cf ef       	ldi	r28, 0xFF	; 255
    177c:	ec cf       	rjmp	.-40     	; 0x1756 <puts+0x1c>
    177e:	8a e0       	ldi	r24, 0x0A	; 10
    1780:	09 95       	icall
    1782:	89 2b       	or	r24, r25
    1784:	19 f0       	breq	.+6      	; 0x178c <puts+0x52>
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <puts+0x56>
    178c:	8d 2f       	mov	r24, r29
    178e:	9c 2f       	mov	r25, r28
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <sprintf>:
    179a:	ae e0       	ldi	r26, 0x0E	; 14
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e3 ed       	ldi	r30, 0xD3	; 211
    17a0:	fb e0       	ldi	r31, 0x0B	; 11
    17a2:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x1c>
    17a6:	0d 89       	ldd	r16, Y+21	; 0x15
    17a8:	1e 89       	ldd	r17, Y+22	; 0x16
    17aa:	86 e0       	ldi	r24, 0x06	; 6
    17ac:	8c 83       	std	Y+4, r24	; 0x04
    17ae:	09 83       	std	Y+1, r16	; 0x01
    17b0:	1a 83       	std	Y+2, r17	; 0x02
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f e7       	ldi	r25, 0x7F	; 127
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	ae 01       	movw	r20, r28
    17bc:	47 5e       	subi	r20, 0xE7	; 231
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	6f 89       	ldd	r22, Y+23	; 0x17
    17c2:	78 8d       	ldd	r23, Y+24	; 0x18
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	0e 94 08 0c 	call	0x1810	; 0x1810 <vfprintf>
    17cc:	ef 81       	ldd	r30, Y+7	; 0x07
    17ce:	f8 85       	ldd	r31, Y+8	; 0x08
    17d0:	e0 0f       	add	r30, r16
    17d2:	f1 1f       	adc	r31, r17
    17d4:	10 82       	st	Z, r1
    17d6:	2e 96       	adiw	r28, 0x0e	; 14
    17d8:	e4 e0       	ldi	r30, 0x04	; 4
    17da:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__epilogue_restores__+0x1c>

000017de <sscanf>:
    17de:	ae e0       	ldi	r26, 0x0E	; 14
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 ef       	ldi	r30, 0xF5	; 245
    17e4:	fb e0       	ldi	r31, 0x0B	; 11
    17e6:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0x20>
    17ea:	85 e0       	ldi	r24, 0x05	; 5
    17ec:	8c 83       	std	Y+4, r24	; 0x04
    17ee:	8b 89       	ldd	r24, Y+19	; 0x13
    17f0:	9c 89       	ldd	r25, Y+20	; 0x14
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	ae 01       	movw	r20, r28
    17f8:	49 5e       	subi	r20, 0xE9	; 233
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255
    17fc:	6d 89       	ldd	r22, Y+21	; 0x15
    17fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1800:	ce 01       	movw	r24, r28
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <vfscanf>
    1808:	2e 96       	adiw	r28, 0x0e	; 14
    180a:	e2 e0       	ldi	r30, 0x02	; 2
    180c:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__+0x20>

00001810 <vfprintf>:
    1810:	ab e0       	ldi	r26, 0x0B	; 11
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e0       	ldi	r30, 0x0E	; 14
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__prologue_saves__>
    181c:	6c 01       	movw	r12, r24
    181e:	7b 01       	movw	r14, r22
    1820:	8a 01       	movw	r16, r20
    1822:	fc 01       	movw	r30, r24
    1824:	16 82       	std	Z+6, r1	; 0x06
    1826:	17 82       	std	Z+7, r1	; 0x07
    1828:	83 81       	ldd	r24, Z+3	; 0x03
    182a:	81 ff       	sbrs	r24, 1
    182c:	cc c1       	rjmp	.+920    	; 0x1bc6 <vfprintf+0x3b6>
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	3c 01       	movw	r6, r24
    1834:	f6 01       	movw	r30, r12
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	f7 01       	movw	r30, r14
    183a:	93 fd       	sbrc	r25, 3
    183c:	85 91       	lpm	r24, Z+
    183e:	93 ff       	sbrs	r25, 3
    1840:	81 91       	ld	r24, Z+
    1842:	7f 01       	movw	r14, r30
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <vfprintf+0x3a>
    1848:	ba c1       	rjmp	.+884    	; 0x1bbe <vfprintf+0x3ae>
    184a:	85 32       	cpi	r24, 0x25	; 37
    184c:	39 f4       	brne	.+14     	; 0x185c <vfprintf+0x4c>
    184e:	93 fd       	sbrc	r25, 3
    1850:	85 91       	lpm	r24, Z+
    1852:	93 ff       	sbrs	r25, 3
    1854:	81 91       	ld	r24, Z+
    1856:	7f 01       	movw	r14, r30
    1858:	85 32       	cpi	r24, 0x25	; 37
    185a:	29 f4       	brne	.+10     	; 0x1866 <vfprintf+0x56>
    185c:	b6 01       	movw	r22, r12
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1864:	e7 cf       	rjmp	.-50     	; 0x1834 <vfprintf+0x24>
    1866:	91 2c       	mov	r9, r1
    1868:	21 2c       	mov	r2, r1
    186a:	31 2c       	mov	r3, r1
    186c:	ff e1       	ldi	r31, 0x1F	; 31
    186e:	f3 15       	cp	r31, r3
    1870:	d8 f0       	brcs	.+54     	; 0x18a8 <vfprintf+0x98>
    1872:	8b 32       	cpi	r24, 0x2B	; 43
    1874:	79 f0       	breq	.+30     	; 0x1894 <vfprintf+0x84>
    1876:	38 f4       	brcc	.+14     	; 0x1886 <vfprintf+0x76>
    1878:	80 32       	cpi	r24, 0x20	; 32
    187a:	79 f0       	breq	.+30     	; 0x189a <vfprintf+0x8a>
    187c:	83 32       	cpi	r24, 0x23	; 35
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <vfprintf+0x98>
    1880:	23 2d       	mov	r18, r3
    1882:	20 61       	ori	r18, 0x10	; 16
    1884:	1d c0       	rjmp	.+58     	; 0x18c0 <vfprintf+0xb0>
    1886:	8d 32       	cpi	r24, 0x2D	; 45
    1888:	61 f0       	breq	.+24     	; 0x18a2 <vfprintf+0x92>
    188a:	80 33       	cpi	r24, 0x30	; 48
    188c:	69 f4       	brne	.+26     	; 0x18a8 <vfprintf+0x98>
    188e:	23 2d       	mov	r18, r3
    1890:	21 60       	ori	r18, 0x01	; 1
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <vfprintf+0xb0>
    1894:	83 2d       	mov	r24, r3
    1896:	82 60       	ori	r24, 0x02	; 2
    1898:	38 2e       	mov	r3, r24
    189a:	e3 2d       	mov	r30, r3
    189c:	e4 60       	ori	r30, 0x04	; 4
    189e:	3e 2e       	mov	r3, r30
    18a0:	2a c0       	rjmp	.+84     	; 0x18f6 <vfprintf+0xe6>
    18a2:	f3 2d       	mov	r31, r3
    18a4:	f8 60       	ori	r31, 0x08	; 8
    18a6:	1d c0       	rjmp	.+58     	; 0x18e2 <vfprintf+0xd2>
    18a8:	37 fc       	sbrc	r3, 7
    18aa:	2d c0       	rjmp	.+90     	; 0x1906 <vfprintf+0xf6>
    18ac:	20 ed       	ldi	r18, 0xD0	; 208
    18ae:	28 0f       	add	r18, r24
    18b0:	2a 30       	cpi	r18, 0x0A	; 10
    18b2:	40 f0       	brcs	.+16     	; 0x18c4 <vfprintf+0xb4>
    18b4:	8e 32       	cpi	r24, 0x2E	; 46
    18b6:	b9 f4       	brne	.+46     	; 0x18e6 <vfprintf+0xd6>
    18b8:	36 fc       	sbrc	r3, 6
    18ba:	81 c1       	rjmp	.+770    	; 0x1bbe <vfprintf+0x3ae>
    18bc:	23 2d       	mov	r18, r3
    18be:	20 64       	ori	r18, 0x40	; 64
    18c0:	32 2e       	mov	r3, r18
    18c2:	19 c0       	rjmp	.+50     	; 0x18f6 <vfprintf+0xe6>
    18c4:	36 fe       	sbrs	r3, 6
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <vfprintf+0xc4>
    18c8:	8a e0       	ldi	r24, 0x0A	; 10
    18ca:	98 9e       	mul	r9, r24
    18cc:	20 0d       	add	r18, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	92 2e       	mov	r9, r18
    18d2:	11 c0       	rjmp	.+34     	; 0x18f6 <vfprintf+0xe6>
    18d4:	ea e0       	ldi	r30, 0x0A	; 10
    18d6:	2e 9e       	mul	r2, r30
    18d8:	20 0d       	add	r18, r0
    18da:	11 24       	eor	r1, r1
    18dc:	22 2e       	mov	r2, r18
    18de:	f3 2d       	mov	r31, r3
    18e0:	f0 62       	ori	r31, 0x20	; 32
    18e2:	3f 2e       	mov	r3, r31
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <vfprintf+0xe6>
    18e6:	8c 36       	cpi	r24, 0x6C	; 108
    18e8:	21 f4       	brne	.+8      	; 0x18f2 <vfprintf+0xe2>
    18ea:	83 2d       	mov	r24, r3
    18ec:	80 68       	ori	r24, 0x80	; 128
    18ee:	38 2e       	mov	r3, r24
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0xe6>
    18f2:	88 36       	cpi	r24, 0x68	; 104
    18f4:	41 f4       	brne	.+16     	; 0x1906 <vfprintf+0xf6>
    18f6:	f7 01       	movw	r30, r14
    18f8:	93 fd       	sbrc	r25, 3
    18fa:	85 91       	lpm	r24, Z+
    18fc:	93 ff       	sbrs	r25, 3
    18fe:	81 91       	ld	r24, Z+
    1900:	7f 01       	movw	r14, r30
    1902:	81 11       	cpse	r24, r1
    1904:	b3 cf       	rjmp	.-154    	; 0x186c <vfprintf+0x5c>
    1906:	98 2f       	mov	r25, r24
    1908:	9f 7d       	andi	r25, 0xDF	; 223
    190a:	95 54       	subi	r25, 0x45	; 69
    190c:	93 30       	cpi	r25, 0x03	; 3
    190e:	28 f4       	brcc	.+10     	; 0x191a <vfprintf+0x10a>
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	9f e3       	ldi	r25, 0x3F	; 63
    1916:	99 83       	std	Y+1, r25	; 0x01
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x124>
    191a:	83 36       	cpi	r24, 0x63	; 99
    191c:	31 f0       	breq	.+12     	; 0x192a <vfprintf+0x11a>
    191e:	83 37       	cpi	r24, 0x73	; 115
    1920:	71 f0       	breq	.+28     	; 0x193e <vfprintf+0x12e>
    1922:	83 35       	cpi	r24, 0x53	; 83
    1924:	09 f0       	breq	.+2      	; 0x1928 <vfprintf+0x118>
    1926:	59 c0       	rjmp	.+178    	; 0x19da <vfprintf+0x1ca>
    1928:	21 c0       	rjmp	.+66     	; 0x196c <vfprintf+0x15c>
    192a:	f8 01       	movw	r30, r16
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	0e 5f       	subi	r16, 0xFE	; 254
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	88 24       	eor	r8, r8
    1936:	83 94       	inc	r8
    1938:	91 2c       	mov	r9, r1
    193a:	53 01       	movw	r10, r6
    193c:	13 c0       	rjmp	.+38     	; 0x1964 <vfprintf+0x154>
    193e:	28 01       	movw	r4, r16
    1940:	f2 e0       	ldi	r31, 0x02	; 2
    1942:	4f 0e       	add	r4, r31
    1944:	51 1c       	adc	r5, r1
    1946:	f8 01       	movw	r30, r16
    1948:	a0 80       	ld	r10, Z
    194a:	b1 80       	ldd	r11, Z+1	; 0x01
    194c:	36 fe       	sbrs	r3, 6
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <vfprintf+0x146>
    1950:	69 2d       	mov	r22, r9
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x14a>
    1956:	6f ef       	ldi	r22, 0xFF	; 255
    1958:	7f ef       	ldi	r23, 0xFF	; 255
    195a:	c5 01       	movw	r24, r10
    195c:	0e 94 af 10 	call	0x215e	; 0x215e <strnlen>
    1960:	4c 01       	movw	r8, r24
    1962:	82 01       	movw	r16, r4
    1964:	f3 2d       	mov	r31, r3
    1966:	ff 77       	andi	r31, 0x7F	; 127
    1968:	3f 2e       	mov	r3, r31
    196a:	16 c0       	rjmp	.+44     	; 0x1998 <vfprintf+0x188>
    196c:	28 01       	movw	r4, r16
    196e:	22 e0       	ldi	r18, 0x02	; 2
    1970:	42 0e       	add	r4, r18
    1972:	51 1c       	adc	r5, r1
    1974:	f8 01       	movw	r30, r16
    1976:	a0 80       	ld	r10, Z
    1978:	b1 80       	ldd	r11, Z+1	; 0x01
    197a:	36 fe       	sbrs	r3, 6
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <vfprintf+0x174>
    197e:	69 2d       	mov	r22, r9
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0x178>
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	7f ef       	ldi	r23, 0xFF	; 255
    1988:	c5 01       	movw	r24, r10
    198a:	0e 94 a4 10 	call	0x2148	; 0x2148 <strnlen_P>
    198e:	4c 01       	movw	r8, r24
    1990:	f3 2d       	mov	r31, r3
    1992:	f0 68       	ori	r31, 0x80	; 128
    1994:	3f 2e       	mov	r3, r31
    1996:	82 01       	movw	r16, r4
    1998:	33 fc       	sbrc	r3, 3
    199a:	1b c0       	rjmp	.+54     	; 0x19d2 <vfprintf+0x1c2>
    199c:	82 2d       	mov	r24, r2
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	88 16       	cp	r8, r24
    19a2:	99 06       	cpc	r9, r25
    19a4:	b0 f4       	brcc	.+44     	; 0x19d2 <vfprintf+0x1c2>
    19a6:	b6 01       	movw	r22, r12
    19a8:	80 e2       	ldi	r24, 0x20	; 32
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    19b0:	2a 94       	dec	r2
    19b2:	f4 cf       	rjmp	.-24     	; 0x199c <vfprintf+0x18c>
    19b4:	f5 01       	movw	r30, r10
    19b6:	37 fc       	sbrc	r3, 7
    19b8:	85 91       	lpm	r24, Z+
    19ba:	37 fe       	sbrs	r3, 7
    19bc:	81 91       	ld	r24, Z+
    19be:	5f 01       	movw	r10, r30
    19c0:	b6 01       	movw	r22, r12
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    19c8:	21 10       	cpse	r2, r1
    19ca:	2a 94       	dec	r2
    19cc:	21 e0       	ldi	r18, 0x01	; 1
    19ce:	82 1a       	sub	r8, r18
    19d0:	91 08       	sbc	r9, r1
    19d2:	81 14       	cp	r8, r1
    19d4:	91 04       	cpc	r9, r1
    19d6:	71 f7       	brne	.-36     	; 0x19b4 <vfprintf+0x1a4>
    19d8:	e8 c0       	rjmp	.+464    	; 0x1baa <vfprintf+0x39a>
    19da:	84 36       	cpi	r24, 0x64	; 100
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <vfprintf+0x1d2>
    19de:	89 36       	cpi	r24, 0x69	; 105
    19e0:	41 f5       	brne	.+80     	; 0x1a32 <vfprintf+0x222>
    19e2:	f8 01       	movw	r30, r16
    19e4:	37 fe       	sbrs	r3, 7
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <vfprintf+0x1e6>
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	0c 5f       	subi	r16, 0xFC	; 252
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <vfprintf+0x1f6>
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	07 2e       	mov	r0, r23
    19fc:	00 0c       	add	r0, r0
    19fe:	88 0b       	sbc	r24, r24
    1a00:	99 0b       	sbc	r25, r25
    1a02:	0e 5f       	subi	r16, 0xFE	; 254
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	f3 2d       	mov	r31, r3
    1a08:	ff 76       	andi	r31, 0x6F	; 111
    1a0a:	3f 2e       	mov	r3, r31
    1a0c:	97 ff       	sbrs	r25, 7
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <vfprintf+0x212>
    1a10:	90 95       	com	r25
    1a12:	80 95       	com	r24
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	f0 68       	ori	r31, 0x80	; 128
    1a20:	3f 2e       	mov	r3, r31
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	a3 01       	movw	r20, r6
    1a28:	0e 94 4d 11 	call	0x229a	; 0x229a <__ultoa_invert>
    1a2c:	88 2e       	mov	r8, r24
    1a2e:	86 18       	sub	r8, r6
    1a30:	45 c0       	rjmp	.+138    	; 0x1abc <vfprintf+0x2ac>
    1a32:	85 37       	cpi	r24, 0x75	; 117
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <vfprintf+0x232>
    1a36:	23 2d       	mov	r18, r3
    1a38:	2f 7e       	andi	r18, 0xEF	; 239
    1a3a:	b2 2e       	mov	r11, r18
    1a3c:	2a e0       	ldi	r18, 0x0A	; 10
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	25 c0       	rjmp	.+74     	; 0x1a8c <vfprintf+0x27c>
    1a42:	93 2d       	mov	r25, r3
    1a44:	99 7f       	andi	r25, 0xF9	; 249
    1a46:	b9 2e       	mov	r11, r25
    1a48:	8f 36       	cpi	r24, 0x6F	; 111
    1a4a:	c1 f0       	breq	.+48     	; 0x1a7c <vfprintf+0x26c>
    1a4c:	18 f4       	brcc	.+6      	; 0x1a54 <vfprintf+0x244>
    1a4e:	88 35       	cpi	r24, 0x58	; 88
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <vfprintf+0x260>
    1a52:	b5 c0       	rjmp	.+362    	; 0x1bbe <vfprintf+0x3ae>
    1a54:	80 37       	cpi	r24, 0x70	; 112
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <vfprintf+0x24e>
    1a58:	88 37       	cpi	r24, 0x78	; 120
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <vfprintf+0x254>
    1a5c:	b0 c0       	rjmp	.+352    	; 0x1bbe <vfprintf+0x3ae>
    1a5e:	e9 2f       	mov	r30, r25
    1a60:	e0 61       	ori	r30, 0x10	; 16
    1a62:	be 2e       	mov	r11, r30
    1a64:	b4 fe       	sbrs	r11, 4
    1a66:	0d c0       	rjmp	.+26     	; 0x1a82 <vfprintf+0x272>
    1a68:	fb 2d       	mov	r31, r11
    1a6a:	f4 60       	ori	r31, 0x04	; 4
    1a6c:	bf 2e       	mov	r11, r31
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <vfprintf+0x272>
    1a70:	34 fe       	sbrs	r3, 4
    1a72:	0a c0       	rjmp	.+20     	; 0x1a88 <vfprintf+0x278>
    1a74:	29 2f       	mov	r18, r25
    1a76:	26 60       	ori	r18, 0x06	; 6
    1a78:	b2 2e       	mov	r11, r18
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x278>
    1a7c:	28 e0       	ldi	r18, 0x08	; 8
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <vfprintf+0x27c>
    1a82:	20 e1       	ldi	r18, 0x10	; 16
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfprintf+0x27c>
    1a88:	20 e1       	ldi	r18, 0x10	; 16
    1a8a:	32 e0       	ldi	r19, 0x02	; 2
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	b7 fe       	sbrs	r11, 7
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <vfprintf+0x290>
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0c 5f       	subi	r16, 0xFC	; 252
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <vfprintf+0x29c>
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 5f       	subi	r16, 0xFE	; 254
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	a3 01       	movw	r20, r6
    1aae:	0e 94 4d 11 	call	0x229a	; 0x229a <__ultoa_invert>
    1ab2:	88 2e       	mov	r8, r24
    1ab4:	86 18       	sub	r8, r6
    1ab6:	fb 2d       	mov	r31, r11
    1ab8:	ff 77       	andi	r31, 0x7F	; 127
    1aba:	3f 2e       	mov	r3, r31
    1abc:	36 fe       	sbrs	r3, 6
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x2ca>
    1ac0:	23 2d       	mov	r18, r3
    1ac2:	2e 7f       	andi	r18, 0xFE	; 254
    1ac4:	a2 2e       	mov	r10, r18
    1ac6:	89 14       	cp	r8, r9
    1ac8:	58 f4       	brcc	.+22     	; 0x1ae0 <vfprintf+0x2d0>
    1aca:	34 fe       	sbrs	r3, 4
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <vfprintf+0x2d4>
    1ace:	32 fc       	sbrc	r3, 2
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <vfprintf+0x2d4>
    1ad2:	83 2d       	mov	r24, r3
    1ad4:	8e 7e       	andi	r24, 0xEE	; 238
    1ad6:	a8 2e       	mov	r10, r24
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <vfprintf+0x2d4>
    1ada:	b8 2c       	mov	r11, r8
    1adc:	a3 2c       	mov	r10, r3
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <vfprintf+0x2d6>
    1ae0:	b8 2c       	mov	r11, r8
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x2d6>
    1ae4:	b9 2c       	mov	r11, r9
    1ae6:	a4 fe       	sbrs	r10, 4
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <vfprintf+0x2f8>
    1aea:	fe 01       	movw	r30, r28
    1aec:	e8 0d       	add	r30, r8
    1aee:	f1 1d       	adc	r31, r1
    1af0:	80 81       	ld	r24, Z
    1af2:	80 33       	cpi	r24, 0x30	; 48
    1af4:	21 f4       	brne	.+8      	; 0x1afe <vfprintf+0x2ee>
    1af6:	9a 2d       	mov	r25, r10
    1af8:	99 7e       	andi	r25, 0xE9	; 233
    1afa:	a9 2e       	mov	r10, r25
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <vfprintf+0x300>
    1afe:	a2 fe       	sbrs	r10, 2
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <vfprintf+0x2fe>
    1b02:	b3 94       	inc	r11
    1b04:	b3 94       	inc	r11
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <vfprintf+0x300>
    1b08:	8a 2d       	mov	r24, r10
    1b0a:	86 78       	andi	r24, 0x86	; 134
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <vfprintf+0x300>
    1b0e:	b3 94       	inc	r11
    1b10:	a3 fc       	sbrc	r10, 3
    1b12:	11 c0       	rjmp	.+34     	; 0x1b36 <vfprintf+0x326>
    1b14:	a0 fe       	sbrs	r10, 0
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <vfprintf+0x314>
    1b18:	b2 14       	cp	r11, r2
    1b1a:	88 f4       	brcc	.+34     	; 0x1b3e <vfprintf+0x32e>
    1b1c:	28 0c       	add	r2, r8
    1b1e:	92 2c       	mov	r9, r2
    1b20:	9b 18       	sub	r9, r11
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <vfprintf+0x330>
    1b24:	b2 14       	cp	r11, r2
    1b26:	60 f4       	brcc	.+24     	; 0x1b40 <vfprintf+0x330>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1b32:	b3 94       	inc	r11
    1b34:	f7 cf       	rjmp	.-18     	; 0x1b24 <vfprintf+0x314>
    1b36:	b2 14       	cp	r11, r2
    1b38:	18 f4       	brcc	.+6      	; 0x1b40 <vfprintf+0x330>
    1b3a:	2b 18       	sub	r2, r11
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <vfprintf+0x332>
    1b3e:	98 2c       	mov	r9, r8
    1b40:	21 2c       	mov	r2, r1
    1b42:	a4 fe       	sbrs	r10, 4
    1b44:	10 c0       	rjmp	.+32     	; 0x1b66 <vfprintf+0x356>
    1b46:	b6 01       	movw	r22, r12
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1b50:	a2 fe       	sbrs	r10, 2
    1b52:	17 c0       	rjmp	.+46     	; 0x1b82 <vfprintf+0x372>
    1b54:	a1 fc       	sbrc	r10, 1
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <vfprintf+0x34e>
    1b58:	88 e7       	ldi	r24, 0x78	; 120
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <vfprintf+0x352>
    1b5e:	88 e5       	ldi	r24, 0x58	; 88
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	b6 01       	movw	r22, r12
    1b64:	0c c0       	rjmp	.+24     	; 0x1b7e <vfprintf+0x36e>
    1b66:	8a 2d       	mov	r24, r10
    1b68:	86 78       	andi	r24, 0x86	; 134
    1b6a:	59 f0       	breq	.+22     	; 0x1b82 <vfprintf+0x372>
    1b6c:	a1 fe       	sbrs	r10, 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x364>
    1b70:	8b e2       	ldi	r24, 0x2B	; 43
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x366>
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	a7 fc       	sbrc	r10, 7
    1b78:	8d e2       	ldi	r24, 0x2D	; 45
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1b82:	89 14       	cp	r8, r9
    1b84:	38 f4       	brcc	.+14     	; 0x1b94 <vfprintf+0x384>
    1b86:	b6 01       	movw	r22, r12
    1b88:	80 e3       	ldi	r24, 0x30	; 48
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1b90:	9a 94       	dec	r9
    1b92:	f7 cf       	rjmp	.-18     	; 0x1b82 <vfprintf+0x372>
    1b94:	8a 94       	dec	r8
    1b96:	f3 01       	movw	r30, r6
    1b98:	e8 0d       	add	r30, r8
    1b9a:	f1 1d       	adc	r31, r1
    1b9c:	80 81       	ld	r24, Z
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1ba6:	81 10       	cpse	r8, r1
    1ba8:	f5 cf       	rjmp	.-22     	; 0x1b94 <vfprintf+0x384>
    1baa:	22 20       	and	r2, r2
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <vfprintf+0x3a0>
    1bae:	42 ce       	rjmp	.-892    	; 0x1834 <vfprintf+0x24>
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	80 e2       	ldi	r24, 0x20	; 32
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <fputc>
    1bba:	2a 94       	dec	r2
    1bbc:	f6 cf       	rjmp	.-20     	; 0x1baa <vfprintf+0x39a>
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	97 81       	ldd	r25, Z+7	; 0x07
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x3ba>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	2b 96       	adiw	r28, 0x0b	; 11
    1bcc:	e2 e1       	ldi	r30, 0x12	; 18
    1bce:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__epilogue_restores__>

00001bd2 <putval>:
    1bd2:	20 fd       	sbrc	r18, 0
    1bd4:	09 c0       	rjmp	.+18     	; 0x1be8 <putval+0x16>
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	23 fd       	sbrc	r18, 3
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <putval+0x14>
    1bdc:	22 ff       	sbrs	r18, 2
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <putval+0x12>
    1be0:	73 83       	std	Z+3, r23	; 0x03
    1be2:	62 83       	std	Z+2, r22	; 0x02
    1be4:	51 83       	std	Z+1, r21	; 0x01
    1be6:	40 83       	st	Z, r20
    1be8:	08 95       	ret

00001bea <mulacc>:
    1bea:	44 fd       	sbrc	r20, 4
    1bec:	17 c0       	rjmp	.+46     	; 0x1c1c <mulacc+0x32>
    1bee:	46 fd       	sbrc	r20, 6
    1bf0:	17 c0       	rjmp	.+46     	; 0x1c20 <mulacc+0x36>
    1bf2:	ab 01       	movw	r20, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	da 01       	movw	r26, r20
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	aa 0f       	add	r26, r26
    1bfc:	bb 1f       	adc	r27, r27
    1bfe:	ee 1f       	adc	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	10 94       	com	r1
    1c04:	d1 f7       	brne	.-12     	; 0x1bfa <mulacc+0x10>
    1c06:	4a 0f       	add	r20, r26
    1c08:	5b 1f       	adc	r21, r27
    1c0a:	6e 1f       	adc	r22, r30
    1c0c:	7f 1f       	adc	r23, r31
    1c0e:	cb 01       	movw	r24, r22
    1c10:	ba 01       	movw	r22, r20
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <mulacc+0x44>
    1c1c:	33 e0       	ldi	r19, 0x03	; 3
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <mulacc+0x38>
    1c20:	34 e0       	ldi	r19, 0x04	; 4
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	31 50       	subi	r19, 0x01	; 1
    1c2c:	d1 f7       	brne	.-12     	; 0x1c22 <mulacc+0x38>
    1c2e:	62 0f       	add	r22, r18
    1c30:	71 1d       	adc	r23, r1
    1c32:	81 1d       	adc	r24, r1
    1c34:	91 1d       	adc	r25, r1
    1c36:	08 95       	ret

00001c38 <skip_spaces>:
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	8c 01       	movw	r16, r24
    1c42:	c8 01       	movw	r24, r16
    1c44:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1c48:	ec 01       	movw	r28, r24
    1c4a:	97 fd       	sbrc	r25, 7
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <skip_spaces+0x26>
    1c4e:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    1c52:	89 2b       	or	r24, r25
    1c54:	b1 f7       	brne	.-20     	; 0x1c42 <skip_spaces+0xa>
    1c56:	b8 01       	movw	r22, r16
    1c58:	ce 01       	movw	r24, r28
    1c5a:	0e 94 34 11 	call	0x2268	; 0x2268 <ungetc>
    1c5e:	ce 01       	movw	r24, r28
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <conv_int>:
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	8c 01       	movw	r16, r24
    1c80:	d6 2f       	mov	r29, r22
    1c82:	7a 01       	movw	r14, r20
    1c84:	b2 2e       	mov	r11, r18
    1c86:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	33 27       	eor	r19, r19
    1c8e:	2b 32       	cpi	r18, 0x2B	; 43
    1c90:	31 05       	cpc	r19, r1
    1c92:	31 f0       	breq	.+12     	; 0x1ca0 <conv_int+0x36>
    1c94:	2d 32       	cpi	r18, 0x2D	; 45
    1c96:	31 05       	cpc	r19, r1
    1c98:	61 f4       	brne	.+24     	; 0x1cb2 <conv_int+0x48>
    1c9a:	8b 2d       	mov	r24, r11
    1c9c:	80 68       	ori	r24, 0x80	; 128
    1c9e:	b8 2e       	mov	r11, r24
    1ca0:	d1 50       	subi	r29, 0x01	; 1
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <conv_int+0x3e>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	68 c0       	rjmp	.+208    	; 0x1d78 <conv_int+0x10e>
    1ca8:	c8 01       	movw	r24, r16
    1caa:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1cae:	97 fd       	sbrc	r25, 7
    1cb0:	f9 cf       	rjmp	.-14     	; 0x1ca4 <conv_int+0x3a>
    1cb2:	cb 2d       	mov	r28, r11
    1cb4:	cd 7f       	andi	r28, 0xFD	; 253
    1cb6:	2b 2d       	mov	r18, r11
    1cb8:	20 73       	andi	r18, 0x30	; 48
    1cba:	09 f5       	brne	.+66     	; 0x1cfe <conv_int+0x94>
    1cbc:	80 33       	cpi	r24, 0x30	; 48
    1cbe:	f9 f4       	brne	.+62     	; 0x1cfe <conv_int+0x94>
    1cc0:	aa 24       	eor	r10, r10
    1cc2:	aa 94       	dec	r10
    1cc4:	ad 0e       	add	r10, r29
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <conv_int+0x60>
    1cc8:	43 c0       	rjmp	.+134    	; 0x1d50 <conv_int+0xe6>
    1cca:	c8 01       	movw	r24, r16
    1ccc:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1cd0:	97 fd       	sbrc	r25, 7
    1cd2:	3e c0       	rjmp	.+124    	; 0x1d50 <conv_int+0xe6>
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	2f 7d       	andi	r18, 0xDF	; 223
    1cd8:	33 27       	eor	r19, r19
    1cda:	28 35       	cpi	r18, 0x58	; 88
    1cdc:	31 05       	cpc	r19, r1
    1cde:	49 f4       	brne	.+18     	; 0x1cf2 <conv_int+0x88>
    1ce0:	c2 64       	ori	r28, 0x42	; 66
    1ce2:	d2 50       	subi	r29, 0x02	; 2
    1ce4:	a9 f1       	breq	.+106    	; 0x1d50 <conv_int+0xe6>
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1cec:	97 ff       	sbrs	r25, 7
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <conv_int+0x94>
    1cf0:	2f c0       	rjmp	.+94     	; 0x1d50 <conv_int+0xe6>
    1cf2:	b6 fe       	sbrs	r11, 6
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <conv_int+0x90>
    1cf6:	c2 60       	ori	r28, 0x02	; 2
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <conv_int+0x92>
    1cfa:	c2 61       	ori	r28, 0x12	; 18
    1cfc:	da 2d       	mov	r29, r10
    1cfe:	81 2c       	mov	r8, r1
    1d00:	91 2c       	mov	r9, r1
    1d02:	54 01       	movw	r10, r8
    1d04:	20 ed       	ldi	r18, 0xD0	; 208
    1d06:	28 0f       	add	r18, r24
    1d08:	28 30       	cpi	r18, 0x08	; 8
    1d0a:	80 f0       	brcs	.+32     	; 0x1d2c <conv_int+0xc2>
    1d0c:	c4 ff       	sbrs	r28, 4
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <conv_int+0xae>
    1d10:	b8 01       	movw	r22, r16
    1d12:	0e 94 34 11 	call	0x2268	; 0x2268 <ungetc>
    1d16:	19 c0       	rjmp	.+50     	; 0x1d4a <conv_int+0xe0>
    1d18:	2a 30       	cpi	r18, 0x0A	; 10
    1d1a:	40 f0       	brcs	.+16     	; 0x1d2c <conv_int+0xc2>
    1d1c:	c6 ff       	sbrs	r28, 6
    1d1e:	f8 cf       	rjmp	.-16     	; 0x1d10 <conv_int+0xa6>
    1d20:	2f 7d       	andi	r18, 0xDF	; 223
    1d22:	3f ee       	ldi	r19, 0xEF	; 239
    1d24:	32 0f       	add	r19, r18
    1d26:	36 30       	cpi	r19, 0x06	; 6
    1d28:	98 f7       	brcc	.-26     	; 0x1d10 <conv_int+0xa6>
    1d2a:	27 50       	subi	r18, 0x07	; 7
    1d2c:	4c 2f       	mov	r20, r28
    1d2e:	c5 01       	movw	r24, r10
    1d30:	b4 01       	movw	r22, r8
    1d32:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <mulacc>
    1d36:	4b 01       	movw	r8, r22
    1d38:	5c 01       	movw	r10, r24
    1d3a:	c2 60       	ori	r28, 0x02	; 2
    1d3c:	d1 50       	subi	r29, 0x01	; 1
    1d3e:	59 f0       	breq	.+22     	; 0x1d56 <conv_int+0xec>
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1d46:	97 ff       	sbrs	r25, 7
    1d48:	dd cf       	rjmp	.-70     	; 0x1d04 <conv_int+0x9a>
    1d4a:	c1 fd       	sbrc	r28, 1
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <conv_int+0xec>
    1d4e:	aa cf       	rjmp	.-172    	; 0x1ca4 <conv_int+0x3a>
    1d50:	81 2c       	mov	r8, r1
    1d52:	91 2c       	mov	r9, r1
    1d54:	54 01       	movw	r10, r8
    1d56:	c7 ff       	sbrs	r28, 7
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <conv_int+0x100>
    1d5a:	b0 94       	com	r11
    1d5c:	a0 94       	com	r10
    1d5e:	90 94       	com	r9
    1d60:	80 94       	com	r8
    1d62:	81 1c       	adc	r8, r1
    1d64:	91 1c       	adc	r9, r1
    1d66:	a1 1c       	adc	r10, r1
    1d68:	b1 1c       	adc	r11, r1
    1d6a:	2c 2f       	mov	r18, r28
    1d6c:	b5 01       	movw	r22, r10
    1d6e:	a4 01       	movw	r20, r8
    1d70:	c7 01       	movw	r24, r14
    1d72:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <putval>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	08 95       	ret

00001d8e <conv_brk>:
    1d8e:	a0 e2       	ldi	r26, 0x20	; 32
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ed ec       	ldi	r30, 0xCD	; 205
    1d94:	fe e0       	ldi	r31, 0x0E	; 14
    1d96:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x6>
    1d9a:	5c 01       	movw	r10, r24
    1d9c:	96 2e       	mov	r9, r22
    1d9e:	7a 01       	movw	r14, r20
    1da0:	f9 01       	movw	r30, r18
    1da2:	8e 01       	movw	r16, r28
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	68 01       	movw	r12, r16
    1daa:	80 e2       	ldi	r24, 0x20	; 32
    1dac:	d8 01       	movw	r26, r16
    1dae:	1d 92       	st	X+, r1
    1db0:	8a 95       	dec	r24
    1db2:	e9 f7       	brne	.-6      	; 0x1dae <conv_brk+0x20>
    1db4:	d5 01       	movw	r26, r10
    1db6:	13 96       	adiw	r26, 0x03	; 3
    1db8:	8c 90       	ld	r8, X
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	61 2c       	mov	r6, r1
    1dc0:	71 2c       	mov	r7, r1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	83 fc       	sbrc	r8, 3
    1dca:	25 91       	lpm	r18, Z+
    1dcc:	83 fe       	sbrs	r8, 3
    1dce:	21 91       	ld	r18, Z+
    1dd0:	8f 01       	movw	r16, r30
    1dd2:	52 2e       	mov	r5, r18
    1dd4:	21 11       	cpse	r18, r1
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <conv_brk+0x50>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	92 c0       	rjmp	.+292    	; 0x1f02 <conv_brk+0x174>
    1dde:	2e 35       	cpi	r18, 0x5E	; 94
    1de0:	11 f4       	brne	.+4      	; 0x1de6 <conv_brk+0x58>
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	51 f1       	breq	.+84     	; 0x1e3a <conv_brk+0xac>
    1de6:	43 2f       	mov	r20, r19
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	48 17       	cp	r20, r24
    1dec:	59 07       	cpc	r21, r25
    1dee:	3c f4       	brge	.+14     	; 0x1dfe <conv_brk+0x70>
    1df0:	2d 35       	cpi	r18, 0x5D	; 93
    1df2:	59 f1       	breq	.+86     	; 0x1e4a <conv_brk+0xbc>
    1df4:	2d 32       	cpi	r18, 0x2D	; 45
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <conv_brk+0x70>
    1df8:	77 20       	and	r7, r7
    1dfa:	09 f1       	breq	.+66     	; 0x1e3e <conv_brk+0xb0>
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <conv_brk+0x76>
    1dfe:	77 20       	and	r7, r7
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <conv_brk+0x76>
    1e02:	6a c0       	rjmp	.+212    	; 0x1ed8 <conv_brk+0x14a>
    1e04:	45 2d       	mov	r20, r5
    1e06:	46 95       	lsr	r20
    1e08:	46 95       	lsr	r20
    1e0a:	46 95       	lsr	r20
    1e0c:	d6 01       	movw	r26, r12
    1e0e:	a4 0f       	add	r26, r20
    1e10:	b1 1d       	adc	r27, r1
    1e12:	45 2d       	mov	r20, r5
    1e14:	47 70       	andi	r20, 0x07	; 7
    1e16:	8b 01       	movw	r16, r22
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <conv_brk+0x90>
    1e1a:	00 0f       	add	r16, r16
    1e1c:	11 1f       	adc	r17, r17
    1e1e:	4a 95       	dec	r20
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <conv_brk+0x8c>
    1e22:	a8 01       	movw	r20, r16
    1e24:	5c 91       	ld	r21, X
    1e26:	45 2b       	or	r20, r21
    1e28:	4c 93       	st	X, r20
    1e2a:	65 14       	cp	r6, r5
    1e2c:	59 f0       	breq	.+22     	; 0x1e44 <conv_brk+0xb6>
    1e2e:	56 14       	cp	r5, r6
    1e30:	10 f4       	brcc	.+4      	; 0x1e36 <conv_brk+0xa8>
    1e32:	53 94       	inc	r5
    1e34:	e7 cf       	rjmp	.-50     	; 0x1e04 <conv_brk+0x76>
    1e36:	5a 94       	dec	r5
    1e38:	e5 cf       	rjmp	.-54     	; 0x1e04 <conv_brk+0x76>
    1e3a:	31 e0       	ldi	r19, 0x01	; 1
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <conv_brk+0xb8>
    1e3e:	77 24       	eor	r7, r7
    1e40:	73 94       	inc	r7
    1e42:	01 c0       	rjmp	.+2      	; 0x1e46 <conv_brk+0xb8>
    1e44:	71 2c       	mov	r7, r1
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	bf cf       	rjmp	.-130    	; 0x1dc8 <conv_brk+0x3a>
    1e4a:	77 20       	and	r7, r7
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <conv_brk+0xc6>
    1e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e50:	80 62       	ori	r24, 0x20	; 32
    1e52:	8e 83       	std	Y+6, r24	; 0x06
    1e54:	31 11       	cpse	r19, r1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <conv_brk+0xd0>
    1e58:	88 24       	eor	r8, r8
    1e5a:	83 94       	inc	r8
    1e5c:	17 c0       	rjmp	.+46     	; 0x1e8c <conv_brk+0xfe>
    1e5e:	f6 01       	movw	r30, r12
    1e60:	9e 01       	movw	r18, r28
    1e62:	2f 5d       	subi	r18, 0xDF	; 223
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	80 95       	com	r24
    1e6a:	81 93       	st	Z+, r24
    1e6c:	2e 17       	cp	r18, r30
    1e6e:	3f 07       	cpc	r19, r31
    1e70:	d1 f7       	brne	.-12     	; 0x1e66 <conv_brk+0xd8>
    1e72:	f2 cf       	rjmp	.-28     	; 0x1e58 <conv_brk+0xca>
    1e74:	e1 14       	cp	r14, r1
    1e76:	f1 04       	cpc	r15, r1
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <conv_brk+0xf6>
    1e7a:	d7 01       	movw	r26, r14
    1e7c:	8c 93       	st	X, r24
    1e7e:	f7 01       	movw	r30, r14
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	7f 01       	movw	r14, r30
    1e84:	9a 94       	dec	r9
    1e86:	81 2c       	mov	r8, r1
    1e88:	99 20       	and	r9, r9
    1e8a:	f9 f0       	breq	.+62     	; 0x1eca <conv_brk+0x13c>
    1e8c:	c5 01       	movw	r24, r10
    1e8e:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1e92:	97 fd       	sbrc	r25, 7
    1e94:	18 c0       	rjmp	.+48     	; 0x1ec6 <conv_brk+0x138>
    1e96:	fc 01       	movw	r30, r24
    1e98:	ff 27       	eor	r31, r31
    1e9a:	23 e0       	ldi	r18, 0x03	; 3
    1e9c:	f5 95       	asr	r31
    1e9e:	e7 95       	ror	r30
    1ea0:	2a 95       	dec	r18
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <conv_brk+0x10e>
    1ea4:	ec 0d       	add	r30, r12
    1ea6:	fd 1d       	adc	r31, r13
    1ea8:	20 81       	ld	r18, Z
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	ac 01       	movw	r20, r24
    1eae:	47 70       	andi	r20, 0x07	; 7
    1eb0:	55 27       	eor	r21, r21
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <conv_brk+0x12a>
    1eb4:	35 95       	asr	r19
    1eb6:	27 95       	ror	r18
    1eb8:	4a 95       	dec	r20
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <conv_brk+0x126>
    1ebc:	20 fd       	sbrc	r18, 0
    1ebe:	da cf       	rjmp	.-76     	; 0x1e74 <conv_brk+0xe6>
    1ec0:	b5 01       	movw	r22, r10
    1ec2:	0e 94 34 11 	call	0x2268	; 0x2268 <ungetc>
    1ec6:	81 10       	cpse	r8, r1
    1ec8:	87 cf       	rjmp	.-242    	; 0x1dd8 <conv_brk+0x4a>
    1eca:	e1 14       	cp	r14, r1
    1ecc:	f1 04       	cpc	r15, r1
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <conv_brk+0x146>
    1ed0:	d7 01       	movw	r26, r14
    1ed2:	1c 92       	st	X, r1
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	15 c0       	rjmp	.+42     	; 0x1f02 <conv_brk+0x174>
    1ed8:	42 2f       	mov	r20, r18
    1eda:	46 95       	lsr	r20
    1edc:	46 95       	lsr	r20
    1ede:	46 95       	lsr	r20
    1ee0:	d6 01       	movw	r26, r12
    1ee2:	a4 0f       	add	r26, r20
    1ee4:	b1 1d       	adc	r27, r1
    1ee6:	42 2f       	mov	r20, r18
    1ee8:	47 70       	andi	r20, 0x07	; 7
    1eea:	8b 01       	movw	r16, r22
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <conv_brk+0x164>
    1eee:	00 0f       	add	r16, r16
    1ef0:	11 1f       	adc	r17, r17
    1ef2:	4a 95       	dec	r20
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <conv_brk+0x160>
    1ef6:	a8 01       	movw	r20, r16
    1ef8:	5c 91       	ld	r21, X
    1efa:	45 2b       	or	r20, r21
    1efc:	4c 93       	st	X, r20
    1efe:	62 2e       	mov	r6, r18
    1f00:	a2 cf       	rjmp	.-188    	; 0x1e46 <conv_brk+0xb8>
    1f02:	a0 96       	adiw	r28, 0x20	; 32
    1f04:	ef e0       	ldi	r30, 0x0F	; 15
    1f06:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__+0x6>

00001f0a <vfscanf>:
    1f0a:	a0 e0       	ldi	r26, 0x00	; 0
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e8       	ldi	r30, 0x8B	; 139
    1f10:	ff e0       	ldi	r31, 0x0F	; 15
    1f12:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x6>
    1f16:	6c 01       	movw	r12, r24
    1f18:	eb 01       	movw	r28, r22
    1f1a:	5a 01       	movw	r10, r20
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	16 82       	std	Z+6, r1	; 0x06
    1f20:	17 82       	std	Z+7, r1	; 0x07
    1f22:	51 2c       	mov	r5, r1
    1f24:	f6 01       	movw	r30, r12
    1f26:	e3 80       	ldd	r14, Z+3	; 0x03
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e3 fc       	sbrc	r14, 3
    1f2c:	85 91       	lpm	r24, Z+
    1f2e:	e3 fe       	sbrs	r14, 3
    1f30:	81 91       	ld	r24, Z+
    1f32:	18 2f       	mov	r17, r24
    1f34:	ef 01       	movw	r28, r30
    1f36:	88 23       	and	r24, r24
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <vfscanf+0x32>
    1f3a:	ee c0       	rjmp	.+476    	; 0x2118 <vfscanf+0x20e>
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    1f42:	89 2b       	or	r24, r25
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <vfscanf+0x44>
    1f46:	c6 01       	movw	r24, r12
    1f48:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <skip_spaces>
    1f4c:	eb cf       	rjmp	.-42     	; 0x1f24 <vfscanf+0x1a>
    1f4e:	15 32       	cpi	r17, 0x25	; 37
    1f50:	41 f4       	brne	.+16     	; 0x1f62 <vfscanf+0x58>
    1f52:	fe 01       	movw	r30, r28
    1f54:	e3 fc       	sbrc	r14, 3
    1f56:	15 91       	lpm	r17, Z+
    1f58:	e3 fe       	sbrs	r14, 3
    1f5a:	11 91       	ld	r17, Z+
    1f5c:	ef 01       	movw	r28, r30
    1f5e:	15 32       	cpi	r17, 0x25	; 37
    1f60:	81 f4       	brne	.+32     	; 0x1f82 <vfscanf+0x78>
    1f62:	c6 01       	movw	r24, r12
    1f64:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    1f68:	97 fd       	sbrc	r25, 7
    1f6a:	d4 c0       	rjmp	.+424    	; 0x2114 <vfscanf+0x20a>
    1f6c:	41 2f       	mov	r20, r17
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	9c 01       	movw	r18, r24
    1f72:	33 27       	eor	r19, r19
    1f74:	24 17       	cp	r18, r20
    1f76:	35 07       	cpc	r19, r21
    1f78:	a9 f2       	breq	.-86     	; 0x1f24 <vfscanf+0x1a>
    1f7a:	b6 01       	movw	r22, r12
    1f7c:	0e 94 34 11 	call	0x2268	; 0x2268 <ungetc>
    1f80:	cb c0       	rjmp	.+406    	; 0x2118 <vfscanf+0x20e>
    1f82:	1a 32       	cpi	r17, 0x2A	; 42
    1f84:	39 f4       	brne	.+14     	; 0x1f94 <vfscanf+0x8a>
    1f86:	e3 fc       	sbrc	r14, 3
    1f88:	15 91       	lpm	r17, Z+
    1f8a:	e3 fe       	sbrs	r14, 3
    1f8c:	11 91       	ld	r17, Z+
    1f8e:	ef 01       	movw	r28, r30
    1f90:	01 e0       	ldi	r16, 0x01	; 1
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <vfscanf+0x8c>
    1f94:	00 e0       	ldi	r16, 0x00	; 0
    1f96:	f1 2c       	mov	r15, r1
    1f98:	20 ed       	ldi	r18, 0xD0	; 208
    1f9a:	21 0f       	add	r18, r17
    1f9c:	2a 30       	cpi	r18, 0x0A	; 10
    1f9e:	80 f4       	brcc	.+32     	; 0x1fc0 <vfscanf+0xb6>
    1fa0:	02 60       	ori	r16, 0x02	; 2
    1fa2:	6f 2d       	mov	r22, r15
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <mulacc>
    1fb0:	f6 2e       	mov	r15, r22
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e3 fc       	sbrc	r14, 3
    1fb6:	15 91       	lpm	r17, Z+
    1fb8:	e3 fe       	sbrs	r14, 3
    1fba:	11 91       	ld	r17, Z+
    1fbc:	ef 01       	movw	r28, r30
    1fbe:	ec cf       	rjmp	.-40     	; 0x1f98 <vfscanf+0x8e>
    1fc0:	01 ff       	sbrs	r16, 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <vfscanf+0xc0>
    1fc4:	f1 10       	cpse	r15, r1
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <vfscanf+0xc4>
    1fc8:	a7 c0       	rjmp	.+334    	; 0x2118 <vfscanf+0x20e>
    1fca:	ff 24       	eor	r15, r15
    1fcc:	fa 94       	dec	r15
    1fce:	18 36       	cpi	r17, 0x68	; 104
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <vfscanf+0xce>
    1fd2:	1c 36       	cpi	r17, 0x6C	; 108
    1fd4:	51 f0       	breq	.+20     	; 0x1fea <vfscanf+0xe0>
    1fd6:	10 c0       	rjmp	.+32     	; 0x1ff8 <vfscanf+0xee>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e3 fc       	sbrc	r14, 3
    1fdc:	15 91       	lpm	r17, Z+
    1fde:	e3 fe       	sbrs	r14, 3
    1fe0:	11 91       	ld	r17, Z+
    1fe2:	ef 01       	movw	r28, r30
    1fe4:	18 36       	cpi	r17, 0x68	; 104
    1fe6:	41 f4       	brne	.+16     	; 0x1ff8 <vfscanf+0xee>
    1fe8:	08 60       	ori	r16, 0x08	; 8
    1fea:	04 60       	ori	r16, 0x04	; 4
    1fec:	fe 01       	movw	r30, r28
    1fee:	e3 fc       	sbrc	r14, 3
    1ff0:	15 91       	lpm	r17, Z+
    1ff2:	e3 fe       	sbrs	r14, 3
    1ff4:	11 91       	ld	r17, Z+
    1ff6:	ef 01       	movw	r28, r30
    1ff8:	11 23       	and	r17, r17
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <vfscanf+0xf4>
    1ffc:	8d c0       	rjmp	.+282    	; 0x2118 <vfscanf+0x20e>
    1ffe:	61 2f       	mov	r22, r17
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 e9       	ldi	r24, 0x90	; 144
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 99 10 	call	0x2132	; 0x2132 <strchr_P>
    200a:	89 2b       	or	r24, r25
    200c:	09 f4       	brne	.+2      	; 0x2010 <vfscanf+0x106>
    200e:	84 c0       	rjmp	.+264    	; 0x2118 <vfscanf+0x20e>
    2010:	00 fd       	sbrc	r16, 0
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <vfscanf+0x118>
    2014:	f5 01       	movw	r30, r10
    2016:	80 80       	ld	r8, Z
    2018:	91 80       	ldd	r9, Z+1	; 0x01
    201a:	c5 01       	movw	r24, r10
    201c:	02 96       	adiw	r24, 0x02	; 2
    201e:	5c 01       	movw	r10, r24
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfscanf+0x11c>
    2022:	81 2c       	mov	r8, r1
    2024:	91 2c       	mov	r9, r1
    2026:	1e 36       	cpi	r17, 0x6E	; 110
    2028:	51 f4       	brne	.+20     	; 0x203e <vfscanf+0x134>
    202a:	f6 01       	movw	r30, r12
    202c:	46 81       	ldd	r20, Z+6	; 0x06
    202e:	57 81       	ldd	r21, Z+7	; 0x07
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	20 2f       	mov	r18, r16
    2036:	c4 01       	movw	r24, r8
    2038:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <putval>
    203c:	73 cf       	rjmp	.-282    	; 0x1f24 <vfscanf+0x1a>
    203e:	13 36       	cpi	r17, 0x63	; 99
    2040:	a9 f4       	brne	.+42     	; 0x206c <vfscanf+0x162>
    2042:	01 fd       	sbrc	r16, 1
    2044:	02 c0       	rjmp	.+4      	; 0x204a <vfscanf+0x140>
    2046:	ff 24       	eor	r15, r15
    2048:	f3 94       	inc	r15
    204a:	c6 01       	movw	r24, r12
    204c:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    2050:	97 fd       	sbrc	r25, 7
    2052:	60 c0       	rjmp	.+192    	; 0x2114 <vfscanf+0x20a>
    2054:	81 14       	cp	r8, r1
    2056:	91 04       	cpc	r9, r1
    2058:	29 f0       	breq	.+10     	; 0x2064 <vfscanf+0x15a>
    205a:	f4 01       	movw	r30, r8
    205c:	80 83       	st	Z, r24
    205e:	c4 01       	movw	r24, r8
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	4c 01       	movw	r8, r24
    2064:	fa 94       	dec	r15
    2066:	f1 10       	cpse	r15, r1
    2068:	f0 cf       	rjmp	.-32     	; 0x204a <vfscanf+0x140>
    206a:	50 c0       	rjmp	.+160    	; 0x210c <vfscanf+0x202>
    206c:	1b 35       	cpi	r17, 0x5B	; 91
    206e:	59 f4       	brne	.+22     	; 0x2086 <vfscanf+0x17c>
    2070:	9e 01       	movw	r18, r28
    2072:	a4 01       	movw	r20, r8
    2074:	6f 2d       	mov	r22, r15
    2076:	c6 01       	movw	r24, r12
    2078:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <conv_brk>
    207c:	ec 01       	movw	r28, r24
    207e:	89 2b       	or	r24, r25
    2080:	09 f0       	breq	.+2      	; 0x2084 <vfscanf+0x17a>
    2082:	44 c0       	rjmp	.+136    	; 0x210c <vfscanf+0x202>
    2084:	3e c0       	rjmp	.+124    	; 0x2102 <vfscanf+0x1f8>
    2086:	c6 01       	movw	r24, r12
    2088:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <skip_spaces>
    208c:	97 fd       	sbrc	r25, 7
    208e:	42 c0       	rjmp	.+132    	; 0x2114 <vfscanf+0x20a>
    2090:	1f 36       	cpi	r17, 0x6F	; 111
    2092:	61 f1       	breq	.+88     	; 0x20ec <vfscanf+0x1e2>
    2094:	28 f4       	brcc	.+10     	; 0x20a0 <vfscanf+0x196>
    2096:	14 36       	cpi	r17, 0x64	; 100
    2098:	39 f1       	breq	.+78     	; 0x20e8 <vfscanf+0x1de>
    209a:	19 36       	cpi	r17, 0x69	; 105
    209c:	51 f1       	breq	.+84     	; 0x20f2 <vfscanf+0x1e8>
    209e:	28 c0       	rjmp	.+80     	; 0x20f0 <vfscanf+0x1e6>
    20a0:	13 37       	cpi	r17, 0x73	; 115
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <vfscanf+0x1b6>
    20a4:	15 37       	cpi	r17, 0x75	; 117
    20a6:	01 f1       	breq	.+64     	; 0x20e8 <vfscanf+0x1de>
    20a8:	23 c0       	rjmp	.+70     	; 0x20f0 <vfscanf+0x1e6>
    20aa:	81 14       	cp	r8, r1
    20ac:	91 04       	cpc	r9, r1
    20ae:	29 f0       	breq	.+10     	; 0x20ba <vfscanf+0x1b0>
    20b0:	f4 01       	movw	r30, r8
    20b2:	60 82       	st	Z, r6
    20b4:	c4 01       	movw	r24, r8
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	4c 01       	movw	r8, r24
    20ba:	fa 94       	dec	r15
    20bc:	ff 20       	and	r15, r15
    20be:	71 f0       	breq	.+28     	; 0x20dc <vfscanf+0x1d2>
    20c0:	c6 01       	movw	r24, r12
    20c2:	0e 94 ba 10 	call	0x2174	; 0x2174 <fgetc>
    20c6:	3c 01       	movw	r6, r24
    20c8:	97 fd       	sbrc	r25, 7
    20ca:	08 c0       	rjmp	.+16     	; 0x20dc <vfscanf+0x1d2>
    20cc:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    20d0:	89 2b       	or	r24, r25
    20d2:	59 f3       	breq	.-42     	; 0x20aa <vfscanf+0x1a0>
    20d4:	b6 01       	movw	r22, r12
    20d6:	c3 01       	movw	r24, r6
    20d8:	0e 94 34 11 	call	0x2268	; 0x2268 <ungetc>
    20dc:	81 14       	cp	r8, r1
    20de:	91 04       	cpc	r9, r1
    20e0:	a9 f0       	breq	.+42     	; 0x210c <vfscanf+0x202>
    20e2:	f4 01       	movw	r30, r8
    20e4:	10 82       	st	Z, r1
    20e6:	12 c0       	rjmp	.+36     	; 0x210c <vfscanf+0x202>
    20e8:	00 62       	ori	r16, 0x20	; 32
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <vfscanf+0x1e8>
    20ec:	00 61       	ori	r16, 0x10	; 16
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <vfscanf+0x1e8>
    20f0:	00 64       	ori	r16, 0x40	; 64
    20f2:	20 2f       	mov	r18, r16
    20f4:	a4 01       	movw	r20, r8
    20f6:	6f 2d       	mov	r22, r15
    20f8:	c6 01       	movw	r24, r12
    20fa:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <conv_int>
    20fe:	81 11       	cpse	r24, r1
    2100:	05 c0       	rjmp	.+10     	; 0x210c <vfscanf+0x202>
    2102:	f6 01       	movw	r30, r12
    2104:	83 81       	ldd	r24, Z+3	; 0x03
    2106:	80 73       	andi	r24, 0x30	; 48
    2108:	29 f4       	brne	.+10     	; 0x2114 <vfscanf+0x20a>
    210a:	06 c0       	rjmp	.+12     	; 0x2118 <vfscanf+0x20e>
    210c:	00 fd       	sbrc	r16, 0
    210e:	0a cf       	rjmp	.-492    	; 0x1f24 <vfscanf+0x1a>
    2110:	53 94       	inc	r5
    2112:	08 cf       	rjmp	.-496    	; 0x1f24 <vfscanf+0x1a>
    2114:	55 20       	and	r5, r5
    2116:	19 f0       	breq	.+6      	; 0x211e <vfscanf+0x214>
    2118:	85 2d       	mov	r24, r5
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <vfscanf+0x218>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	ef e0       	ldi	r30, 0x0F	; 15
    2128:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__epilogue_restores__+0x6>

0000212c <__ctype_isfalse>:
    212c:	99 27       	eor	r25, r25
    212e:	88 27       	eor	r24, r24

00002130 <__ctype_istrue>:
    2130:	08 95       	ret

00002132 <strchr_P>:
    2132:	fc 01       	movw	r30, r24
    2134:	05 90       	lpm	r0, Z+
    2136:	06 16       	cp	r0, r22
    2138:	21 f0       	breq	.+8      	; 0x2142 <strchr_P+0x10>
    213a:	00 20       	and	r0, r0
    213c:	d9 f7       	brne	.-10     	; 0x2134 <strchr_P+0x2>
    213e:	c0 01       	movw	r24, r0
    2140:	08 95       	ret
    2142:	31 97       	sbiw	r30, 0x01	; 1
    2144:	cf 01       	movw	r24, r30
    2146:	08 95       	ret

00002148 <strnlen_P>:
    2148:	fc 01       	movw	r30, r24
    214a:	05 90       	lpm	r0, Z+
    214c:	61 50       	subi	r22, 0x01	; 1
    214e:	70 40       	sbci	r23, 0x00	; 0
    2150:	01 10       	cpse	r0, r1
    2152:	d8 f7       	brcc	.-10     	; 0x214a <strnlen_P+0x2>
    2154:	80 95       	com	r24
    2156:	90 95       	com	r25
    2158:	8e 0f       	add	r24, r30
    215a:	9f 1f       	adc	r25, r31
    215c:	08 95       	ret

0000215e <strnlen>:
    215e:	fc 01       	movw	r30, r24
    2160:	61 50       	subi	r22, 0x01	; 1
    2162:	70 40       	sbci	r23, 0x00	; 0
    2164:	01 90       	ld	r0, Z+
    2166:	01 10       	cpse	r0, r1
    2168:	d8 f7       	brcc	.-10     	; 0x2160 <strnlen+0x2>
    216a:	80 95       	com	r24
    216c:	90 95       	com	r25
    216e:	8e 0f       	add	r24, r30
    2170:	9f 1f       	adc	r25, r31
    2172:	08 95       	ret

00002174 <fgetc>:
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ec 01       	movw	r28, r24
    217a:	2b 81       	ldd	r18, Y+3	; 0x03
    217c:	20 ff       	sbrs	r18, 0
    217e:	33 c0       	rjmp	.+102    	; 0x21e6 <fgetc+0x72>
    2180:	26 ff       	sbrs	r18, 6
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <fgetc+0x24>
    2184:	2f 7b       	andi	r18, 0xBF	; 191
    2186:	2b 83       	std	Y+3, r18	; 0x03
    2188:	8e 81       	ldd	r24, Y+6	; 0x06
    218a:	9f 81       	ldd	r25, Y+7	; 0x07
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	29 c0       	rjmp	.+82     	; 0x21ea <fgetc+0x76>
    2198:	22 ff       	sbrs	r18, 2
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <fgetc+0x46>
    219c:	e8 81       	ld	r30, Y
    219e:	f9 81       	ldd	r31, Y+1	; 0x01
    21a0:	80 81       	ld	r24, Z
    21a2:	08 2e       	mov	r0, r24
    21a4:	00 0c       	add	r0, r0
    21a6:	99 0b       	sbc	r25, r25
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	19 f4       	brne	.+6      	; 0x21b2 <fgetc+0x3e>
    21ac:	20 62       	ori	r18, 0x20	; 32
    21ae:	2b 83       	std	Y+3, r18	; 0x03
    21b0:	1a c0       	rjmp	.+52     	; 0x21e6 <fgetc+0x72>
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	e8 83       	st	Y, r30
    21b6:	f9 83       	std	Y+1, r31	; 0x01
    21b8:	0e c0       	rjmp	.+28     	; 0x21d6 <fgetc+0x62>
    21ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    21bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    21be:	09 95       	icall
    21c0:	97 ff       	sbrs	r25, 7
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <fgetc+0x62>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	11 f0       	breq	.+4      	; 0x21ce <fgetc+0x5a>
    21ca:	80 e2       	ldi	r24, 0x20	; 32
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <fgetc+0x5c>
    21ce:	80 e1       	ldi	r24, 0x10	; 16
    21d0:	82 2b       	or	r24, r18
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <fgetc+0x72>
    21d6:	2e 81       	ldd	r18, Y+6	; 0x06
    21d8:	3f 81       	ldd	r19, Y+7	; 0x07
    21da:	2f 5f       	subi	r18, 0xFF	; 255
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	2e 83       	std	Y+6, r18	; 0x06
    21e0:	3f 83       	std	Y+7, r19	; 0x07
    21e2:	99 27       	eor	r25, r25
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <fgetc+0x76>
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	9f ef       	ldi	r25, 0xFF	; 255
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <fputc>:
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	fb 01       	movw	r30, r22
    21fa:	23 81       	ldd	r18, Z+3	; 0x03
    21fc:	21 fd       	sbrc	r18, 1
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <fputc+0x16>
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	9f ef       	ldi	r25, 0xFF	; 255
    2204:	2c c0       	rjmp	.+88     	; 0x225e <fputc+0x6e>
    2206:	22 ff       	sbrs	r18, 2
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <fputc+0x46>
    220a:	46 81       	ldd	r20, Z+6	; 0x06
    220c:	57 81       	ldd	r21, Z+7	; 0x07
    220e:	24 81       	ldd	r18, Z+4	; 0x04
    2210:	35 81       	ldd	r19, Z+5	; 0x05
    2212:	42 17       	cp	r20, r18
    2214:	53 07       	cpc	r21, r19
    2216:	44 f4       	brge	.+16     	; 0x2228 <fputc+0x38>
    2218:	a0 81       	ld	r26, Z
    221a:	b1 81       	ldd	r27, Z+1	; 0x01
    221c:	9d 01       	movw	r18, r26
    221e:	2f 5f       	subi	r18, 0xFF	; 255
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	20 83       	st	Z, r18
    2224:	31 83       	std	Z+1, r19	; 0x01
    2226:	8c 93       	st	X, r24
    2228:	26 81       	ldd	r18, Z+6	; 0x06
    222a:	37 81       	ldd	r19, Z+7	; 0x07
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	26 83       	std	Z+6, r18	; 0x06
    2232:	37 83       	std	Z+7, r19	; 0x07
    2234:	14 c0       	rjmp	.+40     	; 0x225e <fputc+0x6e>
    2236:	8b 01       	movw	r16, r22
    2238:	ec 01       	movw	r28, r24
    223a:	fb 01       	movw	r30, r22
    223c:	00 84       	ldd	r0, Z+8	; 0x08
    223e:	f1 85       	ldd	r31, Z+9	; 0x09
    2240:	e0 2d       	mov	r30, r0
    2242:	09 95       	icall
    2244:	89 2b       	or	r24, r25
    2246:	e1 f6       	brne	.-72     	; 0x2200 <fputc+0x10>
    2248:	d8 01       	movw	r26, r16
    224a:	16 96       	adiw	r26, 0x06	; 6
    224c:	8d 91       	ld	r24, X+
    224e:	9c 91       	ld	r25, X
    2250:	17 97       	sbiw	r26, 0x07	; 7
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	16 96       	adiw	r26, 0x06	; 6
    2256:	8d 93       	st	X+, r24
    2258:	9c 93       	st	X, r25
    225a:	17 97       	sbiw	r26, 0x07	; 7
    225c:	ce 01       	movw	r24, r28
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	08 95       	ret

00002268 <ungetc>:
    2268:	fb 01       	movw	r30, r22
    226a:	23 81       	ldd	r18, Z+3	; 0x03
    226c:	20 ff       	sbrs	r18, 0
    226e:	12 c0       	rjmp	.+36     	; 0x2294 <ungetc+0x2c>
    2270:	26 fd       	sbrc	r18, 6
    2272:	10 c0       	rjmp	.+32     	; 0x2294 <ungetc+0x2c>
    2274:	8f 3f       	cpi	r24, 0xFF	; 255
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	93 07       	cpc	r25, r19
    227a:	61 f0       	breq	.+24     	; 0x2294 <ungetc+0x2c>
    227c:	82 83       	std	Z+2, r24	; 0x02
    227e:	2f 7d       	andi	r18, 0xDF	; 223
    2280:	20 64       	ori	r18, 0x40	; 64
    2282:	23 83       	std	Z+3, r18	; 0x03
    2284:	26 81       	ldd	r18, Z+6	; 0x06
    2286:	37 81       	ldd	r19, Z+7	; 0x07
    2288:	21 50       	subi	r18, 0x01	; 1
    228a:	31 09       	sbc	r19, r1
    228c:	26 83       	std	Z+6, r18	; 0x06
    228e:	37 83       	std	Z+7, r19	; 0x07
    2290:	99 27       	eor	r25, r25
    2292:	08 95       	ret
    2294:	8f ef       	ldi	r24, 0xFF	; 255
    2296:	9f ef       	ldi	r25, 0xFF	; 255
    2298:	08 95       	ret

0000229a <__ultoa_invert>:
    229a:	fa 01       	movw	r30, r20
    229c:	aa 27       	eor	r26, r26
    229e:	28 30       	cpi	r18, 0x08	; 8
    22a0:	51 f1       	breq	.+84     	; 0x22f6 <__ultoa_invert+0x5c>
    22a2:	20 31       	cpi	r18, 0x10	; 16
    22a4:	81 f1       	breq	.+96     	; 0x2306 <__ultoa_invert+0x6c>
    22a6:	e8 94       	clt
    22a8:	6f 93       	push	r22
    22aa:	6e 7f       	andi	r22, 0xFE	; 254
    22ac:	6e 5f       	subi	r22, 0xFE	; 254
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	8f 4f       	sbci	r24, 0xFF	; 255
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	af 4f       	sbci	r26, 0xFF	; 255
    22b6:	b1 e0       	ldi	r27, 0x01	; 1
    22b8:	3e d0       	rcall	.+124    	; 0x2336 <__ultoa_invert+0x9c>
    22ba:	b4 e0       	ldi	r27, 0x04	; 4
    22bc:	3c d0       	rcall	.+120    	; 0x2336 <__ultoa_invert+0x9c>
    22be:	67 0f       	add	r22, r23
    22c0:	78 1f       	adc	r23, r24
    22c2:	89 1f       	adc	r24, r25
    22c4:	9a 1f       	adc	r25, r26
    22c6:	a1 1d       	adc	r26, r1
    22c8:	68 0f       	add	r22, r24
    22ca:	79 1f       	adc	r23, r25
    22cc:	8a 1f       	adc	r24, r26
    22ce:	91 1d       	adc	r25, r1
    22d0:	a1 1d       	adc	r26, r1
    22d2:	6a 0f       	add	r22, r26
    22d4:	71 1d       	adc	r23, r1
    22d6:	81 1d       	adc	r24, r1
    22d8:	91 1d       	adc	r25, r1
    22da:	a1 1d       	adc	r26, r1
    22dc:	20 d0       	rcall	.+64     	; 0x231e <__ultoa_invert+0x84>
    22de:	09 f4       	brne	.+2      	; 0x22e2 <__ultoa_invert+0x48>
    22e0:	68 94       	set
    22e2:	3f 91       	pop	r19
    22e4:	2a e0       	ldi	r18, 0x0A	; 10
    22e6:	26 9f       	mul	r18, r22
    22e8:	11 24       	eor	r1, r1
    22ea:	30 19       	sub	r19, r0
    22ec:	30 5d       	subi	r19, 0xD0	; 208
    22ee:	31 93       	st	Z+, r19
    22f0:	de f6       	brtc	.-74     	; 0x22a8 <__ultoa_invert+0xe>
    22f2:	cf 01       	movw	r24, r30
    22f4:	08 95       	ret
    22f6:	46 2f       	mov	r20, r22
    22f8:	47 70       	andi	r20, 0x07	; 7
    22fa:	40 5d       	subi	r20, 0xD0	; 208
    22fc:	41 93       	st	Z+, r20
    22fe:	b3 e0       	ldi	r27, 0x03	; 3
    2300:	0f d0       	rcall	.+30     	; 0x2320 <__ultoa_invert+0x86>
    2302:	c9 f7       	brne	.-14     	; 0x22f6 <__ultoa_invert+0x5c>
    2304:	f6 cf       	rjmp	.-20     	; 0x22f2 <__ultoa_invert+0x58>
    2306:	46 2f       	mov	r20, r22
    2308:	4f 70       	andi	r20, 0x0F	; 15
    230a:	40 5d       	subi	r20, 0xD0	; 208
    230c:	4a 33       	cpi	r20, 0x3A	; 58
    230e:	18 f0       	brcs	.+6      	; 0x2316 <__ultoa_invert+0x7c>
    2310:	49 5d       	subi	r20, 0xD9	; 217
    2312:	31 fd       	sbrc	r19, 1
    2314:	40 52       	subi	r20, 0x20	; 32
    2316:	41 93       	st	Z+, r20
    2318:	02 d0       	rcall	.+4      	; 0x231e <__ultoa_invert+0x84>
    231a:	a9 f7       	brne	.-22     	; 0x2306 <__ultoa_invert+0x6c>
    231c:	ea cf       	rjmp	.-44     	; 0x22f2 <__ultoa_invert+0x58>
    231e:	b4 e0       	ldi	r27, 0x04	; 4
    2320:	a6 95       	lsr	r26
    2322:	97 95       	ror	r25
    2324:	87 95       	ror	r24
    2326:	77 95       	ror	r23
    2328:	67 95       	ror	r22
    232a:	ba 95       	dec	r27
    232c:	c9 f7       	brne	.-14     	; 0x2320 <__ultoa_invert+0x86>
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	61 05       	cpc	r22, r1
    2332:	71 05       	cpc	r23, r1
    2334:	08 95       	ret
    2336:	9b 01       	movw	r18, r22
    2338:	ac 01       	movw	r20, r24
    233a:	0a 2e       	mov	r0, r26
    233c:	06 94       	lsr	r0
    233e:	57 95       	ror	r21
    2340:	47 95       	ror	r20
    2342:	37 95       	ror	r19
    2344:	27 95       	ror	r18
    2346:	ba 95       	dec	r27
    2348:	c9 f7       	brne	.-14     	; 0x233c <__ultoa_invert+0xa2>
    234a:	62 0f       	add	r22, r18
    234c:	73 1f       	adc	r23, r19
    234e:	84 1f       	adc	r24, r20
    2350:	95 1f       	adc	r25, r21
    2352:	a0 1d       	adc	r26, r0
    2354:	08 95       	ret

00002356 <__mulsi3>:
    2356:	db 01       	movw	r26, r22
    2358:	8f 93       	push	r24
    235a:	9f 93       	push	r25
    235c:	0e 94 1e 0a 	call	0x143c	; 0x143c <__muluhisi3>
    2360:	bf 91       	pop	r27
    2362:	af 91       	pop	r26
    2364:	a2 9f       	mul	r26, r18
    2366:	80 0d       	add	r24, r0
    2368:	91 1d       	adc	r25, r1
    236a:	a3 9f       	mul	r26, r19
    236c:	90 0d       	add	r25, r0
    236e:	b2 9f       	mul	r27, r18
    2370:	90 0d       	add	r25, r0
    2372:	11 24       	eor	r1, r1
    2374:	08 95       	ret

00002376 <__udivmodsi4>:
    2376:	a1 e2       	ldi	r26, 0x21	; 33
    2378:	1a 2e       	mov	r1, r26
    237a:	aa 1b       	sub	r26, r26
    237c:	bb 1b       	sub	r27, r27
    237e:	fd 01       	movw	r30, r26
    2380:	0d c0       	rjmp	.+26     	; 0x239c <__udivmodsi4_ep>

00002382 <__udivmodsi4_loop>:
    2382:	aa 1f       	adc	r26, r26
    2384:	bb 1f       	adc	r27, r27
    2386:	ee 1f       	adc	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	a2 17       	cp	r26, r18
    238c:	b3 07       	cpc	r27, r19
    238e:	e4 07       	cpc	r30, r20
    2390:	f5 07       	cpc	r31, r21
    2392:	20 f0       	brcs	.+8      	; 0x239c <__udivmodsi4_ep>
    2394:	a2 1b       	sub	r26, r18
    2396:	b3 0b       	sbc	r27, r19
    2398:	e4 0b       	sbc	r30, r20
    239a:	f5 0b       	sbc	r31, r21

0000239c <__udivmodsi4_ep>:
    239c:	66 1f       	adc	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	1a 94       	dec	r1
    23a6:	69 f7       	brne	.-38     	; 0x2382 <__udivmodsi4_loop>
    23a8:	60 95       	com	r22
    23aa:	70 95       	com	r23
    23ac:	80 95       	com	r24
    23ae:	90 95       	com	r25
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	bd 01       	movw	r22, r26
    23b6:	cf 01       	movw	r24, r30
    23b8:	08 95       	ret

000023ba <__prologue_saves__>:
    23ba:	2f 92       	push	r2
    23bc:	3f 92       	push	r3
    23be:	4f 92       	push	r4
    23c0:	5f 92       	push	r5
    23c2:	6f 92       	push	r6
    23c4:	7f 92       	push	r7
    23c6:	8f 92       	push	r8
    23c8:	9f 92       	push	r9
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	ca 1b       	sub	r28, r26
    23e4:	db 0b       	sbc	r29, r27
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	09 94       	ijmp

000023ec <__epilogue_restores__>:
    23ec:	2a 88       	ldd	r2, Y+18	; 0x12
    23ee:	39 88       	ldd	r3, Y+17	; 0x11
    23f0:	48 88       	ldd	r4, Y+16	; 0x10
    23f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    23f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    23f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    23fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    23fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    23fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2400:	c8 84       	ldd	r12, Y+8	; 0x08
    2402:	df 80       	ldd	r13, Y+7	; 0x07
    2404:	ee 80       	ldd	r14, Y+6	; 0x06
    2406:	fd 80       	ldd	r15, Y+5	; 0x05
    2408:	0c 81       	ldd	r16, Y+4	; 0x04
    240a:	1b 81       	ldd	r17, Y+3	; 0x03
    240c:	aa 81       	ldd	r26, Y+2	; 0x02
    240e:	b9 81       	ldd	r27, Y+1	; 0x01
    2410:	ce 0f       	add	r28, r30
    2412:	d1 1d       	adc	r29, r1
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	ed 01       	movw	r28, r26
    241a:	08 95       	ret

0000241c <_exit>:
    241c:	f8 94       	cli

0000241e <__stop_program>:
    241e:	ff cf       	rjmp	.-2      	; 0x241e <__stop_program>
